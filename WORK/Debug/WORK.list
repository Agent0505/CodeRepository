
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08007eb0  08007eb0  00017eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008530  08008530  000203d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008538  08008538  000203d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  08008540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  200003d0  08008910  000203d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d70  08008910  00020d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcb8  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d5e  00000000  00000000  0002e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00030b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000214ed  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d25  00000000  00000000  00052c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca260  00000000  00000000  0005c96a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  00126c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d0 	.word	0x200003d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e98 	.word	0x08007e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	08007e98 	.word	0x08007e98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ST7920_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <ST7920_Send_command+0x68>)
 8000eb8:	f003 f842 	bl	8003f40 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000ebc:	23f8      	movs	r3, #248	; 0xf8
 8000ebe:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000eca:	f003 fce5 	bl	8004898 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ee2:	f003 fcd9 	bl	8004898 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000eee:	f107 030f 	add.w	r3, r7, #15
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ef8:	f003 fcce 	bl	8004898 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <ST7920_Send_command+0x68>)
 8000f02:	f003 f81d 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	20000880 	.word	0x20000880

08000f18 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000f22:	2201      	movs	r2, #1
 8000f24:	2120      	movs	r1, #32
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f28:	f003 f80a 	bl	8003f40 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000f2c:	23fa      	movs	r3, #250	; 0xfa
 8000f2e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f30:	f107 030f 	add.w	r3, r7, #15
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f3a:	f003 fcad 	bl	8004898 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f48:	f107 030f 	add.w	r3, r7, #15
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f52:	f003 fca1 	bl	8004898 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f5e:	f107 030f 	add.w	r3, r7, #15
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f68:	f003 fc96 	bl	8004898 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f72:	f002 ffe5 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000880 	.word	0x20000880

08000f88 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	481e      	ldr	r0, [pc, #120]	; (800100c <ST7920_Init+0x84>)
 8000f94:	f002 ffd4 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f002 f9c9 	bl	8003330 <HAL_Delay>
	RST_set();
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <ST7920_Init+0x84>)
 8000fa4:	f002 ffcc 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_Delay(40); //Ждем 40 мс
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f002 f9c1 	bl	8003330 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000fae:	2330      	movs	r3, #48	; 0x30
 8000fb0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff77 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f002 f9b8 	bl	8003330 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff70 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f002 f9b1 	bl	8003330 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000fce:	230c      	movs	r3, #12
 8000fd0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff67 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f002 f9a8 	bl	8003330 <HAL_Delay>
	tx_buffer = 0x01;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff5e 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(12);
 8000fec:	200c      	movs	r0, #12
 8000fee:	f002 f99f 	bl	8003330 <HAL_Delay>
	tx_buffer = 0x06;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff55 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f002 f996 	bl	8003330 <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400

08001010 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8001020:	2034      	movs	r0, #52	; 0x34
 8001022:	f7ff ff41 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f002 f982 	bl	8003330 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 800102c:	2036      	movs	r0, #54	; 0x36
 800102e:	f7ff ff3b 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f002 f97c 	bl	8003330 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8001038:	e00b      	b.n	8001052 <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8001046:	2030      	movs	r0, #48	; 0x30
 8001048:	f7ff ff2e 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f002 f96f 	bl	8003330 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <ST7920_Clean>:
/*----------------Функция включения/выключения графического режима----------------*/

/*---------------Функция очистки дисплея в графическом режиме--------------------*/
void ST7920_Clean() {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
/// Функция очистки дисплея в графическом режиме
	uint8_t x, y;
	for (y = 0; y < 64; y++) {
 8001060:	2300      	movs	r3, #0
 8001062:	71bb      	strb	r3, [r7, #6]
 8001064:	e02d      	b.n	80010c2 <ST7920_Clean+0x68>
		if (y < 32) {
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b1f      	cmp	r3, #31
 800106a:	d80a      	bhi.n	8001082 <ST7920_Clean+0x28>
			ST7920_Send_command(0x80 | y);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff17 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x80);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f7ff ff14 	bl	8000ea8 <ST7920_Send_command>
 8001080:	e00d      	b.n	800109e <ST7920_Clean+0x44>
		} else {
			ST7920_Send_command(0x80 | (y - 32));
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	3b20      	subs	r3, #32
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff08 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x88);
 8001098:	2088      	movs	r0, #136	; 0x88
 800109a:	f7ff ff05 	bl	8000ea8 <ST7920_Send_command>
		}
		for (x = 0; x < 8; x++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e008      	b.n	80010b6 <ST7920_Clean+0x5c>
			ST7920_Send_data(0x00);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff37 	bl	8000f18 <ST7920_Send_data>
			ST7920_Send_data(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff34 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9f3      	bls.n	80010a4 <ST7920_Clean+0x4a>
	for (y = 0; y < 64; y++) {
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	3301      	adds	r3, #1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b3f      	cmp	r3, #63	; 0x3f
 80010c6:	d9ce      	bls.n	8001066 <ST7920_Clean+0xc>
		}
	}
	ST7920_Clean_Frame_buffer();
 80010c8:	f000 fa8a 	bl	80015e0 <ST7920_Clean_Frame_buffer>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ST7920_Draw_bitmap>:
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	e13a      	b.n	800135c <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e130      	b.n	800134e <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b1f      	cmp	r3, #31
 80010f0:	d80e      	bhi.n	8001110 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fed4 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fecd 	bl	8000ea8 <ST7920_Send_command>
 800110e:	e011      	b.n	8001134 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b20      	subs	r3, #32
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fec1 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f063 0377 	orn	r3, r3, #119	; 0x77
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff feba 	bl	8000ea8 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	00da      	lsls	r2, r3, #3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	fa42 f303 	asr.w	r3, r2, r3
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	b25a      	sxtb	r2, r3
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	fa41 f303 	asr.w	r3, r1, r3
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	3302      	adds	r3, #2
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	fa41 f303 	asr.w	r3, r1, r3
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	3303      	adds	r3, #3
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	440b      	add	r3, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	fa41 f303 	asr.w	r3, r1, r3
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	fa41 f303 	asr.w	r3, r1, r3
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	3305      	adds	r3, #5
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	fa41 f303 	asr.w	r3, r1, r3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	3306      	adds	r3, #6
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	440b      	add	r3, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	fa41 f303 	asr.w	r3, r1, r3
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25a      	sxtb	r2, r3
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	3307      	adds	r3, #7
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	fa41 f303 	asr.w	r3, r1, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	b25b      	sxtb	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8001240:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe67 	bl	8000f18 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	3308      	adds	r3, #8
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	01db      	lsls	r3, r3, #7
 800125e:	b25a      	sxtb	r2, r3
 8001260:	89bb      	ldrh	r3, [r7, #12]
 8001262:	3309      	adds	r3, #9
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	fa41 f303 	asr.w	r3, r1, r3
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b25a      	sxtb	r2, r3
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	330a      	adds	r3, #10
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	fa41 f303 	asr.w	r3, r1, r3
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	b25b      	sxtb	r3, r3
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	330b      	adds	r3, #11
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	fa41 f303 	asr.w	r3, r1, r3
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	330c      	adds	r3, #12
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	fa41 f303 	asr.w	r3, r1, r3
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	330d      	adds	r3, #13
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	440b      	add	r3, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	fa41 f303 	asr.w	r3, r1, r3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	330e      	adds	r3, #14
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	fa41 f303 	asr.w	r3, r1, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	330f      	adds	r3, #15
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	fa41 f303 	asr.w	r3, r1, r3
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800133e:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fde8 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b07      	cmp	r3, #7
 8001352:	f67f aecb 	bls.w	80010ec <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	3301      	adds	r3, #1
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	2b3f      	cmp	r3, #63	; 0x3f
 8001360:	f67f aec1 	bls.w	80010e6 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <ST7920_Update+0x10>)
 8001372:	f7ff feaf 	bl	80010d4 <ST7920_Draw_bitmap>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000046c 	.word	0x2000046c

08001380 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e028      	b.n	80013ea <print_symbol+0x6a>
		if (inversion) {
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <print_symbol+0x44>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <print_symbol+0x7c>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	88f9      	ldrh	r1, [r7, #6]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	440b      	add	r3, r1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	43d2      	mvns	r2, r2
 80013bc:	b2d1      	uxtb	r1, r2
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <print_symbol+0x80>)
 80013c0:	54d1      	strb	r1, [r2, r3]
 80013c2:	e00f      	b.n	80013e4 <print_symbol+0x64>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	441a      	add	r2, r3
 80013d4:	88f9      	ldrh	r1, [r7, #6]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	3b01      	subs	r3, #1
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <print_symbol+0x7c>)
 80013de:	5c89      	ldrb	r1, [r1, r2]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <print_symbol+0x80>)
 80013e2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 6; i++) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	ddd3      	ble.n	8001398 <print_symbol+0x18>
		}

	}
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	08007eec 	.word	0x08007eec
 8001400:	2000046c 	.word	0x2000046c

08001404 <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	460b      	mov	r3, r1
 8001412:	717b      	strb	r3, [r7, #5]
 8001414:	4613      	mov	r3, r2
 8001416:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	b29b      	uxth	r3, r3
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	b29a      	uxth	r2, r3
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e0c8      	b.n	80015c6 <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2bbf      	cmp	r3, #191	; 0xbf
 800143e:	d822      	bhi.n	8001486 <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e0b9      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	3b20      	subs	r3, #32
 8001460:	b299      	uxth	r1, r3
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	2201      	movs	r2, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff8a 	bl	8001380 <print_symbol>
 800146c:	e007      	b.n	800147e <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	3b20      	subs	r3, #32
 8001472:	b299      	uxth	r1, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	2200      	movs	r2, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff81 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	3306      	adds	r3, #6
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	e09c      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d820      	bhi.n	80014f0 <ST7920_Decode_UTF8+0xec>
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d91b      	bls.n	80014f0 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 80014b8:	793b      	ldrb	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00a      	beq.n	80014d4 <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014c4:	330f      	adds	r3, #15
 80014c6:	b299      	uxth	r1, r3
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff57 	bl	8001380 <print_symbol>
 80014d2:	e009      	b.n	80014e8 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014da:	330f      	adds	r3, #15
 80014dc:	b299      	uxth	r1, r3
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff4c 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	3306      	adds	r3, #6
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	e065      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d113      	bne.n	8001522 <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2201      	movs	r2, #1
 8001504:	219f      	movs	r1, #159	; 0x9f
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff3a 	bl	8001380 <print_symbol>
 800150c:	e005      	b.n	800151a <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2200      	movs	r2, #0
 8001512:	219f      	movs	r1, #159	; 0x9f
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	3306      	adds	r3, #6
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	e04c      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	f24d 1291 	movw	r2, #53649	; 0xd191
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	2201      	movs	r2, #1
 8001536:	21a0      	movs	r1, #160	; 0xa0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff21 	bl	8001380 <print_symbol>
 800153e:	e005      	b.n	800154c <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2200      	movs	r2, #0
 8001544:	21a0      	movs	r1, #160	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff1a 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	3306      	adds	r3, #6
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	e033      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2201      	movs	r2, #1
 8001568:	21a1      	movs	r1, #161	; 0xa1
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff08 	bl	8001380 <print_symbol>
 8001570:	e005      	b.n	800157e <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	2200      	movs	r2, #0
 8001576:	21a1      	movs	r1, #161	; 0xa1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff01 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	3306      	adds	r3, #6
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	e01a      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001592:	330f      	adds	r3, #15
 8001594:	b299      	uxth	r1, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2201      	movs	r2, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fef0 	bl	8001380 <print_symbol>
 80015a0:	e009      	b.n	80015b6 <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80015a8:	330f      	adds	r3, #15
 80015aa:	b299      	uxth	r1, r3
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fee5 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	3306      	adds	r3, #6
 80015ba:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe fe02 	bl	80001d0 <strlen>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f63f af2f 	bhi.w	8001434 <ST7920_Decode_UTF8+0x30>
		}
	}
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <ST7920_Clean_Frame_buffer>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	2100      	movs	r1, #0
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ST7920_Clean_Frame_buffer+0x14>)
 80015ec:	f004 fc10 	bl	8005e10 <memset>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000046c 	.word	0x2000046c

080015f8 <WaitDoseReady.9356>:
			#define DOSE TimerMotor(&Buttons[2]); // Dose
			#define CYCLE_DELAY HAL_Delay(100);
			#define WELD_TIME HAL_Delay(600);
			#define WAITING 450
			void WaitDoseReady(void)
			{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	f8c7 c004 	str.w	ip, [r7, #4]
				while(Buttons[17].B_Out)
 8001602:	e00a      	b.n	800161a <WaitDoseReady.9356+0x22>
				{
					asm("NOP");
 8001604:	bf00      	nop
					if(!Buttons[10].B_Out || !Buttons[9].B_State)
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <WaitDoseReady.9356+0x40>)
 8001608:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <WaitDoseReady.9356+0x2c>
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <WaitDoseReady.9356+0x40>)
 8001612:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <WaitDoseReady.9356+0x2c>
				while(Buttons[17].B_Out)
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <WaitDoseReady.9356+0x40>)
 800161c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ef      	bne.n	8001604 <WaitDoseReady.9356+0xc>
					{
						break;
					}
					*/
				};
				Buttons[17].B_Out = 1;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <WaitDoseReady.9356+0x40>)
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			};
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20000918 	.word	0x20000918

0800163c <main>:
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
int main(void)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8001648:	f001 fe00 	bl	800324c <HAL_Init>
  SystemClock_Config();
 800164c:	f000 fd22 	bl	8002094 <SystemClock_Config>
  MX_GPIO_Init();
 8001650:	f000 fec0 	bl	80023d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001654:	f000 fe9e 	bl	8002394 <MX_DMA_Init>
  MX_TIM7_Init();
 8001658:	f000 fe66 	bl	8002328 <MX_TIM7_Init>
  MX_SPI2_Init();
 800165c:	f000 fd82 	bl	8002164 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001660:	f000 fdb6 	bl	80021d0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001664:	f000 fe2a 	bl	80022bc <MX_TIM6_Init>
  GPIOD->ODR = ~0;
 8001668:	4bab      	ldr	r3, [pc, #684]	; (8001918 <main+0x2dc>)
 800166a:	f04f 32ff 	mov.w	r2, #4294967295
 800166e:	615a      	str	r2, [r3, #20]
  Init();
 8001670:	f000 ffce 	bl	8002610 <Init>
  HAL_Delay(2300);
 8001674:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8001678:	f001 fe5a 	bl	8003330 <HAL_Delay>
  ST7920_Clean();
 800167c:	f7ff fced 	bl	800105a <ST7920_Clean>
  sprintf(tx_buffer, "Count: %lu", counter);
 8001680:	4ba6      	ldr	r3, [pc, #664]	; (800191c <main+0x2e0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	49a6      	ldr	r1, [pc, #664]	; (8001920 <main+0x2e4>)
 8001688:	48a6      	ldr	r0, [pc, #664]	; (8001924 <main+0x2e8>)
 800168a:	f005 f825 	bl	80066d8 <siprintf>
  ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 800168e:	4ba5      	ldr	r3, [pc, #660]	; (8001924 <main+0x2e8>)
 8001690:	2200      	movs	r2, #0
 8001692:	2104      	movs	r1, #4
 8001694:	2014      	movs	r0, #20
 8001696:	f7ff feb5 	bl	8001404 <ST7920_Decode_UTF8>
  HAL_TIM_Base_Start_IT(&htim7);
 800169a:	48a3      	ldr	r0, [pc, #652]	; (8001928 <main+0x2ec>)
 800169c:	f003 fc25 	bl	8004eea <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80016a0:	48a2      	ldr	r0, [pc, #648]	; (800192c <main+0x2f0>)
 80016a2:	f003 fc22 	bl	8004eea <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OUT_A_GPIO_Port, OUT_A_Pin, 1);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2101      	movs	r1, #1
 80016aa:	48a1      	ldr	r0, [pc, #644]	; (8001930 <main+0x2f4>)
 80016ac:	f002 fc48 	bl	8003f40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_B_GPIO_Port, OUT_B_Pin, 1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2104      	movs	r1, #4
 80016b4:	489e      	ldr	r0, [pc, #632]	; (8001930 <main+0x2f4>)
 80016b6:	f002 fc43 	bl	8003f40 <HAL_GPIO_WritePin>
		if(!Buttons[9].B_State)// Mode select
 80016ba:	4b9e      	ldr	r3, [pc, #632]	; (8001934 <main+0x2f8>)
 80016bc:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 8203 	bne.w	8001acc <main+0x490>
			tmpflg = 1;
 80016c6:	4b9c      	ldr	r3, [pc, #624]	; (8001938 <main+0x2fc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
			if(Buttons[9].B_Out == 1) // Reset buttons and timers
 80016cc:	4b99      	ldr	r3, [pc, #612]	; (8001934 <main+0x2f8>)
 80016ce:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d119      	bne.n	800170a <main+0xce>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80016d6:	2100      	movs	r1, #0
 80016d8:	4898      	ldr	r0, [pc, #608]	; (800193c <main+0x300>)
 80016da:	f003 fcc9 	bl	8005070 <HAL_TIM_PWM_Stop>
				Buttons[9].B_Out = 0;
 80016de:	4b95      	ldr	r3, [pc, #596]	; (8001934 <main+0x2f8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e00b      	b.n	8001704 <main+0xc8>
					Buttons[i].B_Out = 0;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4a91      	ldr	r2, [pc, #580]	; (8001934 <main+0x2f8>)
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3314      	adds	r3, #20
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	3301      	adds	r3, #1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2b13      	cmp	r3, #19
 8001708:	d9f0      	bls.n	80016ec <main+0xb0>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	71bb      	strb	r3, [r7, #6]
 800170e:	e1d5      	b.n	8001abc <main+0x480>
				if(Buttons[i].Lock == 0)
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	4a88      	ldr	r2, [pc, #544]	; (8001934 <main+0x2f8>)
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3315      	adds	r3, #21
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 81b3 	bne.w	8001a8c <main+0x450>
					if(Buttons[i].Mode == HOLD)
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	4a82      	ldr	r2, [pc, #520]	; (8001934 <main+0x2f8>)
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3316      	adds	r3, #22
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d121      	bne.n	800177e <main+0x142>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	4a7d      	ldr	r2, [pc, #500]	; (8001934 <main+0x2f8>)
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	330c      	adds	r3, #12
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	4a79      	ldr	r2, [pc, #484]	; (8001934 <main+0x2f8>)
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3310      	adds	r3, #16
 8001758:	881c      	ldrh	r4, [r3, #0]
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	4a75      	ldr	r2, [pc, #468]	; (8001934 <main+0x2f8>)
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3313      	adds	r3, #19
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	4621      	mov	r1, r4
 8001778:	f002 fbe2 	bl	8003f40 <HAL_GPIO_WritePin>
						continue;
 800177c:	e19b      	b.n	8001ab6 <main+0x47a>
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	4a6c      	ldr	r2, [pc, #432]	; (8001934 <main+0x2f8>)
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3316      	adds	r3, #22
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d163      	bne.n	800185a <main+0x21e>
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	4a67      	ldr	r2, [pc, #412]	; (8001934 <main+0x2f8>)
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3324      	adds	r3, #36	; 0x24
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d159      	bne.n	800185a <main+0x21e>
						if(Buttons[i].addiction != 0)
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	4a62      	ldr	r2, [pc, #392]	; (8001934 <main+0x2f8>)
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	331c      	adds	r3, #28
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02d      	beq.n	8001816 <main+0x1da>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <main+0x2f8>)
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	330c      	adds	r3, #12
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	4a59      	ldr	r2, [pc, #356]	; (8001934 <main+0x2f8>)
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	3310      	adds	r3, #16
 80017d8:	881c      	ldrh	r4, [r3, #0]
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	4a55      	ldr	r2, [pc, #340]	; (8001934 <main+0x2f8>)
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3314      	adds	r3, #20
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <main+0x1c8>
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <main+0x2f8>)
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	331c      	adds	r3, #28
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	7d1b      	ldrb	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <main+0x1cc>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <main+0x1ce>
 8001808:	2300      	movs	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4621      	mov	r1, r4
 8001810:	f002 fb96 	bl	8003f40 <HAL_GPIO_WritePin>
						continue;
 8001814:	e14f      	b.n	8001ab6 <main+0x47a>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <main+0x2f8>)
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	330c      	adds	r3, #12
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <main+0x2f8>)
 800182a:	212c      	movs	r1, #44	; 0x2c
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	3310      	adds	r3, #16
 8001834:	881c      	ldrh	r4, [r3, #0]
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <main+0x2f8>)
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3314      	adds	r3, #20
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4621      	mov	r1, r4
 8001854:	f002 fb74 	bl	8003f40 <HAL_GPIO_WritePin>
						continue;
 8001858:	e12d      	b.n	8001ab6 <main+0x47a>
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	4a35      	ldr	r2, [pc, #212]	; (8001934 <main+0x2f8>)
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3324      	adds	r3, #36	; 0x24
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02d      	beq.n	80018ca <main+0x28e>
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	4a30      	ldr	r2, [pc, #192]	; (8001934 <main+0x2f8>)
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3316      	adds	r3, #22
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d123      	bne.n	80018ca <main+0x28e>
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <main+0x2f8>)
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3314      	adds	r3, #20
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <main+0x28e>
						Buttons[i].B_Out = 0;
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <main+0x2f8>)
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3314      	adds	r3, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <main+0x2f8>)
 80018ac:	212c      	movs	r1, #44	; 0x2c
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	3324      	adds	r3, #36	; 0x24
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	79ba      	ldrb	r2, [r7, #6]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f202 	mul.w	r2, r1, r2
 80018c0:	491c      	ldr	r1, [pc, #112]	; (8001934 <main+0x2f8>)
 80018c2:	440a      	add	r2, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4798      	blx	r3
						continue;
 80018c8:	e0f5      	b.n	8001ab6 <main+0x47a>
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	4a19      	ldr	r2, [pc, #100]	; (8001934 <main+0x2f8>)
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3316      	adds	r3, #22
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d130      	bne.n	8001940 <main+0x304>
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <main+0x2f8>)
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3314      	adds	r3, #20
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d026      	beq.n	8001940 <main+0x304>
						Buttons[i].B_Out = 0;
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <main+0x2f8>)
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3314      	adds	r3, #20
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	222c      	movs	r2, #44	; 0x2c
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	4a09      	ldr	r2, [pc, #36]	; (8001934 <main+0x2f8>)
 800190e:	4413      	add	r3, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f9c9 	bl	8002ca8 <TimerMotor>
						continue;
 8001916:	e0ce      	b.n	8001ab6 <main+0x47a>
 8001918:	40020c00 	.word	0x40020c00
 800191c:	2000086c 	.word	0x2000086c
 8001920:	08007eb0 	.word	0x08007eb0
 8001924:	200003ec 	.word	0x200003ec
 8001928:	20000d28 	.word	0x20000d28
 800192c:	20000c88 	.word	0x20000c88
 8001930:	40021000 	.word	0x40021000
 8001934:	20000918 	.word	0x20000918
 8001938:	20000870 	.word	0x20000870
 800193c:	200008d8 	.word	0x200008d8
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	4a61      	ldr	r2, [pc, #388]	; (8001ac8 <main+0x48c>)
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3316      	adds	r3, #22
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d152      	bne.n	80019fa <main+0x3be>
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <main+0x48c>)
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3314      	adds	r3, #20
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d048      	beq.n	80019fa <main+0x3be>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	4a57      	ldr	r2, [pc, #348]	; (8001ac8 <main+0x48c>)
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	331c      	adds	r3, #28
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	7d1b      	ldrb	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 809a 	beq.w	8001ab4 <main+0x478>
						Buttons[i].B_Out = 0;
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <main+0x48c>)
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3314      	adds	r3, #20
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <main+0x48c>)
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	330c      	adds	r3, #12
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <main+0x48c>)
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3310      	adds	r3, #16
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	f002 fac3 	bl	8003f40 <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	4a42      	ldr	r2, [pc, #264]	; (8001ac8 <main+0x48c>)
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3318      	adds	r3, #24
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fcb0 	bl	8003330 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <main+0x48c>)
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	330c      	adds	r3, #12
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <main+0x48c>)
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3310      	adds	r3, #16
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	f002 faa4 	bl	8003f40 <HAL_GPIO_WritePin>
						continue;
 80019f8:	e05d      	b.n	8001ab6 <main+0x47a>
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <main+0x48c>)
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3316      	adds	r3, #22
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d11d      	bne.n	8001a4a <main+0x40e>
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <main+0x48c>)
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3314      	adds	r3, #20
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <main+0x40e>
						Buttons[i].B_Out = 0;
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <main+0x48c>)
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3314      	adds	r3, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	222c      	movs	r2, #44	; 0x2c
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <main+0x48c>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	2101      	movs	r1, #1
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 f892 	bl	8002b6c <HoldMotor>
						continue;
 8001a48:	e035      	b.n	8001ab6 <main+0x47a>
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <main+0x48c>)
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3316      	adds	r3, #22
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d116      	bne.n	8001a8c <main+0x450>
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <main+0x48c>)
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3314      	adds	r3, #20
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <main+0x450>
						HoldPrepareMotorUntill(Buttons[i].addiction, 1);
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <main+0x48c>)
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	331c      	adds	r3, #28
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 f8df 	bl	8002c48 <HoldPrepareMotorUntill>
						continue;
 8001a8a:	e014      	b.n	8001ab6 <main+0x47a>
				if(Buttons[i].Mode == 200) {Buttons[i].B_Out = 0;}
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <main+0x48c>)
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3316      	adds	r3, #22
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2bc8      	cmp	r3, #200	; 0xc8
 8001a9e:	d10a      	bne.n	8001ab6 <main+0x47a>
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <main+0x48c>)
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3314      	adds	r3, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e000      	b.n	8001ab6 <main+0x47a>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001ab4:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b13      	cmp	r3, #19
 8001ac0:	f67f ae26 	bls.w	8001710 <main+0xd4>
 8001ac4:	e5f9      	b.n	80016ba <main+0x7e>
 8001ac6:	bf00      	nop
 8001ac8:	20000918 	.word	0x20000918
			if(tmpflg)
 8001acc:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <main+0x680>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <main+0x4ae>
				tmpflg = 0;
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <main+0x680>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
				Buttons[10].B_Out = 0;
 8001ada:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <main+0x684>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				Buttons[17].B_Out = 0;
 8001ae2:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <main+0x684>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					};
				};
			}
			#define WELD_CHECK Welder_Check();

			if(Buttons[10].B_Out) // AUTO MODE START
 8001aea:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <main+0x684>)
 8001aec:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8253 	beq.w	8001f9c <main+0x960>
			{
				if(Buttons[15].B_State == 1)
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <main+0x684>)
 8001af8:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 80e7 	bne.w	8001cd0 <main+0x694>
				{
					Pullsteps = PULL_STEPS / 2;
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <main+0x688>)
 8001b04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8001b08:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 8001b0a:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <main+0x68c>)
 8001b0c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001b10:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 8001b12:	486e      	ldr	r0, [pc, #440]	; (8001ccc <main+0x690>)
 8001b14:	f001 f8c8 	bl	8002ca8 <TimerMotor>
					CYCLE_DELAY
 8001b18:	2064      	movs	r0, #100	; 0x64
 8001b1a:	f001 fc09 	bl	8003330 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <main+0x684>)
 8001b20:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <main+0x684>)
 8001b26:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f002 fa07 	bl	8003f40 <HAL_GPIO_WritePin>
					PUSH_V
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <main+0x684>)
 8001b34:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <main+0x684>)
 8001b3a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	f002 f9fd 	bl	8003f40 <HAL_GPIO_WritePin>
					CUT_START
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <main+0x684>)
 8001b48:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001b4c:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <main+0x684>)
 8001b4e:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	f002 f9f3 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f001 fbe8 	bl	8003330 <HAL_Delay>
					CUT_RELEASE
 8001b60:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <main+0x684>)
 8001b62:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <main+0x684>)
 8001b68:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f002 f9e6 	bl	8003f40 <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001b74:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <main+0x684>)
 8001b76:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001b7a:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <main+0x684>)
 8001b7c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	f002 f9dc 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_V_START
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <main+0x684>)
 8001b8a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <main+0x684>)
 8001b90:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	f002 f9d2 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_CHECK
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	469c      	mov	ip, r3
 8001ba0:	f000 fa32 	bl	8002008 <Welder_Check.9362>
					WELD_TIME
 8001ba4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001ba8:	f001 fbc2 	bl	8003330 <HAL_Delay>
					WELD_H_STOP
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <main+0x684>)
 8001bae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <main+0x684>)
 8001bb4:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f002 f9c0 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_V_STOP
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <main+0x684>)
 8001bc2:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <main+0x684>)
 8001bc8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f002 f9b6 	bl	8003f40 <HAL_GPIO_WritePin>
					//Release
					RELEASE_H
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <main+0x684>)
 8001bd6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <main+0x684>)
 8001bdc:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f002 f9ac 	bl	8003f40 <HAL_GPIO_WritePin>
					RELEASE_V
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <main+0x684>)
 8001bea:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <main+0x684>)
 8001bf0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f002 f9a2 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001bfc:	2064      	movs	r0, #100	; 0x64
 8001bfe:	f001 fb97 	bl	8003330 <HAL_Delay>
					//Pull stage 2
					PULL
 8001c02:	4832      	ldr	r0, [pc, #200]	; (8001ccc <main+0x690>)
 8001c04:	f001 f850 	bl	8002ca8 <TimerMotor>
					CYCLE_DELAY
 8001c08:	2064      	movs	r0, #100	; 0x64
 8001c0a:	f001 fb91 	bl	8003330 <HAL_Delay>
					//Clamp material 2
					PUSH_V
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <main+0x684>)
 8001c10:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <main+0x684>)
 8001c16:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f002 f98f 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001c22:	2064      	movs	r0, #100	; 0x64
 8001c24:	f001 fb84 	bl	8003330 <HAL_Delay>
					//Welding stage 2
					WELD_V_START
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <main+0x684>)
 8001c2a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <main+0x684>)
 8001c30:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	f002 f982 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_CHECK
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	469c      	mov	ip, r3
 8001c40:	f000 f9e2 	bl	8002008 <Welder_Check.9362>
					WELD_TIME
 8001c44:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c48:	f001 fb72 	bl	8003330 <HAL_Delay>
					WELD_V_STOP
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <main+0x684>)
 8001c4e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <main+0x684>)
 8001c54:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f002 f970 	bl	8003f40 <HAL_GPIO_WritePin>
					//Fill, release
					WAIT_DOSE_READY
 8001c60:	463b      	mov	r3, r7
 8001c62:	469c      	mov	ip, r3
 8001c64:	f7ff fcc8 	bl	80015f8 <WaitDoseReady.9356>

					DOSE_PULSE_START
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <main+0x684>)
 8001c6a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <main+0x684>)
 8001c70:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001c74:	2200      	movs	r2, #0
 8001c76:	4619      	mov	r1, r3
 8001c78:	f002 f962 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001c7c:	2064      	movs	r0, #100	; 0x64
 8001c7e:	f001 fb57 	bl	8003330 <HAL_Delay>
					DOSE_PULSE_STOP
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <main+0x684>)
 8001c84:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <main+0x684>)
 8001c8a:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4619      	mov	r1, r3
 8001c92:	f002 f955 	bl	8003f40 <HAL_GPIO_WritePin>
					HAL_Delay(WAITING); // TEST
 8001c96:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001c9a:	f001 fb49 	bl	8003330 <HAL_Delay>
					//DOSE
					RELEASE_V
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <main+0x684>)
 8001ca0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <main+0x684>)
 8001ca6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001caa:	2201      	movs	r2, #1
 8001cac:	4619      	mov	r1, r3
 8001cae:	f002 f947 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001cb2:	2064      	movs	r0, #100	; 0x64
 8001cb4:	f001 fb3c 	bl	8003330 <HAL_Delay>
 8001cb8:	e132      	b.n	8001f20 <main+0x8e4>
 8001cba:	bf00      	nop
 8001cbc:	20000870 	.word	0x20000870
 8001cc0:	20000918 	.word	0x20000918
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000010 	.word	0x20000010
 8001ccc:	20000a4c 	.word	0x20000a4c
				}
				else
				{
					Pullsteps = PULL_STEPS / 2;
 8001cd0:	4bc0      	ldr	r3, [pc, #768]	; (8001fd4 <main+0x998>)
 8001cd2:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8001cd6:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 8001cd8:	4bbf      	ldr	r3, [pc, #764]	; (8001fd8 <main+0x99c>)
 8001cda:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001cde:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 8001ce0:	48be      	ldr	r0, [pc, #760]	; (8001fdc <main+0x9a0>)
 8001ce2:	f000 ffe1 	bl	8002ca8 <TimerMotor>
					CYCLE_DELAY
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f001 fb22 	bl	8003330 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 8001cec:	4bbc      	ldr	r3, [pc, #752]	; (8001fe0 <main+0x9a4>)
 8001cee:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001cf2:	4bbb      	ldr	r3, [pc, #748]	; (8001fe0 <main+0x9a4>)
 8001cf4:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f002 f920 	bl	8003f40 <HAL_GPIO_WritePin>
					PUSH_V
 8001d00:	4bb7      	ldr	r3, [pc, #732]	; (8001fe0 <main+0x9a4>)
 8001d02:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001d06:	4bb6      	ldr	r3, [pc, #728]	; (8001fe0 <main+0x9a4>)
 8001d08:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f002 f916 	bl	8003f40 <HAL_GPIO_WritePin>
					CUT_START
 8001d14:	4bb2      	ldr	r3, [pc, #712]	; (8001fe0 <main+0x9a4>)
 8001d16:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001d1a:	4bb1      	ldr	r3, [pc, #708]	; (8001fe0 <main+0x9a4>)
 8001d1c:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f002 f90c 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	f001 fb01 	bl	8003330 <HAL_Delay>
					CUT_RELEASE
 8001d2e:	4bac      	ldr	r3, [pc, #688]	; (8001fe0 <main+0x9a4>)
 8001d30:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001d34:	4baa      	ldr	r3, [pc, #680]	; (8001fe0 <main+0x9a4>)
 8001d36:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f002 f8ff 	bl	8003f40 <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001d42:	4ba7      	ldr	r3, [pc, #668]	; (8001fe0 <main+0x9a4>)
 8001d44:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001d48:	4ba5      	ldr	r3, [pc, #660]	; (8001fe0 <main+0x9a4>)
 8001d4a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	f002 f8f5 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_V_START
 8001d56:	4ba2      	ldr	r3, [pc, #648]	; (8001fe0 <main+0x9a4>)
 8001d58:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001d5c:	4ba0      	ldr	r3, [pc, #640]	; (8001fe0 <main+0x9a4>)
 8001d5e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f002 f8eb 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_CHECK
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	f000 f94b 	bl	8002008 <Welder_Check.9362>
					WELD_TIME
 8001d72:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001d76:	f001 fadb 	bl	8003330 <HAL_Delay>
					WELD_H_STOP
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <main+0x9a4>)
 8001d7c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001d80:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <main+0x9a4>)
 8001d82:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f002 f8d9 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_V_STOP
 8001d8e:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <main+0x9a4>)
 8001d90:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <main+0x9a4>)
 8001d96:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f002 f8cf 	bl	8003f40 <HAL_GPIO_WritePin>
					//Release, fill 1
					RELEASE_H
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <main+0x9a4>)
 8001da4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001da8:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <main+0x9a4>)
 8001daa:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	f002 f8c5 	bl	8003f40 <HAL_GPIO_WritePin>
					RELEASE_V
 8001db6:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <main+0x9a4>)
 8001db8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <main+0x9a4>)
 8001dbe:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f002 f8bb 	bl	8003f40 <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 8001dca:	463b      	mov	r3, r7
 8001dcc:	469c      	mov	ip, r3
 8001dce:	f7ff fc13 	bl	80015f8 <WaitDoseReady.9356>
					DOSE_PULSE_START
 8001dd2:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <main+0x9a4>)
 8001dd4:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001dd8:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <main+0x9a4>)
 8001dda:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	f002 f8ad 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001de6:	2064      	movs	r0, #100	; 0x64
 8001de8:	f001 faa2 	bl	8003330 <HAL_Delay>
					DOSE_PULSE_STOP
 8001dec:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <main+0x9a4>)
 8001dee:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001df2:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <main+0x9a4>)
 8001df4:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f002 f8a0 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001e00:	2064      	movs	r0, #100	; 0x64
 8001e02:	f001 fa95 	bl	8003330 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 8001e06:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001e0a:	f001 fa91 	bl	8003330 <HAL_Delay>
					CYCLE_DELAY
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f001 fa8e 	bl	8003330 <HAL_Delay>
					//DOSE
					//Pull stage 2
					PULL
 8001e14:	4871      	ldr	r0, [pc, #452]	; (8001fdc <main+0x9a0>)
 8001e16:	f000 ff47 	bl	8002ca8 <TimerMotor>
					CYCLE_DELAY
 8001e1a:	2064      	movs	r0, #100	; 0x64
 8001e1c:	f001 fa88 	bl	8003330 <HAL_Delay>
					//Clamp material 2
					PUSH_V
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <main+0x9a4>)
 8001e22:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <main+0x9a4>)
 8001e28:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f002 f886 	bl	8003f40 <HAL_GPIO_WritePin>
					PUSH_H
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <main+0x9a4>)
 8001e36:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <main+0x9a4>)
 8001e3c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f002 f87c 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f001 fa71 	bl	8003330 <HAL_Delay>
					//Welding stage 2
					WELD_V_START
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <main+0x9a4>)
 8001e50:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <main+0x9a4>)
 8001e56:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f002 f86f 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_H_START
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <main+0x9a4>)
 8001e64:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <main+0x9a4>)
 8001e6a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	f002 f865 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_CHECK
 8001e76:	463b      	mov	r3, r7
 8001e78:	469c      	mov	ip, r3
 8001e7a:	f000 f8c5 	bl	8002008 <Welder_Check.9362>
					WELD_TIME
 8001e7e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001e82:	f001 fa55 	bl	8003330 <HAL_Delay>
					WELD_V_STOP
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <main+0x9a4>)
 8001e88:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <main+0x9a4>)
 8001e8e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001e92:	2201      	movs	r2, #1
 8001e94:	4619      	mov	r1, r3
 8001e96:	f002 f853 	bl	8003f40 <HAL_GPIO_WritePin>
					WELD_H_STOP
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <main+0x9a4>)
 8001e9c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <main+0x9a4>)
 8001ea2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f002 f849 	bl	8003f40 <HAL_GPIO_WritePin>
					//Release, fill 2
					RELEASE_V
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <main+0x9a4>)
 8001eb0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <main+0x9a4>)
 8001eb6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f002 f83f 	bl	8003f40 <HAL_GPIO_WritePin>
					RELEASE_H
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <main+0x9a4>)
 8001ec4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001ec8:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <main+0x9a4>)
 8001eca:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f002 f835 	bl	8003f40 <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	469c      	mov	ip, r3
 8001eda:	f7ff fb8d 	bl	80015f8 <WaitDoseReady.9356>
					DOSE_PULSE_START
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <main+0x9a4>)
 8001ee0:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001ee4:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <main+0x9a4>)
 8001ee6:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	f002 f827 	bl	8003f40 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001ef2:	2064      	movs	r0, #100	; 0x64
 8001ef4:	f001 fa1c 	bl	8003330 <HAL_Delay>
					DOSE_PULSE_STOP
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <main+0x9a4>)
 8001efa:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <main+0x9a4>)
 8001f00:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001f04:	2201      	movs	r2, #1
 8001f06:	4619      	mov	r1, r3
 8001f08:	f002 f81a 	bl	8003f40 <HAL_GPIO_WritePin>
					//DOSE
					CYCLE_DELAY
 8001f0c:	2064      	movs	r0, #100	; 0x64
 8001f0e:	f001 fa0f 	bl	8003330 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 8001f12:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001f16:	f001 fa0b 	bl	8003330 <HAL_Delay>
					CYCLE_DELAY
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f001 fa08 	bl	8003330 <HAL_Delay>
					CYCLE_DELAY
					*/
				}
				// Section for quadrature counter
				static uint8_t mem = 0;
				pOutSig++;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <main+0x9a8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <main+0x9a8>)
 8001f28:	6013      	str	r3, [r2, #0]
				pOutSig++;
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <main+0x9a8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <main+0x9a8>)
 8001f32:	6013      	str	r3, [r2, #0]
				mem++;
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <main+0x9ac>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <main+0x9ac>)
 8001f3e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 8001f40:	20c8      	movs	r0, #200	; 0xc8
 8001f42:	f001 f9f5 	bl	8003330 <HAL_Delay>
				if(mem > 3)
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <main+0x9ac>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d905      	bls.n	8001f5a <main+0x91e>
				{
					pOutSig = OutSignals[0];
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <main+0x9a8>)
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <main+0x9b0>)
 8001f52:	601a      	str	r2, [r3, #0]
					mem = 0;
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <main+0x9ac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(OUT_A_GPIO_Port, OUT_A_Pin, !pOutSig[0]);
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <main+0x9a8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <main+0x9b4>)
 8001f70:	f001 ffe6 	bl	8003f40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUT_B_GPIO_Port, OUT_B_Pin, !pOutSig[1]);
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <main+0x9a8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	2104      	movs	r1, #4
 8001f8a:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <main+0x9b4>)
 8001f8c:	f001 ffd8 	bl	8003f40 <HAL_GPIO_WritePin>
				//End

				counter++; // Ammount of packages done
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <main+0x9b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <main+0x9b8>)
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00a      	b.n	8001fb2 <main+0x976>
			}
			else if(flag == true)
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <main+0x9bc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <main+0x976>
			{
				flag = false;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <main+0x9bc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001faa:	2100      	movs	r1, #0
 8001fac:	4813      	ldr	r0, [pc, #76]	; (8001ffc <main+0x9c0>)
 8001fae:	f003 f85f 	bl	8005070 <HAL_TIM_PWM_Stop>
			}
			//Spi 128x64 screen
			sprintf(tx_buffer, "Count: %lu", counter);
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <main+0x9b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4911      	ldr	r1, [pc, #68]	; (8002000 <main+0x9c4>)
 8001fba:	4812      	ldr	r0, [pc, #72]	; (8002004 <main+0x9c8>)
 8001fbc:	f004 fb8c 	bl	80066d8 <siprintf>
			ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <main+0x9c8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	2014      	movs	r0, #20
 8001fc8:	f7ff fa1c 	bl	8001404 <ST7920_Decode_UTF8>
			ST7920_Update();
 8001fcc:	f7ff f9ce 	bl	800136c <ST7920_Update>
		if(!Buttons[9].B_State)// Mode select
 8001fd0:	f7ff bb73 	b.w	80016ba <main+0x7e>
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000010 	.word	0x20000010
 8001fdc:	20000a4c 	.word	0x20000a4c
 8001fe0:	20000918 	.word	0x20000918
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000872 	.word	0x20000872
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	2000086c 	.word	0x2000086c
 8001ff8:	20000871 	.word	0x20000871
 8001ffc:	200008d8 	.word	0x200008d8
 8002000:	08007eb0 	.word	0x08007eb0
 8002004:	200003ec 	.word	0x200003ec

08002008 <Welder_Check.9362>:
			{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	f8c7 c004 	str.w	ip, [r7, #4]
				uint32_t timer = 12000000;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <Welder_Check.9362+0x84>)
 8002014:	60fb      	str	r3, [r7, #12]
				while(!Buttons[18].B_Out && timer--)
 8002016:	e029      	b.n	800206c <Welder_Check.9362+0x64>
					if(!timer)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d126      	bne.n	800206c <Welder_Check.9362+0x64>
						Buttons[10].B_State = 0;
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <Welder_Check.9362+0x88>)
 8002020:	2200      	movs	r2, #0
 8002022:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
						uint32_t delay = 200;
 8002026:	23c8      	movs	r3, #200	; 0xc8
 8002028:	60bb      	str	r3, [r7, #8]
						while(!Buttons[10].B_State)
 800202a:	e019      	b.n	8002060 <Welder_Check.9362+0x58>
							HAL_GPIO_WritePin(Buttons[19].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <Welder_Check.9362+0x88>)
 800202e:	f8d3 0350 	ldr.w	r0, [r3, #848]	; 0x350
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <Welder_Check.9362+0x88>)
 8002034:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002038:	2201      	movs	r2, #1
 800203a:	4619      	mov	r1, r3
 800203c:	f001 ff80 	bl	8003f40 <HAL_GPIO_WritePin>
							HAL_Delay(delay);
 8002040:	68b8      	ldr	r0, [r7, #8]
 8002042:	f001 f975 	bl	8003330 <HAL_Delay>
							HAL_GPIO_WritePin(Buttons[19].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <Welder_Check.9362+0x88>)
 8002048:	f8d3 0350 	ldr.w	r0, [r3, #848]	; 0x350
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <Welder_Check.9362+0x88>)
 800204e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	f001 ff73 	bl	8003f40 <HAL_GPIO_WritePin>
							HAL_Delay(delay);
 800205a:	68b8      	ldr	r0, [r7, #8]
 800205c:	f001 f968 	bl	8003330 <HAL_Delay>
						while(!Buttons[10].B_State)
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <Welder_Check.9362+0x88>)
 8002062:	f893 31cb 	ldrb.w	r3, [r3, #459]	; 0x1cb
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0e0      	beq.n	800202c <Welder_Check.9362+0x24>
						break;
 800206a:	e00a      	b.n	8002082 <Welder_Check.9362+0x7a>
				while(!Buttons[18].B_Out && timer--)
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <Welder_Check.9362+0x88>)
 800206e:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <Welder_Check.9362+0x7a>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1cb      	bne.n	8002018 <Welder_Check.9362+0x10>
			}
 8002080:	e7ff      	b.n	8002082 <Welder_Check.9362+0x7a>
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	00b71b00 	.word	0x00b71b00
 8002090:	20000918 	.word	0x20000918

08002094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	; 0x50
 8002098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	2230      	movs	r2, #48	; 0x30
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 feb4 	bl	8005e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <SystemClock_Config+0xc8>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <SystemClock_Config+0xc8>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <SystemClock_Config+0xc8>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <SystemClock_Config+0xcc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <SystemClock_Config+0xcc>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <SystemClock_Config+0xcc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fa:	2302      	movs	r3, #2
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002104:	2304      	movs	r3, #4
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002108:	2348      	movs	r3, #72	; 0x48
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800210c:	2306      	movs	r3, #6
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002110:	2304      	movs	r3, #4
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	4618      	mov	r0, r3
 800211a:	f001 ff2b 	bl	8003f74 <HAL_RCC_OscConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002124:	f000 fe72 	bl	8002e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002128:	230f      	movs	r3, #15
 800212a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212c:	2302      	movs	r3, #2
 800212e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f002 f985 	bl	8004454 <HAL_RCC_ClockConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002150:	f000 fe5c 	bl	8002e0c <Error_Handler>
  }
}
 8002154:	bf00      	nop
 8002156:	3750      	adds	r7, #80	; 0x50
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000

08002164 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <MX_SPI2_Init+0x64>)
 800216a:	4a18      	ldr	r2, [pc, #96]	; (80021cc <MX_SPI2_Init+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <MX_SPI2_Init+0x64>)
 8002170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_SPI2_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_SPI2_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_SPI2_Init+0x64>)
 8002184:	2202      	movs	r2, #2
 8002186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_SPI2_Init+0x64>)
 800218a:	2201      	movs	r2, #1
 800218c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_SPI2_Init+0x64>)
 8002190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_SPI2_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MX_SPI2_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_SPI2_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_SPI2_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_SPI2_Init+0x64>)
 80021b0:	220a      	movs	r2, #10
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <MX_SPI2_Init+0x64>)
 80021b6:	f002 fb0b 	bl	80047d0 <HAL_SPI_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021c0:	f000 fe24 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000880 	.word	0x20000880
 80021cc:	40003800 	.word	0x40003800

080021d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	; 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <MX_TIM3_Init+0xe8>)
 8002204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150;
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002208:	2296      	movs	r2, #150	; 0x96
 800220a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_TIM3_Init+0xe4>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 116;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002214:	2274      	movs	r2, #116	; 0x74
 8002216:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <MX_TIM3_Init+0xe4>)
 800221a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002226:	4823      	ldr	r0, [pc, #140]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002228:	f002 fe34 	bl	8004e94 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002232:	f000 fdeb 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002240:	4619      	mov	r1, r3
 8002242:	481c      	ldr	r0, [pc, #112]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002244:	f003 f93a 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800224e:	f000 fddd 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002254:	f002 fe98 	bl	8004f88 <HAL_TIM_PWM_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800225e:	f000 fdd5 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	4619      	mov	r1, r3
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002272:	f003 fd13 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800227c:	f000 fdc6 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	; 0x60
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 58;
 8002284:	233a      	movs	r3, #58	; 0x3a
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2200      	movs	r2, #0
 8002294:	4619      	mov	r1, r3
 8002296:	4807      	ldr	r0, [pc, #28]	; (80022b4 <MX_TIM3_Init+0xe4>)
 8002298:	f003 f84a 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022a2:	f000 fdb3 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <MX_TIM3_Init+0xe4>)
 80022a8:	f000 fede 	bl	8003068 <HAL_TIM_MspPostInit>

}
 80022ac:	bf00      	nop
 80022ae:	3738      	adds	r7, #56	; 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200008d8 	.word	0x200008d8
 80022b8:	40000400 	.word	0x40000400

080022bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_TIM6_Init+0x64>)
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <MX_TIM6_Init+0x68>)
 80022ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24000-1;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_TIM6_Init+0x64>)
 80022d2:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80022d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_TIM6_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_TIM6_Init+0x64>)
 80022e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_TIM6_Init+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <MX_TIM6_Init+0x64>)
 80022ee:	f002 fdd1 	bl	8004e94 <HAL_TIM_Base_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80022f8:	f000 fd88 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_TIM6_Init+0x64>)
 800230a:	f003 fcc7 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002314:	f000 fd7a 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000c88 	.word	0x20000c88
 8002324:	40001000 	.word	0x40001000

08002328 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232e:	463b      	mov	r3, r7
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_TIM7_Init+0x64>)
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <MX_TIM7_Init+0x68>)
 800233a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <MX_TIM7_Init+0x64>)
 800233e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8002342:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_TIM7_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <MX_TIM7_Init+0x64>)
 800234c:	2205      	movs	r2, #5
 800234e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_TIM7_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_TIM7_Init+0x64>)
 8002358:	f002 fd9c 	bl	8004e94 <HAL_TIM_Base_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002362:	f000 fd53 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800236e:	463b      	mov	r3, r7
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_TIM7_Init+0x64>)
 8002374:	f003 fc92 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800237e:	f000 fd45 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000d28 	.word	0x20000d28
 8002390:	40001400 	.word	0x40001400

08002394 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_DMA_Init+0x3c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <MX_DMA_Init+0x3c>)
 80023a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_DMA_Init+0x3c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	200f      	movs	r0, #15
 80023bc:	f001 f8c9 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023c0:	200f      	movs	r0, #15
 80023c2:	f001 f8e2 	bl	800358a <HAL_NVIC_EnableIRQ>

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <MX_GPIO_Init+0x224>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a81      	ldr	r2, [pc, #516]	; (80025f8 <MX_GPIO_Init+0x224>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <MX_GPIO_Init+0x224>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <MX_GPIO_Init+0x224>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <MX_GPIO_Init+0x224>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a6c      	ldr	r2, [pc, #432]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <MX_GPIO_Init+0x224>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <MX_GPIO_Init+0x224>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <MX_GPIO_Init+0x224>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT_B_Pin|CS_Pin|OUT_A_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2125      	movs	r1, #37	; 0x25
 8002496:	4859      	ldr	r0, [pc, #356]	; (80025fc <MX_GPIO_Init+0x228>)
 8002498:	f001 fd52 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	21c0      	movs	r1, #192	; 0xc0
 80024a0:	4857      	ldr	r0, [pc, #348]	; (8002600 <MX_GPIO_Init+0x22c>)
 80024a2:	f001 fd4d 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2120      	movs	r1, #32
 80024aa:	4856      	ldr	r0, [pc, #344]	; (8002604 <MX_GPIO_Init+0x230>)
 80024ac:	f001 fd48 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80024b6:	4854      	ldr	r0, [pc, #336]	; (8002608 <MX_GPIO_Init+0x234>)
 80024b8:	f001 fd42 	bl	8003f40 <HAL_GPIO_WritePin>
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	4852      	ldr	r0, [pc, #328]	; (800260c <MX_GPIO_Init+0x238>)
 80024c2:	f001 fd3d 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_B_Pin OUT_A_Pin */
  GPIO_InitStruct.Pin = OUT_B_Pin|OUT_A_Pin;
 80024c6:	2305      	movs	r3, #5
 80024c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024ca:	2311      	movs	r3, #17
 80024cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	4619      	mov	r1, r3
 80024dc:	4847      	ldr	r0, [pc, #284]	; (80025fc <MX_GPIO_Init+0x228>)
 80024de:	f001 fb7d 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin 
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin 
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin 
                           HOLD_Pull_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin 
 80024e2:	f64f 73da 	movw	r3, #65498	; 0xffda
 80024e6:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin 
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin 
                          |HOLD_Pull_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4841      	ldr	r0, [pc, #260]	; (80025fc <MX_GPIO_Init+0x228>)
 80024f8:	f001 fb70 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80024fc:	2320      	movs	r3, #32
 80024fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002504:	2302      	movs	r3, #2
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	483a      	ldr	r0, [pc, #232]	; (80025fc <MX_GPIO_Init+0x228>)
 8002514:	f001 fb62 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : HOLD_Dose_Pin Weld_Feedback_Pin Size_Select_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin|Weld_Feedback_Pin|Size_Select_Pin;
 8002518:	f242 0303 	movw	r3, #8195	; 0x2003
 800251c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002522:	2301      	movs	r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4835      	ldr	r0, [pc, #212]	; (8002604 <MX_GPIO_Init+0x230>)
 800252e:	f001 fb55 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8002532:	23c0      	movs	r3, #192	; 0xc0
 8002534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	482d      	ldr	r0, [pc, #180]	; (8002600 <MX_GPIO_Init+0x22c>)
 800254a:	f001 fb47 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Dose_Ready_Pin */
  GPIO_InitStruct.Pin = Dose_Ready_Pin;
 800254e:	2310      	movs	r3, #16
 8002550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002556:	2302      	movs	r3, #2
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Dose_Ready_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	4619      	mov	r1, r3
 8002560:	4828      	ldr	r0, [pc, #160]	; (8002604 <MX_GPIO_Init+0x230>)
 8002562:	f001 fb3b 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8002566:	2320      	movs	r3, #32
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800256e:	2302      	movs	r3, #2
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4821      	ldr	r0, [pc, #132]	; (8002604 <MX_GPIO_Init+0x230>)
 800257e:	f001 fb2d 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = Mode_Pin|Auto_Start_Pin;
 8002582:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	481d      	ldr	r0, [pc, #116]	; (800260c <MX_GPIO_Init+0x238>)
 8002598:	f001 fb20 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Dose_Pulse_Out_Pin Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin 
                           H_Push_Out_Pin H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 800259c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80025a0:	61fb      	str	r3, [r7, #28]
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	4814      	ldr	r0, [pc, #80]	; (8002608 <MX_GPIO_Init+0x234>)
 80025b6:	f001 fb11 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin;
 80025ba:	2318      	movs	r3, #24
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <MX_GPIO_Init+0x234>)
 80025ce:	f001 fb05 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025da:	2302      	movs	r3, #2
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4808      	ldr	r0, [pc, #32]	; (800260c <MX_GPIO_Init+0x238>)
 80025ea:	f001 faf7 	bl	8003bdc <HAL_GPIO_Init>

}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40021000 	.word	0x40021000
 8002600:	40020000 	.word	0x40020000
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40020400 	.word	0x40020400

08002610 <Init>:

/* USER CODE BEGIN 4 */
void Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 8002616:	2064      	movs	r0, #100	; 0x64
 8002618:	f000 fe8a 	bl	8003330 <HAL_Delay>
	  ST7920_Init();
 800261c:	f7fe fcb4 	bl	8000f88 <ST7920_Init>
	  ST7920_Graphic_mode(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f7fe fcf5 	bl	8001010 <ST7920_Graphic_mode>
	  sprintf(tx_buffer, "WELCOME");
 8002626:	4a7d      	ldr	r2, [pc, #500]	; (800281c <Init+0x20c>)
 8002628:	4b7d      	ldr	r3, [pc, #500]	; (8002820 <Init+0x210>)
 800262a:	cb03      	ldmia	r3!, {r0, r1}
 800262c:	6010      	str	r0, [r2, #0]
 800262e:	6051      	str	r1, [r2, #4]
	  ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
 8002630:	4b7a      	ldr	r3, [pc, #488]	; (800281c <Init+0x20c>)
 8002632:	2200      	movs	r2, #0
 8002634:	2103      	movs	r1, #3
 8002636:	2032      	movs	r0, #50	; 0x32
 8002638:	f7fe fee4 	bl	8001404 <ST7920_Decode_UTF8>
	  ST7920_Update();
 800263c:	f7fe fe96 	bl	800136c <ST7920_Update>
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	e0b0      	b.n	80027a8 <Init+0x198>
	  {
		  Buttons[i].B_Out = 0;
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4a76      	ldr	r2, [pc, #472]	; (8002824 <Init+0x214>)
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3314      	adds	r3, #20
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_State = 0;
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <Init+0x214>)
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3313      	adds	r3, #19
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_counter = 0;
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4a6d      	ldr	r2, [pc, #436]	; (8002824 <Init+0x214>)
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3312      	adds	r3, #18
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Lock = 0;
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	4a69      	ldr	r2, [pc, #420]	; (8002824 <Init+0x214>)
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3315      	adds	r3, #21
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
		  Buttons[i].call_function = toggle_func;
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	4a64      	ldr	r2, [pc, #400]	; (8002824 <Init+0x214>)
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3320      	adds	r3, #32
 800269c:	4a62      	ldr	r2, [pc, #392]	; (8002828 <Init+0x218>)
 800269e:	601a      	str	r2, [r3, #0]
		  Buttons[i].alternate_function = 0;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4a60      	ldr	r2, [pc, #384]	; (8002824 <Init+0x214>)
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3324      	adds	r3, #36	; 0x24
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
		  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 80026b2:	79fa      	ldrb	r2, [r7, #7]
 80026b4:	495d      	ldr	r1, [pc, #372]	; (800282c <Init+0x21c>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4a57      	ldr	r2, [pc, #348]	; (8002824 <Init+0x214>)
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3304      	adds	r3, #4
 80026d2:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin = Defines[i][1];
 80026d4:	79fa      	ldrb	r2, [r7, #7]
 80026d6:	4955      	ldr	r1, [pc, #340]	; (800282c <Init+0x21c>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3304      	adds	r3, #4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	b290      	uxth	r0, r2
 80026ea:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <Init+0x214>)
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3308      	adds	r3, #8
 80026f6:	4602      	mov	r2, r0
 80026f8:	801a      	strh	r2, [r3, #0]
		  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 80026fa:	79fa      	ldrb	r2, [r7, #7]
 80026fc:	494b      	ldr	r1, [pc, #300]	; (800282c <Init+0x21c>)
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	3308      	adds	r3, #8
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4610      	mov	r0, r2
 8002710:	4a44      	ldr	r2, [pc, #272]	; (8002824 <Init+0x214>)
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	330c      	adds	r3, #12
 800271c:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 800271e:	79fa      	ldrb	r2, [r7, #7]
 8002720:	4942      	ldr	r1, [pc, #264]	; (800282c <Init+0x21c>)
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	330c      	adds	r3, #12
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	b290      	uxth	r0, r2
 8002734:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <Init+0x214>)
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3310      	adds	r3, #16
 8002740:	4602      	mov	r2, r0
 8002742:	801a      	strh	r2, [r3, #0]
		  Buttons[i].Mode = Defines[i][4];
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	4939      	ldr	r1, [pc, #228]	; (800282c <Init+0x21c>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3310      	adds	r3, #16
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	b2d0      	uxtb	r0, r2
 800275a:	4a32      	ldr	r2, [pc, #200]	; (8002824 <Init+0x214>)
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3316      	adds	r3, #22
 8002766:	4602      	mov	r2, r0
 8002768:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Delay = Defines[i][5];
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	492f      	ldr	r1, [pc, #188]	; (800282c <Init+0x21c>)
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	3314      	adds	r3, #20
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	b290      	uxth	r0, r2
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <Init+0x214>)
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3318      	adds	r3, #24
 800278c:	4602      	mov	r2, r0
 800278e:	801a      	strh	r2, [r3, #0]
		  Buttons[i].addiction = 0;
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <Init+0x214>)
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	331c      	adds	r3, #28
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	3301      	adds	r3, #1
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b13      	cmp	r3, #19
 80027ac:	f67f af4b 	bls.w	8002646 <Init+0x36>
	  }
	  Buttons[0].alternate_function = macros1;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <Init+0x214>)
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <Init+0x220>)
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
	  Buttons[1].Label = "Prepare";
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <Init+0x214>)
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <Init+0x224>)
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
	  Buttons[1].third_function = SetSteps0;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <Init+0x214>)
 80027be:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <Init+0x228>)
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
	  Buttons[1].addiction = &Buttons[13];
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <Init+0x214>)
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <Init+0x22c>)
 80027c6:	649a      	str	r2, [r3, #72]	; 0x48
	  Buttons[2].third_function = SetSteps2;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Init+0x214>)
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <Init+0x230>)
 80027cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  Buttons[4].addiction = &Buttons[3];
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <Init+0x214>)
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <Init+0x234>)
 80027d4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	  Buttons[6].addiction = &Buttons[5];
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <Init+0x214>)
 80027da:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <Init+0x238>)
 80027dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  Buttons[7].third_function = SetSteps1;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <Init+0x214>)
 80027e2:	4a1a      	ldr	r2, [pc, #104]	; (800284c <Init+0x23c>)
 80027e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Buttons[9].Label = "mode";
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <Init+0x214>)
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <Init+0x240>)
 80027ec:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  Buttons[10].Label = "auto_start";
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <Init+0x214>)
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <Init+0x244>)
 80027f4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	  Buttons[13].Label = "reed_switch";
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <Init+0x214>)
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <Init+0x248>)
 80027fc:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 8002800:	2201      	movs	r2, #1
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	4815      	ldr	r0, [pc, #84]	; (800285c <Init+0x24c>)
 8002806:	f001 fb9b 	bl	8003f40 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 800280a:	2201      	movs	r2, #1
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	4813      	ldr	r0, [pc, #76]	; (800285c <Init+0x24c>)
 8002810:	f001 fb96 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200003ec 	.word	0x200003ec
 8002820:	08007ebc 	.word	0x08007ebc
 8002824:	20000918 	.word	0x20000918
 8002828:	08002a25 	.word	0x08002a25
 800282c:	20000014 	.word	0x20000014
 8002830:	08002aa9 	.word	0x08002aa9
 8002834:	08007ec4 	.word	0x08007ec4
 8002838:	08002dcd 	.word	0x08002dcd
 800283c:	20000b54 	.word	0x20000b54
 8002840:	08002dad 	.word	0x08002dad
 8002844:	2000099c 	.word	0x2000099c
 8002848:	200009f4 	.word	0x200009f4
 800284c:	08002d8d 	.word	0x08002d8d
 8002850:	08007ecc 	.word	0x08007ecc
 8002854:	08007ed4 	.word	0x08007ed4
 8002858:	08007ee0 	.word	0x08007ee0
 800285c:	40020000 	.word	0x40020000

08002860 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a64      	ldr	r2, [pc, #400]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	f040 80bb 	bne.w	80029ea <HAL_TIM_PeriodElapsedCallback+0x18a>
	{
		if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 8002874:	2110      	movs	r1, #16
 8002876:	4863      	ldr	r0, [pc, #396]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002878:	f001 fb4a 	bl	8003f10 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d131      	bne.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e016      	b.n	80028b6 <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	4a5f      	ldr	r2, [pc, #380]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	330c      	adds	r3, #12
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3310      	adds	r3, #16
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4619      	mov	r1, r3
 80028ac:	f001 fb48 	bl	8003f40 <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b13      	cmp	r3, #19
 80028ba:	d9e5      	bls.n	8002888 <HAL_TIM_PeriodElapsedCallback+0x28>
			}
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80028bc:	2100      	movs	r1, #0
 80028be:	4853      	ldr	r0, [pc, #332]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80028c0:	f002 fbd6 	bl	8005070 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim7);
 80028c4:	4852      	ldr	r0, [pc, #328]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80028c6:	f002 fb34 	bl	8004f32 <HAL_TIM_Base_Stop_IT>
			Delay(4800000);
 80028ca:	4852      	ldr	r0, [pc, #328]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80028cc:	f000 fa8c 	bl	8002de8 <Delay>
			while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 80028d0:	e000      	b.n	80028d4 <HAL_TIM_PeriodElapsedCallback+0x74>
 80028d2:	bf00      	nop
 80028d4:	2110      	movs	r1, #16
 80028d6:	484b      	ldr	r0, [pc, #300]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80028d8:	f001 fb1a 	bl	8003f10 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f7      	beq.n	80028d2 <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_NVIC_SystemReset();
 80028e2:	f000 fe60 	bl	80035a6 <HAL_NVIC_SystemReset>
		}

		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73bb      	strb	r3, [r7, #14]
 80028ea:	e045      	b.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			if((Buttons[i].addiction->B_Out == 1 && Buttons[i].Mode == __DELAY && Buttons[i].addiction != 0) || Buttons[i].addiction == 0 || Buttons[i].Mode != __DELAY)
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	4a46      	ldr	r2, [pc, #280]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	331c      	adds	r3, #28
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	7d1b      	ldrb	r3, [r3, #20]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d113      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0xca>
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3316      	adds	r3, #22
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d109      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0xca>
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	331c      	adds	r3, #28
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d113      	bne.n	8002952 <HAL_TIM_PeriodElapsedCallback+0xf2>
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	331c      	adds	r3, #28
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_TIM_PeriodElapsedCallback+0xf2>
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	4a31      	ldr	r2, [pc, #196]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3316      	adds	r3, #22
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00f      	beq.n	8002972 <HAL_TIM_PeriodElapsedCallback+0x112>
				Buttons[i].call_function(&Buttons[i]);
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3320      	adds	r3, #32
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	7bba      	ldrb	r2, [r7, #14]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f202 	mul.w	r2, r1, r2
 800296a:	4927      	ldr	r1, [pc, #156]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800296c:	440a      	add	r2, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	3301      	adds	r3, #1
 8002976:	73bb      	strb	r3, [r7, #14]
 8002978:	7bbb      	ldrb	r3, [r7, #14]
 800297a:	2b13      	cmp	r3, #19
 800297c:	d9b6      	bls.n	80028ec <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		if(flag == true || Buttons[10].B_Out == 1)
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <HAL_TIM_PeriodElapsedCallback+0x130>
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002988:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_TIM_PeriodElapsedCallback+0x13c>
		{
			HoldPrepareMotorUntill(Buttons[1].addiction, 1);
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f956 	bl	8002c48 <HoldPrepareMotorUntill>
		}
		if((flag == true && Buttons[10].B_Out == 0) || Buttons[9].B_State == 0)
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_TIM_PeriodElapsedCallback+0x14e>
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80029a6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_PeriodElapsedCallback+0x158>
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80029b0:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x166>
		{
			flag = false;
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80029be:	2100      	movs	r1, #0
 80029c0:	4812      	ldr	r0, [pc, #72]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80029c2:	f002 fb55 	bl	8005070 <HAL_TIM_PWM_Stop>
		}
		if(Buttons[14].B_Out && counter > 0)
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80029c8:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x18a>
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x18a>
		{
			Buttons[14].B_Out = 0;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
			counter = 0;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
			ST7920_Clean();
 80029e6:	f7fe fb38 	bl	800105a <ST7920_Clean>
		}

	}
	if (htim->Instance==TIM6)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x198>
	{
		ST7920_Update();
 80029f4:	f7fe fcba 	bl	800136c <ST7920_Update>
	}
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40001400 	.word	0x40001400
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	20000918 	.word	0x20000918
 8002a0c:	200008d8 	.word	0x200008d8
 8002a10:	20000d28 	.word	0x20000d28
 8002a14:	00493e00 	.word	0x00493e00
 8002a18:	20000871 	.word	0x20000871
 8002a1c:	2000086c 	.word	0x2000086c
 8002a20:	40001000 	.word	0x40001000

08002a24 <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	891b      	ldrh	r3, [r3, #8]
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f001 fa6a 	bl	8003f10 <HAL_GPIO_ReadPin>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11d      	bne.n	8002a7e <toggle_func+0x5a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7d5b      	ldrb	r3, [r3, #21]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d119      	bne.n	8002a7e <toggle_func+0x5a>
		{
			if(button->B_counter < 10)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7c9b      	ldrb	r3, [r3, #18]
 8002a4e:	2b09      	cmp	r3, #9
 8002a50:	d806      	bhi.n	8002a60 <toggle_func+0x3c>
				button->B_counter++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7c9b      	ldrb	r3, [r3, #18]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 10)
 8002a5e:	e01d      	b.n	8002a9c <toggle_func+0x78>
			else
				if(button->B_State == 0)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7cdb      	ldrb	r3, [r3, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d119      	bne.n	8002a9c <toggle_func+0x78>
				{
					button->B_State = 1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7d1b      	ldrb	r3, [r3, #20]
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 10)
 8002a7c:	e00e      	b.n	8002a9c <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7c9b      	ldrb	r3, [r3, #18]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <toggle_func+0x70>
				button->B_counter--;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7c9b      	ldrb	r3, [r3, #18]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 8002a92:	e004      	b.n	8002a9e <toggle_func+0x7a>
				button->B_State = 0;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	74da      	strb	r2, [r3, #19]
}
 8002a9a:	e000      	b.n	8002a9e <toggle_func+0x7a>
			if(button->B_counter < 10)
 8002a9c:	bf00      	nop
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <macros1>:
void macros1(struct Button *button)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <macros1+0xc0>)
 8002ab2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <macros1+0xc0>)
 8002ab8:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f001 fa3e 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <macros1+0xc0>)
 8002ac6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <macros1+0xc0>)
 8002acc:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f001 fa34 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002ad8:	20c8      	movs	r0, #200	; 0xc8
 8002ada:	f000 fc29 	bl	8003330 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <macros1+0xc0>)
 8002ae0:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <macros1+0xc0>)
 8002ae6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002aea:	2200      	movs	r2, #0
 8002aec:	4619      	mov	r1, r3
 8002aee:	f001 fa27 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <macros1+0xc0>)
 8002af4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <macros1+0xc0>)
 8002afa:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f001 fa1d 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8002b06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b0a:	f000 fc11 	bl	8003330 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <macros1+0xc0>)
 8002b10:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <macros1+0xc0>)
 8002b16:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f001 fa0f 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <macros1+0xc0>)
 8002b24:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <macros1+0xc0>)
 8002b2a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4619      	mov	r1, r3
 8002b32:	f001 fa05 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <macros1+0xc0>)
 8002b38:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <macros1+0xc0>)
 8002b3e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002b42:	2201      	movs	r2, #1
 8002b44:	4619      	mov	r1, r3
 8002b46:	f001 f9fb 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <macros1+0xc0>)
 8002b4c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <macros1+0xc0>)
 8002b52:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002b56:	2201      	movs	r2, #1
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f001 f9f1 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000918 	.word	0x20000918

08002b6c <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]

	uint32_t Limitation = 100000;
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <HoldMotor+0xd8>)
 8002b7a:	617b      	str	r3, [r7, #20]
	uint16_t temp = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	827b      	strh	r3, [r7, #18]
	for(uint32_t j = 0; j < 10; j++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e020      	b.n	8002bc8 <HoldMotor+0x5c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68d8      	ldr	r0, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8a1b      	ldrh	r3, [r3, #16]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4619      	mov	r1, r3
 8002b92:	f001 f9d5 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8b1b      	ldrh	r3, [r3, #24]
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f922 	bl	8002de8 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68d8      	ldr	r0, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8a1b      	ldrh	r3, [r3, #16]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f001 f9c6 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8b1b      	ldrh	r3, [r3, #24]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f913 	bl	8002de8 <Delay>
	for(uint32_t j = 0; j < 10; j++)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	d9db      	bls.n	8002b86 <HoldMotor+0x1a>
	}
	while(Button->B_State == mode && Limitation)
 8002bce:	e02d      	b.n	8002c2c <HoldMotor+0xc0>
	{
		Limitation--;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
		if(temp < ACCEL) temp++;
 8002bd6:	8a7b      	ldrh	r3, [r7, #18]
 8002bd8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002bdc:	d202      	bcs.n	8002be4 <HoldMotor+0x78>
 8002bde:	8a7b      	ldrh	r3, [r7, #18]
 8002be0:	3301      	adds	r3, #1
 8002be2:	827b      	strh	r3, [r7, #18]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68d8      	ldr	r0, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8a1b      	ldrh	r3, [r3, #16]
 8002bec:	2200      	movs	r2, #0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f001 f9a6 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8b1b      	ldrh	r3, [r3, #24]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	8a7b      	ldrh	r3, [r7, #18]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f8f0 	bl	8002de8 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68d8      	ldr	r0, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8a1b      	ldrh	r3, [r3, #16]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	f001 f994 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8b1b      	ldrh	r3, [r3, #24]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	8a7b      	ldrh	r3, [r7, #18]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f8de 	bl	8002de8 <Delay>
	while(Button->B_State == mode && Limitation)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7cdb      	ldrb	r3, [r3, #19]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d102      	bne.n	8002c3c <HoldMotor+0xd0>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1c9      	bne.n	8002bd0 <HoldMotor+0x64>
	}

}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	000186a0 	.word	0x000186a0

08002c48 <HoldPrepareMotorUntill>:

void HoldPrepareMotorUntill(struct Button *Button, uint8_t mode)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
	if(Button->B_State == mode)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7cdb      	ldrb	r3, [r3, #19]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10e      	bne.n	8002c7c <HoldPrepareMotorUntill+0x34>
	{
		if(flag == false)
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HoldPrepareMotorUntill+0x54>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	f083 0301 	eor.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HoldPrepareMotorUntill+0x4a>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <HoldPrepareMotorUntill+0x58>)
 8002c70:	f002 f9c0 	bl	8004ff4 <HAL_TIM_PWM_Start>
			flag = true;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HoldPrepareMotorUntill+0x54>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		flag = false;
		Buttons[1].B_Out = 0;
	}
}
 8002c7a:	e00a      	b.n	8002c92 <HoldPrepareMotorUntill+0x4a>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <HoldPrepareMotorUntill+0x58>)
 8002c80:	f002 f9f6 	bl	8005070 <HAL_TIM_PWM_Stop>
		flag = false;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HoldPrepareMotorUntill+0x54>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		Buttons[1].B_Out = 0;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HoldPrepareMotorUntill+0x5c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000871 	.word	0x20000871
 8002ca0:	200008d8 	.word	0x200008d8
 8002ca4:	20000918 	.word	0x20000918

08002ca8 <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 8002cb4:	23c8      	movs	r3, #200	; 0xc8
 8002cb6:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f107 0208 	add.w	r2, r7, #8
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e020      	b.n	8002d14 <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8a1b      	ldrh	r3, [r3, #16]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f001 f92f 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8b1b      	ldrh	r3, [r3, #24]
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f87c 	bl	8002de8 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68d8      	ldr	r0, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8a1b      	ldrh	r3, [r3, #16]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f001 f920 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8b1b      	ldrh	r3, [r3, #24]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f86d 	bl	8002de8 <Delay>
	for(uint32_t j = 0; j < 20; j++)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3301      	adds	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b13      	cmp	r3, #19
 8002d18:	d9db      	bls.n	8002cd2 <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e02d      	b.n	8002d7c <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002d26:	d202      	bcs.n	8002d2e <TimerMotor+0x86>
 8002d28:	8afb      	ldrh	r3, [r7, #22]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68d8      	ldr	r0, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8a1b      	ldrh	r3, [r3, #16]
 8002d36:	2200      	movs	r2, #0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f001 f901 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8b1b      	ldrh	r3, [r3, #24]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	8afb      	ldrh	r3, [r7, #22]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f84b 	bl	8002de8 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68d8      	ldr	r0, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8a1b      	ldrh	r3, [r3, #16]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f001 f8ef 	bl	8003f40 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8b1b      	ldrh	r3, [r3, #24]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f839 	bl	8002de8 <Delay>
	for(uint32_t j = 0; j < steps; j++)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3cd      	bcc.n	8002d20 <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	*(steps) = Pullsteps;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SetSteps1+0x1c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	2000000c 	.word	0x2000000c

08002dac <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	*(steps) = Dosesteps;
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SetSteps2+0x1c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	20000010 	.word	0x20000010

08002dcc <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <Delay>:

void Delay(uint32_t delay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 8002df0:	e000      	b.n	8002df4 <Delay+0xc>
 8002df2:	bf00      	nop
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f9      	bne.n	8002df2 <Delay+0xa>
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <Error_Handler+0x1c>)
 8002e16:	f001 f893 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <Error_Handler+0x1c>)
 8002e20:	f001 f88e 	bl	8003f40 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020000 	.word	0x40020000

08002e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	; 0x44
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <HAL_SPI_MspInit+0x12c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d17f      	bne.n	8002f9e <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	4b42      	ldr	r3, [pc, #264]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a41      	ldr	r2, [pc, #260]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a33      	ldr	r2, [pc, #204]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_SPI_MspInit+0x130>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f02:	2305      	movs	r3, #5
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <HAL_SPI_MspInit+0x134>)
 8002f0e:	f000 fe65 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f24:	2305      	movs	r3, #5
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4821      	ldr	r0, [pc, #132]	; (8002fb4 <HAL_SPI_MspInit+0x138>)
 8002f30:	f000 fe54 	bl	8003bdc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f36:	4a21      	ldr	r2, [pc, #132]	; (8002fbc <HAL_SPI_MspInit+0x140>)
 8002f38:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f52:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f74:	f000 fb28 	bl	80035c8 <HAL_DMA_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002f7e:	f7ff ff45 	bl	8002e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f86:	649a      	str	r2, [r3, #72]	; 0x48
 8002f88:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_SPI_MspInit+0x13c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2024      	movs	r0, #36	; 0x24
 8002f94:	f000 fadd 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f98:	2024      	movs	r0, #36	; 0x24
 8002f9a:	f000 faf6 	bl	800358a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40003800 	.word	0x40003800
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	20000cc8 	.word	0x20000cc8
 8002fbc:	40026070 	.word	0x40026070

08002fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <HAL_TIM_Base_MspInit+0x98>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002fee:	e02e      	b.n	800304e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_TIM_Base_MspInit+0xa0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
}
 8003016:	e01a      	b.n	800304e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_TIM_Base_MspInit+0xa4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d115      	bne.n	800304e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 800302c:	f043 0320 	orr.w	r3, r3, #32
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_TIM_Base_MspInit+0x9c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	2037      	movs	r0, #55	; 0x37
 8003044:	f000 fa85 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003048:	2037      	movs	r0, #55	; 0x37
 800304a:	f000 fa9e 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40000400 	.word	0x40000400
 800305c:	40023800 	.word	0x40023800
 8003060:	40001000 	.word	0x40001000
 8003064:	40001400 	.word	0x40001400

08003068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <HAL_TIM_MspPostInit+0x68>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d11d      	bne.n	80030c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_TIM_MspPostInit+0x6c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_TIM_MspPostInit+0x6c>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_TIM_MspPostInit+0x6c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = Prepare_OUT_Pin;
 80030a6:	2340      	movs	r3, #64	; 0x40
 80030a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030b2:	2302      	movs	r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b6:	2302      	movs	r3, #2
 80030b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Prepare_OUT_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_TIM_MspPostInit+0x70>)
 80030c2:	f000 fd8b 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020800 	.word	0x40020800

080030dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <HardFault_Handler+0x4>

080030f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <MemManage_Handler+0x4>

080030f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <BusFault_Handler+0x4>

080030fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <UsageFault_Handler+0x4>

08003102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003130:	f000 f8de 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream4_IRQHandler+0x10>)
 800313e:	f000 fb13 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000cc8 	.word	0x20000cc8

0800314c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <SPI2_IRQHandler+0x10>)
 8003152:	f001 fc23 	bl	800499c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000880 	.word	0x20000880

08003160 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM7_IRQHandler+0x10>)
 8003166:	f001 ffdb 	bl	8005120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000d28 	.word	0x20000d28

08003174 <_sbrk>:
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <_sbrk+0x50>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <_sbrk+0x16>
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <_sbrk+0x50>)
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <_sbrk+0x54>)
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <_sbrk+0x50>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <_sbrk+0x50>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	466a      	mov	r2, sp
 800319a:	4293      	cmp	r3, r2
 800319c:	d907      	bls.n	80031ae <_sbrk+0x3a>
 800319e:	f002 fe0d 	bl	8005dbc <__errno>
 80031a2:	4602      	mov	r2, r0
 80031a4:	230c      	movs	r3, #12
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ac:	e006      	b.n	80031bc <_sbrk+0x48>
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_sbrk+0x50>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <_sbrk+0x50>)
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000874 	.word	0x20000874
 80031c8:	20000d70 	.word	0x20000d70

080031cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <SystemInit+0x28>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <SystemInit+0x28>)
 80031d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SystemInit+0x28>)
 80031e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e6:	609a      	str	r2, [r3, #8]
#endif
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <Reset_Handler>:
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopFillZerobss+0x14>
 80031fc:	2100      	movs	r1, #0
 80031fe:	e003      	b.n	8003208 <LoopCopyDataInit>

08003200 <CopyDataInit>:
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <LoopFillZerobss+0x18>)
 8003202:	585b      	ldr	r3, [r3, r1]
 8003204:	5043      	str	r3, [r0, r1]
 8003206:	3104      	adds	r1, #4

08003208 <LoopCopyDataInit>:
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <LoopFillZerobss+0x1c>)
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x20>)
 800320c:	1842      	adds	r2, r0, r1
 800320e:	429a      	cmp	r2, r3
 8003210:	d3f6      	bcc.n	8003200 <CopyDataInit>
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <LoopFillZerobss+0x24>)
 8003214:	e002      	b.n	800321c <LoopFillZerobss>

08003216 <FillZerobss>:
 8003216:	2300      	movs	r3, #0
 8003218:	f842 3b04 	str.w	r3, [r2], #4

0800321c <LoopFillZerobss>:
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <LoopFillZerobss+0x28>)
 800321e:	429a      	cmp	r2, r3
 8003220:	d3f9      	bcc.n	8003216 <FillZerobss>
 8003222:	f7ff ffd3 	bl	80031cc <SystemInit>
 8003226:	f002 fdcf 	bl	8005dc8 <__libc_init_array>
 800322a:	f7fe fa07 	bl	800163c <main>
 800322e:	4770      	bx	lr
 8003230:	20020000 	.word	0x20020000
 8003234:	08008540 	.word	0x08008540
 8003238:	20000000 	.word	0x20000000
 800323c:	200003d0 	.word	0x200003d0
 8003240:	200003d0 	.word	0x200003d0
 8003244:	20000d70 	.word	0x20000d70

08003248 <ADC_IRQHandler>:
 8003248:	e7fe      	b.n	8003248 <ADC_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 f961 	bl	800353c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fdd4 	bl	8002e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f97d 	bl	80035ae <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 f941 	bl	8003552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200001f4 	.word	0x200001f4
 80032e8:	200001fc 	.word	0x200001fc
 80032ec:	200001f8 	.word	0x200001f8

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	200001fc 	.word	0x200001fc
 8003314:	20000d68 	.word	0x20000d68

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000d68 	.word	0x20000d68

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_Delay+0x40>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200001fc 	.word	0x200001fc

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034d4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <__NVIC_SystemReset+0x20>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <__NVIC_SystemReset+0x20>)
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_SystemReset+0x24>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
 80034e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <__NVIC_SystemReset+0x1c>
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	05fa0004 	.word	0x05fa0004

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003508:	d301      	bcc.n	800350e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350a:	2301      	movs	r3, #1
 800350c:	e00f      	b.n	800352e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <SysTick_Config+0x40>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003516:	210f      	movs	r1, #15
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	f7ff ff7a 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <SysTick_Config+0x40>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <SysTick_Config+0x40>)
 8003528:	2207      	movs	r2, #7
 800352a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000e010 	.word	0xe000e010

0800353c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff15 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003564:	f7ff ff2a 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	6978      	ldr	r0, [r7, #20]
 8003570:	f7ff ff7a 	bl	8003468 <NVIC_EncodePriority>
 8003574:	4602      	mov	r2, r0
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff49 	bl	8003414 <__NVIC_SetPriority>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff1d 	bl	80033d8 <__NVIC_EnableIRQ>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80035aa:	f7ff ff91 	bl	80034d0 <__NVIC_SystemReset>

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff9e 	bl	80034f8 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff fea0 	bl	8003318 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e099      	b.n	8003718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003604:	e00f      	b.n	8003626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003606:	f7ff fe87 	bl	8003318 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b05      	cmp	r3, #5
 8003612:	d908      	bls.n	8003626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e078      	b.n	8003718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e8      	bne.n	8003606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_DMA_Init+0x158>)
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4313      	orrs	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d117      	bne.n	80036ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa0b 	bl	8003ae8 <DMA_CheckFifoParam>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036e6:	2301      	movs	r3, #1
 80036e8:	e016      	b.n	8003718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9c2 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	f010803f 	.word	0xf010803f

08003724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00c      	b.n	800375c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2205      	movs	r2, #5
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003774:	4b92      	ldr	r3, [pc, #584]	; (80039c0 <HAL_DMA_IRQHandler+0x258>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a92      	ldr	r2, [pc, #584]	; (80039c4 <HAL_DMA_IRQHandler+0x25c>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2208      	movs	r2, #8
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0204 	bic.w	r2, r2, #4
 80037ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2208      	movs	r2, #8
 80037c2:	409a      	lsls	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2204      	movs	r2, #4
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d012      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2204      	movs	r2, #4
 800382e:	409a      	lsls	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	2210      	movs	r2, #16
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d043      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2210      	movs	r2, #16
 8003864:	409a      	lsls	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d018      	beq.n	80038aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d024      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e01f      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e016      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0208 	bic.w	r2, r2, #8
 80038c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2220      	movs	r2, #32
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 808e 	beq.w	8003a06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2220      	movs	r2, #32
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b05      	cmp	r3, #5
 8003910:	d136      	bne.n	8003980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0216 	bic.w	r2, r2, #22
 8003920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_DMA_IRQHandler+0x1da>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0208 	bic.w	r2, r2, #8
 8003950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	223f      	movs	r2, #63	; 0x3f
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d07d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
        }
        return;
 800397e:	e078      	b.n	8003a72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01c      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d030      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e02b      	b.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d027      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
 80039be:	e022      	b.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
 80039c0:	200001f4 	.word	0x200001f4
 80039c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0210 	bic.w	r2, r2, #16
 80039e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d032      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d307      	bcc.n	8003a4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f2      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x2ca>
 8003a4c:	e000      	b.n	8003a50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a72:	bf00      	nop
    }
  }
}
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop

08003a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b10      	subs	r3, #16
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d909      	bls.n	8003abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	e007      	b.n	8003ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	aaaaaaab 	.word	0xaaaaaaab
 8003ae4:	080082c8 	.word	0x080082c8

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d855      	bhi.n	8003bb4 <DMA_CheckFifoParam+0xcc>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x28>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003bb5 	.word	0x08003bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d045      	beq.n	8003bb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e042      	b.n	8003bb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3a:	d13f      	bne.n	8003bbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e03c      	b.n	8003bbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	d121      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d836      	bhi.n	8003bc0 <DMA_CheckFifoParam+0xd8>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e02f      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d024      	beq.n	8003bc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e021      	b.n	8003bc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b88:	d11e      	bne.n	8003bc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8e:	e01b      	b.n	8003bc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <DMA_CheckFifoParam+0xb4>
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d003      	beq.n	8003ba2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b9a:	e018      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e015      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e00b      	b.n	8003bcc <DMA_CheckFifoParam+0xe4>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e00a      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e008      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e006      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e004      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;   
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bcc:	bf00      	nop
    }
  } 
  
  return status; 
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e16b      	b.n	8003ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f040 815a 	bne.w	8003eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d00b      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d007      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c2a:	2b11      	cmp	r3, #17
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d130      	bne.n	8003c98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 0201 	and.w	r2, r3, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0xfc>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b12      	cmp	r3, #18
 8003cd6:	d123      	bne.n	8003d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	220f      	movs	r2, #15
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	08da      	lsrs	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3208      	adds	r2, #8
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0203 	and.w	r2, r3, #3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80b4 	beq.w	8003eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_GPIO_Init+0x308>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	; (8003ee4 <HAL_GPIO_Init+0x308>)
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_GPIO_Init+0x308>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_GPIO_Init+0x30c>)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a51      	ldr	r2, [pc, #324]	; (8003eec <HAL_GPIO_Init+0x310>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <HAL_GPIO_Init+0x226>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a50      	ldr	r2, [pc, #320]	; (8003ef0 <HAL_GPIO_Init+0x314>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d025      	beq.n	8003dfe <HAL_GPIO_Init+0x222>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4f      	ldr	r2, [pc, #316]	; (8003ef4 <HAL_GPIO_Init+0x318>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <HAL_GPIO_Init+0x21e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <HAL_GPIO_Init+0x31c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d019      	beq.n	8003df6 <HAL_GPIO_Init+0x21a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4d      	ldr	r2, [pc, #308]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_GPIO_Init+0x216>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <HAL_GPIO_Init+0x324>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00d      	beq.n	8003dee <HAL_GPIO_Init+0x212>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	; (8003f04 <HAL_GPIO_Init+0x328>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <HAL_GPIO_Init+0x20e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4a      	ldr	r2, [pc, #296]	; (8003f08 <HAL_GPIO_Init+0x32c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_GPIO_Init+0x20a>
 8003de2:	2307      	movs	r3, #7
 8003de4:	e00e      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003de6:	2308      	movs	r3, #8
 8003de8:	e00c      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003dea:	2306      	movs	r3, #6
 8003dec:	e00a      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003dee:	2305      	movs	r3, #5
 8003df0:	e008      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003df2:	2304      	movs	r3, #4
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003df6:	2303      	movs	r3, #3
 8003df8:	e004      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e002      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_GPIO_Init+0x228>
 8003e02:	2300      	movs	r3, #0
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	f002 0203 	and.w	r2, r2, #3
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	4093      	lsls	r3, r2
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e14:	4934      	ldr	r1, [pc, #208]	; (8003ee8 <HAL_GPIO_Init+0x30c>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e46:	4a31      	ldr	r2, [pc, #196]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_GPIO_Init+0x330>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b0f      	cmp	r3, #15
 8003ed4:	f67f ae90 	bls.w	8003bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3724      	adds	r7, #36	; 0x24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40020400 	.word	0x40020400
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	40020c00 	.word	0x40020c00
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40021400 	.word	0x40021400
 8003f04:	40021800 	.word	0x40021800
 8003f08:	40021c00 	.word	0x40021c00
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e001      	b.n	8003f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f5c:	e003      	b.n	8003f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	041a      	lsls	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	619a      	str	r2, [r3, #24]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e25b      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	4ba3      	ldr	r3, [pc, #652]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4ba0      	ldr	r3, [pc, #640]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d112      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b9d      	ldr	r3, [pc, #628]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	4b99      	ldr	r3, [pc, #612]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05b      	beq.n	800407c <HAL_RCC_OscConfig+0x108>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d157      	bne.n	800407c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e236      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x74>
 8003fda:	4b91      	ldr	r3, [pc, #580]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a90      	ldr	r2, [pc, #576]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x98>
 8003ff2:	4b8b      	ldr	r3, [pc, #556]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a8a      	ldr	r2, [pc, #552]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b88      	ldr	r3, [pc, #544]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a87      	ldr	r2, [pc, #540]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 800400c:	4b84      	ldr	r3, [pc, #528]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a83      	ldr	r2, [pc, #524]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b81      	ldr	r3, [pc, #516]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a80      	ldr	r2, [pc, #512]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7ff f974 	bl	8003318 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7ff f970 	bl	8003318 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1fb      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b76      	ldr	r3, [pc, #472]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xc0>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7ff f960 	bl	8003318 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7ff f95c 	bl	8003318 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e1e7      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b6c      	ldr	r3, [pc, #432]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0xe8>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b62      	ldr	r3, [pc, #392]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11c      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d116      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	4b5c      	ldr	r3, [pc, #368]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1bb      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b56      	ldr	r3, [pc, #344]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4952      	ldr	r1, [pc, #328]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	e03a      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_RCC_OscConfig+0x2b0>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7ff f915 	bl	8003318 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f2:	f7ff f911 	bl	8003318 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e19c      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4940      	ldr	r1, [pc, #256]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_RCC_OscConfig+0x2b0>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7ff f8f4 	bl	8003318 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004134:	f7ff f8f0 	bl	8003318 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e17b      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d030      	beq.n	80041c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b30      	ldr	r3, [pc, #192]	; (8004228 <HAL_RCC_OscConfig+0x2b4>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7ff f8d4 	bl	8003318 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004174:	f7ff f8d0 	bl	8003318 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e15b      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x200>
 8004192:	e015      	b.n	80041c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x2b4>)
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419a:	f7ff f8bd 	bl	8003318 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a2:	f7ff f8b9 	bl	8003318 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e144      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a0 	beq.w	800430e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_OscConfig+0x2b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d121      	bne.n	800424e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCC_OscConfig+0x2b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_RCC_OscConfig+0x2b8>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7ff f87f 	bl	8003318 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e011      	b.n	8004242 <HAL_RCC_OscConfig+0x2ce>
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	42470000 	.word	0x42470000
 8004228:	42470e80 	.word	0x42470e80
 800422c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7ff f872 	bl	8003318 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0fd      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x4d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x2f0>
 8004256:	4b7d      	ldr	r3, [pc, #500]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a7c      	ldr	r2, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	e01c      	b.n	800429e <HAL_RCC_OscConfig+0x32a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d10c      	bne.n	8004286 <HAL_RCC_OscConfig+0x312>
 800426c:	4b77      	ldr	r3, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a76      	ldr	r2, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	4b74      	ldr	r3, [pc, #464]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a73      	ldr	r2, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	e00b      	b.n	800429e <HAL_RCC_OscConfig+0x32a>
 8004286:	4b71      	ldr	r3, [pc, #452]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a70      	ldr	r2, [pc, #448]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	4b6e      	ldr	r3, [pc, #440]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a6d      	ldr	r2, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7ff f837 	bl	8003318 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7ff f833 	bl	8003318 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0bc      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ee      	beq.n	80042ae <HAL_RCC_OscConfig+0x33a>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7ff f821 	bl	8003318 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7ff f81d 	bl	8003318 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0a6      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b52      	ldr	r3, [pc, #328]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a51      	ldr	r2, [pc, #324]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8092 	beq.w	800443c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d05c      	beq.n	80043de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d141      	bne.n	80043b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b48      	ldr	r3, [pc, #288]	; (8004450 <HAL_RCC_OscConfig+0x4dc>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fe fff1 	bl	8003318 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe ffed 	bl	8003318 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e078      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434c:	4b3f      	ldr	r3, [pc, #252]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	019b      	lsls	r3, r3, #6
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	3b01      	subs	r3, #1
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	4933      	ldr	r1, [pc, #204]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004382:	4b33      	ldr	r3, [pc, #204]	; (8004450 <HAL_RCC_OscConfig+0x4dc>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe ffc6 	bl	8003318 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe ffc2 	bl	8003318 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e04d      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x41c>
 80043ae:	e045      	b.n	800443c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x4dc>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fe ffaf 	bl	8003318 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043be:	f7fe ffab 	bl	8003318 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e036      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x44a>
 80043dc:	e02e      	b.n	800443c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e029      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCC_OscConfig+0x4d8>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11c      	bne.n	8004438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d115      	bne.n	8004438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004412:	4013      	ands	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40007000 	.word	0x40007000
 800444c:	40023800 	.word	0x40023800
 8004450:	42470060 	.word	0x42470060

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fe fee8 	bl	8003318 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fee4 	bl	8003318 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4601      	mov	r1, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5cd3      	ldrb	r3, [r2, r3]
 80045ee:	fa21 f303 	lsr.w	r3, r1, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fe48 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	080082b8 	.word	0x080082b8
 8004618:	200001f4 	.word	0x200001f4
 800461c:	200001f8 	.word	0x200001f8

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	2300      	movs	r3, #0
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d007      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x32>
 8004642:	2b08      	cmp	r3, #8
 8004644:	d008      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x38>
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 80b4 	bne.w	80047b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800464c:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800464e:	60bb      	str	r3, [r7, #8]
       break;
 8004650:	e0b3      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004654:	60bb      	str	r3, [r7, #8]
      break;
 8004656:	e0b0      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004658:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004660:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004662:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04a      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466e:	4b55      	ldr	r3, [pc, #340]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	f04f 0400 	mov.w	r4, #0
 8004678:	f240 11ff 	movw	r1, #511	; 0x1ff
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	ea03 0501 	and.w	r5, r3, r1
 8004684:	ea04 0602 	and.w	r6, r4, r2
 8004688:	4629      	mov	r1, r5
 800468a:	4632      	mov	r2, r6
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	0154      	lsls	r4, r2, #5
 8004696:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800469a:	014b      	lsls	r3, r1, #5
 800469c:	4619      	mov	r1, r3
 800469e:	4622      	mov	r2, r4
 80046a0:	1b49      	subs	r1, r1, r5
 80046a2:	eb62 0206 	sbc.w	r2, r2, r6
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	0194      	lsls	r4, r2, #6
 80046b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046b4:	018b      	lsls	r3, r1, #6
 80046b6:	1a5b      	subs	r3, r3, r1
 80046b8:	eb64 0402 	sbc.w	r4, r4, r2
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	00e2      	lsls	r2, r4, #3
 80046c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ca:	00d9      	lsls	r1, r3, #3
 80046cc:	460b      	mov	r3, r1
 80046ce:	4614      	mov	r4, r2
 80046d0:	195b      	adds	r3, r3, r5
 80046d2:	eb44 0406 	adc.w	r4, r4, r6
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	0262      	lsls	r2, r4, #9
 80046e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046e4:	0259      	lsls	r1, r3, #9
 80046e6:	460b      	mov	r3, r1
 80046e8:	4614      	mov	r4, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	4621      	mov	r1, r4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4623      	mov	r3, r4
 80046f8:	f7fc fa56 	bl	8000ba8 <__aeabi_uldivmod>
 80046fc:	4603      	mov	r3, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e049      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004704:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	f04f 0400 	mov.w	r4, #0
 800470e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	ea03 0501 	and.w	r5, r3, r1
 800471a:	ea04 0602 	and.w	r6, r4, r2
 800471e:	4629      	mov	r1, r5
 8004720:	4632      	mov	r2, r6
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	f04f 0400 	mov.w	r4, #0
 800472a:	0154      	lsls	r4, r2, #5
 800472c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004730:	014b      	lsls	r3, r1, #5
 8004732:	4619      	mov	r1, r3
 8004734:	4622      	mov	r2, r4
 8004736:	1b49      	subs	r1, r1, r5
 8004738:	eb62 0206 	sbc.w	r2, r2, r6
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	f04f 0400 	mov.w	r4, #0
 8004744:	0194      	lsls	r4, r2, #6
 8004746:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800474a:	018b      	lsls	r3, r1, #6
 800474c:	1a5b      	subs	r3, r3, r1
 800474e:	eb64 0402 	sbc.w	r4, r4, r2
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004760:	00d9      	lsls	r1, r3, #3
 8004762:	460b      	mov	r3, r1
 8004764:	4614      	mov	r4, r2
 8004766:	195b      	adds	r3, r3, r5
 8004768:	eb44 0406 	adc.w	r4, r4, r6
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	02a2      	lsls	r2, r4, #10
 8004776:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800477a:	0299      	lsls	r1, r3, #10
 800477c:	460b      	mov	r3, r1
 800477e:	4614      	mov	r4, r2
 8004780:	4618      	mov	r0, r3
 8004782:	4621      	mov	r1, r4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	461a      	mov	r2, r3
 800478c:	4623      	mov	r3, r4
 800478e:	f7fc fa0b 	bl	8000ba8 <__aeabi_uldivmod>
 8004792:	4603      	mov	r3, r0
 8004794:	460c      	mov	r4, r1
 8004796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	60bb      	str	r3, [r7, #8]
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047b6:	60bb      	str	r3, [r7, #8]
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	68bb      	ldr	r3, [r7, #8]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e056      	b.n	8004890 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fe fb3d 	bl	8002e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	ea42 0103 	orr.w	r1, r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0104 	and.w	r1, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_SPI_Transmit_IT+0x20>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e067      	b.n	8004988 <HAL_SPI_Transmit_IT+0xf0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Transmit_IT+0x34>
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048d0:	e055      	b.n	800497e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80048de:	2302      	movs	r3, #2
 80048e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048e2:	e04c      	b.n	800497e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_SPI_Transmit_IT+0xfc>)
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
 800492a:	e002      	b.n	8004932 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_SPI_Transmit_IT+0x100>)
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	d107      	bne.n	800494c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800495a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d008      	beq.n	800497c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e000      	b.n	800497e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 800497c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	08004c33 	.word	0x08004c33
 8004998:	08004bed 	.word	0x08004bed

0800499c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10f      	bne.n	80049e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
    return;
 80049de:	e0d8      	b.n	8004b92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_SPI_IRQHandler+0x66>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	09db      	lsrs	r3, r3, #7
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
    return;
 8004a00:	e0c7      	b.n	8004b92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_SPI_IRQHandler+0x8c>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80b5 	beq.w	8004b92 <HAL_SPI_IRQHandler+0x1f6>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80ae 	beq.w	8004b92 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d023      	beq.n	8004a8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d011      	beq.n	8004a72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	f043 0204 	orr.w	r2, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	e00b      	b.n	8004a8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
        return;
 8004a88:	e083      	b.n	8004b92 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d014      	beq.n	8004ac0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f043 0208 	orr.w	r2, r3, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d050      	beq.n	8004b90 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004afc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_SPI_IRQHandler+0x17e>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d034      	beq.n	8004b84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0203 	bic.w	r2, r2, #3
 8004b28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d011      	beq.n	8004b56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_SPI_IRQHandler+0x1fc>)
 8004b38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fdf0 	bl	8003724 <HAL_DMA_Abort_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b62:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <HAL_SPI_IRQHandler+0x1fc>)
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fdda 	bl	8003724 <HAL_DMA_Abort_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b82:	e003      	b.n	8004b8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f813 	bl	8004bb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b8a:	e000      	b.n	8004b8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004b8c:	bf00      	nop
    return;
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
  }
}
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08004bc5 	.word	0x08004bc5

08004b9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ffe6 	bl	8004bb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	7812      	ldrb	r2, [r2, #0]
 8004c00:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8d3 	bl	8004dd0 <SPI_CloseTx_ISR>
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	1c9a      	adds	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8b1 	bl	8004dd0 <SPI_CloseTx_ISR>
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c86:	e04c      	b.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d048      	beq.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c90:	f7fe fb42 	bl	8003318 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d902      	bls.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d13d      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbe:	d111      	bne.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc8:	d004      	beq.n	8004cd4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd2:	d107      	bne.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cec:	d10f      	bne.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e00f      	b.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d1a3      	bne.n	8004c88 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <SPI_EndRxTxTransaction+0x7c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <SPI_EndRxTxTransaction+0x80>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	0d5b      	lsrs	r3, r3, #21
 8004d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d112      	bne.n	8004d9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff ff77 	bl	8004c76 <SPI_WaitFlagStateUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e00f      	b.n	8004dbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d0f2      	beq.n	8004d9e <SPI_EndRxTxTransaction+0x52>
 8004db8:	e000      	b.n	8004dbc <SPI_EndRxTxTransaction+0x70>
        break;
 8004dba:	bf00      	nop
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200001f4 	.word	0x200001f4
 8004dcc:	165e9f81 	.word	0x165e9f81

08004dd0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <SPI_CloseTx_ISR+0xbc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <SPI_CloseTx_ISR+0xc0>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	0a5b      	lsrs	r3, r3, #9
 8004de4:	2264      	movs	r2, #100	; 0x64
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dec:	f7fe fa94 	bl	8003318 <HAL_GetTick>
 8004df0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e04:	e009      	b.n	8004e1a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0eb      	beq.n	8004df2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e28:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	2164      	movs	r1, #100	; 0x64
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff8c 	bl	8004d4c <SPI_EndRxTxTransaction>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fe9b 	bl	8004bb0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004e7a:	e002      	b.n	8004e82 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff fe8d 	bl	8004b9c <HAL_SPI_TxCpltCallback>
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200001f4 	.word	0x200001f4
 8004e90:	057619f1 	.word	0x057619f1

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01d      	b.n	8004ee2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fe f880 	bl	8002fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fbd2 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_TIM_Base_Stop_IT+0x48>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a1a      	ldr	r2, [r3, #32]
 8004f60:	f240 4344 	movw	r3, #1092	; 0x444
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_TIM_Base_Stop_IT+0x48>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e01d      	b.n	8004fd6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f815 	bl	8004fde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f000 fb58 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fe22 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIM_PWM_Start+0x74>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_PWM_Start+0x2c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a14      	ldr	r2, [pc, #80]	; (800506c <HAL_TIM_PWM_Start+0x78>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_TIM_PWM_Start+0x30>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_TIM_PWM_Start+0x32>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d007      	beq.n	800505c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fde4 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <HAL_TIM_PWM_Stop+0xa8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_PWM_Stop+0x2c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <HAL_TIM_PWM_Stop+0xac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_TIM_PWM_Stop+0x30>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_TIM_PWM_Stop+0x32>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	f240 4344 	movw	r3, #1092	; 0x444
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_TIM_PWM_Stop+0x96>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	f240 4344 	movw	r3, #1092	; 0x444
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_PWM_Stop+0x96>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400

08005120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0202 	mvn.w	r2, #2
 800514c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa6b 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa5d 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fa6e 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b04      	cmp	r3, #4
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0204 	mvn.w	r2, #4
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa41 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa33 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa44 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0208 	mvn.w	r2, #8
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2204      	movs	r2, #4
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa17 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa09 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa1a 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d122      	bne.n	8005278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b10      	cmp	r3, #16
 800523e:	d11b      	bne.n	8005278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0210 	mvn.w	r2, #16
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2208      	movs	r2, #8
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9ed 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9df 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9f0 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10e      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0201 	mvn.w	r2, #1
 800529c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fd fade 	bl	8002860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b80      	cmp	r3, #128	; 0x80
 80052b0:	d10e      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d107      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fd6c 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9b5 	bl	8005666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0220 	mvn.w	r2, #32
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fd36 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005346:	2302      	movs	r3, #2
 8005348:	e0b4      	b.n	80054b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	f200 809f 	bhi.w	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080054a1 	.word	0x080054a1
 8005370:	080054a1 	.word	0x080054a1
 8005374:	080054a1 	.word	0x080054a1
 8005378:	080053dd 	.word	0x080053dd
 800537c:	080054a1 	.word	0x080054a1
 8005380:	080054a1 	.word	0x080054a1
 8005384:	080054a1 	.word	0x080054a1
 8005388:	0800541f 	.word	0x0800541f
 800538c:	080054a1 	.word	0x080054a1
 8005390:	080054a1 	.word	0x080054a1
 8005394:	080054a1 	.word	0x080054a1
 8005398:	0800545f 	.word	0x0800545f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa0a 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	619a      	str	r2, [r3, #24]
      break;
 80053da:	e062      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa5a 	bl	800589c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      break;
 800541c:	e041      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 faaf 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0208 	orr.w	r2, r2, #8
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0204 	bic.w	r2, r2, #4
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      break;
 800545c:	e021      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb03 	bl	8005a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80054a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_ConfigClockSource+0x18>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0a6      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d067      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0x120>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d80b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x6c>
 8005510:	2b10      	cmp	r3, #16
 8005512:	d073      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d802      	bhi.n	800551e <HAL_TIM_ConfigClockSource+0x62>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d06f      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800551c:	e078      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800551e:	2b20      	cmp	r3, #32
 8005520:	d06c      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
 8005522:	2b30      	cmp	r3, #48	; 0x30
 8005524:	d06a      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005526:	e073      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005528:	2b70      	cmp	r3, #112	; 0x70
 800552a:	d00d      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x8c>
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d804      	bhi.n	800553a <HAL_TIM_ConfigClockSource+0x7e>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d033      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xe0>
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d041      	beq.n	80055bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005538:	e06a      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d066      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x152>
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d017      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005546:	e063      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f000 fb5a 	bl	8005c10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800556a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
      break;
 8005574:	e04c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6899      	ldr	r1, [r3, #8]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f000 fb43 	bl	8005c10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005598:	609a      	str	r2, [r3, #8]
      break;
 800559a:	e039      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	461a      	mov	r2, r3
 80055aa:	f000 fab7 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2150      	movs	r1, #80	; 0x50
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fb10 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055ba:	e029      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	461a      	mov	r2, r3
 80055ca:	f000 fad6 	bl	8005b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2160      	movs	r1, #96	; 0x60
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb00 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055da:	e019      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6859      	ldr	r1, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f000 fa97 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2140      	movs	r1, #64	; 0x40
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 faf0 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055fa:	e009      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fae7 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 800560c:	e000      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800560e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_Base_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d027      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d023      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40001800 	.word	0x40001800
 80057b4:	40001c00 	.word	0x40001c00
 80057b8:	40002000 	.word	0x40002000

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0302 	bic.w	r3, r3, #2
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC1_SetConfig+0x64>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10c      	bne.n	800583a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0308 	bic.w	r3, r3, #8
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC1_SetConfig+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0210 	bic.w	r2, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0320 	bic.w	r3, r3, #32
 80058e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a22      	ldr	r2, [pc, #136]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC2_SetConfig+0x68>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10d      	bne.n	8005920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_OC2_SetConfig+0x94>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d113      	bne.n	8005958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10d      	bne.n	8005a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_OC3_SetConfig+0x92>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <TIM_OC4_SetConfig+0xa4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <TIM_OC4_SetConfig+0xa8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d109      	bne.n	8005aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	019b      	lsls	r3, r3, #6
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 0307 	orr.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2201      	movs	r2, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e05a      	b.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d01d      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10c      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40001800 	.word	0x40001800

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <__errno>:
 8005dbc:	4b01      	ldr	r3, [pc, #4]	; (8005dc4 <__errno+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000200 	.word	0x20000200

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	4e0d      	ldr	r6, [pc, #52]	; (8005e00 <__libc_init_array+0x38>)
 8005dcc:	4c0d      	ldr	r4, [pc, #52]	; (8005e04 <__libc_init_array+0x3c>)
 8005dce:	1ba4      	subs	r4, r4, r6
 8005dd0:	10a4      	asrs	r4, r4, #2
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	42a5      	cmp	r5, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	4e0b      	ldr	r6, [pc, #44]	; (8005e08 <__libc_init_array+0x40>)
 8005dda:	4c0c      	ldr	r4, [pc, #48]	; (8005e0c <__libc_init_array+0x44>)
 8005ddc:	f002 f85c 	bl	8007e98 <_init>
 8005de0:	1ba4      	subs	r4, r4, r6
 8005de2:	10a4      	asrs	r4, r4, #2
 8005de4:	2500      	movs	r5, #0
 8005de6:	42a5      	cmp	r5, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df0:	4798      	blx	r3
 8005df2:	3501      	adds	r5, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dfa:	4798      	blx	r3
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08008538 	.word	0x08008538
 8005e04:	08008538 	.word	0x08008538
 8005e08:	08008538 	.word	0x08008538
 8005e0c:	0800853c 	.word	0x0800853c

08005e10 <memset>:
 8005e10:	4402      	add	r2, r0
 8005e12:	4603      	mov	r3, r0
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d100      	bne.n	8005e1a <memset+0xa>
 8005e18:	4770      	bx	lr
 8005e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e1e:	e7f9      	b.n	8005e14 <memset+0x4>

08005e20 <__cvt>:
 8005e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	ec55 4b10 	vmov	r4, r5, d0
 8005e28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005e2a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	460e      	mov	r6, r1
 8005e32:	4691      	mov	r9, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	bfb8      	it	lt
 8005e38:	4622      	movlt	r2, r4
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	f027 0720 	bic.w	r7, r7, #32
 8005e40:	bfbb      	ittet	lt
 8005e42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e46:	461d      	movlt	r5, r3
 8005e48:	2300      	movge	r3, #0
 8005e4a:	232d      	movlt	r3, #45	; 0x2d
 8005e4c:	bfb8      	it	lt
 8005e4e:	4614      	movlt	r4, r2
 8005e50:	2f46      	cmp	r7, #70	; 0x46
 8005e52:	700b      	strb	r3, [r1, #0]
 8005e54:	d004      	beq.n	8005e60 <__cvt+0x40>
 8005e56:	2f45      	cmp	r7, #69	; 0x45
 8005e58:	d100      	bne.n	8005e5c <__cvt+0x3c>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	e000      	b.n	8005e62 <__cvt+0x42>
 8005e60:	2103      	movs	r1, #3
 8005e62:	ab03      	add	r3, sp, #12
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	ab02      	add	r3, sp, #8
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	4653      	mov	r3, sl
 8005e6e:	ec45 4b10 	vmov	d0, r4, r5
 8005e72:	f000 fcdd 	bl	8006830 <_dtoa_r>
 8005e76:	2f47      	cmp	r7, #71	; 0x47
 8005e78:	4680      	mov	r8, r0
 8005e7a:	d102      	bne.n	8005e82 <__cvt+0x62>
 8005e7c:	f019 0f01 	tst.w	r9, #1
 8005e80:	d026      	beq.n	8005ed0 <__cvt+0xb0>
 8005e82:	2f46      	cmp	r7, #70	; 0x46
 8005e84:	eb08 0906 	add.w	r9, r8, r6
 8005e88:	d111      	bne.n	8005eae <__cvt+0x8e>
 8005e8a:	f898 3000 	ldrb.w	r3, [r8]
 8005e8e:	2b30      	cmp	r3, #48	; 0x30
 8005e90:	d10a      	bne.n	8005ea8 <__cvt+0x88>
 8005e92:	2200      	movs	r2, #0
 8005e94:	2300      	movs	r3, #0
 8005e96:	4620      	mov	r0, r4
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7fa fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9e:	b918      	cbnz	r0, 8005ea8 <__cvt+0x88>
 8005ea0:	f1c6 0601 	rsb	r6, r6, #1
 8005ea4:	f8ca 6000 	str.w	r6, [sl]
 8005ea8:	f8da 3000 	ldr.w	r3, [sl]
 8005eac:	4499      	add	r9, r3
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f7fa fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eba:	b938      	cbnz	r0, 8005ecc <__cvt+0xac>
 8005ebc:	2230      	movs	r2, #48	; 0x30
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	454b      	cmp	r3, r9
 8005ec2:	d205      	bcs.n	8005ed0 <__cvt+0xb0>
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	9103      	str	r1, [sp, #12]
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e7f8      	b.n	8005ebe <__cvt+0x9e>
 8005ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed4:	eba3 0308 	sub.w	r3, r3, r8
 8005ed8:	4640      	mov	r0, r8
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	b004      	add	sp, #16
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ee2 <__exponent>:
 8005ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	bfba      	itte	lt
 8005eea:	4249      	neglt	r1, r1
 8005eec:	232d      	movlt	r3, #45	; 0x2d
 8005eee:	232b      	movge	r3, #43	; 0x2b
 8005ef0:	2909      	cmp	r1, #9
 8005ef2:	f804 2b02 	strb.w	r2, [r4], #2
 8005ef6:	7043      	strb	r3, [r0, #1]
 8005ef8:	dd20      	ble.n	8005f3c <__exponent+0x5a>
 8005efa:	f10d 0307 	add.w	r3, sp, #7
 8005efe:	461f      	mov	r7, r3
 8005f00:	260a      	movs	r6, #10
 8005f02:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f06:	fb06 1115 	mls	r1, r6, r5, r1
 8005f0a:	3130      	adds	r1, #48	; 0x30
 8005f0c:	2d09      	cmp	r5, #9
 8005f0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f12:	f103 32ff 	add.w	r2, r3, #4294967295
 8005f16:	4629      	mov	r1, r5
 8005f18:	dc09      	bgt.n	8005f2e <__exponent+0x4c>
 8005f1a:	3130      	adds	r1, #48	; 0x30
 8005f1c:	3b02      	subs	r3, #2
 8005f1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f22:	42bb      	cmp	r3, r7
 8005f24:	4622      	mov	r2, r4
 8005f26:	d304      	bcc.n	8005f32 <__exponent+0x50>
 8005f28:	1a10      	subs	r0, r2, r0
 8005f2a:	b003      	add	sp, #12
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2e:	4613      	mov	r3, r2
 8005f30:	e7e7      	b.n	8005f02 <__exponent+0x20>
 8005f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f36:	f804 2b01 	strb.w	r2, [r4], #1
 8005f3a:	e7f2      	b.n	8005f22 <__exponent+0x40>
 8005f3c:	2330      	movs	r3, #48	; 0x30
 8005f3e:	4419      	add	r1, r3
 8005f40:	7083      	strb	r3, [r0, #2]
 8005f42:	1d02      	adds	r2, r0, #4
 8005f44:	70c1      	strb	r1, [r0, #3]
 8005f46:	e7ef      	b.n	8005f28 <__exponent+0x46>

08005f48 <_printf_float>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	b08d      	sub	sp, #52	; 0x34
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005f54:	4616      	mov	r6, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	4605      	mov	r5, r0
 8005f5a:	f001 fa21 	bl	80073a0 <_localeconv_r>
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa f934 	bl	80001d0 <strlen>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f70:	9005      	str	r0, [sp, #20]
 8005f72:	3307      	adds	r3, #7
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f80:	f8d4 b000 	ldr.w	fp, [r4]
 8005f84:	f8c8 2000 	str.w	r2, [r8]
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f98:	9307      	str	r3, [sp, #28]
 8005f9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	4ba7      	ldr	r3, [pc, #668]	; (8006240 <_printf_float+0x2f8>)
 8005fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa8:	f7fa fdc0 	bl	8000b2c <__aeabi_dcmpun>
 8005fac:	bb70      	cbnz	r0, 800600c <_printf_float+0xc4>
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	4ba3      	ldr	r3, [pc, #652]	; (8006240 <_printf_float+0x2f8>)
 8005fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fb8:	f7fa fd9a 	bl	8000af0 <__aeabi_dcmple>
 8005fbc:	bb30      	cbnz	r0, 800600c <_printf_float+0xc4>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa fd89 	bl	8000adc <__aeabi_dcmplt>
 8005fca:	b110      	cbz	r0, 8005fd2 <_printf_float+0x8a>
 8005fcc:	232d      	movs	r3, #45	; 0x2d
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd2:	4a9c      	ldr	r2, [pc, #624]	; (8006244 <_printf_float+0x2fc>)
 8005fd4:	4b9c      	ldr	r3, [pc, #624]	; (8006248 <_printf_float+0x300>)
 8005fd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005fda:	bf8c      	ite	hi
 8005fdc:	4690      	movhi	r8, r2
 8005fde:	4698      	movls	r8, r3
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	f02b 0204 	bic.w	r2, fp, #4
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	9700      	str	r7, [sp, #0]
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f9e6 	bl	80063c8 <_printf_common>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f040 808d 	bne.w	800611c <_printf_float+0x1d4>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	b00d      	add	sp, #52	; 0x34
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd8a 	bl	8000b2c <__aeabi_dcmpun>
 8006018:	b110      	cbz	r0, 8006020 <_printf_float+0xd8>
 800601a:	4a8c      	ldr	r2, [pc, #560]	; (800624c <_printf_float+0x304>)
 800601c:	4b8c      	ldr	r3, [pc, #560]	; (8006250 <_printf_float+0x308>)
 800601e:	e7da      	b.n	8005fd6 <_printf_float+0x8e>
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	1c4b      	adds	r3, r1, #1
 8006024:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006028:	a80a      	add	r0, sp, #40	; 0x28
 800602a:	d13e      	bne.n	80060aa <_printf_float+0x162>
 800602c:	2306      	movs	r3, #6
 800602e:	6063      	str	r3, [r4, #4]
 8006030:	2300      	movs	r3, #0
 8006032:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006036:	ab09      	add	r3, sp, #36	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	ec49 8b10 	vmov	d0, r8, r9
 800603e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	f8cd a004 	str.w	sl, [sp, #4]
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff fee8 	bl	8005e20 <__cvt>
 8006050:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006054:	2b47      	cmp	r3, #71	; 0x47
 8006056:	4680      	mov	r8, r0
 8006058:	d109      	bne.n	800606e <_printf_float+0x126>
 800605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605c:	1cd8      	adds	r0, r3, #3
 800605e:	db02      	blt.n	8006066 <_printf_float+0x11e>
 8006060:	6862      	ldr	r2, [r4, #4]
 8006062:	4293      	cmp	r3, r2
 8006064:	dd47      	ble.n	80060f6 <_printf_float+0x1ae>
 8006066:	f1aa 0a02 	sub.w	sl, sl, #2
 800606a:	fa5f fa8a 	uxtb.w	sl, sl
 800606e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006074:	d824      	bhi.n	80060c0 <_printf_float+0x178>
 8006076:	3901      	subs	r1, #1
 8006078:	4652      	mov	r2, sl
 800607a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800607e:	9109      	str	r1, [sp, #36]	; 0x24
 8006080:	f7ff ff2f 	bl	8005ee2 <__exponent>
 8006084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006086:	1813      	adds	r3, r2, r0
 8006088:	2a01      	cmp	r2, #1
 800608a:	4681      	mov	r9, r0
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	dc02      	bgt.n	8006096 <_printf_float+0x14e>
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	07d1      	lsls	r1, r2, #31
 8006094:	d501      	bpl.n	800609a <_printf_float+0x152>
 8006096:	3301      	adds	r3, #1
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0a5      	beq.n	8005fee <_printf_float+0xa6>
 80060a2:	232d      	movs	r3, #45	; 0x2d
 80060a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a8:	e7a1      	b.n	8005fee <_printf_float+0xa6>
 80060aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80060ae:	f000 8177 	beq.w	80063a0 <_printf_float+0x458>
 80060b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80060b6:	d1bb      	bne.n	8006030 <_printf_float+0xe8>
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d1b9      	bne.n	8006030 <_printf_float+0xe8>
 80060bc:	2301      	movs	r3, #1
 80060be:	e7b6      	b.n	800602e <_printf_float+0xe6>
 80060c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80060c4:	d119      	bne.n	80060fa <_printf_float+0x1b2>
 80060c6:	2900      	cmp	r1, #0
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	dd0c      	ble.n	80060e6 <_printf_float+0x19e>
 80060cc:	6121      	str	r1, [r4, #16]
 80060ce:	b913      	cbnz	r3, 80060d6 <_printf_float+0x18e>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	07d2      	lsls	r2, r2, #31
 80060d4:	d502      	bpl.n	80060dc <_printf_float+0x194>
 80060d6:	3301      	adds	r3, #1
 80060d8:	440b      	add	r3, r1
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060de:	65a3      	str	r3, [r4, #88]	; 0x58
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	e7d9      	b.n	800609a <_printf_float+0x152>
 80060e6:	b913      	cbnz	r3, 80060ee <_printf_float+0x1a6>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	07d0      	lsls	r0, r2, #31
 80060ec:	d501      	bpl.n	80060f2 <_printf_float+0x1aa>
 80060ee:	3302      	adds	r3, #2
 80060f0:	e7f3      	b.n	80060da <_printf_float+0x192>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7f1      	b.n	80060da <_printf_float+0x192>
 80060f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80060fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060fe:	4293      	cmp	r3, r2
 8006100:	db05      	blt.n	800610e <_printf_float+0x1c6>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	07d1      	lsls	r1, r2, #31
 8006108:	d5e8      	bpl.n	80060dc <_printf_float+0x194>
 800610a:	3301      	adds	r3, #1
 800610c:	e7e5      	b.n	80060da <_printf_float+0x192>
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfd4      	ite	le
 8006112:	f1c3 0302 	rsble	r3, r3, #2
 8006116:	2301      	movgt	r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	e7de      	b.n	80060da <_printf_float+0x192>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	055a      	lsls	r2, r3, #21
 8006120:	d407      	bmi.n	8006132 <_printf_float+0x1ea>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d12b      	bne.n	8006188 <_printf_float+0x240>
 8006130:	e767      	b.n	8006002 <_printf_float+0xba>
 8006132:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006136:	f240 80dc 	bls.w	80062f2 <_printf_float+0x3aa>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006142:	f7fa fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006146:	2800      	cmp	r0, #0
 8006148:	d033      	beq.n	80061b2 <_printf_float+0x26a>
 800614a:	2301      	movs	r3, #1
 800614c:	4a41      	ldr	r2, [pc, #260]	; (8006254 <_printf_float+0x30c>)
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f af54 	beq.w	8006002 <_printf_float+0xba>
 800615a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800615e:	429a      	cmp	r2, r3
 8006160:	db02      	blt.n	8006168 <_printf_float+0x220>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	07d8      	lsls	r0, r3, #31
 8006166:	d50f      	bpl.n	8006188 <_printf_float+0x240>
 8006168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af45 	beq.w	8006002 <_printf_float+0xba>
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	f104 091a 	add.w	r9, r4, #26
 8006180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	4543      	cmp	r3, r8
 8006186:	dc09      	bgt.n	800619c <_printf_float+0x254>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	f100 8103 	bmi.w	8006396 <_printf_float+0x44e>
 8006190:	68e0      	ldr	r0, [r4, #12]
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	4298      	cmp	r0, r3
 8006196:	bfb8      	it	lt
 8006198:	4618      	movlt	r0, r3
 800619a:	e734      	b.n	8006006 <_printf_float+0xbe>
 800619c:	2301      	movs	r3, #1
 800619e:	464a      	mov	r2, r9
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af2b 	beq.w	8006002 <_printf_float+0xba>
 80061ac:	f108 0801 	add.w	r8, r8, #1
 80061b0:	e7e6      	b.n	8006180 <_printf_float+0x238>
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc2b      	bgt.n	8006210 <_printf_float+0x2c8>
 80061b8:	2301      	movs	r3, #1
 80061ba:	4a26      	ldr	r2, [pc, #152]	; (8006254 <_printf_float+0x30c>)
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af1d 	beq.w	8006002 <_printf_float+0xba>
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	b923      	cbnz	r3, 80061d6 <_printf_float+0x28e>
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	b913      	cbnz	r3, 80061d6 <_printf_float+0x28e>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	d5d8      	bpl.n	8006188 <_printf_float+0x240>
 80061d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f af0e 	beq.w	8006002 <_printf_float+0xba>
 80061e6:	f04f 0900 	mov.w	r9, #0
 80061ea:	f104 0a1a 	add.w	sl, r4, #26
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	425b      	negs	r3, r3
 80061f2:	454b      	cmp	r3, r9
 80061f4:	dc01      	bgt.n	80061fa <_printf_float+0x2b2>
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	e794      	b.n	8006124 <_printf_float+0x1dc>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f aefc 	beq.w	8006002 <_printf_float+0xba>
 800620a:	f109 0901 	add.w	r9, r9, #1
 800620e:	e7ee      	b.n	80061ee <_printf_float+0x2a6>
 8006210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006214:	429a      	cmp	r2, r3
 8006216:	bfa8      	it	ge
 8006218:	461a      	movge	r2, r3
 800621a:	2a00      	cmp	r2, #0
 800621c:	4691      	mov	r9, r2
 800621e:	dd07      	ble.n	8006230 <_printf_float+0x2e8>
 8006220:	4613      	mov	r3, r2
 8006222:	4631      	mov	r1, r6
 8006224:	4642      	mov	r2, r8
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f aee9 	beq.w	8006002 <_printf_float+0xba>
 8006230:	f104 031a 	add.w	r3, r4, #26
 8006234:	f04f 0b00 	mov.w	fp, #0
 8006238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	e015      	b.n	800626c <_printf_float+0x324>
 8006240:	7fefffff 	.word	0x7fefffff
 8006244:	080082d4 	.word	0x080082d4
 8006248:	080082d0 	.word	0x080082d0
 800624c:	080082dc 	.word	0x080082dc
 8006250:	080082d8 	.word	0x080082d8
 8006254:	080082e0 	.word	0x080082e0
 8006258:	2301      	movs	r3, #1
 800625a:	9a06      	ldr	r2, [sp, #24]
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	f43f aecd 	beq.w	8006002 <_printf_float+0xba>
 8006268:	f10b 0b01 	add.w	fp, fp, #1
 800626c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006270:	ebaa 0309 	sub.w	r3, sl, r9
 8006274:	455b      	cmp	r3, fp
 8006276:	dcef      	bgt.n	8006258 <_printf_float+0x310>
 8006278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800627c:	429a      	cmp	r2, r3
 800627e:	44d0      	add	r8, sl
 8006280:	db15      	blt.n	80062ae <_printf_float+0x366>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	07da      	lsls	r2, r3, #31
 8006286:	d412      	bmi.n	80062ae <_printf_float+0x366>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800628c:	eba3 020a 	sub.w	r2, r3, sl
 8006290:	eba3 0a01 	sub.w	sl, r3, r1
 8006294:	4592      	cmp	sl, r2
 8006296:	bfa8      	it	ge
 8006298:	4692      	movge	sl, r2
 800629a:	f1ba 0f00 	cmp.w	sl, #0
 800629e:	dc0e      	bgt.n	80062be <_printf_float+0x376>
 80062a0:	f04f 0800 	mov.w	r8, #0
 80062a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062a8:	f104 091a 	add.w	r9, r4, #26
 80062ac:	e019      	b.n	80062e2 <_printf_float+0x39a>
 80062ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	d1e5      	bne.n	8006288 <_printf_float+0x340>
 80062bc:	e6a1      	b.n	8006002 <_printf_float+0xba>
 80062be:	4653      	mov	r3, sl
 80062c0:	4642      	mov	r2, r8
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1e9      	bne.n	80062a0 <_printf_float+0x358>
 80062cc:	e699      	b.n	8006002 <_printf_float+0xba>
 80062ce:	2301      	movs	r3, #1
 80062d0:	464a      	mov	r2, r9
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae92 	beq.w	8006002 <_printf_float+0xba>
 80062de:	f108 0801 	add.w	r8, r8, #1
 80062e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	eba3 030a 	sub.w	r3, r3, sl
 80062ec:	4543      	cmp	r3, r8
 80062ee:	dcee      	bgt.n	80062ce <_printf_float+0x386>
 80062f0:	e74a      	b.n	8006188 <_printf_float+0x240>
 80062f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	dc01      	bgt.n	80062fc <_printf_float+0x3b4>
 80062f8:	07db      	lsls	r3, r3, #31
 80062fa:	d53a      	bpl.n	8006372 <_printf_float+0x42a>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4642      	mov	r2, r8
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f ae7b 	beq.w	8006002 <_printf_float+0xba>
 800630c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f108 0801 	add.w	r8, r8, #1
 800631c:	f43f ae71 	beq.w	8006002 <_printf_float+0xba>
 8006320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006322:	2200      	movs	r2, #0
 8006324:	f103 3aff 	add.w	sl, r3, #4294967295
 8006328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800632c:	2300      	movs	r3, #0
 800632e:	f7fa fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006332:	b9c8      	cbnz	r0, 8006368 <_printf_float+0x420>
 8006334:	4653      	mov	r3, sl
 8006336:	4642      	mov	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d10e      	bne.n	8006360 <_printf_float+0x418>
 8006342:	e65e      	b.n	8006002 <_printf_float+0xba>
 8006344:	2301      	movs	r3, #1
 8006346:	4652      	mov	r2, sl
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae57 	beq.w	8006002 <_printf_float+0xba>
 8006354:	f108 0801 	add.w	r8, r8, #1
 8006358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635a:	3b01      	subs	r3, #1
 800635c:	4543      	cmp	r3, r8
 800635e:	dcf1      	bgt.n	8006344 <_printf_float+0x3fc>
 8006360:	464b      	mov	r3, r9
 8006362:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006366:	e6de      	b.n	8006126 <_printf_float+0x1de>
 8006368:	f04f 0800 	mov.w	r8, #0
 800636c:	f104 0a1a 	add.w	sl, r4, #26
 8006370:	e7f2      	b.n	8006358 <_printf_float+0x410>
 8006372:	2301      	movs	r3, #1
 8006374:	e7df      	b.n	8006336 <_printf_float+0x3ee>
 8006376:	2301      	movs	r3, #1
 8006378:	464a      	mov	r2, r9
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae3e 	beq.w	8006002 <_printf_float+0xba>
 8006386:	f108 0801 	add.w	r8, r8, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	4543      	cmp	r3, r8
 8006392:	dcf0      	bgt.n	8006376 <_printf_float+0x42e>
 8006394:	e6fc      	b.n	8006190 <_printf_float+0x248>
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	f104 0919 	add.w	r9, r4, #25
 800639e:	e7f4      	b.n	800638a <_printf_float+0x442>
 80063a0:	2900      	cmp	r1, #0
 80063a2:	f43f ae8b 	beq.w	80060bc <_printf_float+0x174>
 80063a6:	2300      	movs	r3, #0
 80063a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80063ac:	ab09      	add	r3, sp, #36	; 0x24
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	ec49 8b10 	vmov	d0, r8, r9
 80063b4:	6022      	str	r2, [r4, #0]
 80063b6:	f8cd a004 	str.w	sl, [sp, #4]
 80063ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff fd2e 	bl	8005e20 <__cvt>
 80063c4:	4680      	mov	r8, r0
 80063c6:	e648      	b.n	800605a <_printf_float+0x112>

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4691      	mov	r9, r2
 80063ce:	461f      	mov	r7, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	f8c9 3000 	str.w	r3, [r9]
 80063e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	b112      	cbz	r2, 80063f2 <_printf_common+0x2a>
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c9 3000 	str.w	r3, [r9]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	0699      	lsls	r1, r3, #26
 80063f6:	bf42      	ittt	mi
 80063f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063fc:	3302      	addmi	r3, #2
 80063fe:	f8c9 3000 	strmi.w	r3, [r9]
 8006402:	6825      	ldr	r5, [r4, #0]
 8006404:	f015 0506 	ands.w	r5, r5, #6
 8006408:	d107      	bne.n	800641a <_printf_common+0x52>
 800640a:	f104 0a19 	add.w	sl, r4, #25
 800640e:	68e3      	ldr	r3, [r4, #12]
 8006410:	f8d9 2000 	ldr.w	r2, [r9]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	42ab      	cmp	r3, r5
 8006418:	dc28      	bgt.n	800646c <_printf_common+0xa4>
 800641a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	3300      	adds	r3, #0
 8006422:	bf18      	it	ne
 8006424:	2301      	movne	r3, #1
 8006426:	0692      	lsls	r2, r2, #26
 8006428:	d42d      	bmi.n	8006486 <_printf_common+0xbe>
 800642a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	47c0      	blx	r8
 8006434:	3001      	adds	r0, #1
 8006436:	d020      	beq.n	800647a <_printf_common+0xb2>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	68e5      	ldr	r5, [r4, #12]
 800643c:	f8d9 2000 	ldr.w	r2, [r9]
 8006440:	f003 0306 	and.w	r3, r3, #6
 8006444:	2b04      	cmp	r3, #4
 8006446:	bf08      	it	eq
 8006448:	1aad      	subeq	r5, r5, r2
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	6922      	ldr	r2, [r4, #16]
 800644e:	bf0c      	ite	eq
 8006450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006454:	2500      	movne	r5, #0
 8006456:	4293      	cmp	r3, r2
 8006458:	bfc4      	itt	gt
 800645a:	1a9b      	subgt	r3, r3, r2
 800645c:	18ed      	addgt	r5, r5, r3
 800645e:	f04f 0900 	mov.w	r9, #0
 8006462:	341a      	adds	r4, #26
 8006464:	454d      	cmp	r5, r9
 8006466:	d11a      	bne.n	800649e <_printf_common+0xd6>
 8006468:	2000      	movs	r0, #0
 800646a:	e008      	b.n	800647e <_printf_common+0xb6>
 800646c:	2301      	movs	r3, #1
 800646e:	4652      	mov	r2, sl
 8006470:	4639      	mov	r1, r7
 8006472:	4630      	mov	r0, r6
 8006474:	47c0      	blx	r8
 8006476:	3001      	adds	r0, #1
 8006478:	d103      	bne.n	8006482 <_printf_common+0xba>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	3501      	adds	r5, #1
 8006484:	e7c3      	b.n	800640e <_printf_common+0x46>
 8006486:	18e1      	adds	r1, r4, r3
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	2030      	movs	r0, #48	; 0x30
 800648c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006490:	4422      	add	r2, r4
 8006492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800649a:	3302      	adds	r3, #2
 800649c:	e7c5      	b.n	800642a <_printf_common+0x62>
 800649e:	2301      	movs	r3, #1
 80064a0:	4622      	mov	r2, r4
 80064a2:	4639      	mov	r1, r7
 80064a4:	4630      	mov	r0, r6
 80064a6:	47c0      	blx	r8
 80064a8:	3001      	adds	r0, #1
 80064aa:	d0e6      	beq.n	800647a <_printf_common+0xb2>
 80064ac:	f109 0901 	add.w	r9, r9, #1
 80064b0:	e7d8      	b.n	8006464 <_printf_common+0x9c>
	...

080064b4 <_printf_i>:
 80064b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064bc:	460c      	mov	r4, r1
 80064be:	7e09      	ldrb	r1, [r1, #24]
 80064c0:	b085      	sub	sp, #20
 80064c2:	296e      	cmp	r1, #110	; 0x6e
 80064c4:	4617      	mov	r7, r2
 80064c6:	4606      	mov	r6, r0
 80064c8:	4698      	mov	r8, r3
 80064ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064cc:	f000 80b3 	beq.w	8006636 <_printf_i+0x182>
 80064d0:	d822      	bhi.n	8006518 <_printf_i+0x64>
 80064d2:	2963      	cmp	r1, #99	; 0x63
 80064d4:	d036      	beq.n	8006544 <_printf_i+0x90>
 80064d6:	d80a      	bhi.n	80064ee <_printf_i+0x3a>
 80064d8:	2900      	cmp	r1, #0
 80064da:	f000 80b9 	beq.w	8006650 <_printf_i+0x19c>
 80064de:	2958      	cmp	r1, #88	; 0x58
 80064e0:	f000 8083 	beq.w	80065ea <_printf_i+0x136>
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064ec:	e032      	b.n	8006554 <_printf_i+0xa0>
 80064ee:	2964      	cmp	r1, #100	; 0x64
 80064f0:	d001      	beq.n	80064f6 <_printf_i+0x42>
 80064f2:	2969      	cmp	r1, #105	; 0x69
 80064f4:	d1f6      	bne.n	80064e4 <_printf_i+0x30>
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	0605      	lsls	r5, r0, #24
 80064fc:	f103 0104 	add.w	r1, r3, #4
 8006500:	d52a      	bpl.n	8006558 <_printf_i+0xa4>
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da03      	bge.n	8006512 <_printf_i+0x5e>
 800650a:	222d      	movs	r2, #45	; 0x2d
 800650c:	425b      	negs	r3, r3
 800650e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006512:	486f      	ldr	r0, [pc, #444]	; (80066d0 <_printf_i+0x21c>)
 8006514:	220a      	movs	r2, #10
 8006516:	e039      	b.n	800658c <_printf_i+0xd8>
 8006518:	2973      	cmp	r1, #115	; 0x73
 800651a:	f000 809d 	beq.w	8006658 <_printf_i+0x1a4>
 800651e:	d808      	bhi.n	8006532 <_printf_i+0x7e>
 8006520:	296f      	cmp	r1, #111	; 0x6f
 8006522:	d020      	beq.n	8006566 <_printf_i+0xb2>
 8006524:	2970      	cmp	r1, #112	; 0x70
 8006526:	d1dd      	bne.n	80064e4 <_printf_i+0x30>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	f043 0320 	orr.w	r3, r3, #32
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	e003      	b.n	800653a <_printf_i+0x86>
 8006532:	2975      	cmp	r1, #117	; 0x75
 8006534:	d017      	beq.n	8006566 <_printf_i+0xb2>
 8006536:	2978      	cmp	r1, #120	; 0x78
 8006538:	d1d4      	bne.n	80064e4 <_printf_i+0x30>
 800653a:	2378      	movs	r3, #120	; 0x78
 800653c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006540:	4864      	ldr	r0, [pc, #400]	; (80066d4 <_printf_i+0x220>)
 8006542:	e055      	b.n	80065f0 <_printf_i+0x13c>
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	1d19      	adds	r1, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006554:	2301      	movs	r3, #1
 8006556:	e08c      	b.n	8006672 <_printf_i+0x1be>
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006560:	bf18      	it	ne
 8006562:	b21b      	sxthne	r3, r3
 8006564:	e7cf      	b.n	8006506 <_printf_i+0x52>
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1d18      	adds	r0, r3, #4
 800656c:	6010      	str	r0, [r2, #0]
 800656e:	0628      	lsls	r0, r5, #24
 8006570:	d501      	bpl.n	8006576 <_printf_i+0xc2>
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	e002      	b.n	800657c <_printf_i+0xc8>
 8006576:	0668      	lsls	r0, r5, #25
 8006578:	d5fb      	bpl.n	8006572 <_printf_i+0xbe>
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	4854      	ldr	r0, [pc, #336]	; (80066d0 <_printf_i+0x21c>)
 800657e:	296f      	cmp	r1, #111	; 0x6f
 8006580:	bf14      	ite	ne
 8006582:	220a      	movne	r2, #10
 8006584:	2208      	moveq	r2, #8
 8006586:	2100      	movs	r1, #0
 8006588:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658c:	6865      	ldr	r5, [r4, #4]
 800658e:	60a5      	str	r5, [r4, #8]
 8006590:	2d00      	cmp	r5, #0
 8006592:	f2c0 8095 	blt.w	80066c0 <_printf_i+0x20c>
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	f021 0104 	bic.w	r1, r1, #4
 800659c:	6021      	str	r1, [r4, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d13d      	bne.n	800661e <_printf_i+0x16a>
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	f040 808e 	bne.w	80066c4 <_printf_i+0x210>
 80065a8:	4665      	mov	r5, ip
 80065aa:	2a08      	cmp	r2, #8
 80065ac:	d10b      	bne.n	80065c6 <_printf_i+0x112>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	07db      	lsls	r3, r3, #31
 80065b2:	d508      	bpl.n	80065c6 <_printf_i+0x112>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	bfde      	ittt	le
 80065bc:	2330      	movle	r3, #48	; 0x30
 80065be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065c6:	ebac 0305 	sub.w	r3, ip, r5
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	f8cd 8000 	str.w	r8, [sp]
 80065d0:	463b      	mov	r3, r7
 80065d2:	aa03      	add	r2, sp, #12
 80065d4:	4621      	mov	r1, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff fef6 	bl	80063c8 <_printf_common>
 80065dc:	3001      	adds	r0, #1
 80065de:	d14d      	bne.n	800667c <_printf_i+0x1c8>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b005      	add	sp, #20
 80065e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ea:	4839      	ldr	r0, [pc, #228]	; (80066d0 <_printf_i+0x21c>)
 80065ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	6821      	ldr	r1, [r4, #0]
 80065f4:	1d1d      	adds	r5, r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6015      	str	r5, [r2, #0]
 80065fa:	060a      	lsls	r2, r1, #24
 80065fc:	d50b      	bpl.n	8006616 <_printf_i+0x162>
 80065fe:	07ca      	lsls	r2, r1, #31
 8006600:	bf44      	itt	mi
 8006602:	f041 0120 	orrmi.w	r1, r1, #32
 8006606:	6021      	strmi	r1, [r4, #0]
 8006608:	b91b      	cbnz	r3, 8006612 <_printf_i+0x15e>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	f022 0220 	bic.w	r2, r2, #32
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	2210      	movs	r2, #16
 8006614:	e7b7      	b.n	8006586 <_printf_i+0xd2>
 8006616:	064d      	lsls	r5, r1, #25
 8006618:	bf48      	it	mi
 800661a:	b29b      	uxthmi	r3, r3
 800661c:	e7ef      	b.n	80065fe <_printf_i+0x14a>
 800661e:	4665      	mov	r5, ip
 8006620:	fbb3 f1f2 	udiv	r1, r3, r2
 8006624:	fb02 3311 	mls	r3, r2, r1, r3
 8006628:	5cc3      	ldrb	r3, [r0, r3]
 800662a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800662e:	460b      	mov	r3, r1
 8006630:	2900      	cmp	r1, #0
 8006632:	d1f5      	bne.n	8006620 <_printf_i+0x16c>
 8006634:	e7b9      	b.n	80065aa <_printf_i+0xf6>
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	6825      	ldr	r5, [r4, #0]
 800663a:	6961      	ldr	r1, [r4, #20]
 800663c:	1d18      	adds	r0, r3, #4
 800663e:	6010      	str	r0, [r2, #0]
 8006640:	0628      	lsls	r0, r5, #24
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	d501      	bpl.n	800664a <_printf_i+0x196>
 8006646:	6019      	str	r1, [r3, #0]
 8006648:	e002      	b.n	8006650 <_printf_i+0x19c>
 800664a:	066a      	lsls	r2, r5, #25
 800664c:	d5fb      	bpl.n	8006646 <_printf_i+0x192>
 800664e:	8019      	strh	r1, [r3, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	4665      	mov	r5, ip
 8006656:	e7b9      	b.n	80065cc <_printf_i+0x118>
 8006658:	6813      	ldr	r3, [r2, #0]
 800665a:	1d19      	adds	r1, r3, #4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	681d      	ldr	r5, [r3, #0]
 8006660:	6862      	ldr	r2, [r4, #4]
 8006662:	2100      	movs	r1, #0
 8006664:	4628      	mov	r0, r5
 8006666:	f7f9 fdbb 	bl	80001e0 <memchr>
 800666a:	b108      	cbz	r0, 8006670 <_printf_i+0x1bc>
 800666c:	1b40      	subs	r0, r0, r5
 800666e:	6060      	str	r0, [r4, #4]
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2300      	movs	r3, #0
 8006676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667a:	e7a7      	b.n	80065cc <_printf_i+0x118>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	462a      	mov	r2, r5
 8006680:	4639      	mov	r1, r7
 8006682:	4630      	mov	r0, r6
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d0aa      	beq.n	80065e0 <_printf_i+0x12c>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	079b      	lsls	r3, r3, #30
 800668e:	d413      	bmi.n	80066b8 <_printf_i+0x204>
 8006690:	68e0      	ldr	r0, [r4, #12]
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	4298      	cmp	r0, r3
 8006696:	bfb8      	it	lt
 8006698:	4618      	movlt	r0, r3
 800669a:	e7a3      	b.n	80065e4 <_printf_i+0x130>
 800669c:	2301      	movs	r3, #1
 800669e:	464a      	mov	r2, r9
 80066a0:	4639      	mov	r1, r7
 80066a2:	4630      	mov	r0, r6
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d09a      	beq.n	80065e0 <_printf_i+0x12c>
 80066aa:	3501      	adds	r5, #1
 80066ac:	68e3      	ldr	r3, [r4, #12]
 80066ae:	9a03      	ldr	r2, [sp, #12]
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	42ab      	cmp	r3, r5
 80066b4:	dcf2      	bgt.n	800669c <_printf_i+0x1e8>
 80066b6:	e7eb      	b.n	8006690 <_printf_i+0x1dc>
 80066b8:	2500      	movs	r5, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f5      	b.n	80066ac <_printf_i+0x1f8>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ac      	bne.n	800661e <_printf_i+0x16a>
 80066c4:	7803      	ldrb	r3, [r0, #0]
 80066c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ce:	e76c      	b.n	80065aa <_printf_i+0xf6>
 80066d0:	080082e2 	.word	0x080082e2
 80066d4:	080082f3 	.word	0x080082f3

080066d8 <siprintf>:
 80066d8:	b40e      	push	{r1, r2, r3}
 80066da:	b500      	push	{lr}
 80066dc:	b09c      	sub	sp, #112	; 0x70
 80066de:	ab1d      	add	r3, sp, #116	; 0x74
 80066e0:	9002      	str	r0, [sp, #8]
 80066e2:	9006      	str	r0, [sp, #24]
 80066e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066e8:	4809      	ldr	r0, [pc, #36]	; (8006710 <siprintf+0x38>)
 80066ea:	9107      	str	r1, [sp, #28]
 80066ec:	9104      	str	r1, [sp, #16]
 80066ee:	4909      	ldr	r1, [pc, #36]	; (8006714 <siprintf+0x3c>)
 80066f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f4:	9105      	str	r1, [sp, #20]
 80066f6:	6800      	ldr	r0, [r0, #0]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	a902      	add	r1, sp, #8
 80066fc:	f001 fa5c 	bl	8007bb8 <_svfiprintf_r>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	b01c      	add	sp, #112	; 0x70
 8006708:	f85d eb04 	ldr.w	lr, [sp], #4
 800670c:	b003      	add	sp, #12
 800670e:	4770      	bx	lr
 8006710:	20000200 	.word	0x20000200
 8006714:	ffff0208 	.word	0xffff0208

08006718 <quorem>:
 8006718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	6903      	ldr	r3, [r0, #16]
 800671e:	690c      	ldr	r4, [r1, #16]
 8006720:	42a3      	cmp	r3, r4
 8006722:	4680      	mov	r8, r0
 8006724:	f2c0 8082 	blt.w	800682c <quorem+0x114>
 8006728:	3c01      	subs	r4, #1
 800672a:	f101 0714 	add.w	r7, r1, #20
 800672e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006732:	f100 0614 	add.w	r6, r0, #20
 8006736:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800673a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800673e:	eb06 030c 	add.w	r3, r6, ip
 8006742:	3501      	adds	r5, #1
 8006744:	eb07 090c 	add.w	r9, r7, ip
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	fbb0 f5f5 	udiv	r5, r0, r5
 800674e:	b395      	cbz	r5, 80067b6 <quorem+0x9e>
 8006750:	f04f 0a00 	mov.w	sl, #0
 8006754:	4638      	mov	r0, r7
 8006756:	46b6      	mov	lr, r6
 8006758:	46d3      	mov	fp, sl
 800675a:	f850 2b04 	ldr.w	r2, [r0], #4
 800675e:	b293      	uxth	r3, r2
 8006760:	fb05 a303 	mla	r3, r5, r3, sl
 8006764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006768:	b29b      	uxth	r3, r3
 800676a:	ebab 0303 	sub.w	r3, fp, r3
 800676e:	0c12      	lsrs	r2, r2, #16
 8006770:	f8de b000 	ldr.w	fp, [lr]
 8006774:	fb05 a202 	mla	r2, r5, r2, sl
 8006778:	fa13 f38b 	uxtah	r3, r3, fp
 800677c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006780:	fa1f fb82 	uxth.w	fp, r2
 8006784:	f8de 2000 	ldr.w	r2, [lr]
 8006788:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800678c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006796:	4581      	cmp	r9, r0
 8006798:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800679c:	f84e 3b04 	str.w	r3, [lr], #4
 80067a0:	d2db      	bcs.n	800675a <quorem+0x42>
 80067a2:	f856 300c 	ldr.w	r3, [r6, ip]
 80067a6:	b933      	cbnz	r3, 80067b6 <quorem+0x9e>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	3b04      	subs	r3, #4
 80067ac:	429e      	cmp	r6, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	d330      	bcc.n	8006814 <quorem+0xfc>
 80067b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80067b6:	4640      	mov	r0, r8
 80067b8:	f001 f828 	bl	800780c <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	db25      	blt.n	800680c <quorem+0xf4>
 80067c0:	3501      	adds	r5, #1
 80067c2:	4630      	mov	r0, r6
 80067c4:	f04f 0c00 	mov.w	ip, #0
 80067c8:	f857 2b04 	ldr.w	r2, [r7], #4
 80067cc:	f8d0 e000 	ldr.w	lr, [r0]
 80067d0:	b293      	uxth	r3, r2
 80067d2:	ebac 0303 	sub.w	r3, ip, r3
 80067d6:	0c12      	lsrs	r2, r2, #16
 80067d8:	fa13 f38e 	uxtah	r3, r3, lr
 80067dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ea:	45b9      	cmp	r9, r7
 80067ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067f0:	f840 3b04 	str.w	r3, [r0], #4
 80067f4:	d2e8      	bcs.n	80067c8 <quorem+0xb0>
 80067f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80067fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80067fe:	b92a      	cbnz	r2, 800680c <quorem+0xf4>
 8006800:	3b04      	subs	r3, #4
 8006802:	429e      	cmp	r6, r3
 8006804:	461a      	mov	r2, r3
 8006806:	d30b      	bcc.n	8006820 <quorem+0x108>
 8006808:	f8c8 4010 	str.w	r4, [r8, #16]
 800680c:	4628      	mov	r0, r5
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	3b04      	subs	r3, #4
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1ca      	bne.n	80067b2 <quorem+0x9a>
 800681c:	3c01      	subs	r4, #1
 800681e:	e7c5      	b.n	80067ac <quorem+0x94>
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	3b04      	subs	r3, #4
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1ef      	bne.n	8006808 <quorem+0xf0>
 8006828:	3c01      	subs	r4, #1
 800682a:	e7ea      	b.n	8006802 <quorem+0xea>
 800682c:	2000      	movs	r0, #0
 800682e:	e7ee      	b.n	800680e <quorem+0xf6>

08006830 <_dtoa_r>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	ec57 6b10 	vmov	r6, r7, d0
 8006838:	b097      	sub	sp, #92	; 0x5c
 800683a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800683c:	9106      	str	r1, [sp, #24]
 800683e:	4604      	mov	r4, r0
 8006840:	920b      	str	r2, [sp, #44]	; 0x2c
 8006842:	9312      	str	r3, [sp, #72]	; 0x48
 8006844:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006848:	e9cd 6700 	strd	r6, r7, [sp]
 800684c:	b93d      	cbnz	r5, 800685e <_dtoa_r+0x2e>
 800684e:	2010      	movs	r0, #16
 8006850:	f000 fdb4 	bl	80073bc <malloc>
 8006854:	6260      	str	r0, [r4, #36]	; 0x24
 8006856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800685a:	6005      	str	r5, [r0, #0]
 800685c:	60c5      	str	r5, [r0, #12]
 800685e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	b151      	cbz	r1, 800687a <_dtoa_r+0x4a>
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	604a      	str	r2, [r1, #4]
 8006868:	2301      	movs	r3, #1
 800686a:	4093      	lsls	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
 800686e:	4620      	mov	r0, r4
 8006870:	f000 fdeb 	bl	800744a <_Bfree>
 8006874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	1e3b      	subs	r3, r7, #0
 800687c:	bfbb      	ittet	lt
 800687e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006882:	9301      	strlt	r3, [sp, #4]
 8006884:	2300      	movge	r3, #0
 8006886:	2201      	movlt	r2, #1
 8006888:	bfac      	ite	ge
 800688a:	f8c8 3000 	strge.w	r3, [r8]
 800688e:	f8c8 2000 	strlt.w	r2, [r8]
 8006892:	4baf      	ldr	r3, [pc, #700]	; (8006b50 <_dtoa_r+0x320>)
 8006894:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006898:	ea33 0308 	bics.w	r3, r3, r8
 800689c:	d114      	bne.n	80068c8 <_dtoa_r+0x98>
 800689e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	9b00      	ldr	r3, [sp, #0]
 80068a8:	b923      	cbnz	r3, 80068b4 <_dtoa_r+0x84>
 80068aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f000 8542 	beq.w	8007338 <_dtoa_r+0xb08>
 80068b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006b64 <_dtoa_r+0x334>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8544 	beq.w	8007348 <_dtoa_r+0xb18>
 80068c0:	f10b 0303 	add.w	r3, fp, #3
 80068c4:	f000 bd3e 	b.w	8007344 <_dtoa_r+0xb14>
 80068c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7fa f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80068d8:	4681      	mov	r9, r0
 80068da:	b168      	cbz	r0, 80068f8 <_dtoa_r+0xc8>
 80068dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068de:	2301      	movs	r3, #1
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8524 	beq.w	8007332 <_dtoa_r+0xb02>
 80068ea:	4b9a      	ldr	r3, [pc, #616]	; (8006b54 <_dtoa_r+0x324>)
 80068ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	f000 bd28 	b.w	8007348 <_dtoa_r+0xb18>
 80068f8:	aa14      	add	r2, sp, #80	; 0x50
 80068fa:	a915      	add	r1, sp, #84	; 0x54
 80068fc:	ec47 6b10 	vmov	d0, r6, r7
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fffa 	bl	80078fa <__d2b>
 8006906:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800690a:	9004      	str	r0, [sp, #16]
 800690c:	2d00      	cmp	r5, #0
 800690e:	d07c      	beq.n	8006a0a <_dtoa_r+0x1da>
 8006910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006914:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006918:	46b2      	mov	sl, r6
 800691a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800691e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006922:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006926:	2200      	movs	r2, #0
 8006928:	4b8b      	ldr	r3, [pc, #556]	; (8006b58 <_dtoa_r+0x328>)
 800692a:	4650      	mov	r0, sl
 800692c:	4659      	mov	r1, fp
 800692e:	f7f9 fcab 	bl	8000288 <__aeabi_dsub>
 8006932:	a381      	add	r3, pc, #516	; (adr r3, 8006b38 <_dtoa_r+0x308>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	a380      	add	r3, pc, #512	; (adr r3, 8006b40 <_dtoa_r+0x310>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 fca3 	bl	800028c <__adddf3>
 8006946:	4606      	mov	r6, r0
 8006948:	4628      	mov	r0, r5
 800694a:	460f      	mov	r7, r1
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	a37d      	add	r3, pc, #500	; (adr r3, 8006b48 <_dtoa_r+0x318>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7f9 fc93 	bl	800028c <__adddf3>
 8006966:	4606      	mov	r6, r0
 8006968:	460f      	mov	r7, r1
 800696a:	f7fa f8f5 	bl	8000b58 <__aeabi_d2iz>
 800696e:	2200      	movs	r2, #0
 8006970:	4682      	mov	sl, r0
 8006972:	2300      	movs	r3, #0
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7fa f8b0 	bl	8000adc <__aeabi_dcmplt>
 800697c:	b148      	cbz	r0, 8006992 <_dtoa_r+0x162>
 800697e:	4650      	mov	r0, sl
 8006980:	f7f9 fdd0 	bl	8000524 <__aeabi_i2d>
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	f7fa f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800698c:	b908      	cbnz	r0, 8006992 <_dtoa_r+0x162>
 800698e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006992:	f1ba 0f16 	cmp.w	sl, #22
 8006996:	d859      	bhi.n	8006a4c <_dtoa_r+0x21c>
 8006998:	4970      	ldr	r1, [pc, #448]	; (8006b5c <_dtoa_r+0x32c>)
 800699a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800699e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a6:	f7fa f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d050      	beq.n	8006a50 <_dtoa_r+0x220>
 80069ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b2:	2300      	movs	r3, #0
 80069b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069b8:	1b5d      	subs	r5, r3, r5
 80069ba:	f1b5 0801 	subs.w	r8, r5, #1
 80069be:	bf49      	itett	mi
 80069c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80069c4:	2300      	movpl	r3, #0
 80069c6:	9305      	strmi	r3, [sp, #20]
 80069c8:	f04f 0800 	movmi.w	r8, #0
 80069cc:	bf58      	it	pl
 80069ce:	9305      	strpl	r3, [sp, #20]
 80069d0:	f1ba 0f00 	cmp.w	sl, #0
 80069d4:	db3e      	blt.n	8006a54 <_dtoa_r+0x224>
 80069d6:	2300      	movs	r3, #0
 80069d8:	44d0      	add	r8, sl
 80069da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80069de:	9307      	str	r3, [sp, #28]
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	f200 8090 	bhi.w	8006b08 <_dtoa_r+0x2d8>
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	bfc4      	itt	gt
 80069ec:	3b04      	subgt	r3, #4
 80069ee:	9306      	strgt	r3, [sp, #24]
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	f1a3 0302 	sub.w	r3, r3, #2
 80069f6:	bfcc      	ite	gt
 80069f8:	2500      	movgt	r5, #0
 80069fa:	2501      	movle	r5, #1
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	f200 808f 	bhi.w	8006b20 <_dtoa_r+0x2f0>
 8006a02:	e8df f003 	tbb	[pc, r3]
 8006a06:	7f7d      	.short	0x7f7d
 8006a08:	7131      	.short	0x7131
 8006a0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006a0e:	441d      	add	r5, r3
 8006a10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006a14:	2820      	cmp	r0, #32
 8006a16:	dd13      	ble.n	8006a40 <_dtoa_r+0x210>
 8006a18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006a1c:	9b00      	ldr	r3, [sp, #0]
 8006a1e:	fa08 f800 	lsl.w	r8, r8, r0
 8006a22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006a26:	fa23 f000 	lsr.w	r0, r3, r0
 8006a2a:	ea48 0000 	orr.w	r0, r8, r0
 8006a2e:	f7f9 fd69 	bl	8000504 <__aeabi_ui2d>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4682      	mov	sl, r0
 8006a36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006a3a:	3d01      	subs	r5, #1
 8006a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a3e:	e772      	b.n	8006926 <_dtoa_r+0xf6>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	f1c0 0020 	rsb	r0, r0, #32
 8006a46:	fa03 f000 	lsl.w	r0, r3, r0
 8006a4a:	e7f0      	b.n	8006a2e <_dtoa_r+0x1fe>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e7b1      	b.n	80069b4 <_dtoa_r+0x184>
 8006a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a52:	e7b0      	b.n	80069b6 <_dtoa_r+0x186>
 8006a54:	9b05      	ldr	r3, [sp, #20]
 8006a56:	eba3 030a 	sub.w	r3, r3, sl
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	f1ca 0300 	rsb	r3, sl, #0
 8006a60:	9307      	str	r3, [sp, #28]
 8006a62:	2300      	movs	r3, #0
 8006a64:	930e      	str	r3, [sp, #56]	; 0x38
 8006a66:	e7bb      	b.n	80069e0 <_dtoa_r+0x1b0>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dd59      	ble.n	8006b26 <_dtoa_r+0x2f6>
 8006a72:	9302      	str	r3, [sp, #8]
 8006a74:	4699      	mov	r9, r3
 8006a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a78:	2200      	movs	r2, #0
 8006a7a:	6072      	str	r2, [r6, #4]
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	f102 0014 	add.w	r0, r2, #20
 8006a82:	4298      	cmp	r0, r3
 8006a84:	6871      	ldr	r1, [r6, #4]
 8006a86:	d953      	bls.n	8006b30 <_dtoa_r+0x300>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fcaa 	bl	80073e2 <_Balloc>
 8006a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	f1b9 0f0e 	cmp.w	r9, #14
 8006a96:	f8d3 b000 	ldr.w	fp, [r3]
 8006a9a:	f200 80e6 	bhi.w	8006c6a <_dtoa_r+0x43a>
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	f000 80e3 	beq.w	8006c6a <_dtoa_r+0x43a>
 8006aa4:	ed9d 7b00 	vldr	d7, [sp]
 8006aa8:	f1ba 0f00 	cmp.w	sl, #0
 8006aac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006ab0:	dd74      	ble.n	8006b9c <_dtoa_r+0x36c>
 8006ab2:	4a2a      	ldr	r2, [pc, #168]	; (8006b5c <_dtoa_r+0x32c>)
 8006ab4:	f00a 030f 	and.w	r3, sl, #15
 8006ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006abc:	ed93 7b00 	vldr	d7, [r3]
 8006ac0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006ac4:	06f0      	lsls	r0, r6, #27
 8006ac6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006aca:	d565      	bpl.n	8006b98 <_dtoa_r+0x368>
 8006acc:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <_dtoa_r+0x330>)
 8006ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad6:	f7f9 feb9 	bl	800084c <__aeabi_ddiv>
 8006ada:	e9cd 0100 	strd	r0, r1, [sp]
 8006ade:	f006 060f 	and.w	r6, r6, #15
 8006ae2:	2503      	movs	r5, #3
 8006ae4:	4f1e      	ldr	r7, [pc, #120]	; (8006b60 <_dtoa_r+0x330>)
 8006ae6:	e04c      	b.n	8006b82 <_dtoa_r+0x352>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	930a      	str	r3, [sp, #40]	; 0x28
 8006aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aee:	4453      	add	r3, sl
 8006af0:	f103 0901 	add.w	r9, r3, #1
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	464b      	mov	r3, r9
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	bfb8      	it	lt
 8006afc:	2301      	movlt	r3, #1
 8006afe:	e7ba      	b.n	8006a76 <_dtoa_r+0x246>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e7b2      	b.n	8006a6a <_dtoa_r+0x23a>
 8006b04:	2300      	movs	r3, #0
 8006b06:	e7f0      	b.n	8006aea <_dtoa_r+0x2ba>
 8006b08:	2501      	movs	r5, #1
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9306      	str	r3, [sp, #24]
 8006b0e:	950a      	str	r5, [sp, #40]	; 0x28
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	9302      	str	r3, [sp, #8]
 8006b16:	4699      	mov	r9, r3
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2312      	movs	r3, #18
 8006b1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b1e:	e7aa      	b.n	8006a76 <_dtoa_r+0x246>
 8006b20:	2301      	movs	r3, #1
 8006b22:	930a      	str	r3, [sp, #40]	; 0x28
 8006b24:	e7f4      	b.n	8006b10 <_dtoa_r+0x2e0>
 8006b26:	2301      	movs	r3, #1
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	4699      	mov	r9, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	e7f5      	b.n	8006b1c <_dtoa_r+0x2ec>
 8006b30:	3101      	adds	r1, #1
 8006b32:	6071      	str	r1, [r6, #4]
 8006b34:	0052      	lsls	r2, r2, #1
 8006b36:	e7a2      	b.n	8006a7e <_dtoa_r+0x24e>
 8006b38:	636f4361 	.word	0x636f4361
 8006b3c:	3fd287a7 	.word	0x3fd287a7
 8006b40:	8b60c8b3 	.word	0x8b60c8b3
 8006b44:	3fc68a28 	.word	0x3fc68a28
 8006b48:	509f79fb 	.word	0x509f79fb
 8006b4c:	3fd34413 	.word	0x3fd34413
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	080082e1 	.word	0x080082e1
 8006b58:	3ff80000 	.word	0x3ff80000
 8006b5c:	08008340 	.word	0x08008340
 8006b60:	08008318 	.word	0x08008318
 8006b64:	0800830d 	.word	0x0800830d
 8006b68:	07f1      	lsls	r1, r6, #31
 8006b6a:	d508      	bpl.n	8006b7e <_dtoa_r+0x34e>
 8006b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b74:	f7f9 fd40 	bl	80005f8 <__aeabi_dmul>
 8006b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	1076      	asrs	r6, r6, #1
 8006b80:	3708      	adds	r7, #8
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	d1f0      	bne.n	8006b68 <_dtoa_r+0x338>
 8006b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b8e:	f7f9 fe5d 	bl	800084c <__aeabi_ddiv>
 8006b92:	e9cd 0100 	strd	r0, r1, [sp]
 8006b96:	e01a      	b.n	8006bce <_dtoa_r+0x39e>
 8006b98:	2502      	movs	r5, #2
 8006b9a:	e7a3      	b.n	8006ae4 <_dtoa_r+0x2b4>
 8006b9c:	f000 80a0 	beq.w	8006ce0 <_dtoa_r+0x4b0>
 8006ba0:	f1ca 0600 	rsb	r6, sl, #0
 8006ba4:	4b9f      	ldr	r3, [pc, #636]	; (8006e24 <_dtoa_r+0x5f4>)
 8006ba6:	4fa0      	ldr	r7, [pc, #640]	; (8006e28 <_dtoa_r+0x5f8>)
 8006ba8:	f006 020f 	and.w	r2, r6, #15
 8006bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8006bc0:	1136      	asrs	r6, r6, #4
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2502      	movs	r5, #2
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	d17f      	bne.n	8006cca <_dtoa_r+0x49a>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e1      	bne.n	8006b92 <_dtoa_r+0x362>
 8006bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8087 	beq.w	8006ce4 <_dtoa_r+0x4b4>
 8006bd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b93      	ldr	r3, [pc, #588]	; (8006e2c <_dtoa_r+0x5fc>)
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f7f9 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d07c      	beq.n	8006ce4 <_dtoa_r+0x4b4>
 8006bea:	f1b9 0f00 	cmp.w	r9, #0
 8006bee:	d079      	beq.n	8006ce4 <_dtoa_r+0x4b4>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd35      	ble.n	8006c62 <_dtoa_r+0x432>
 8006bf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	2200      	movs	r2, #0
 8006c00:	4b8b      	ldr	r3, [pc, #556]	; (8006e30 <_dtoa_r+0x600>)
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fcf8 	bl	80005f8 <__aeabi_dmul>
 8006c08:	e9cd 0100 	strd	r0, r1, [sp]
 8006c0c:	9f02      	ldr	r7, [sp, #8]
 8006c0e:	3501      	adds	r5, #1
 8006c10:	4628      	mov	r0, r5
 8006c12:	f7f9 fc87 	bl	8000524 <__aeabi_i2d>
 8006c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4b84      	ldr	r3, [pc, #528]	; (8006e34 <_dtoa_r+0x604>)
 8006c22:	f7f9 fb33 	bl	800028c <__adddf3>
 8006c26:	4605      	mov	r5, r0
 8006c28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	d15d      	bne.n	8006cec <_dtoa_r+0x4bc>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b81      	ldr	r3, [pc, #516]	; (8006e38 <_dtoa_r+0x608>)
 8006c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c38:	f7f9 fb26 	bl	8000288 <__aeabi_dsub>
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4633      	mov	r3, r6
 8006c40:	e9cd 0100 	strd	r0, r1, [sp]
 8006c44:	f7f9 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f040 8288 	bne.w	800715e <_dtoa_r+0x92e>
 8006c4e:	462a      	mov	r2, r5
 8006c50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c58:	f7f9 ff40 	bl	8000adc <__aeabi_dcmplt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f040 827c 	bne.w	800715a <_dtoa_r+0x92a>
 8006c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c66:	e9cd 2300 	strd	r2, r3, [sp]
 8006c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f2c0 8150 	blt.w	8006f12 <_dtoa_r+0x6e2>
 8006c72:	f1ba 0f0e 	cmp.w	sl, #14
 8006c76:	f300 814c 	bgt.w	8006f12 <_dtoa_r+0x6e2>
 8006c7a:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <_dtoa_r+0x5f4>)
 8006c7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c80:	ed93 7b00 	vldr	d7, [r3]
 8006c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c8c:	f280 80d8 	bge.w	8006e40 <_dtoa_r+0x610>
 8006c90:	f1b9 0f00 	cmp.w	r9, #0
 8006c94:	f300 80d4 	bgt.w	8006e40 <_dtoa_r+0x610>
 8006c98:	f040 825e 	bne.w	8007158 <_dtoa_r+0x928>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4b66      	ldr	r3, [pc, #408]	; (8006e38 <_dtoa_r+0x608>)
 8006ca0:	ec51 0b17 	vmov	r0, r1, d7
 8006ca4:	f7f9 fca8 	bl	80005f8 <__aeabi_dmul>
 8006ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cac:	f7f9 ff2a 	bl	8000b04 <__aeabi_dcmpge>
 8006cb0:	464f      	mov	r7, r9
 8006cb2:	464e      	mov	r6, r9
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f040 8234 	bne.w	8007122 <_dtoa_r+0x8f2>
 8006cba:	2331      	movs	r3, #49	; 0x31
 8006cbc:	f10b 0501 	add.w	r5, fp, #1
 8006cc0:	f88b 3000 	strb.w	r3, [fp]
 8006cc4:	f10a 0a01 	add.w	sl, sl, #1
 8006cc8:	e22f      	b.n	800712a <_dtoa_r+0x8fa>
 8006cca:	07f2      	lsls	r2, r6, #31
 8006ccc:	d505      	bpl.n	8006cda <_dtoa_r+0x4aa>
 8006cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd2:	f7f9 fc91 	bl	80005f8 <__aeabi_dmul>
 8006cd6:	3501      	adds	r5, #1
 8006cd8:	2301      	movs	r3, #1
 8006cda:	1076      	asrs	r6, r6, #1
 8006cdc:	3708      	adds	r7, #8
 8006cde:	e772      	b.n	8006bc6 <_dtoa_r+0x396>
 8006ce0:	2502      	movs	r5, #2
 8006ce2:	e774      	b.n	8006bce <_dtoa_r+0x39e>
 8006ce4:	f8cd a020 	str.w	sl, [sp, #32]
 8006ce8:	464f      	mov	r7, r9
 8006cea:	e791      	b.n	8006c10 <_dtoa_r+0x3e0>
 8006cec:	4b4d      	ldr	r3, [pc, #308]	; (8006e24 <_dtoa_r+0x5f4>)
 8006cee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d047      	beq.n	8006d8c <_dtoa_r+0x55c>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	2000      	movs	r0, #0
 8006d02:	494e      	ldr	r1, [pc, #312]	; (8006e3c <_dtoa_r+0x60c>)
 8006d04:	f7f9 fda2 	bl	800084c <__aeabi_ddiv>
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4633      	mov	r3, r6
 8006d0c:	f7f9 fabc 	bl	8000288 <__aeabi_dsub>
 8006d10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d14:	465d      	mov	r5, fp
 8006d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d1a:	f7f9 ff1d 	bl	8000b58 <__aeabi_d2iz>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	f7f9 fc00 	bl	8000524 <__aeabi_i2d>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d2c:	f7f9 faac 	bl	8000288 <__aeabi_dsub>
 8006d30:	3630      	adds	r6, #48	; 0x30
 8006d32:	f805 6b01 	strb.w	r6, [r5], #1
 8006d36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006d3e:	f7f9 fecd 	bl	8000adc <__aeabi_dcmplt>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d163      	bne.n	8006e0e <_dtoa_r+0x5de>
 8006d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	4937      	ldr	r1, [pc, #220]	; (8006e2c <_dtoa_r+0x5fc>)
 8006d4e:	f7f9 fa9b 	bl	8000288 <__aeabi_dsub>
 8006d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d56:	f7f9 fec1 	bl	8000adc <__aeabi_dcmplt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f040 80b7 	bne.w	8006ece <_dtoa_r+0x69e>
 8006d60:	eba5 030b 	sub.w	r3, r5, fp
 8006d64:	429f      	cmp	r7, r3
 8006d66:	f77f af7c 	ble.w	8006c62 <_dtoa_r+0x432>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <_dtoa_r+0x600>)
 8006d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d72:	f7f9 fc41 	bl	80005f8 <__aeabi_dmul>
 8006d76:	2200      	movs	r2, #0
 8006d78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <_dtoa_r+0x600>)
 8006d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	e9cd 0100 	strd	r0, r1, [sp]
 8006d8a:	e7c4      	b.n	8006d16 <_dtoa_r+0x4e6>
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4633      	mov	r3, r6
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d98:	eb0b 0507 	add.w	r5, fp, r7
 8006d9c:	465e      	mov	r6, fp
 8006d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da2:	f7f9 fed9 	bl	8000b58 <__aeabi_d2iz>
 8006da6:	4607      	mov	r7, r0
 8006da8:	f7f9 fbbc 	bl	8000524 <__aeabi_i2d>
 8006dac:	3730      	adds	r7, #48	; 0x30
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db6:	f7f9 fa67 	bl	8000288 <__aeabi_dsub>
 8006dba:	f806 7b01 	strb.w	r7, [r6], #1
 8006dbe:	42ae      	cmp	r6, r5
 8006dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	d126      	bne.n	8006e18 <_dtoa_r+0x5e8>
 8006dca:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <_dtoa_r+0x60c>)
 8006dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd0:	f7f9 fa5c 	bl	800028c <__adddf3>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ddc:	f7f9 fe9c 	bl	8000b18 <__aeabi_dcmpgt>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d174      	bne.n	8006ece <_dtoa_r+0x69e>
 8006de4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006de8:	2000      	movs	r0, #0
 8006dea:	4914      	ldr	r1, [pc, #80]	; (8006e3c <_dtoa_r+0x60c>)
 8006dec:	f7f9 fa4c 	bl	8000288 <__aeabi_dsub>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006df8:	f7f9 fe70 	bl	8000adc <__aeabi_dcmplt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f43f af30 	beq.w	8006c62 <_dtoa_r+0x432>
 8006e02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e06:	2b30      	cmp	r3, #48	; 0x30
 8006e08:	f105 32ff 	add.w	r2, r5, #4294967295
 8006e0c:	d002      	beq.n	8006e14 <_dtoa_r+0x5e4>
 8006e0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006e12:	e04a      	b.n	8006eaa <_dtoa_r+0x67a>
 8006e14:	4615      	mov	r5, r2
 8006e16:	e7f4      	b.n	8006e02 <_dtoa_r+0x5d2>
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <_dtoa_r+0x600>)
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8006e22:	e7bc      	b.n	8006d9e <_dtoa_r+0x56e>
 8006e24:	08008340 	.word	0x08008340
 8006e28:	08008318 	.word	0x08008318
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	40240000 	.word	0x40240000
 8006e34:	401c0000 	.word	0x401c0000
 8006e38:	40140000 	.word	0x40140000
 8006e3c:	3fe00000 	.word	0x3fe00000
 8006e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006e44:	465d      	mov	r5, fp
 8006e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 fcfd 	bl	800084c <__aeabi_ddiv>
 8006e52:	f7f9 fe81 	bl	8000b58 <__aeabi_d2iz>
 8006e56:	4680      	mov	r8, r0
 8006e58:	f7f9 fb64 	bl	8000524 <__aeabi_i2d>
 8006e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006e70:	f7f9 fa0a 	bl	8000288 <__aeabi_dsub>
 8006e74:	f805 6b01 	strb.w	r6, [r5], #1
 8006e78:	eba5 060b 	sub.w	r6, r5, fp
 8006e7c:	45b1      	cmp	r9, r6
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	d139      	bne.n	8006ef8 <_dtoa_r+0x6c8>
 8006e84:	f7f9 fa02 	bl	800028c <__adddf3>
 8006e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	f7f9 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 8006e94:	b9c8      	cbnz	r0, 8006eca <_dtoa_r+0x69a>
 8006e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea2:	b110      	cbz	r0, 8006eaa <_dtoa_r+0x67a>
 8006ea4:	f018 0f01 	tst.w	r8, #1
 8006ea8:	d10f      	bne.n	8006eca <_dtoa_r+0x69a>
 8006eaa:	9904      	ldr	r1, [sp, #16]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 facc 	bl	800744a <_Bfree>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eb6:	702b      	strb	r3, [r5, #0]
 8006eb8:	f10a 0301 	add.w	r3, sl, #1
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8241 	beq.w	8007348 <_dtoa_r+0xb18>
 8006ec6:	601d      	str	r5, [r3, #0]
 8006ec8:	e23e      	b.n	8007348 <_dtoa_r+0xb18>
 8006eca:	f8cd a020 	str.w	sl, [sp, #32]
 8006ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ed2:	2a39      	cmp	r2, #57	; 0x39
 8006ed4:	f105 33ff 	add.w	r3, r5, #4294967295
 8006ed8:	d108      	bne.n	8006eec <_dtoa_r+0x6bc>
 8006eda:	459b      	cmp	fp, r3
 8006edc:	d10a      	bne.n	8006ef4 <_dtoa_r+0x6c4>
 8006ede:	9b08      	ldr	r3, [sp, #32]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	9308      	str	r3, [sp, #32]
 8006ee4:	2330      	movs	r3, #48	; 0x30
 8006ee6:	f88b 3000 	strb.w	r3, [fp]
 8006eea:	465b      	mov	r3, fp
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	3201      	adds	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e78c      	b.n	8006e0e <_dtoa_r+0x5de>
 8006ef4:	461d      	mov	r5, r3
 8006ef6:	e7ea      	b.n	8006ece <_dtoa_r+0x69e>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b9b      	ldr	r3, [pc, #620]	; (8007168 <_dtoa_r+0x938>)
 8006efc:	f7f9 fb7c 	bl	80005f8 <__aeabi_dmul>
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	f7f9 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d09a      	beq.n	8006e46 <_dtoa_r+0x616>
 8006f10:	e7cb      	b.n	8006eaa <_dtoa_r+0x67a>
 8006f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	f000 808b 	beq.w	8007030 <_dtoa_r+0x800>
 8006f1a:	9a06      	ldr	r2, [sp, #24]
 8006f1c:	2a01      	cmp	r2, #1
 8006f1e:	dc6e      	bgt.n	8006ffe <_dtoa_r+0x7ce>
 8006f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d067      	beq.n	8006ff6 <_dtoa_r+0x7c6>
 8006f26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f2a:	9f07      	ldr	r7, [sp, #28]
 8006f2c:	9d05      	ldr	r5, [sp, #20]
 8006f2e:	9a05      	ldr	r2, [sp, #20]
 8006f30:	2101      	movs	r1, #1
 8006f32:	441a      	add	r2, r3
 8006f34:	4620      	mov	r0, r4
 8006f36:	9205      	str	r2, [sp, #20]
 8006f38:	4498      	add	r8, r3
 8006f3a:	f000 fb26 	bl	800758a <__i2b>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	dd0c      	ble.n	8006f5e <_dtoa_r+0x72e>
 8006f44:	f1b8 0f00 	cmp.w	r8, #0
 8006f48:	dd09      	ble.n	8006f5e <_dtoa_r+0x72e>
 8006f4a:	4545      	cmp	r5, r8
 8006f4c:	9a05      	ldr	r2, [sp, #20]
 8006f4e:	462b      	mov	r3, r5
 8006f50:	bfa8      	it	ge
 8006f52:	4643      	movge	r3, r8
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	9205      	str	r2, [sp, #20]
 8006f58:	1aed      	subs	r5, r5, r3
 8006f5a:	eba8 0803 	sub.w	r8, r8, r3
 8006f5e:	9b07      	ldr	r3, [sp, #28]
 8006f60:	b1eb      	cbz	r3, 8006f9e <_dtoa_r+0x76e>
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d067      	beq.n	8007038 <_dtoa_r+0x808>
 8006f68:	b18f      	cbz	r7, 8006f8e <_dtoa_r+0x75e>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fbaa 	bl	80076c8 <__pow5mult>
 8006f74:	9a04      	ldr	r2, [sp, #16]
 8006f76:	4601      	mov	r1, r0
 8006f78:	4606      	mov	r6, r0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fb0e 	bl	800759c <__multiply>
 8006f80:	9904      	ldr	r1, [sp, #16]
 8006f82:	9008      	str	r0, [sp, #32]
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fa60 	bl	800744a <_Bfree>
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	9b07      	ldr	r3, [sp, #28]
 8006f90:	1bda      	subs	r2, r3, r7
 8006f92:	d004      	beq.n	8006f9e <_dtoa_r+0x76e>
 8006f94:	9904      	ldr	r1, [sp, #16]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fb96 	bl	80076c8 <__pow5mult>
 8006f9c:	9004      	str	r0, [sp, #16]
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 faf2 	bl	800758a <__i2b>
 8006fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa8:	4607      	mov	r7, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 81d0 	beq.w	8007350 <_dtoa_r+0xb20>
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fb87 	bl	80076c8 <__pow5mult>
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	dc40      	bgt.n	8007044 <_dtoa_r+0x814>
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d139      	bne.n	800703c <_dtoa_r+0x80c>
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d136      	bne.n	8007040 <_dtoa_r+0x810>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	0d1b      	lsrs	r3, r3, #20
 8006fda:	051b      	lsls	r3, r3, #20
 8006fdc:	b12b      	cbz	r3, 8006fea <_dtoa_r+0x7ba>
 8006fde:	9b05      	ldr	r3, [sp, #20]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	2301      	movs	r3, #1
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d12a      	bne.n	8007048 <_dtoa_r+0x818>
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e030      	b.n	8007058 <_dtoa_r+0x828>
 8006ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ff8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ffc:	e795      	b.n	8006f2a <_dtoa_r+0x6fa>
 8006ffe:	9b07      	ldr	r3, [sp, #28]
 8007000:	f109 37ff 	add.w	r7, r9, #4294967295
 8007004:	42bb      	cmp	r3, r7
 8007006:	bfbf      	itttt	lt
 8007008:	9b07      	ldrlt	r3, [sp, #28]
 800700a:	9707      	strlt	r7, [sp, #28]
 800700c:	1afa      	sublt	r2, r7, r3
 800700e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007010:	bfbb      	ittet	lt
 8007012:	189b      	addlt	r3, r3, r2
 8007014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007016:	1bdf      	subge	r7, r3, r7
 8007018:	2700      	movlt	r7, #0
 800701a:	f1b9 0f00 	cmp.w	r9, #0
 800701e:	bfb5      	itete	lt
 8007020:	9b05      	ldrlt	r3, [sp, #20]
 8007022:	9d05      	ldrge	r5, [sp, #20]
 8007024:	eba3 0509 	sublt.w	r5, r3, r9
 8007028:	464b      	movge	r3, r9
 800702a:	bfb8      	it	lt
 800702c:	2300      	movlt	r3, #0
 800702e:	e77e      	b.n	8006f2e <_dtoa_r+0x6fe>
 8007030:	9f07      	ldr	r7, [sp, #28]
 8007032:	9d05      	ldr	r5, [sp, #20]
 8007034:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007036:	e783      	b.n	8006f40 <_dtoa_r+0x710>
 8007038:	9a07      	ldr	r2, [sp, #28]
 800703a:	e7ab      	b.n	8006f94 <_dtoa_r+0x764>
 800703c:	2300      	movs	r3, #0
 800703e:	e7d4      	b.n	8006fea <_dtoa_r+0x7ba>
 8007040:	9b00      	ldr	r3, [sp, #0]
 8007042:	e7d2      	b.n	8006fea <_dtoa_r+0x7ba>
 8007044:	2300      	movs	r3, #0
 8007046:	9307      	str	r3, [sp, #28]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800704e:	6918      	ldr	r0, [r3, #16]
 8007050:	f000 fa4d 	bl	80074ee <__hi0bits>
 8007054:	f1c0 0020 	rsb	r0, r0, #32
 8007058:	4440      	add	r0, r8
 800705a:	f010 001f 	ands.w	r0, r0, #31
 800705e:	d047      	beq.n	80070f0 <_dtoa_r+0x8c0>
 8007060:	f1c0 0320 	rsb	r3, r0, #32
 8007064:	2b04      	cmp	r3, #4
 8007066:	dd3b      	ble.n	80070e0 <_dtoa_r+0x8b0>
 8007068:	9b05      	ldr	r3, [sp, #20]
 800706a:	f1c0 001c 	rsb	r0, r0, #28
 800706e:	4403      	add	r3, r0
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	4405      	add	r5, r0
 8007074:	4480      	add	r8, r0
 8007076:	9b05      	ldr	r3, [sp, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd05      	ble.n	8007088 <_dtoa_r+0x858>
 800707c:	461a      	mov	r2, r3
 800707e:	9904      	ldr	r1, [sp, #16]
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fb6f 	bl	8007764 <__lshift>
 8007086:	9004      	str	r0, [sp, #16]
 8007088:	f1b8 0f00 	cmp.w	r8, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x86a>
 800708e:	4639      	mov	r1, r7
 8007090:	4642      	mov	r2, r8
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fb66 	bl	8007764 <__lshift>
 8007098:	4607      	mov	r7, r0
 800709a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709c:	b353      	cbz	r3, 80070f4 <_dtoa_r+0x8c4>
 800709e:	4639      	mov	r1, r7
 80070a0:	9804      	ldr	r0, [sp, #16]
 80070a2:	f000 fbb3 	bl	800780c <__mcmp>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	da24      	bge.n	80070f4 <_dtoa_r+0x8c4>
 80070aa:	2300      	movs	r3, #0
 80070ac:	220a      	movs	r2, #10
 80070ae:	9904      	ldr	r1, [sp, #16]
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 f9e1 	bl	8007478 <__multadd>
 80070b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b8:	9004      	str	r0, [sp, #16]
 80070ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 814d 	beq.w	800735e <_dtoa_r+0xb2e>
 80070c4:	2300      	movs	r3, #0
 80070c6:	4631      	mov	r1, r6
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f9d4 	bl	8007478 <__multadd>
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	dc4f      	bgt.n	8007178 <_dtoa_r+0x948>
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	dd4c      	ble.n	8007178 <_dtoa_r+0x948>
 80070de:	e011      	b.n	8007104 <_dtoa_r+0x8d4>
 80070e0:	d0c9      	beq.n	8007076 <_dtoa_r+0x846>
 80070e2:	9a05      	ldr	r2, [sp, #20]
 80070e4:	331c      	adds	r3, #28
 80070e6:	441a      	add	r2, r3
 80070e8:	9205      	str	r2, [sp, #20]
 80070ea:	441d      	add	r5, r3
 80070ec:	4498      	add	r8, r3
 80070ee:	e7c2      	b.n	8007076 <_dtoa_r+0x846>
 80070f0:	4603      	mov	r3, r0
 80070f2:	e7f6      	b.n	80070e2 <_dtoa_r+0x8b2>
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	dc38      	bgt.n	800716c <_dtoa_r+0x93c>
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	dd35      	ble.n	800716c <_dtoa_r+0x93c>
 8007100:	f8cd 9008 	str.w	r9, [sp, #8]
 8007104:	9b02      	ldr	r3, [sp, #8]
 8007106:	b963      	cbnz	r3, 8007122 <_dtoa_r+0x8f2>
 8007108:	4639      	mov	r1, r7
 800710a:	2205      	movs	r2, #5
 800710c:	4620      	mov	r0, r4
 800710e:	f000 f9b3 	bl	8007478 <__multadd>
 8007112:	4601      	mov	r1, r0
 8007114:	4607      	mov	r7, r0
 8007116:	9804      	ldr	r0, [sp, #16]
 8007118:	f000 fb78 	bl	800780c <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	f73f adcc 	bgt.w	8006cba <_dtoa_r+0x48a>
 8007122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007124:	465d      	mov	r5, fp
 8007126:	ea6f 0a03 	mvn.w	sl, r3
 800712a:	f04f 0900 	mov.w	r9, #0
 800712e:	4639      	mov	r1, r7
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f98a 	bl	800744a <_Bfree>
 8007136:	2e00      	cmp	r6, #0
 8007138:	f43f aeb7 	beq.w	8006eaa <_dtoa_r+0x67a>
 800713c:	f1b9 0f00 	cmp.w	r9, #0
 8007140:	d005      	beq.n	800714e <_dtoa_r+0x91e>
 8007142:	45b1      	cmp	r9, r6
 8007144:	d003      	beq.n	800714e <_dtoa_r+0x91e>
 8007146:	4649      	mov	r1, r9
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f97e 	bl	800744a <_Bfree>
 800714e:	4631      	mov	r1, r6
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f97a 	bl	800744a <_Bfree>
 8007156:	e6a8      	b.n	8006eaa <_dtoa_r+0x67a>
 8007158:	2700      	movs	r7, #0
 800715a:	463e      	mov	r6, r7
 800715c:	e7e1      	b.n	8007122 <_dtoa_r+0x8f2>
 800715e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007162:	463e      	mov	r6, r7
 8007164:	e5a9      	b.n	8006cba <_dtoa_r+0x48a>
 8007166:	bf00      	nop
 8007168:	40240000 	.word	0x40240000
 800716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80fa 	beq.w	800736c <_dtoa_r+0xb3c>
 8007178:	2d00      	cmp	r5, #0
 800717a:	dd05      	ble.n	8007188 <_dtoa_r+0x958>
 800717c:	4631      	mov	r1, r6
 800717e:	462a      	mov	r2, r5
 8007180:	4620      	mov	r0, r4
 8007182:	f000 faef 	bl	8007764 <__lshift>
 8007186:	4606      	mov	r6, r0
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d04c      	beq.n	8007228 <_dtoa_r+0x9f8>
 800718e:	6871      	ldr	r1, [r6, #4]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f926 	bl	80073e2 <_Balloc>
 8007196:	6932      	ldr	r2, [r6, #16]
 8007198:	3202      	adds	r2, #2
 800719a:	4605      	mov	r5, r0
 800719c:	0092      	lsls	r2, r2, #2
 800719e:	f106 010c 	add.w	r1, r6, #12
 80071a2:	300c      	adds	r0, #12
 80071a4:	f000 f912 	bl	80073cc <memcpy>
 80071a8:	2201      	movs	r2, #1
 80071aa:	4629      	mov	r1, r5
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fad9 	bl	8007764 <__lshift>
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	f8cd b014 	str.w	fp, [sp, #20]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	46b1      	mov	r9, r6
 80071be:	9307      	str	r3, [sp, #28]
 80071c0:	4606      	mov	r6, r0
 80071c2:	4639      	mov	r1, r7
 80071c4:	9804      	ldr	r0, [sp, #16]
 80071c6:	f7ff faa7 	bl	8006718 <quorem>
 80071ca:	4649      	mov	r1, r9
 80071cc:	4605      	mov	r5, r0
 80071ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80071d2:	9804      	ldr	r0, [sp, #16]
 80071d4:	f000 fb1a 	bl	800780c <__mcmp>
 80071d8:	4632      	mov	r2, r6
 80071da:	9000      	str	r0, [sp, #0]
 80071dc:	4639      	mov	r1, r7
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 fb2e 	bl	8007840 <__mdiff>
 80071e4:	68c3      	ldr	r3, [r0, #12]
 80071e6:	4602      	mov	r2, r0
 80071e8:	bb03      	cbnz	r3, 800722c <_dtoa_r+0x9fc>
 80071ea:	4601      	mov	r1, r0
 80071ec:	9008      	str	r0, [sp, #32]
 80071ee:	9804      	ldr	r0, [sp, #16]
 80071f0:	f000 fb0c 	bl	800780c <__mcmp>
 80071f4:	9a08      	ldr	r2, [sp, #32]
 80071f6:	4603      	mov	r3, r0
 80071f8:	4611      	mov	r1, r2
 80071fa:	4620      	mov	r0, r4
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	f000 f924 	bl	800744a <_Bfree>
 8007202:	9b08      	ldr	r3, [sp, #32]
 8007204:	b9a3      	cbnz	r3, 8007230 <_dtoa_r+0xa00>
 8007206:	9a06      	ldr	r2, [sp, #24]
 8007208:	b992      	cbnz	r2, 8007230 <_dtoa_r+0xa00>
 800720a:	9a07      	ldr	r2, [sp, #28]
 800720c:	b982      	cbnz	r2, 8007230 <_dtoa_r+0xa00>
 800720e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007212:	d029      	beq.n	8007268 <_dtoa_r+0xa38>
 8007214:	9b00      	ldr	r3, [sp, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd01      	ble.n	800721e <_dtoa_r+0x9ee>
 800721a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800721e:	9b05      	ldr	r3, [sp, #20]
 8007220:	1c5d      	adds	r5, r3, #1
 8007222:	f883 8000 	strb.w	r8, [r3]
 8007226:	e782      	b.n	800712e <_dtoa_r+0x8fe>
 8007228:	4630      	mov	r0, r6
 800722a:	e7c2      	b.n	80071b2 <_dtoa_r+0x982>
 800722c:	2301      	movs	r3, #1
 800722e:	e7e3      	b.n	80071f8 <_dtoa_r+0x9c8>
 8007230:	9a00      	ldr	r2, [sp, #0]
 8007232:	2a00      	cmp	r2, #0
 8007234:	db04      	blt.n	8007240 <_dtoa_r+0xa10>
 8007236:	d125      	bne.n	8007284 <_dtoa_r+0xa54>
 8007238:	9a06      	ldr	r2, [sp, #24]
 800723a:	bb1a      	cbnz	r2, 8007284 <_dtoa_r+0xa54>
 800723c:	9a07      	ldr	r2, [sp, #28]
 800723e:	bb0a      	cbnz	r2, 8007284 <_dtoa_r+0xa54>
 8007240:	2b00      	cmp	r3, #0
 8007242:	ddec      	ble.n	800721e <_dtoa_r+0x9ee>
 8007244:	2201      	movs	r2, #1
 8007246:	9904      	ldr	r1, [sp, #16]
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fa8b 	bl	8007764 <__lshift>
 800724e:	4639      	mov	r1, r7
 8007250:	9004      	str	r0, [sp, #16]
 8007252:	f000 fadb 	bl	800780c <__mcmp>
 8007256:	2800      	cmp	r0, #0
 8007258:	dc03      	bgt.n	8007262 <_dtoa_r+0xa32>
 800725a:	d1e0      	bne.n	800721e <_dtoa_r+0x9ee>
 800725c:	f018 0f01 	tst.w	r8, #1
 8007260:	d0dd      	beq.n	800721e <_dtoa_r+0x9ee>
 8007262:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007266:	d1d8      	bne.n	800721a <_dtoa_r+0x9ea>
 8007268:	9b05      	ldr	r3, [sp, #20]
 800726a:	9a05      	ldr	r2, [sp, #20]
 800726c:	1c5d      	adds	r5, r3, #1
 800726e:	2339      	movs	r3, #57	; 0x39
 8007270:	7013      	strb	r3, [r2, #0]
 8007272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007276:	2b39      	cmp	r3, #57	; 0x39
 8007278:	f105 32ff 	add.w	r2, r5, #4294967295
 800727c:	d04f      	beq.n	800731e <_dtoa_r+0xaee>
 800727e:	3301      	adds	r3, #1
 8007280:	7013      	strb	r3, [r2, #0]
 8007282:	e754      	b.n	800712e <_dtoa_r+0x8fe>
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f102 0501 	add.w	r5, r2, #1
 800728c:	dd06      	ble.n	800729c <_dtoa_r+0xa6c>
 800728e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007292:	d0e9      	beq.n	8007268 <_dtoa_r+0xa38>
 8007294:	f108 0801 	add.w	r8, r8, #1
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	e7c2      	b.n	8007222 <_dtoa_r+0x9f2>
 800729c:	9a02      	ldr	r2, [sp, #8]
 800729e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80072a2:	eba5 030b 	sub.w	r3, r5, fp
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d021      	beq.n	80072ee <_dtoa_r+0xabe>
 80072aa:	2300      	movs	r3, #0
 80072ac:	220a      	movs	r2, #10
 80072ae:	9904      	ldr	r1, [sp, #16]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f8e1 	bl	8007478 <__multadd>
 80072b6:	45b1      	cmp	r9, r6
 80072b8:	9004      	str	r0, [sp, #16]
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	f04f 020a 	mov.w	r2, #10
 80072c2:	4649      	mov	r1, r9
 80072c4:	4620      	mov	r0, r4
 80072c6:	d105      	bne.n	80072d4 <_dtoa_r+0xaa4>
 80072c8:	f000 f8d6 	bl	8007478 <__multadd>
 80072cc:	4681      	mov	r9, r0
 80072ce:	4606      	mov	r6, r0
 80072d0:	9505      	str	r5, [sp, #20]
 80072d2:	e776      	b.n	80071c2 <_dtoa_r+0x992>
 80072d4:	f000 f8d0 	bl	8007478 <__multadd>
 80072d8:	4631      	mov	r1, r6
 80072da:	4681      	mov	r9, r0
 80072dc:	2300      	movs	r3, #0
 80072de:	220a      	movs	r2, #10
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f8c9 	bl	8007478 <__multadd>
 80072e6:	4606      	mov	r6, r0
 80072e8:	e7f2      	b.n	80072d0 <_dtoa_r+0xaa0>
 80072ea:	f04f 0900 	mov.w	r9, #0
 80072ee:	2201      	movs	r2, #1
 80072f0:	9904      	ldr	r1, [sp, #16]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fa36 	bl	8007764 <__lshift>
 80072f8:	4639      	mov	r1, r7
 80072fa:	9004      	str	r0, [sp, #16]
 80072fc:	f000 fa86 	bl	800780c <__mcmp>
 8007300:	2800      	cmp	r0, #0
 8007302:	dcb6      	bgt.n	8007272 <_dtoa_r+0xa42>
 8007304:	d102      	bne.n	800730c <_dtoa_r+0xadc>
 8007306:	f018 0f01 	tst.w	r8, #1
 800730a:	d1b2      	bne.n	8007272 <_dtoa_r+0xa42>
 800730c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007310:	2b30      	cmp	r3, #48	; 0x30
 8007312:	f105 32ff 	add.w	r2, r5, #4294967295
 8007316:	f47f af0a 	bne.w	800712e <_dtoa_r+0x8fe>
 800731a:	4615      	mov	r5, r2
 800731c:	e7f6      	b.n	800730c <_dtoa_r+0xadc>
 800731e:	4593      	cmp	fp, r2
 8007320:	d105      	bne.n	800732e <_dtoa_r+0xafe>
 8007322:	2331      	movs	r3, #49	; 0x31
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	f88b 3000 	strb.w	r3, [fp]
 800732c:	e6ff      	b.n	800712e <_dtoa_r+0x8fe>
 800732e:	4615      	mov	r5, r2
 8007330:	e79f      	b.n	8007272 <_dtoa_r+0xa42>
 8007332:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007398 <_dtoa_r+0xb68>
 8007336:	e007      	b.n	8007348 <_dtoa_r+0xb18>
 8007338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800733a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800739c <_dtoa_r+0xb6c>
 800733e:	b11b      	cbz	r3, 8007348 <_dtoa_r+0xb18>
 8007340:	f10b 0308 	add.w	r3, fp, #8
 8007344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	4658      	mov	r0, fp
 800734a:	b017      	add	sp, #92	; 0x5c
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	2b01      	cmp	r3, #1
 8007354:	f77f ae35 	ble.w	8006fc2 <_dtoa_r+0x792>
 8007358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800735a:	9307      	str	r3, [sp, #28]
 800735c:	e649      	b.n	8006ff2 <_dtoa_r+0x7c2>
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc03      	bgt.n	800736c <_dtoa_r+0xb3c>
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	2b02      	cmp	r3, #2
 8007368:	f73f aecc 	bgt.w	8007104 <_dtoa_r+0x8d4>
 800736c:	465d      	mov	r5, fp
 800736e:	4639      	mov	r1, r7
 8007370:	9804      	ldr	r0, [sp, #16]
 8007372:	f7ff f9d1 	bl	8006718 <quorem>
 8007376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800737a:	f805 8b01 	strb.w	r8, [r5], #1
 800737e:	9a02      	ldr	r2, [sp, #8]
 8007380:	eba5 030b 	sub.w	r3, r5, fp
 8007384:	429a      	cmp	r2, r3
 8007386:	ddb0      	ble.n	80072ea <_dtoa_r+0xaba>
 8007388:	2300      	movs	r3, #0
 800738a:	220a      	movs	r2, #10
 800738c:	9904      	ldr	r1, [sp, #16]
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f872 	bl	8007478 <__multadd>
 8007394:	9004      	str	r0, [sp, #16]
 8007396:	e7ea      	b.n	800736e <_dtoa_r+0xb3e>
 8007398:	080082e0 	.word	0x080082e0
 800739c:	08008304 	.word	0x08008304

080073a0 <_localeconv_r>:
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <_localeconv_r+0x14>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a18      	ldr	r0, [r3, #32]
 80073a6:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <_localeconv_r+0x18>)
 80073a8:	2800      	cmp	r0, #0
 80073aa:	bf08      	it	eq
 80073ac:	4618      	moveq	r0, r3
 80073ae:	30f0      	adds	r0, #240	; 0xf0
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000200 	.word	0x20000200
 80073b8:	20000264 	.word	0x20000264

080073bc <malloc>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <malloc+0xc>)
 80073be:	4601      	mov	r1, r0
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f000 bb45 	b.w	8007a50 <_malloc_r>
 80073c6:	bf00      	nop
 80073c8:	20000200 	.word	0x20000200

080073cc <memcpy>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	1e43      	subs	r3, r0, #1
 80073d0:	440a      	add	r2, r1
 80073d2:	4291      	cmp	r1, r2
 80073d4:	d100      	bne.n	80073d8 <memcpy+0xc>
 80073d6:	bd10      	pop	{r4, pc}
 80073d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e0:	e7f7      	b.n	80073d2 <memcpy+0x6>

080073e2 <_Balloc>:
 80073e2:	b570      	push	{r4, r5, r6, lr}
 80073e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073e6:	4604      	mov	r4, r0
 80073e8:	460e      	mov	r6, r1
 80073ea:	b93d      	cbnz	r5, 80073fc <_Balloc+0x1a>
 80073ec:	2010      	movs	r0, #16
 80073ee:	f7ff ffe5 	bl	80073bc <malloc>
 80073f2:	6260      	str	r0, [r4, #36]	; 0x24
 80073f4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073f8:	6005      	str	r5, [r0, #0]
 80073fa:	60c5      	str	r5, [r0, #12]
 80073fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80073fe:	68eb      	ldr	r3, [r5, #12]
 8007400:	b183      	cbz	r3, 8007424 <_Balloc+0x42>
 8007402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800740a:	b9b8      	cbnz	r0, 800743c <_Balloc+0x5a>
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f506 	lsl.w	r5, r1, r6
 8007412:	1d6a      	adds	r2, r5, #5
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	4620      	mov	r0, r4
 8007418:	f000 fabe 	bl	8007998 <_calloc_r>
 800741c:	b160      	cbz	r0, 8007438 <_Balloc+0x56>
 800741e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007422:	e00e      	b.n	8007442 <_Balloc+0x60>
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	2104      	movs	r1, #4
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fab5 	bl	8007998 <_calloc_r>
 800742e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007430:	60e8      	str	r0, [r5, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <_Balloc+0x20>
 8007438:	2000      	movs	r0, #0
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	6802      	ldr	r2, [r0, #0]
 800743e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007442:	2300      	movs	r3, #0
 8007444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007448:	e7f7      	b.n	800743a <_Balloc+0x58>

0800744a <_Bfree>:
 800744a:	b570      	push	{r4, r5, r6, lr}
 800744c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800744e:	4606      	mov	r6, r0
 8007450:	460d      	mov	r5, r1
 8007452:	b93c      	cbnz	r4, 8007464 <_Bfree+0x1a>
 8007454:	2010      	movs	r0, #16
 8007456:	f7ff ffb1 	bl	80073bc <malloc>
 800745a:	6270      	str	r0, [r6, #36]	; 0x24
 800745c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007460:	6004      	str	r4, [r0, #0]
 8007462:	60c4      	str	r4, [r0, #12]
 8007464:	b13d      	cbz	r5, 8007476 <_Bfree+0x2c>
 8007466:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007468:	686a      	ldr	r2, [r5, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007470:	6029      	str	r1, [r5, #0]
 8007472:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007476:	bd70      	pop	{r4, r5, r6, pc}

08007478 <__multadd>:
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	690d      	ldr	r5, [r1, #16]
 800747e:	461f      	mov	r7, r3
 8007480:	4606      	mov	r6, r0
 8007482:	460c      	mov	r4, r1
 8007484:	f101 0c14 	add.w	ip, r1, #20
 8007488:	2300      	movs	r3, #0
 800748a:	f8dc 0000 	ldr.w	r0, [ip]
 800748e:	b281      	uxth	r1, r0
 8007490:	fb02 7101 	mla	r1, r2, r1, r7
 8007494:	0c0f      	lsrs	r7, r1, #16
 8007496:	0c00      	lsrs	r0, r0, #16
 8007498:	fb02 7000 	mla	r0, r2, r0, r7
 800749c:	b289      	uxth	r1, r1
 800749e:	3301      	adds	r3, #1
 80074a0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80074a4:	429d      	cmp	r5, r3
 80074a6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80074aa:	f84c 1b04 	str.w	r1, [ip], #4
 80074ae:	dcec      	bgt.n	800748a <__multadd+0x12>
 80074b0:	b1d7      	cbz	r7, 80074e8 <__multadd+0x70>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	dc12      	bgt.n	80074de <__multadd+0x66>
 80074b8:	6861      	ldr	r1, [r4, #4]
 80074ba:	4630      	mov	r0, r6
 80074bc:	3101      	adds	r1, #1
 80074be:	f7ff ff90 	bl	80073e2 <_Balloc>
 80074c2:	6922      	ldr	r2, [r4, #16]
 80074c4:	3202      	adds	r2, #2
 80074c6:	f104 010c 	add.w	r1, r4, #12
 80074ca:	4680      	mov	r8, r0
 80074cc:	0092      	lsls	r2, r2, #2
 80074ce:	300c      	adds	r0, #12
 80074d0:	f7ff ff7c 	bl	80073cc <memcpy>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ffb7 	bl	800744a <_Bfree>
 80074dc:	4644      	mov	r4, r8
 80074de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074e2:	3501      	adds	r5, #1
 80074e4:	615f      	str	r7, [r3, #20]
 80074e6:	6125      	str	r5, [r4, #16]
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074ee <__hi0bits>:
 80074ee:	0c02      	lsrs	r2, r0, #16
 80074f0:	0412      	lsls	r2, r2, #16
 80074f2:	4603      	mov	r3, r0
 80074f4:	b9b2      	cbnz	r2, 8007524 <__hi0bits+0x36>
 80074f6:	0403      	lsls	r3, r0, #16
 80074f8:	2010      	movs	r0, #16
 80074fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80074fe:	bf04      	itt	eq
 8007500:	021b      	lsleq	r3, r3, #8
 8007502:	3008      	addeq	r0, #8
 8007504:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007508:	bf04      	itt	eq
 800750a:	011b      	lsleq	r3, r3, #4
 800750c:	3004      	addeq	r0, #4
 800750e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007512:	bf04      	itt	eq
 8007514:	009b      	lsleq	r3, r3, #2
 8007516:	3002      	addeq	r0, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	db06      	blt.n	800752a <__hi0bits+0x3c>
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	d503      	bpl.n	8007528 <__hi0bits+0x3a>
 8007520:	3001      	adds	r0, #1
 8007522:	4770      	bx	lr
 8007524:	2000      	movs	r0, #0
 8007526:	e7e8      	b.n	80074fa <__hi0bits+0xc>
 8007528:	2020      	movs	r0, #32
 800752a:	4770      	bx	lr

0800752c <__lo0bits>:
 800752c:	6803      	ldr	r3, [r0, #0]
 800752e:	f013 0207 	ands.w	r2, r3, #7
 8007532:	4601      	mov	r1, r0
 8007534:	d00b      	beq.n	800754e <__lo0bits+0x22>
 8007536:	07da      	lsls	r2, r3, #31
 8007538:	d423      	bmi.n	8007582 <__lo0bits+0x56>
 800753a:	0798      	lsls	r0, r3, #30
 800753c:	bf49      	itett	mi
 800753e:	085b      	lsrmi	r3, r3, #1
 8007540:	089b      	lsrpl	r3, r3, #2
 8007542:	2001      	movmi	r0, #1
 8007544:	600b      	strmi	r3, [r1, #0]
 8007546:	bf5c      	itt	pl
 8007548:	600b      	strpl	r3, [r1, #0]
 800754a:	2002      	movpl	r0, #2
 800754c:	4770      	bx	lr
 800754e:	b298      	uxth	r0, r3
 8007550:	b9a8      	cbnz	r0, 800757e <__lo0bits+0x52>
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	2010      	movs	r0, #16
 8007556:	f013 0fff 	tst.w	r3, #255	; 0xff
 800755a:	bf04      	itt	eq
 800755c:	0a1b      	lsreq	r3, r3, #8
 800755e:	3008      	addeq	r0, #8
 8007560:	071a      	lsls	r2, r3, #28
 8007562:	bf04      	itt	eq
 8007564:	091b      	lsreq	r3, r3, #4
 8007566:	3004      	addeq	r0, #4
 8007568:	079a      	lsls	r2, r3, #30
 800756a:	bf04      	itt	eq
 800756c:	089b      	lsreq	r3, r3, #2
 800756e:	3002      	addeq	r0, #2
 8007570:	07da      	lsls	r2, r3, #31
 8007572:	d402      	bmi.n	800757a <__lo0bits+0x4e>
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	d006      	beq.n	8007586 <__lo0bits+0x5a>
 8007578:	3001      	adds	r0, #1
 800757a:	600b      	str	r3, [r1, #0]
 800757c:	4770      	bx	lr
 800757e:	4610      	mov	r0, r2
 8007580:	e7e9      	b.n	8007556 <__lo0bits+0x2a>
 8007582:	2000      	movs	r0, #0
 8007584:	4770      	bx	lr
 8007586:	2020      	movs	r0, #32
 8007588:	4770      	bx	lr

0800758a <__i2b>:
 800758a:	b510      	push	{r4, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	2101      	movs	r1, #1
 8007590:	f7ff ff27 	bl	80073e2 <_Balloc>
 8007594:	2201      	movs	r2, #1
 8007596:	6144      	str	r4, [r0, #20]
 8007598:	6102      	str	r2, [r0, #16]
 800759a:	bd10      	pop	{r4, pc}

0800759c <__multiply>:
 800759c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	4614      	mov	r4, r2
 80075a2:	690a      	ldr	r2, [r1, #16]
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bfb8      	it	lt
 80075aa:	460b      	movlt	r3, r1
 80075ac:	4688      	mov	r8, r1
 80075ae:	bfbc      	itt	lt
 80075b0:	46a0      	movlt	r8, r4
 80075b2:	461c      	movlt	r4, r3
 80075b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80075bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075c4:	eb07 0609 	add.w	r6, r7, r9
 80075c8:	42b3      	cmp	r3, r6
 80075ca:	bfb8      	it	lt
 80075cc:	3101      	addlt	r1, #1
 80075ce:	f7ff ff08 	bl	80073e2 <_Balloc>
 80075d2:	f100 0514 	add.w	r5, r0, #20
 80075d6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80075da:	462b      	mov	r3, r5
 80075dc:	2200      	movs	r2, #0
 80075de:	4573      	cmp	r3, lr
 80075e0:	d316      	bcc.n	8007610 <__multiply+0x74>
 80075e2:	f104 0214 	add.w	r2, r4, #20
 80075e6:	f108 0114 	add.w	r1, r8, #20
 80075ea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80075ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	9b00      	ldr	r3, [sp, #0]
 80075f6:	9201      	str	r2, [sp, #4]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d80c      	bhi.n	8007616 <__multiply+0x7a>
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	dd03      	ble.n	8007608 <__multiply+0x6c>
 8007600:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007604:	2b00      	cmp	r3, #0
 8007606:	d05d      	beq.n	80076c4 <__multiply+0x128>
 8007608:	6106      	str	r6, [r0, #16]
 800760a:	b003      	add	sp, #12
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	f843 2b04 	str.w	r2, [r3], #4
 8007614:	e7e3      	b.n	80075de <__multiply+0x42>
 8007616:	f8b2 b000 	ldrh.w	fp, [r2]
 800761a:	f1bb 0f00 	cmp.w	fp, #0
 800761e:	d023      	beq.n	8007668 <__multiply+0xcc>
 8007620:	4689      	mov	r9, r1
 8007622:	46ac      	mov	ip, r5
 8007624:	f04f 0800 	mov.w	r8, #0
 8007628:	f859 4b04 	ldr.w	r4, [r9], #4
 800762c:	f8dc a000 	ldr.w	sl, [ip]
 8007630:	b2a3      	uxth	r3, r4
 8007632:	fa1f fa8a 	uxth.w	sl, sl
 8007636:	fb0b a303 	mla	r3, fp, r3, sl
 800763a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800763e:	f8dc 4000 	ldr.w	r4, [ip]
 8007642:	4443      	add	r3, r8
 8007644:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007648:	fb0b 840a 	mla	r4, fp, sl, r8
 800764c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007650:	46e2      	mov	sl, ip
 8007652:	b29b      	uxth	r3, r3
 8007654:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007658:	454f      	cmp	r7, r9
 800765a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800765e:	f84a 3b04 	str.w	r3, [sl], #4
 8007662:	d82b      	bhi.n	80076bc <__multiply+0x120>
 8007664:	f8cc 8004 	str.w	r8, [ip, #4]
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800766e:	3204      	adds	r2, #4
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	d020      	beq.n	80076b8 <__multiply+0x11c>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	4689      	mov	r9, r1
 800767a:	46a8      	mov	r8, r5
 800767c:	f04f 0b00 	mov.w	fp, #0
 8007680:	f8b9 c000 	ldrh.w	ip, [r9]
 8007684:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007688:	fb0a 440c 	mla	r4, sl, ip, r4
 800768c:	445c      	add	r4, fp
 800768e:	46c4      	mov	ip, r8
 8007690:	b29b      	uxth	r3, r3
 8007692:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007696:	f84c 3b04 	str.w	r3, [ip], #4
 800769a:	f859 3b04 	ldr.w	r3, [r9], #4
 800769e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	fb0a b303 	mla	r3, sl, r3, fp
 80076a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80076ac:	454f      	cmp	r7, r9
 80076ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80076b2:	d805      	bhi.n	80076c0 <__multiply+0x124>
 80076b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80076b8:	3504      	adds	r5, #4
 80076ba:	e79b      	b.n	80075f4 <__multiply+0x58>
 80076bc:	46d4      	mov	ip, sl
 80076be:	e7b3      	b.n	8007628 <__multiply+0x8c>
 80076c0:	46e0      	mov	r8, ip
 80076c2:	e7dd      	b.n	8007680 <__multiply+0xe4>
 80076c4:	3e01      	subs	r6, #1
 80076c6:	e799      	b.n	80075fc <__multiply+0x60>

080076c8 <__pow5mult>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	4615      	mov	r5, r2
 80076ce:	f012 0203 	ands.w	r2, r2, #3
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	d007      	beq.n	80076e8 <__pow5mult+0x20>
 80076d8:	3a01      	subs	r2, #1
 80076da:	4c21      	ldr	r4, [pc, #132]	; (8007760 <__pow5mult+0x98>)
 80076dc:	2300      	movs	r3, #0
 80076de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076e2:	f7ff fec9 	bl	8007478 <__multadd>
 80076e6:	4607      	mov	r7, r0
 80076e8:	10ad      	asrs	r5, r5, #2
 80076ea:	d035      	beq.n	8007758 <__pow5mult+0x90>
 80076ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ee:	b93c      	cbnz	r4, 8007700 <__pow5mult+0x38>
 80076f0:	2010      	movs	r0, #16
 80076f2:	f7ff fe63 	bl	80073bc <malloc>
 80076f6:	6270      	str	r0, [r6, #36]	; 0x24
 80076f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076fc:	6004      	str	r4, [r0, #0]
 80076fe:	60c4      	str	r4, [r0, #12]
 8007700:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007708:	b94c      	cbnz	r4, 800771e <__pow5mult+0x56>
 800770a:	f240 2171 	movw	r1, #625	; 0x271
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff ff3b 	bl	800758a <__i2b>
 8007714:	2300      	movs	r3, #0
 8007716:	f8c8 0008 	str.w	r0, [r8, #8]
 800771a:	4604      	mov	r4, r0
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	07eb      	lsls	r3, r5, #31
 8007724:	d50a      	bpl.n	800773c <__pow5mult+0x74>
 8007726:	4639      	mov	r1, r7
 8007728:	4622      	mov	r2, r4
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ff36 	bl	800759c <__multiply>
 8007730:	4639      	mov	r1, r7
 8007732:	4681      	mov	r9, r0
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff fe88 	bl	800744a <_Bfree>
 800773a:	464f      	mov	r7, r9
 800773c:	106d      	asrs	r5, r5, #1
 800773e:	d00b      	beq.n	8007758 <__pow5mult+0x90>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	b938      	cbnz	r0, 8007754 <__pow5mult+0x8c>
 8007744:	4622      	mov	r2, r4
 8007746:	4621      	mov	r1, r4
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff ff27 	bl	800759c <__multiply>
 800774e:	6020      	str	r0, [r4, #0]
 8007750:	f8c0 8000 	str.w	r8, [r0]
 8007754:	4604      	mov	r4, r0
 8007756:	e7e4      	b.n	8007722 <__pow5mult+0x5a>
 8007758:	4638      	mov	r0, r7
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	bf00      	nop
 8007760:	08008408 	.word	0x08008408

08007764 <__lshift>:
 8007764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	460c      	mov	r4, r1
 800776a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	6849      	ldr	r1, [r1, #4]
 8007772:	eb0a 0903 	add.w	r9, sl, r3
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	4607      	mov	r7, r0
 800777a:	4616      	mov	r6, r2
 800777c:	f109 0501 	add.w	r5, r9, #1
 8007780:	42ab      	cmp	r3, r5
 8007782:	db32      	blt.n	80077ea <__lshift+0x86>
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff fe2c 	bl	80073e2 <_Balloc>
 800778a:	2300      	movs	r3, #0
 800778c:	4680      	mov	r8, r0
 800778e:	f100 0114 	add.w	r1, r0, #20
 8007792:	461a      	mov	r2, r3
 8007794:	4553      	cmp	r3, sl
 8007796:	db2b      	blt.n	80077f0 <__lshift+0x8c>
 8007798:	6920      	ldr	r0, [r4, #16]
 800779a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800779e:	f104 0314 	add.w	r3, r4, #20
 80077a2:	f016 021f 	ands.w	r2, r6, #31
 80077a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077ae:	d025      	beq.n	80077fc <__lshift+0x98>
 80077b0:	f1c2 0e20 	rsb	lr, r2, #32
 80077b4:	2000      	movs	r0, #0
 80077b6:	681e      	ldr	r6, [r3, #0]
 80077b8:	468a      	mov	sl, r1
 80077ba:	4096      	lsls	r6, r2
 80077bc:	4330      	orrs	r0, r6
 80077be:	f84a 0b04 	str.w	r0, [sl], #4
 80077c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80077c6:	459c      	cmp	ip, r3
 80077c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80077cc:	d814      	bhi.n	80077f8 <__lshift+0x94>
 80077ce:	6048      	str	r0, [r1, #4]
 80077d0:	b108      	cbz	r0, 80077d6 <__lshift+0x72>
 80077d2:	f109 0502 	add.w	r5, r9, #2
 80077d6:	3d01      	subs	r5, #1
 80077d8:	4638      	mov	r0, r7
 80077da:	f8c8 5010 	str.w	r5, [r8, #16]
 80077de:	4621      	mov	r1, r4
 80077e0:	f7ff fe33 	bl	800744a <_Bfree>
 80077e4:	4640      	mov	r0, r8
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	3101      	adds	r1, #1
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	e7c7      	b.n	8007780 <__lshift+0x1c>
 80077f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80077f4:	3301      	adds	r3, #1
 80077f6:	e7cd      	b.n	8007794 <__lshift+0x30>
 80077f8:	4651      	mov	r1, sl
 80077fa:	e7dc      	b.n	80077b6 <__lshift+0x52>
 80077fc:	3904      	subs	r1, #4
 80077fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007802:	f841 2f04 	str.w	r2, [r1, #4]!
 8007806:	459c      	cmp	ip, r3
 8007808:	d8f9      	bhi.n	80077fe <__lshift+0x9a>
 800780a:	e7e4      	b.n	80077d6 <__lshift+0x72>

0800780c <__mcmp>:
 800780c:	6903      	ldr	r3, [r0, #16]
 800780e:	690a      	ldr	r2, [r1, #16]
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	b530      	push	{r4, r5, lr}
 8007814:	d10c      	bne.n	8007830 <__mcmp+0x24>
 8007816:	0092      	lsls	r2, r2, #2
 8007818:	3014      	adds	r0, #20
 800781a:	3114      	adds	r1, #20
 800781c:	1884      	adds	r4, r0, r2
 800781e:	4411      	add	r1, r2
 8007820:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007824:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007828:	4295      	cmp	r5, r2
 800782a:	d003      	beq.n	8007834 <__mcmp+0x28>
 800782c:	d305      	bcc.n	800783a <__mcmp+0x2e>
 800782e:	2301      	movs	r3, #1
 8007830:	4618      	mov	r0, r3
 8007832:	bd30      	pop	{r4, r5, pc}
 8007834:	42a0      	cmp	r0, r4
 8007836:	d3f3      	bcc.n	8007820 <__mcmp+0x14>
 8007838:	e7fa      	b.n	8007830 <__mcmp+0x24>
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	e7f7      	b.n	8007830 <__mcmp+0x24>

08007840 <__mdiff>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	460d      	mov	r5, r1
 8007846:	4607      	mov	r7, r0
 8007848:	4611      	mov	r1, r2
 800784a:	4628      	mov	r0, r5
 800784c:	4614      	mov	r4, r2
 800784e:	f7ff ffdd 	bl	800780c <__mcmp>
 8007852:	1e06      	subs	r6, r0, #0
 8007854:	d108      	bne.n	8007868 <__mdiff+0x28>
 8007856:	4631      	mov	r1, r6
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff fdc2 	bl	80073e2 <_Balloc>
 800785e:	2301      	movs	r3, #1
 8007860:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	bfa4      	itt	ge
 800786a:	4623      	movge	r3, r4
 800786c:	462c      	movge	r4, r5
 800786e:	4638      	mov	r0, r7
 8007870:	6861      	ldr	r1, [r4, #4]
 8007872:	bfa6      	itte	ge
 8007874:	461d      	movge	r5, r3
 8007876:	2600      	movge	r6, #0
 8007878:	2601      	movlt	r6, #1
 800787a:	f7ff fdb2 	bl	80073e2 <_Balloc>
 800787e:	692b      	ldr	r3, [r5, #16]
 8007880:	60c6      	str	r6, [r0, #12]
 8007882:	6926      	ldr	r6, [r4, #16]
 8007884:	f105 0914 	add.w	r9, r5, #20
 8007888:	f104 0214 	add.w	r2, r4, #20
 800788c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007890:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007894:	f100 0514 	add.w	r5, r0, #20
 8007898:	f04f 0e00 	mov.w	lr, #0
 800789c:	f852 ab04 	ldr.w	sl, [r2], #4
 80078a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80078a4:	fa1e f18a 	uxtah	r1, lr, sl
 80078a8:	b2a3      	uxth	r3, r4
 80078aa:	1ac9      	subs	r1, r1, r3
 80078ac:	0c23      	lsrs	r3, r4, #16
 80078ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80078b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078b6:	b289      	uxth	r1, r1
 80078b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80078bc:	45c8      	cmp	r8, r9
 80078be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078c2:	4694      	mov	ip, r2
 80078c4:	f845 3b04 	str.w	r3, [r5], #4
 80078c8:	d8e8      	bhi.n	800789c <__mdiff+0x5c>
 80078ca:	45bc      	cmp	ip, r7
 80078cc:	d304      	bcc.n	80078d8 <__mdiff+0x98>
 80078ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80078d2:	b183      	cbz	r3, 80078f6 <__mdiff+0xb6>
 80078d4:	6106      	str	r6, [r0, #16]
 80078d6:	e7c5      	b.n	8007864 <__mdiff+0x24>
 80078d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078dc:	fa1e f381 	uxtah	r3, lr, r1
 80078e0:	141a      	asrs	r2, r3, #16
 80078e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80078f0:	f845 3b04 	str.w	r3, [r5], #4
 80078f4:	e7e9      	b.n	80078ca <__mdiff+0x8a>
 80078f6:	3e01      	subs	r6, #1
 80078f8:	e7e9      	b.n	80078ce <__mdiff+0x8e>

080078fa <__d2b>:
 80078fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	2101      	movs	r1, #1
 8007902:	ec59 8b10 	vmov	r8, r9, d0
 8007906:	4615      	mov	r5, r2
 8007908:	f7ff fd6b 	bl	80073e2 <_Balloc>
 800790c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007910:	4607      	mov	r7, r0
 8007912:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007916:	bb34      	cbnz	r4, 8007966 <__d2b+0x6c>
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f1b8 0300 	subs.w	r3, r8, #0
 800791e:	d027      	beq.n	8007970 <__d2b+0x76>
 8007920:	a802      	add	r0, sp, #8
 8007922:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007926:	f7ff fe01 	bl	800752c <__lo0bits>
 800792a:	9900      	ldr	r1, [sp, #0]
 800792c:	b1f0      	cbz	r0, 800796c <__d2b+0x72>
 800792e:	9a01      	ldr	r2, [sp, #4]
 8007930:	f1c0 0320 	rsb	r3, r0, #32
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	430b      	orrs	r3, r1
 800793a:	40c2      	lsrs	r2, r0
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf14      	ite	ne
 8007948:	2102      	movne	r1, #2
 800794a:	2101      	moveq	r1, #1
 800794c:	6139      	str	r1, [r7, #16]
 800794e:	b1c4      	cbz	r4, 8007982 <__d2b+0x88>
 8007950:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007954:	4404      	add	r4, r0
 8007956:	6034      	str	r4, [r6, #0]
 8007958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800795c:	6028      	str	r0, [r5, #0]
 800795e:	4638      	mov	r0, r7
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800796a:	e7d5      	b.n	8007918 <__d2b+0x1e>
 800796c:	6179      	str	r1, [r7, #20]
 800796e:	e7e7      	b.n	8007940 <__d2b+0x46>
 8007970:	a801      	add	r0, sp, #4
 8007972:	f7ff fddb 	bl	800752c <__lo0bits>
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	2101      	movs	r1, #1
 800797c:	6139      	str	r1, [r7, #16]
 800797e:	3020      	adds	r0, #32
 8007980:	e7e5      	b.n	800794e <__d2b+0x54>
 8007982:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007986:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800798a:	6030      	str	r0, [r6, #0]
 800798c:	6918      	ldr	r0, [r3, #16]
 800798e:	f7ff fdae 	bl	80074ee <__hi0bits>
 8007992:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007996:	e7e1      	b.n	800795c <__d2b+0x62>

08007998 <_calloc_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	fb02 f401 	mul.w	r4, r2, r1
 800799e:	4621      	mov	r1, r4
 80079a0:	f000 f856 	bl	8007a50 <_malloc_r>
 80079a4:	4605      	mov	r5, r0
 80079a6:	b118      	cbz	r0, 80079b0 <_calloc_r+0x18>
 80079a8:	4622      	mov	r2, r4
 80079aa:	2100      	movs	r1, #0
 80079ac:	f7fe fa30 	bl	8005e10 <memset>
 80079b0:	4628      	mov	r0, r5
 80079b2:	bd38      	pop	{r3, r4, r5, pc}

080079b4 <_free_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4605      	mov	r5, r0
 80079b8:	2900      	cmp	r1, #0
 80079ba:	d045      	beq.n	8007a48 <_free_r+0x94>
 80079bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c0:	1f0c      	subs	r4, r1, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfb8      	it	lt
 80079c6:	18e4      	addlt	r4, r4, r3
 80079c8:	f000 fa29 	bl	8007e1e <__malloc_lock>
 80079cc:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <_free_r+0x98>)
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	4610      	mov	r0, r2
 80079d2:	b933      	cbnz	r3, 80079e2 <_free_r+0x2e>
 80079d4:	6063      	str	r3, [r4, #4]
 80079d6:	6014      	str	r4, [r2, #0]
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079de:	f000 ba1f 	b.w	8007e20 <__malloc_unlock>
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	d90c      	bls.n	8007a00 <_free_r+0x4c>
 80079e6:	6821      	ldr	r1, [r4, #0]
 80079e8:	1862      	adds	r2, r4, r1
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bf04      	itt	eq
 80079ee:	681a      	ldreq	r2, [r3, #0]
 80079f0:	685b      	ldreq	r3, [r3, #4]
 80079f2:	6063      	str	r3, [r4, #4]
 80079f4:	bf04      	itt	eq
 80079f6:	1852      	addeq	r2, r2, r1
 80079f8:	6022      	streq	r2, [r4, #0]
 80079fa:	6004      	str	r4, [r0, #0]
 80079fc:	e7ec      	b.n	80079d8 <_free_r+0x24>
 80079fe:	4613      	mov	r3, r2
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	b10a      	cbz	r2, 8007a08 <_free_r+0x54>
 8007a04:	42a2      	cmp	r2, r4
 8007a06:	d9fa      	bls.n	80079fe <_free_r+0x4a>
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	1858      	adds	r0, r3, r1
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d10b      	bne.n	8007a28 <_free_r+0x74>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	4401      	add	r1, r0
 8007a14:	1858      	adds	r0, r3, r1
 8007a16:	4282      	cmp	r2, r0
 8007a18:	6019      	str	r1, [r3, #0]
 8007a1a:	d1dd      	bne.n	80079d8 <_free_r+0x24>
 8007a1c:	6810      	ldr	r0, [r2, #0]
 8007a1e:	6852      	ldr	r2, [r2, #4]
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	4401      	add	r1, r0
 8007a24:	6019      	str	r1, [r3, #0]
 8007a26:	e7d7      	b.n	80079d8 <_free_r+0x24>
 8007a28:	d902      	bls.n	8007a30 <_free_r+0x7c>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	e7d3      	b.n	80079d8 <_free_r+0x24>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428a      	cmp	r2, r1
 8007a36:	bf04      	itt	eq
 8007a38:	6811      	ldreq	r1, [r2, #0]
 8007a3a:	6852      	ldreq	r2, [r2, #4]
 8007a3c:	6062      	str	r2, [r4, #4]
 8007a3e:	bf04      	itt	eq
 8007a40:	1809      	addeq	r1, r1, r0
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	605c      	str	r4, [r3, #4]
 8007a46:	e7c7      	b.n	80079d8 <_free_r+0x24>
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000878 	.word	0x20000878

08007a50 <_malloc_r>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	1ccd      	adds	r5, r1, #3
 8007a54:	f025 0503 	bic.w	r5, r5, #3
 8007a58:	3508      	adds	r5, #8
 8007a5a:	2d0c      	cmp	r5, #12
 8007a5c:	bf38      	it	cc
 8007a5e:	250c      	movcc	r5, #12
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	4606      	mov	r6, r0
 8007a64:	db01      	blt.n	8007a6a <_malloc_r+0x1a>
 8007a66:	42a9      	cmp	r1, r5
 8007a68:	d903      	bls.n	8007a72 <_malloc_r+0x22>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	6033      	str	r3, [r6, #0]
 8007a6e:	2000      	movs	r0, #0
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	f000 f9d4 	bl	8007e1e <__malloc_lock>
 8007a76:	4a21      	ldr	r2, [pc, #132]	; (8007afc <_malloc_r+0xac>)
 8007a78:	6814      	ldr	r4, [r2, #0]
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	b991      	cbnz	r1, 8007aa4 <_malloc_r+0x54>
 8007a7e:	4c20      	ldr	r4, [pc, #128]	; (8007b00 <_malloc_r+0xb0>)
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	b91b      	cbnz	r3, 8007a8c <_malloc_r+0x3c>
 8007a84:	4630      	mov	r0, r6
 8007a86:	f000 f98f 	bl	8007da8 <_sbrk_r>
 8007a8a:	6020      	str	r0, [r4, #0]
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 f98a 	bl	8007da8 <_sbrk_r>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d124      	bne.n	8007ae2 <_malloc_r+0x92>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f9bf 	bl	8007e20 <__malloc_unlock>
 8007aa2:	e7e4      	b.n	8007a6e <_malloc_r+0x1e>
 8007aa4:	680b      	ldr	r3, [r1, #0]
 8007aa6:	1b5b      	subs	r3, r3, r5
 8007aa8:	d418      	bmi.n	8007adc <_malloc_r+0x8c>
 8007aaa:	2b0b      	cmp	r3, #11
 8007aac:	d90f      	bls.n	8007ace <_malloc_r+0x7e>
 8007aae:	600b      	str	r3, [r1, #0]
 8007ab0:	50cd      	str	r5, [r1, r3]
 8007ab2:	18cc      	adds	r4, r1, r3
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 f9b3 	bl	8007e20 <__malloc_unlock>
 8007aba:	f104 000b 	add.w	r0, r4, #11
 8007abe:	1d23      	adds	r3, r4, #4
 8007ac0:	f020 0007 	bic.w	r0, r0, #7
 8007ac4:	1ac3      	subs	r3, r0, r3
 8007ac6:	d0d3      	beq.n	8007a70 <_malloc_r+0x20>
 8007ac8:	425a      	negs	r2, r3
 8007aca:	50e2      	str	r2, [r4, r3]
 8007acc:	e7d0      	b.n	8007a70 <_malloc_r+0x20>
 8007ace:	428c      	cmp	r4, r1
 8007ad0:	684b      	ldr	r3, [r1, #4]
 8007ad2:	bf16      	itet	ne
 8007ad4:	6063      	strne	r3, [r4, #4]
 8007ad6:	6013      	streq	r3, [r2, #0]
 8007ad8:	460c      	movne	r4, r1
 8007ada:	e7eb      	b.n	8007ab4 <_malloc_r+0x64>
 8007adc:	460c      	mov	r4, r1
 8007ade:	6849      	ldr	r1, [r1, #4]
 8007ae0:	e7cc      	b.n	8007a7c <_malloc_r+0x2c>
 8007ae2:	1cc4      	adds	r4, r0, #3
 8007ae4:	f024 0403 	bic.w	r4, r4, #3
 8007ae8:	42a0      	cmp	r0, r4
 8007aea:	d005      	beq.n	8007af8 <_malloc_r+0xa8>
 8007aec:	1a21      	subs	r1, r4, r0
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 f95a 	bl	8007da8 <_sbrk_r>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0cf      	beq.n	8007a98 <_malloc_r+0x48>
 8007af8:	6025      	str	r5, [r4, #0]
 8007afa:	e7db      	b.n	8007ab4 <_malloc_r+0x64>
 8007afc:	20000878 	.word	0x20000878
 8007b00:	2000087c 	.word	0x2000087c

08007b04 <__ssputs_r>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	688e      	ldr	r6, [r1, #8]
 8007b0a:	429e      	cmp	r6, r3
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	4690      	mov	r8, r2
 8007b12:	4699      	mov	r9, r3
 8007b14:	d837      	bhi.n	8007b86 <__ssputs_r+0x82>
 8007b16:	898a      	ldrh	r2, [r1, #12]
 8007b18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b1c:	d031      	beq.n	8007b82 <__ssputs_r+0x7e>
 8007b1e:	6825      	ldr	r5, [r4, #0]
 8007b20:	6909      	ldr	r1, [r1, #16]
 8007b22:	1a6f      	subs	r7, r5, r1
 8007b24:	6965      	ldr	r5, [r4, #20]
 8007b26:	2302      	movs	r3, #2
 8007b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b30:	f109 0301 	add.w	r3, r9, #1
 8007b34:	443b      	add	r3, r7
 8007b36:	429d      	cmp	r5, r3
 8007b38:	bf38      	it	cc
 8007b3a:	461d      	movcc	r5, r3
 8007b3c:	0553      	lsls	r3, r2, #21
 8007b3e:	d530      	bpl.n	8007ba2 <__ssputs_r+0x9e>
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7ff ff85 	bl	8007a50 <_malloc_r>
 8007b46:	4606      	mov	r6, r0
 8007b48:	b950      	cbnz	r0, 8007b60 <__ssputs_r+0x5c>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	f8ca 3000 	str.w	r3, [sl]
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b60:	463a      	mov	r2, r7
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	f7ff fc32 	bl	80073cc <memcpy>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	6126      	str	r6, [r4, #16]
 8007b76:	6165      	str	r5, [r4, #20]
 8007b78:	443e      	add	r6, r7
 8007b7a:	1bed      	subs	r5, r5, r7
 8007b7c:	6026      	str	r6, [r4, #0]
 8007b7e:	60a5      	str	r5, [r4, #8]
 8007b80:	464e      	mov	r6, r9
 8007b82:	454e      	cmp	r6, r9
 8007b84:	d900      	bls.n	8007b88 <__ssputs_r+0x84>
 8007b86:	464e      	mov	r6, r9
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	f000 f92d 	bl	8007dec <memmove>
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	1b9b      	subs	r3, r3, r6
 8007b96:	60a3      	str	r3, [r4, #8]
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	441e      	add	r6, r3
 8007b9c:	6026      	str	r6, [r4, #0]
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	e7dc      	b.n	8007b5c <__ssputs_r+0x58>
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	f000 f93d 	bl	8007e22 <_realloc_r>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d1e2      	bne.n	8007b74 <__ssputs_r+0x70>
 8007bae:	6921      	ldr	r1, [r4, #16]
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f7ff feff 	bl	80079b4 <_free_r>
 8007bb6:	e7c8      	b.n	8007b4a <__ssputs_r+0x46>

08007bb8 <_svfiprintf_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	898b      	ldrh	r3, [r1, #12]
 8007bc0:	061f      	lsls	r7, r3, #24
 8007bc2:	b09d      	sub	sp, #116	; 0x74
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4616      	mov	r6, r2
 8007bca:	d50f      	bpl.n	8007bec <_svfiprintf_r+0x34>
 8007bcc:	690b      	ldr	r3, [r1, #16]
 8007bce:	b96b      	cbnz	r3, 8007bec <_svfiprintf_r+0x34>
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	f7ff ff3d 	bl	8007a50 <_malloc_r>
 8007bd6:	6020      	str	r0, [r4, #0]
 8007bd8:	6120      	str	r0, [r4, #16]
 8007bda:	b928      	cbnz	r0, 8007be8 <_svfiprintf_r+0x30>
 8007bdc:	230c      	movs	r3, #12
 8007bde:	f8c8 3000 	str.w	r3, [r8]
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295
 8007be6:	e0c8      	b.n	8007d7a <_svfiprintf_r+0x1c2>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	6163      	str	r3, [r4, #20]
 8007bec:	2300      	movs	r3, #0
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bf6:	2330      	movs	r3, #48	; 0x30
 8007bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bfc:	9503      	str	r5, [sp, #12]
 8007bfe:	f04f 0b01 	mov.w	fp, #1
 8007c02:	4637      	mov	r7, r6
 8007c04:	463d      	mov	r5, r7
 8007c06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c0a:	b10b      	cbz	r3, 8007c10 <_svfiprintf_r+0x58>
 8007c0c:	2b25      	cmp	r3, #37	; 0x25
 8007c0e:	d13e      	bne.n	8007c8e <_svfiprintf_r+0xd6>
 8007c10:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c14:	d00b      	beq.n	8007c2e <_svfiprintf_r+0x76>
 8007c16:	4653      	mov	r3, sl
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	f7ff ff71 	bl	8007b04 <__ssputs_r>
 8007c22:	3001      	adds	r0, #1
 8007c24:	f000 80a4 	beq.w	8007d70 <_svfiprintf_r+0x1b8>
 8007c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2a:	4453      	add	r3, sl
 8007c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2e:	783b      	ldrb	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 809d 	beq.w	8007d70 <_svfiprintf_r+0x1b8>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	9307      	str	r3, [sp, #28]
 8007c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c48:	931a      	str	r3, [sp, #104]	; 0x68
 8007c4a:	462f      	mov	r7, r5
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c52:	4850      	ldr	r0, [pc, #320]	; (8007d94 <_svfiprintf_r+0x1dc>)
 8007c54:	f7f8 fac4 	bl	80001e0 <memchr>
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	b9d0      	cbnz	r0, 8007c92 <_svfiprintf_r+0xda>
 8007c5c:	06d9      	lsls	r1, r3, #27
 8007c5e:	bf44      	itt	mi
 8007c60:	2220      	movmi	r2, #32
 8007c62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c66:	071a      	lsls	r2, r3, #28
 8007c68:	bf44      	itt	mi
 8007c6a:	222b      	movmi	r2, #43	; 0x2b
 8007c6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c70:	782a      	ldrb	r2, [r5, #0]
 8007c72:	2a2a      	cmp	r2, #42	; 0x2a
 8007c74:	d015      	beq.n	8007ca2 <_svfiprintf_r+0xea>
 8007c76:	9a07      	ldr	r2, [sp, #28]
 8007c78:	462f      	mov	r7, r5
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	250a      	movs	r5, #10
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c84:	3b30      	subs	r3, #48	; 0x30
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d94d      	bls.n	8007d26 <_svfiprintf_r+0x16e>
 8007c8a:	b1b8      	cbz	r0, 8007cbc <_svfiprintf_r+0x104>
 8007c8c:	e00f      	b.n	8007cae <_svfiprintf_r+0xf6>
 8007c8e:	462f      	mov	r7, r5
 8007c90:	e7b8      	b.n	8007c04 <_svfiprintf_r+0x4c>
 8007c92:	4a40      	ldr	r2, [pc, #256]	; (8007d94 <_svfiprintf_r+0x1dc>)
 8007c94:	1a80      	subs	r0, r0, r2
 8007c96:	fa0b f000 	lsl.w	r0, fp, r0
 8007c9a:	4318      	orrs	r0, r3
 8007c9c:	9004      	str	r0, [sp, #16]
 8007c9e:	463d      	mov	r5, r7
 8007ca0:	e7d3      	b.n	8007c4a <_svfiprintf_r+0x92>
 8007ca2:	9a03      	ldr	r2, [sp, #12]
 8007ca4:	1d11      	adds	r1, r2, #4
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	db01      	blt.n	8007cb2 <_svfiprintf_r+0xfa>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e004      	b.n	8007cbc <_svfiprintf_r+0x104>
 8007cb2:	4252      	negs	r2, r2
 8007cb4:	f043 0302 	orr.w	r3, r3, #2
 8007cb8:	9207      	str	r2, [sp, #28]
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	783b      	ldrb	r3, [r7, #0]
 8007cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc0:	d10c      	bne.n	8007cdc <_svfiprintf_r+0x124>
 8007cc2:	787b      	ldrb	r3, [r7, #1]
 8007cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc6:	d133      	bne.n	8007d30 <_svfiprintf_r+0x178>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	9203      	str	r2, [sp, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bfb8      	it	lt
 8007cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cd8:	3702      	adds	r7, #2
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	4d2e      	ldr	r5, [pc, #184]	; (8007d98 <_svfiprintf_r+0x1e0>)
 8007cde:	7839      	ldrb	r1, [r7, #0]
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7f8 fa7c 	bl	80001e0 <memchr>
 8007ce8:	b138      	cbz	r0, 8007cfa <_svfiprintf_r+0x142>
 8007cea:	2340      	movs	r3, #64	; 0x40
 8007cec:	1b40      	subs	r0, r0, r5
 8007cee:	fa03 f000 	lsl.w	r0, r3, r0
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	4303      	orrs	r3, r0
 8007cf6:	3701      	adds	r7, #1
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	7839      	ldrb	r1, [r7, #0]
 8007cfc:	4827      	ldr	r0, [pc, #156]	; (8007d9c <_svfiprintf_r+0x1e4>)
 8007cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d02:	2206      	movs	r2, #6
 8007d04:	1c7e      	adds	r6, r7, #1
 8007d06:	f7f8 fa6b 	bl	80001e0 <memchr>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d038      	beq.n	8007d80 <_svfiprintf_r+0x1c8>
 8007d0e:	4b24      	ldr	r3, [pc, #144]	; (8007da0 <_svfiprintf_r+0x1e8>)
 8007d10:	bb13      	cbnz	r3, 8007d58 <_svfiprintf_r+0x1a0>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	3307      	adds	r3, #7
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d20:	444b      	add	r3, r9
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	e76d      	b.n	8007c02 <_svfiprintf_r+0x4a>
 8007d26:	fb05 3202 	mla	r2, r5, r2, r3
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	e7a6      	b.n	8007c7e <_svfiprintf_r+0xc6>
 8007d30:	2300      	movs	r3, #0
 8007d32:	3701      	adds	r7, #1
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	4619      	mov	r1, r3
 8007d38:	250a      	movs	r5, #10
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d40:	3a30      	subs	r2, #48	; 0x30
 8007d42:	2a09      	cmp	r2, #9
 8007d44:	d903      	bls.n	8007d4e <_svfiprintf_r+0x196>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0c8      	beq.n	8007cdc <_svfiprintf_r+0x124>
 8007d4a:	9105      	str	r1, [sp, #20]
 8007d4c:	e7c6      	b.n	8007cdc <_svfiprintf_r+0x124>
 8007d4e:	fb05 2101 	mla	r1, r5, r1, r2
 8007d52:	2301      	movs	r3, #1
 8007d54:	4607      	mov	r7, r0
 8007d56:	e7f0      	b.n	8007d3a <_svfiprintf_r+0x182>
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <_svfiprintf_r+0x1ec>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4640      	mov	r0, r8
 8007d64:	f7fe f8f0 	bl	8005f48 <_printf_float>
 8007d68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d6c:	4681      	mov	r9, r0
 8007d6e:	d1d6      	bne.n	8007d1e <_svfiprintf_r+0x166>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	065b      	lsls	r3, r3, #25
 8007d74:	f53f af35 	bmi.w	8007be2 <_svfiprintf_r+0x2a>
 8007d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d7a:	b01d      	add	sp, #116	; 0x74
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	4622      	mov	r2, r4
 8007d86:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <_svfiprintf_r+0x1ec>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7fe fb92 	bl	80064b4 <_printf_i>
 8007d90:	e7ea      	b.n	8007d68 <_svfiprintf_r+0x1b0>
 8007d92:	bf00      	nop
 8007d94:	08008414 	.word	0x08008414
 8007d98:	0800841a 	.word	0x0800841a
 8007d9c:	0800841e 	.word	0x0800841e
 8007da0:	08005f49 	.word	0x08005f49
 8007da4:	08007b05 	.word	0x08007b05

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4c06      	ldr	r4, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4605      	mov	r5, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	f7fb f9de 	bl	8003174 <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000d6c 	.word	0x20000d6c

08007dc8 <__ascii_mbtowc>:
 8007dc8:	b082      	sub	sp, #8
 8007dca:	b901      	cbnz	r1, 8007dce <__ascii_mbtowc+0x6>
 8007dcc:	a901      	add	r1, sp, #4
 8007dce:	b142      	cbz	r2, 8007de2 <__ascii_mbtowc+0x1a>
 8007dd0:	b14b      	cbz	r3, 8007de6 <__ascii_mbtowc+0x1e>
 8007dd2:	7813      	ldrb	r3, [r2, #0]
 8007dd4:	600b      	str	r3, [r1, #0]
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	1c10      	adds	r0, r2, #0
 8007dda:	bf18      	it	ne
 8007ddc:	2001      	movne	r0, #1
 8007dde:	b002      	add	sp, #8
 8007de0:	4770      	bx	lr
 8007de2:	4610      	mov	r0, r2
 8007de4:	e7fb      	b.n	8007dde <__ascii_mbtowc+0x16>
 8007de6:	f06f 0001 	mvn.w	r0, #1
 8007dea:	e7f8      	b.n	8007dde <__ascii_mbtowc+0x16>

08007dec <memmove>:
 8007dec:	4288      	cmp	r0, r1
 8007dee:	b510      	push	{r4, lr}
 8007df0:	eb01 0302 	add.w	r3, r1, r2
 8007df4:	d807      	bhi.n	8007e06 <memmove+0x1a>
 8007df6:	1e42      	subs	r2, r0, #1
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	d00a      	beq.n	8007e12 <memmove+0x26>
 8007dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e04:	e7f8      	b.n	8007df8 <memmove+0xc>
 8007e06:	4283      	cmp	r3, r0
 8007e08:	d9f5      	bls.n	8007df6 <memmove+0xa>
 8007e0a:	1881      	adds	r1, r0, r2
 8007e0c:	1ad2      	subs	r2, r2, r3
 8007e0e:	42d3      	cmn	r3, r2
 8007e10:	d100      	bne.n	8007e14 <memmove+0x28>
 8007e12:	bd10      	pop	{r4, pc}
 8007e14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e1c:	e7f7      	b.n	8007e0e <memmove+0x22>

08007e1e <__malloc_lock>:
 8007e1e:	4770      	bx	lr

08007e20 <__malloc_unlock>:
 8007e20:	4770      	bx	lr

08007e22 <_realloc_r>:
 8007e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e24:	4607      	mov	r7, r0
 8007e26:	4614      	mov	r4, r2
 8007e28:	460e      	mov	r6, r1
 8007e2a:	b921      	cbnz	r1, 8007e36 <_realloc_r+0x14>
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e32:	f7ff be0d 	b.w	8007a50 <_malloc_r>
 8007e36:	b922      	cbnz	r2, 8007e42 <_realloc_r+0x20>
 8007e38:	f7ff fdbc 	bl	80079b4 <_free_r>
 8007e3c:	4625      	mov	r5, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e42:	f000 f821 	bl	8007e88 <_malloc_usable_size_r>
 8007e46:	42a0      	cmp	r0, r4
 8007e48:	d20f      	bcs.n	8007e6a <_realloc_r+0x48>
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff fdff 	bl	8007a50 <_malloc_r>
 8007e52:	4605      	mov	r5, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0f2      	beq.n	8007e3e <_realloc_r+0x1c>
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	f7ff fab6 	bl	80073cc <memcpy>
 8007e60:	4631      	mov	r1, r6
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7ff fda6 	bl	80079b4 <_free_r>
 8007e68:	e7e9      	b.n	8007e3e <_realloc_r+0x1c>
 8007e6a:	4635      	mov	r5, r6
 8007e6c:	e7e7      	b.n	8007e3e <_realloc_r+0x1c>

08007e6e <__ascii_wctomb>:
 8007e6e:	b149      	cbz	r1, 8007e84 <__ascii_wctomb+0x16>
 8007e70:	2aff      	cmp	r2, #255	; 0xff
 8007e72:	bf85      	ittet	hi
 8007e74:	238a      	movhi	r3, #138	; 0x8a
 8007e76:	6003      	strhi	r3, [r0, #0]
 8007e78:	700a      	strbls	r2, [r1, #0]
 8007e7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e7e:	bf98      	it	ls
 8007e80:	2001      	movls	r0, #1
 8007e82:	4770      	bx	lr
 8007e84:	4608      	mov	r0, r1
 8007e86:	4770      	bx	lr

08007e88 <_malloc_usable_size_r>:
 8007e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e8c:	1f18      	subs	r0, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbc      	itt	lt
 8007e92:	580b      	ldrlt	r3, [r1, r0]
 8007e94:	18c0      	addlt	r0, r0, r3
 8007e96:	4770      	bx	lr

08007e98 <_init>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_fini>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr
