
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007428  08007428  00017428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007844  08007844  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800784c  0800784c  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08007854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000040c  08007c60  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08007c60  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdcd  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7e  00000000  00000000  0002c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b43  00000000  00000000  0002f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6db  00000000  00000000  00050c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caba6  00000000  00000000  0005c30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  00126f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000040c 	.word	0x2000040c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800740c 	.word	0x0800740c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000410 	.word	0x20000410
 80001cc:	0800740c 	.word	0x0800740c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <WaitPistons.9419>:
			#define WAITING 450

			#define VPISTON_STATE Buttons[21].B_State
			#define HPISTON_STATE Buttons[22].B_State
			void WaitPistons(void)
			{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f8c7 c004 	str.w	ip, [r7, #4]
				uint16_t _timer = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	81fb      	strh	r3, [r7, #14]
				while(VPISTON_STATE == 0 || HPISTON_STATE == 0)
 8000eae:	e02f      	b.n	8000f10 <WaitPistons.9419+0x70>
				{
					_timer++;
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	81fb      	strh	r3, [r7, #14]
					HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 fd6c 	bl	8002994 <HAL_Delay>
					if(_timer >= 900)
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000ec2:	d325      	bcc.n	8000f10 <WaitPistons.9419+0x70>
					{
						Buttons[10].B_Out = 0;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <WaitPistons.9419+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
						_timer = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	81fb      	strh	r3, [r7, #14]
						while(!Buttons[10].B_Out && (!Buttons[21].B_State || !Buttons[22].B_State))
 8000ed0:	e00f      	b.n	8000ef2 <WaitPistons.9419+0x52>
						{
							HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <WaitPistons.9419+0x94>)
 8000ed8:	f002 f860 	bl	8002f9c <HAL_GPIO_WritePin>
							HAL_Delay(200);
 8000edc:	20c8      	movs	r0, #200	; 0xc8
 8000ede:	f001 fd59 	bl	8002994 <HAL_Delay>
							HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <WaitPistons.9419+0x94>)
 8000ee8:	f002 f858 	bl	8002f9c <HAL_GPIO_WritePin>
							HAL_Delay(200);
 8000eec:	20c8      	movs	r0, #200	; 0xc8
 8000eee:	f001 fd51 	bl	8002994 <HAL_Delay>
						while(!Buttons[10].B_Out && (!Buttons[21].B_State || !Buttons[22].B_State))
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <WaitPistons.9419+0x90>)
 8000ef4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d109      	bne.n	8000f10 <WaitPistons.9419+0x70>
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <WaitPistons.9419+0x90>)
 8000efe:	f893 33af 	ldrb.w	r3, [r3, #943]	; 0x3af
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0e5      	beq.n	8000ed2 <WaitPistons.9419+0x32>
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <WaitPistons.9419+0x90>)
 8000f08:	f893 33db 	ldrb.w	r3, [r3, #987]	; 0x3db
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0e0      	beq.n	8000ed2 <WaitPistons.9419+0x32>
				while(VPISTON_STATE == 0 || HPISTON_STATE == 0)
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <WaitPistons.9419+0x90>)
 8000f12:	f893 33af 	ldrb.w	r3, [r3, #943]	; 0x3af
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0ca      	beq.n	8000eb0 <WaitPistons.9419+0x10>
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <WaitPistons.9419+0x90>)
 8000f1c:	f893 33db 	ldrb.w	r3, [r3, #987]	; 0x3db
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0c5      	beq.n	8000eb0 <WaitPistons.9419+0x10>
						};
					}
				}
			}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000484 	.word	0x20000484
 8000f34:	40020400 	.word	0x40020400

08000f38 <main>:
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
int main(void)
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000f44:	f001 fcb4 	bl	80028b0 <HAL_Init>
  SystemClock_Config();
 8000f48:	f000 fcc4 	bl	80018d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000f4c:	f000 fdd6 	bl	8001afc <MX_GPIO_Init>
  MX_TIM7_Init();
 8000f50:	f000 fd9e 	bl	8001a90 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000f54:	f000 fd26 	bl	80019a4 <MX_TIM3_Init>
  GPIOD->ODR = ~0;
 8000f58:	4b9e      	ldr	r3, [pc, #632]	; (80011d4 <main+0x29c>)
 8000f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5e:	615a      	str	r2, [r3, #20]
  Init();
 8000f60:	f000 fee2 	bl	8001d28 <Init>
  HAL_Delay(2300);
 8000f64:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8000f68:	f001 fd14 	bl	8002994 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f6c:	489a      	ldr	r0, [pc, #616]	; (80011d8 <main+0x2a0>)
 8000f6e:	f002 fcbf 	bl	80038f0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	4899      	ldr	r0, [pc, #612]	; (80011dc <main+0x2a4>)
 8000f78:	f002 f810 	bl	8002f9c <HAL_GPIO_WritePin>
		if(!Buttons[9].B_State)// Mode select
 8000f7c:	4b98      	ldr	r3, [pc, #608]	; (80011e0 <main+0x2a8>)
 8000f7e:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 81f5 	bne.w	8001372 <main+0x43a>
			tmpflg = 1;
 8000f88:	4b96      	ldr	r3, [pc, #600]	; (80011e4 <main+0x2ac>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
			if(Buttons[9].B_Out == 1) // Reset buttons and timers
 8000f8e:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <main+0x2a8>)
 8000f90:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d119      	bne.n	8000fcc <main+0x94>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4893      	ldr	r0, [pc, #588]	; (80011e8 <main+0x2b0>)
 8000f9c:	f002 fe68 	bl	8003c70 <HAL_TIM_PWM_Stop>
				Buttons[9].B_Out = 0;
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <main+0x2a8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	e00b      	b.n	8000fc6 <main+0x8e>
					Buttons[i].B_Out = 0;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4a8b      	ldr	r2, [pc, #556]	; (80011e0 <main+0x2a8>)
 8000fb2:	212c      	movs	r1, #44	; 0x2c
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	3314      	adds	r3, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b16      	cmp	r3, #22
 8000fca:	d9f0      	bls.n	8000fae <main+0x76>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71bb      	strb	r3, [r7, #6]
 8000fd0:	e1ca      	b.n	8001368 <main+0x430>
				if(Buttons[i].Lock == 0)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	4a82      	ldr	r2, [pc, #520]	; (80011e0 <main+0x2a8>)
 8000fd6:	212c      	movs	r1, #44	; 0x2c
 8000fd8:	fb01 f303 	mul.w	r3, r1, r3
 8000fdc:	4413      	add	r3, r2
 8000fde:	3315      	adds	r3, #21
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 81a8 	bne.w	8001338 <main+0x400>
					if(Buttons[i].Mode == HOLD)
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <main+0x2a8>)
 8000fec:	212c      	movs	r1, #44	; 0x2c
 8000fee:	fb01 f303 	mul.w	r3, r1, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3316      	adds	r3, #22
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d120      	bne.n	800103e <main+0x106>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	4a78      	ldr	r2, [pc, #480]	; (80011e0 <main+0x2a8>)
 8001000:	212c      	movs	r1, #44	; 0x2c
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	330c      	adds	r3, #12
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	4a74      	ldr	r2, [pc, #464]	; (80011e0 <main+0x2a8>)
 8001010:	212c      	movs	r1, #44	; 0x2c
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	3310      	adds	r3, #16
 800101a:	8819      	ldrh	r1, [r3, #0]
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	4a70      	ldr	r2, [pc, #448]	; (80011e0 <main+0x2a8>)
 8001020:	242c      	movs	r4, #44	; 0x2c
 8001022:	fb04 f303 	mul.w	r3, r4, r3
 8001026:	4413      	add	r3, r2
 8001028:	3313      	adds	r3, #19
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	f001 ffb0 	bl	8002f9c <HAL_GPIO_WritePin>
						continue;
 800103c:	e191      	b.n	8001362 <main+0x42a>
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <main+0x2a8>)
 8001042:	212c      	movs	r1, #44	; 0x2c
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	4413      	add	r3, r2
 800104a:	3316      	adds	r3, #22
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d161      	bne.n	8001116 <main+0x1de>
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	4a62      	ldr	r2, [pc, #392]	; (80011e0 <main+0x2a8>)
 8001056:	212c      	movs	r1, #44	; 0x2c
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	4413      	add	r3, r2
 800105e:	3324      	adds	r3, #36	; 0x24
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d157      	bne.n	8001116 <main+0x1de>
						if(Buttons[i].addiction != 0)
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <main+0x2a8>)
 800106a:	212c      	movs	r1, #44	; 0x2c
 800106c:	fb01 f303 	mul.w	r3, r1, r3
 8001070:	4413      	add	r3, r2
 8001072:	331c      	adds	r3, #28
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02c      	beq.n	80010d4 <main+0x19c>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	4a58      	ldr	r2, [pc, #352]	; (80011e0 <main+0x2a8>)
 800107e:	212c      	movs	r1, #44	; 0x2c
 8001080:	fb01 f303 	mul.w	r3, r1, r3
 8001084:	4413      	add	r3, r2
 8001086:	330c      	adds	r3, #12
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <main+0x2a8>)
 800108e:	212c      	movs	r1, #44	; 0x2c
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	4413      	add	r3, r2
 8001096:	3310      	adds	r3, #16
 8001098:	8819      	ldrh	r1, [r3, #0]
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <main+0x2a8>)
 800109e:	242c      	movs	r4, #44	; 0x2c
 80010a0:	fb04 f303 	mul.w	r3, r4, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	3314      	adds	r3, #20
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00a      	beq.n	80010c4 <main+0x18c>
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <main+0x2a8>)
 80010b2:	242c      	movs	r4, #44	; 0x2c
 80010b4:	fb04 f303 	mul.w	r3, r4, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	331c      	adds	r3, #28
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	7d1b      	ldrb	r3, [r3, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <main+0x190>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <main+0x192>
 80010c8:	2300      	movs	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f001 ff65 	bl	8002f9c <HAL_GPIO_WritePin>
						continue;
 80010d2:	e146      	b.n	8001362 <main+0x42a>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	4a42      	ldr	r2, [pc, #264]	; (80011e0 <main+0x2a8>)
 80010d8:	212c      	movs	r1, #44	; 0x2c
 80010da:	fb01 f303 	mul.w	r3, r1, r3
 80010de:	4413      	add	r3, r2
 80010e0:	330c      	adds	r3, #12
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	4a3e      	ldr	r2, [pc, #248]	; (80011e0 <main+0x2a8>)
 80010e8:	212c      	movs	r1, #44	; 0x2c
 80010ea:	fb01 f303 	mul.w	r3, r1, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	3310      	adds	r3, #16
 80010f2:	8819      	ldrh	r1, [r3, #0]
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	4a3a      	ldr	r2, [pc, #232]	; (80011e0 <main+0x2a8>)
 80010f8:	242c      	movs	r4, #44	; 0x2c
 80010fa:	fb04 f303 	mul.w	r3, r4, r3
 80010fe:	4413      	add	r3, r2
 8001100:	3314      	adds	r3, #20
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f001 ff44 	bl	8002f9c <HAL_GPIO_WritePin>
						continue;
 8001114:	e125      	b.n	8001362 <main+0x42a>
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <main+0x2a8>)
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	3324      	adds	r3, #36	; 0x24
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02d      	beq.n	8001186 <main+0x24e>
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <main+0x2a8>)
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	3316      	adds	r3, #22
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d123      	bne.n	8001186 <main+0x24e>
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <main+0x2a8>)
 8001142:	212c      	movs	r1, #44	; 0x2c
 8001144:	fb01 f303 	mul.w	r3, r1, r3
 8001148:	4413      	add	r3, r2
 800114a:	3314      	adds	r3, #20
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d019      	beq.n	8001186 <main+0x24e>
						Buttons[i].B_Out = 0;
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <main+0x2a8>)
 8001156:	212c      	movs	r1, #44	; 0x2c
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	3314      	adds	r3, #20
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <main+0x2a8>)
 8001168:	212c      	movs	r1, #44	; 0x2c
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	3324      	adds	r3, #36	; 0x24
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	fb01 f202 	mul.w	r2, r1, r2
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <main+0x2a8>)
 800117e:	440a      	add	r2, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4798      	blx	r3
						continue;
 8001184:	e0ed      	b.n	8001362 <main+0x42a>
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <main+0x2a8>)
 800118a:	212c      	movs	r1, #44	; 0x2c
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	3316      	adds	r3, #22
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d128      	bne.n	80011ec <main+0x2b4>
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <main+0x2a8>)
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	3314      	adds	r3, #20
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01e      	beq.n	80011ec <main+0x2b4>
						Buttons[i].B_Out = 0;
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <main+0x2a8>)
 80011b2:	212c      	movs	r1, #44	; 0x2c
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	3314      	adds	r3, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	222c      	movs	r2, #44	; 0x2c
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <main+0x2a8>)
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f8d7 	bl	8002380 <TimerMotor>
						continue;
 80011d2:	e0c6      	b.n	8001362 <main+0x42a>
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	20000878 	.word	0x20000878
 80011dc:	40020400 	.word	0x40020400
 80011e0:	20000484 	.word	0x20000484
 80011e4:	2000042c 	.word	0x2000042c
 80011e8:	2000043c 	.word	0x2000043c
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4ac2      	ldr	r2, [pc, #776]	; (80014f8 <main+0x5c0>)
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	3316      	adds	r3, #22
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d152      	bne.n	80012a6 <main+0x36e>
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	4abd      	ldr	r2, [pc, #756]	; (80014f8 <main+0x5c0>)
 8001204:	212c      	movs	r1, #44	; 0x2c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	3314      	adds	r3, #20
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d048      	beq.n	80012a6 <main+0x36e>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	4ab8      	ldr	r2, [pc, #736]	; (80014f8 <main+0x5c0>)
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	331c      	adds	r3, #28
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	7d1b      	ldrb	r3, [r3, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 809a 	beq.w	8001360 <main+0x428>
						Buttons[i].B_Out = 0;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	4ab2      	ldr	r2, [pc, #712]	; (80014f8 <main+0x5c0>)
 8001230:	212c      	movs	r1, #44	; 0x2c
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	4413      	add	r3, r2
 8001238:	3314      	adds	r3, #20
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	4aad      	ldr	r2, [pc, #692]	; (80014f8 <main+0x5c0>)
 8001242:	212c      	movs	r1, #44	; 0x2c
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	330c      	adds	r3, #12
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4aa9      	ldr	r2, [pc, #676]	; (80014f8 <main+0x5c0>)
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4413      	add	r3, r2
 800125a:	3310      	adds	r3, #16
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	f001 fe9b 	bl	8002f9c <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	4aa3      	ldr	r2, [pc, #652]	; (80014f8 <main+0x5c0>)
 800126a:	212c      	movs	r1, #44	; 0x2c
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	4413      	add	r3, r2
 8001272:	3318      	adds	r3, #24
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fb8c 	bl	8002994 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	4a9e      	ldr	r2, [pc, #632]	; (80014f8 <main+0x5c0>)
 8001280:	212c      	movs	r1, #44	; 0x2c
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	4413      	add	r3, r2
 8001288:	330c      	adds	r3, #12
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	4a9a      	ldr	r2, [pc, #616]	; (80014f8 <main+0x5c0>)
 8001290:	212c      	movs	r1, #44	; 0x2c
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4413      	add	r3, r2
 8001298:	3310      	adds	r3, #16
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4619      	mov	r1, r3
 80012a0:	f001 fe7c 	bl	8002f9c <HAL_GPIO_WritePin>
						continue;
 80012a4:	e05d      	b.n	8001362 <main+0x42a>
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <main+0x5c0>)
 80012aa:	212c      	movs	r1, #44	; 0x2c
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	3316      	adds	r3, #22
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d11d      	bne.n	80012f6 <main+0x3be>
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	4a8e      	ldr	r2, [pc, #568]	; (80014f8 <main+0x5c0>)
 80012be:	212c      	movs	r1, #44	; 0x2c
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	3314      	adds	r3, #20
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d013      	beq.n	80012f6 <main+0x3be>
						Buttons[i].B_Out = 0;
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4a89      	ldr	r2, [pc, #548]	; (80014f8 <main+0x5c0>)
 80012d2:	212c      	movs	r1, #44	; 0x2c
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	4413      	add	r3, r2
 80012da:	3314      	adds	r3, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	222c      	movs	r2, #44	; 0x2c
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4a83      	ldr	r2, [pc, #524]	; (80014f8 <main+0x5c0>)
 80012ea:	4413      	add	r3, r2
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 ffa8 	bl	8002244 <HoldMotor>
						continue;
 80012f4:	e035      	b.n	8001362 <main+0x42a>
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	4a7f      	ldr	r2, [pc, #508]	; (80014f8 <main+0x5c0>)
 80012fa:	212c      	movs	r1, #44	; 0x2c
 80012fc:	fb01 f303 	mul.w	r3, r1, r3
 8001300:	4413      	add	r3, r2
 8001302:	3316      	adds	r3, #22
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b06      	cmp	r3, #6
 8001308:	d116      	bne.n	8001338 <main+0x400>
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <main+0x5c0>)
 800130e:	212c      	movs	r1, #44	; 0x2c
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	3314      	adds	r3, #20
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <main+0x400>
						HoldPrepareMotorUntill(Buttons[i].addiction, 1);
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4a75      	ldr	r2, [pc, #468]	; (80014f8 <main+0x5c0>)
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	331c      	adds	r3, #28
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fff5 	bl	8002320 <HoldPrepareMotorUntill>
						continue;
 8001336:	e014      	b.n	8001362 <main+0x42a>
				if(Buttons[i].Mode == 200) {Buttons[i].B_Out = 0;}
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <main+0x5c0>)
 800133c:	212c      	movs	r1, #44	; 0x2c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	3316      	adds	r3, #22
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2bc8      	cmp	r3, #200	; 0xc8
 800134a:	d10a      	bne.n	8001362 <main+0x42a>
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <main+0x5c0>)
 8001350:	212c      	movs	r1, #44	; 0x2c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3314      	adds	r3, #20
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e000      	b.n	8001362 <main+0x42a>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001360:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	3301      	adds	r3, #1
 8001366:	71bb      	strb	r3, [r7, #6]
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b16      	cmp	r3, #22
 800136c:	f67f ae31 	bls.w	8000fd2 <main+0x9a>
 8001370:	e604      	b.n	8000f7c <main+0x44>
			if(tmpflg)
 8001372:	4b62      	ldr	r3, [pc, #392]	; (80014fc <main+0x5c4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <main+0x458>
				tmpflg = 0;
 800137a:	4b60      	ldr	r3, [pc, #384]	; (80014fc <main+0x5c4>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
				Buttons[10].B_Out = 0;
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <main+0x5c0>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				Buttons[17].B_Out = 0;
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <main+0x5c0>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
				};

			}
			#define WELD_CHECK Welder_Check();

			if(Buttons[10].B_Out) // AUTO MODE START
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <main+0x5c0>)
 8001392:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 81ee 	beq.w	8001778 <main+0x840>
			{
				if(Buttons[15].B_State == 1)
 800139c:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <main+0x5c0>)
 800139e:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	f040 80b2 	bne.w	800150c <main+0x5d4>
				{
					Pullsteps = PULL_STEPS / 2;
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <main+0x5c8>)
 80013aa:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80013ae:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <main+0x5cc>)
 80013b2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80013b6:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 80013b8:	4853      	ldr	r0, [pc, #332]	; (8001508 <main+0x5d0>)
 80013ba:	f000 ffe1 	bl	8002380 <TimerMotor>
					CYCLE_DELAY
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f001 fae8 	bl	8002994 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <main+0x5c0>)
 80013c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ca:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <main+0x5c0>)
 80013cc:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 80013d0:	2200      	movs	r2, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fde2 	bl	8002f9c <HAL_GPIO_WritePin>
					PUSH_V
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <main+0x5c0>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	4a46      	ldr	r2, [pc, #280]	; (80014f8 <main+0x5c0>)
 80013e0:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 80013e4:	2200      	movs	r2, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fdd8 	bl	8002f9c <HAL_GPIO_WritePin>
					WAITPUSH
 80013ec:	463b      	mov	r3, r7
 80013ee:	469c      	mov	ip, r3
 80013f0:	f7ff fd56 	bl	8000ea0 <WaitPistons.9419>
					CUT_START
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <main+0x5c0>)
 80013f6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <main+0x5c0>)
 80013fc:	f8b2 1170 	ldrh.w	r1, [r2, #368]	; 0x170
 8001400:	2200      	movs	r2, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fdca 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f001 fac3 	bl	8002994 <HAL_Delay>
					CUT_RELEASE
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <main+0x5c0>)
 8001410:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001414:	4a38      	ldr	r2, [pc, #224]	; (80014f8 <main+0x5c0>)
 8001416:	f8b2 1170 	ldrh.w	r1, [r2, #368]	; 0x170
 800141a:	2201      	movs	r2, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fdbd 	bl	8002f9c <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001422:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <main+0x5c0>)
 8001424:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001428:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <main+0x5c0>)
 800142a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800142e:	2200      	movs	r2, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fdb3 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_V_START
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <main+0x5c0>)
 8001438:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <main+0x5c0>)
 800143e:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 8001442:	2200      	movs	r2, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fda9 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_CHECK
 800144a:	463b      	mov	r3, r7
 800144c:	469c      	mov	ip, r3
 800144e:	f000 f9d1 	bl	80017f4 <Welder_Check.9435>
					WELD_TIME
 8001452:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001456:	f001 fa9d 	bl	8002994 <HAL_Delay>
					WELD_H_STOP
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <main+0x5c0>)
 800145c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001460:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <main+0x5c0>)
 8001462:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8001466:	2201      	movs	r2, #1
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fd97 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_V_STOP
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <main+0x5c0>)
 8001470:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <main+0x5c0>)
 8001476:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 800147a:	2201      	movs	r2, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fd8d 	bl	8002f9c <HAL_GPIO_WritePin>
					//Release
					RELEASE_H
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <main+0x5c0>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <main+0x5c0>)
 800148a:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 800148e:	2201      	movs	r2, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fd83 	bl	8002f9c <HAL_GPIO_WritePin>
					RELEASE_V
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <main+0x5c0>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <main+0x5c0>)
 800149e:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 80014a2:	2201      	movs	r2, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fd79 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 80014aa:	2064      	movs	r0, #100	; 0x64
 80014ac:	f001 fa72 	bl	8002994 <HAL_Delay>
					//Fill, release
					WAIT_DOSE_READY
 80014b0:	463b      	mov	r3, r7
 80014b2:	469c      	mov	ip, r3
 80014b4:	f000 f97c 	bl	80017b0 <WaitDoseReady.9429>
					DOSE_PULSE_START
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <main+0x5c0>)
 80014ba:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <main+0x5c0>)
 80014c0:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 80014c4:	2200      	movs	r2, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fd68 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 80014cc:	2064      	movs	r0, #100	; 0x64
 80014ce:	f001 fa61 	bl	8002994 <HAL_Delay>
					DOSE_PULSE_STOP
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <main+0x5c0>)
 80014d4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <main+0x5c0>)
 80014da:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 80014de:	2201      	movs	r2, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fd5b 	bl	8002f9c <HAL_GPIO_WritePin>
					HAL_Delay(WAITING); // Delay. Mixture fall time
 80014e6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80014ea:	f001 fa53 	bl	8002994 <HAL_Delay>
					CYCLE_DELAY
 80014ee:	2064      	movs	r0, #100	; 0x64
 80014f0:	f001 fa50 	bl	8002994 <HAL_Delay>
 80014f4:	e13a      	b.n	800176c <main+0x834>
 80014f6:	bf00      	nop
 80014f8:	20000484 	.word	0x20000484
 80014fc:	2000042c 	.word	0x2000042c
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004
 8001508:	200005b8 	.word	0x200005b8
				}
				else
				{
					Pullsteps = PULL_STEPS / 2;
 800150c:	4ba1      	ldr	r3, [pc, #644]	; (8001794 <main+0x85c>)
 800150e:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8001512:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 8001514:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <main+0x860>)
 8001516:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800151a:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 800151c:	489f      	ldr	r0, [pc, #636]	; (800179c <main+0x864>)
 800151e:	f000 ff2f 	bl	8002380 <TimerMotor>
					CYCLE_DELAY
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f001 fa36 	bl	8002994 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 8001528:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <main+0x868>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800152e:	4a9c      	ldr	r2, [pc, #624]	; (80017a0 <main+0x868>)
 8001530:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 8001534:	2200      	movs	r2, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fd30 	bl	8002f9c <HAL_GPIO_WritePin>
					PUSH_V
 800153c:	4b98      	ldr	r3, [pc, #608]	; (80017a0 <main+0x868>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	4a97      	ldr	r2, [pc, #604]	; (80017a0 <main+0x868>)
 8001544:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 8001548:	2200      	movs	r2, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fd26 	bl	8002f9c <HAL_GPIO_WritePin>
					WAITPUSH
 8001550:	463b      	mov	r3, r7
 8001552:	469c      	mov	ip, r3
 8001554:	f7ff fca4 	bl	8000ea0 <WaitPistons.9419>
					CUT_START
 8001558:	4b91      	ldr	r3, [pc, #580]	; (80017a0 <main+0x868>)
 800155a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800155e:	4a90      	ldr	r2, [pc, #576]	; (80017a0 <main+0x868>)
 8001560:	f8b2 1170 	ldrh.w	r1, [r2, #368]	; 0x170
 8001564:	2200      	movs	r2, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fd18 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 800156c:	2064      	movs	r0, #100	; 0x64
 800156e:	f001 fa11 	bl	8002994 <HAL_Delay>
					CUT_RELEASE
 8001572:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <main+0x868>)
 8001574:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001578:	4a89      	ldr	r2, [pc, #548]	; (80017a0 <main+0x868>)
 800157a:	f8b2 1170 	ldrh.w	r1, [r2, #368]	; 0x170
 800157e:	2201      	movs	r2, #1
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fd0b 	bl	8002f9c <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001586:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <main+0x868>)
 8001588:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800158c:	4a84      	ldr	r2, [pc, #528]	; (80017a0 <main+0x868>)
 800158e:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8001592:	2200      	movs	r2, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fd01 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_V_START
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <main+0x868>)
 800159c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80015a0:	4a7f      	ldr	r2, [pc, #508]	; (80017a0 <main+0x868>)
 80015a2:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80015a6:	2200      	movs	r2, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fcf7 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_CHECK
 80015ae:	463b      	mov	r3, r7
 80015b0:	469c      	mov	ip, r3
 80015b2:	f000 f91f 	bl	80017f4 <Welder_Check.9435>
					WELD_TIME
 80015b6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015ba:	f001 f9eb 	bl	8002994 <HAL_Delay>
					WELD_H_STOP
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <main+0x868>)
 80015c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80015c4:	4a76      	ldr	r2, [pc, #472]	; (80017a0 <main+0x868>)
 80015c6:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80015ca:	2201      	movs	r2, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fce5 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_V_STOP
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <main+0x868>)
 80015d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80015d8:	4a71      	ldr	r2, [pc, #452]	; (80017a0 <main+0x868>)
 80015da:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80015de:	2201      	movs	r2, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fcdb 	bl	8002f9c <HAL_GPIO_WritePin>
					//Release, fill 1
					RELEASE_H
 80015e6:	4b6e      	ldr	r3, [pc, #440]	; (80017a0 <main+0x868>)
 80015e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ec:	4a6c      	ldr	r2, [pc, #432]	; (80017a0 <main+0x868>)
 80015ee:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 80015f2:	2201      	movs	r2, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fcd1 	bl	8002f9c <HAL_GPIO_WritePin>
					RELEASE_V
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <main+0x868>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <main+0x868>)
 8001602:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 8001606:	2201      	movs	r2, #1
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fcc7 	bl	8002f9c <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 800160e:	463b      	mov	r3, r7
 8001610:	469c      	mov	ip, r3
 8001612:	f000 f8cd 	bl	80017b0 <WaitDoseReady.9429>
					DOSE_PULSE_START
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <main+0x868>)
 8001618:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <main+0x868>)
 800161e:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 8001622:	2200      	movs	r2, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fcb9 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 800162a:	2064      	movs	r0, #100	; 0x64
 800162c:	f001 f9b2 	bl	8002994 <HAL_Delay>
					DOSE_PULSE_STOP
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <main+0x868>)
 8001632:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8001636:	4a5a      	ldr	r2, [pc, #360]	; (80017a0 <main+0x868>)
 8001638:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 800163c:	2201      	movs	r2, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fcac 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f001 f9a5 	bl	8002994 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 800164a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800164e:	f001 f9a1 	bl	8002994 <HAL_Delay>
					CYCLE_DELAY
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f001 f99e 	bl	8002994 <HAL_Delay>
					//DOSE
					//Pull stage 2
					PULL
 8001658:	4850      	ldr	r0, [pc, #320]	; (800179c <main+0x864>)
 800165a:	f000 fe91 	bl	8002380 <TimerMotor>
					CYCLE_DELAY
 800165e:	2064      	movs	r0, #100	; 0x64
 8001660:	f001 f998 	bl	8002994 <HAL_Delay>
					//Clamp material 2
					PUSH_V
 8001664:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <main+0x868>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a4d      	ldr	r2, [pc, #308]	; (80017a0 <main+0x868>)
 800166c:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 8001670:	2200      	movs	r2, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fc92 	bl	8002f9c <HAL_GPIO_WritePin>
					PUSH_H
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <main+0x868>)
 800167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800167e:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <main+0x868>)
 8001680:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 8001684:	2200      	movs	r2, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fc88 	bl	8002f9c <HAL_GPIO_WritePin>
					WAITPUSH
 800168c:	463b      	mov	r3, r7
 800168e:	469c      	mov	ip, r3
 8001690:	f7ff fc06 	bl	8000ea0 <WaitPistons.9419>
					CYCLE_DELAY
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f001 f97d 	bl	8002994 <HAL_Delay>
					//Welding stage 2
					WELD_V_START
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <main+0x868>)
 800169c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016a0:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <main+0x868>)
 80016a2:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fc77 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_H_START
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <main+0x868>)
 80016b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016b4:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <main+0x868>)
 80016b6:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80016ba:	2200      	movs	r2, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fc6d 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_CHECK
 80016c2:	463b      	mov	r3, r7
 80016c4:	469c      	mov	ip, r3
 80016c6:	f000 f895 	bl	80017f4 <Welder_Check.9435>
					WELD_TIME
 80016ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80016ce:	f001 f961 	bl	8002994 <HAL_Delay>
					WELD_V_STOP
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <main+0x868>)
 80016d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016d8:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <main+0x868>)
 80016da:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80016de:	2201      	movs	r2, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fc5b 	bl	8002f9c <HAL_GPIO_WritePin>
					WELD_H_STOP
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <main+0x868>)
 80016e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016ec:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <main+0x868>)
 80016ee:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80016f2:	2201      	movs	r2, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fc51 	bl	8002f9c <HAL_GPIO_WritePin>
					//Release, fill 2
					RELEASE_V
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <main+0x868>)
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <main+0x868>)
 8001702:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 8001706:	2201      	movs	r2, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fc47 	bl	8002f9c <HAL_GPIO_WritePin>
					RELEASE_H
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <main+0x868>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <main+0x868>)
 8001716:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 800171a:	2201      	movs	r2, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fc3d 	bl	8002f9c <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 8001722:	463b      	mov	r3, r7
 8001724:	469c      	mov	ip, r3
 8001726:	f000 f843 	bl	80017b0 <WaitDoseReady.9429>
					DOSE_PULSE_START
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <main+0x868>)
 800172c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <main+0x868>)
 8001732:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 8001736:	2200      	movs	r2, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fc2f 	bl	8002f9c <HAL_GPIO_WritePin>
					CYCLE_DELAY
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f001 f928 	bl	8002994 <HAL_Delay>
					DOSE_PULSE_STOP
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <main+0x868>)
 8001746:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <main+0x868>)
 800174c:	f8b2 12d0 	ldrh.w	r1, [r2, #720]	; 0x2d0
 8001750:	2201      	movs	r2, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fc22 	bl	8002f9c <HAL_GPIO_WritePin>
					//DOSE
					CYCLE_DELAY
 8001758:	2064      	movs	r0, #100	; 0x64
 800175a:	f001 f91b 	bl	8002994 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 800175e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001762:	f001 f917 	bl	8002994 <HAL_Delay>
					CYCLE_DELAY
 8001766:	2064      	movs	r0, #100	; 0x64
 8001768:	f001 f914 	bl	8002994 <HAL_Delay>
				HAL_GPIO_WritePin(OUT_A_GPIO_Port, OUT_A_Pin, !pOutSig[0]);
				HAL_GPIO_WritePin(OUT_B_GPIO_Port, OUT_B_Pin, !pOutSig[1]);
				*/
				//End

				counter++; // Ammount of packages done
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <main+0x86c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <main+0x86c>)
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e401      	b.n	8000f7c <main+0x44>
			}
			else if(flag == true)
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <main+0x870>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f43f abfd 	beq.w	8000f7c <main+0x44>
			{
				flag = false;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <main+0x870>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001788:	2100      	movs	r1, #0
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <main+0x874>)
 800178c:	f002 fa70 	bl	8003c70 <HAL_TIM_PWM_Stop>
		if(!Buttons[9].B_State)// Mode select
 8001790:	f7ff bbf4 	b.w	8000f7c <main+0x44>
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004
 800179c:	200005b8 	.word	0x200005b8
 80017a0:	20000484 	.word	0x20000484
 80017a4:	20000428 	.word	0x20000428
 80017a8:	2000042d 	.word	0x2000042d
 80017ac:	2000043c 	.word	0x2000043c

080017b0 <WaitDoseReady.9429>:
			{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	f8c7 c004 	str.w	ip, [r7, #4]
				while(Buttons[17].B_Out)
 80017ba:	e00a      	b.n	80017d2 <WaitDoseReady.9429+0x22>
					asm("NOP");
 80017bc:	bf00      	nop
					if(!Buttons[10].B_Out || !Buttons[9].B_State)
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <WaitDoseReady.9429+0x40>)
 80017c0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <WaitDoseReady.9429+0x2c>
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <WaitDoseReady.9429+0x40>)
 80017ca:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <WaitDoseReady.9429+0x2c>
				while(Buttons[17].B_Out)
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <WaitDoseReady.9429+0x40>)
 80017d4:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ef      	bne.n	80017bc <WaitDoseReady.9429+0xc>
				Buttons[17].B_Out = 1;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <WaitDoseReady.9429+0x40>)
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			};
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	20000484 	.word	0x20000484

080017f4 <Welder_Check.9435>:
			{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	f8c7 c004 	str.w	ip, [r7, #4]
				uint32_t timer = 12000000;
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <Welder_Check.9435+0xd4>)
 8001800:	60fb      	str	r3, [r7, #12]
				while(!Buttons[18].B_State || !Buttons[20].B_State)
 8001802:	e052      	b.n	80018aa <Welder_Check.9435+0xb6>
					timer--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3b01      	subs	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
					if(!timer)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d14c      	bne.n	80018aa <Welder_Check.9435+0xb6>
						WELD_H_STOP
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <Welder_Check.9435+0xd8>)
 8001812:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <Welder_Check.9435+0xd8>)
 8001818:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800181c:	2201      	movs	r2, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fbbc 	bl	8002f9c <HAL_GPIO_WritePin>
						WELD_V_STOP
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <Welder_Check.9435+0xd8>)
 8001826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <Welder_Check.9435+0xd8>)
 800182c:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 8001830:	2201      	movs	r2, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fbb2 	bl	8002f9c <HAL_GPIO_WritePin>
						Buttons[10].B_Out = 0;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <Welder_Check.9435+0xd8>)
 800183a:	2200      	movs	r2, #0
 800183c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
						while(!Buttons[10].B_Out && (!Buttons[18].B_State || !Buttons[20].B_State))
 8001840:	e00f      	b.n	8001862 <Welder_Check.9435+0x6e>
							HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <Welder_Check.9435+0xdc>)
 8001848:	f001 fba8 	bl	8002f9c <HAL_GPIO_WritePin>
							HAL_Delay(200);
 800184c:	20c8      	movs	r0, #200	; 0xc8
 800184e:	f001 f8a1 	bl	8002994 <HAL_Delay>
							HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8001852:	2201      	movs	r2, #1
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <Welder_Check.9435+0xdc>)
 8001858:	f001 fba0 	bl	8002f9c <HAL_GPIO_WritePin>
							HAL_Delay(200);
 800185c:	20c8      	movs	r0, #200	; 0xc8
 800185e:	f001 f899 	bl	8002994 <HAL_Delay>
						while(!Buttons[10].B_Out && (!Buttons[18].B_State || !Buttons[20].B_State))
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <Welder_Check.9435+0xd8>)
 8001864:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <Welder_Check.9435+0x8c>
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <Welder_Check.9435+0xd8>)
 800186e:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0e5      	beq.n	8001842 <Welder_Check.9435+0x4e>
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <Welder_Check.9435+0xd8>)
 8001878:	f893 3383 	ldrb.w	r3, [r3, #899]	; 0x383
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0e0      	beq.n	8001842 <Welder_Check.9435+0x4e>
						WELD_H_START
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <Welder_Check.9435+0xd8>)
 8001882:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <Welder_Check.9435+0xd8>)
 8001888:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800188c:	2200      	movs	r2, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fb84 	bl	8002f9c <HAL_GPIO_WritePin>
						WELD_V_START
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <Welder_Check.9435+0xd8>)
 8001896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <Welder_Check.9435+0xd8>)
 800189c:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80018a0:	2200      	movs	r2, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fb7a 	bl	8002f9c <HAL_GPIO_WritePin>
						break;
 80018a8:	e00a      	b.n	80018c0 <Welder_Check.9435+0xcc>
				while(!Buttons[18].B_State || !Buttons[20].B_State)
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <Welder_Check.9435+0xd8>)
 80018ac:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0a7      	beq.n	8001804 <Welder_Check.9435+0x10>
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <Welder_Check.9435+0xd8>)
 80018b6:	f893 3383 	ldrb.w	r3, [r3, #899]	; 0x383
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0a2      	beq.n	8001804 <Welder_Check.9435+0x10>
			}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	00b71b00 	.word	0x00b71b00
 80018cc:	20000484 	.word	0x20000484
 80018d0:	40020400 	.word	0x40020400

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	; 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f8b8 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <SystemClock_Config+0xc8>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a26      	ldr	r2, [pc, #152]	; (800199c <SystemClock_Config+0xc8>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <SystemClock_Config+0xc8>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <SystemClock_Config+0xcc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <SystemClock_Config+0xcc>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <SystemClock_Config+0xcc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001930:	2301      	movs	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001944:	2304      	movs	r3, #4
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001948:	2348      	movs	r3, #72	; 0x48
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800194c:	2306      	movs	r3, #6
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001950:	2304      	movs	r3, #4
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fb39 	bl	8002fd0 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001964:	f000 fdc0 	bl	80024e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fd9b 	bl	80034c0 <HAL_RCC_ClockConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001990:	f000 fdaa 	bl	80024e8 <Error_Handler>
  }
}
 8001994:	bf00      	nop
 8001996:	3750      	adds	r7, #80	; 0x50
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <MX_TIM3_Init+0xe8>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150;
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019dc:	2296      	movs	r2, #150	; 0x96
 80019de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 116;
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019e8:	2274      	movs	r2, #116	; 0x74
 80019ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019fc:	f001 ff28 	bl	8003850 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a06:	f000 fd6f 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a14:	4619      	mov	r1, r3
 8001a16:	481c      	ldr	r0, [pc, #112]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a18:	f002 fb64 	bl	80040e4 <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a22:	f000 fd61 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a28:	f002 f801 	bl	8003a2e <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a32:	f000 fd59 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a46:	f002 ff4d 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a50:	f000 fd4a 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 58;
 8001a58:	233a      	movs	r3, #58	; 0x3a
 8001a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a6c:	f002 fa78 	bl	8003f60 <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a76:	f000 fd37 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a7c:	f000 fdaa 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3738      	adds	r7, #56	; 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000043c 	.word	0x2000043c
 8001a8c:	40000400 	.word	0x40000400

08001a90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <MX_TIM7_Init+0x68>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aa6:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001aaa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001ac0:	f001 fec6 	bl	8003850 <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001aca:	f000 fd0d 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001adc:	f002 ff02 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ae6:	f000 fcff 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000878 	.word	0x20000878
 8001af8:	40001400 	.word	0x40001400

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	4b7e      	ldr	r3, [pc, #504]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a7d      	ldr	r2, [pc, #500]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a76      	ldr	r2, [pc, #472]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b74      	ldr	r3, [pc, #464]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a68      	ldr	r2, [pc, #416]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a61      	ldr	r2, [pc, #388]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <MX_GPIO_Init+0x214>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4855      	ldr	r0, [pc, #340]	; (8001d14 <MX_GPIO_Init+0x218>)
 8001bc0:	f001 f9ec 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	21c0      	movs	r1, #192	; 0xc0
 8001bc8:	4853      	ldr	r0, [pc, #332]	; (8001d18 <MX_GPIO_Init+0x21c>)
 8001bca:	f001 f9e7 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001bd4:	4851      	ldr	r0, [pc, #324]	; (8001d1c <MX_GPIO_Init+0x220>)
 8001bd6:	f001 f9e1 	bl	8002f9c <HAL_GPIO_WritePin>
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|RST_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	21c0      	movs	r1, #192	; 0xc0
 8001bde:	4850      	ldr	r0, [pc, #320]	; (8001d20 <MX_GPIO_Init+0x224>)
 8001be0:	f001 f9dc 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin
                           HOLD_Pull_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin
 8001be4:	f64f 73da 	movw	r3, #65498	; 0xffda
 8001be8:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin
                          |HOLD_Pull_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4846      	ldr	r0, [pc, #280]	; (8001d14 <MX_GPIO_Init+0x218>)
 8001bfa:	f001 f81b 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c06:	2302      	movs	r3, #2
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	483f      	ldr	r0, [pc, #252]	; (8001d14 <MX_GPIO_Init+0x218>)
 8001c16:	f001 f80d 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOLD_Dose_Pin Weld_Feedback_Pin Size_Select_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin|Weld_Feedback_Pin|Size_Select_Pin;
 8001c1a:	f242 0303 	movw	r3, #8195	; 0x2003
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	483d      	ldr	r0, [pc, #244]	; (8001d24 <MX_GPIO_Init+0x228>)
 8001c30:	f001 f800 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4833      	ldr	r0, [pc, #204]	; (8001d18 <MX_GPIO_Init+0x21c>)
 8001c4c:	f000 fff2 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dose_Ready_Pin */
  GPIO_InitStruct.Pin = Dose_Ready_Pin;
 8001c50:	2310      	movs	r3, #16
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Dose_Ready_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4830      	ldr	r0, [pc, #192]	; (8001d24 <MX_GPIO_Init+0x228>)
 8001c64:	f000 ffe6 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Weld_Feedback2_Pin Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = Weld_Feedback2_Pin|Mode_Pin|Auto_Start_Pin;
 8001c68:	f640 4304 	movw	r3, #3076	; 0xc04
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4828      	ldr	r0, [pc, #160]	; (8001d20 <MX_GPIO_Init+0x224>)
 8001c7e:	f000 ffd9 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dose_Pulse_Out_Pin Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin
                           H_Push_Out_Pin H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin
 8001c82:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001c86:	61fb      	str	r3, [r7, #28]
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4820      	ldr	r0, [pc, #128]	; (8001d1c <MX_GPIO_Init+0x220>)
 8001c9c:	f000 ffca 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin HorizontalPistonFeedback_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin|HorizontalPistonFeedback_Pin;
 8001ca0:	2358      	movs	r3, #88	; 0x58
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481a      	ldr	r0, [pc, #104]	; (8001d1c <MX_GPIO_Init+0x220>)
 8001cb4:	f000 ffbe 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VerticalPistonFeedback_Pin */
  GPIO_InitStruct.Pin = VerticalPistonFeedback_Pin;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VerticalPistonFeedback_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4814      	ldr	r0, [pc, #80]	; (8001d1c <MX_GPIO_Init+0x220>)
 8001ccc:	f000 ffb2 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <MX_GPIO_Init+0x224>)
 8001ce8:	f000 ffa4 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_GPIO_Init+0x224>)
 8001d04:	f000 ff96 	bl	8002c34 <HAL_GPIO_Init>

}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40020800 	.word	0x40020800

08001d28 <Init>:

/* USER CODE BEGIN 4 */
void Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f000 fe30 	bl	8002994 <HAL_Delay>
	  //ST7920_Init();
	  //ST7920_Graphic_mode(1);
	  //sprintf(tx_buffer, "WELCOME");
	  //ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
	  //ST7920_Update();
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	e0b0      	b.n	8001e9c <Init+0x174>
	  {
		  Buttons[i].B_Out = 0;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	4a74      	ldr	r2, [pc, #464]	; (8001f10 <Init+0x1e8>)
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3314      	adds	r3, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_State = 0;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4a70      	ldr	r2, [pc, #448]	; (8001f10 <Init+0x1e8>)
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3313      	adds	r3, #19
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_counter = 0;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <Init+0x1e8>)
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3312      	adds	r3, #18
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Lock = 0;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <Init+0x1e8>)
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
		  Buttons[i].call_function = toggle_func;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <Init+0x1e8>)
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3320      	adds	r3, #32
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <Init+0x1ec>)
 8001d92:	601a      	str	r2, [r3, #0]
		  Buttons[i].alternate_function = 0;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a5e      	ldr	r2, [pc, #376]	; (8001f10 <Init+0x1e8>)
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3324      	adds	r3, #36	; 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	495b      	ldr	r1, [pc, #364]	; (8001f18 <Init+0x1f0>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <Init+0x1e8>)
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin = Defines[i][1];
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	4953      	ldr	r1, [pc, #332]	; (8001f18 <Init+0x1f0>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	b290      	uxth	r0, r2
 8001dde:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <Init+0x1e8>)
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3308      	adds	r3, #8
 8001dea:	4602      	mov	r2, r0
 8001dec:	801a      	strh	r2, [r3, #0]
		  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	4949      	ldr	r1, [pc, #292]	; (8001f18 <Init+0x1f0>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4a42      	ldr	r2, [pc, #264]	; (8001f10 <Init+0x1e8>)
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	330c      	adds	r3, #12
 8001e10:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	4940      	ldr	r1, [pc, #256]	; (8001f18 <Init+0x1f0>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	330c      	adds	r3, #12
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b290      	uxth	r0, r2
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <Init+0x1e8>)
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3310      	adds	r3, #16
 8001e34:	4602      	mov	r2, r0
 8001e36:	801a      	strh	r2, [r3, #0]
		  Buttons[i].Mode = Defines[i][4];
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	4937      	ldr	r1, [pc, #220]	; (8001f18 <Init+0x1f0>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3310      	adds	r3, #16
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	b2d0      	uxtb	r0, r2
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <Init+0x1e8>)
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3316      	adds	r3, #22
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Delay = Defines[i][5];
 8001e5e:	79fa      	ldrb	r2, [r7, #7]
 8001e60:	492d      	ldr	r1, [pc, #180]	; (8001f18 <Init+0x1f0>)
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	b290      	uxth	r0, r2
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <Init+0x1e8>)
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3318      	adds	r3, #24
 8001e80:	4602      	mov	r2, r0
 8001e82:	801a      	strh	r2, [r3, #0]
		  Buttons[i].addiction = 0;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <Init+0x1e8>)
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	331c      	adds	r3, #28
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2b16      	cmp	r3, #22
 8001ea0:	f67f af4b 	bls.w	8001d3a <Init+0x12>
	  }
	  Buttons[0].alternate_function = macros1;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <Init+0x1e8>)
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <Init+0x1f4>)
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
	  Buttons[1].Label = "Prepare";
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <Init+0x1e8>)
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <Init+0x1f8>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
	  Buttons[1].third_function = SetSteps0;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <Init+0x1e8>)
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <Init+0x1fc>)
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
	  Buttons[1].addiction = &Buttons[13];
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <Init+0x1e8>)
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <Init+0x200>)
 8001eba:	649a      	str	r2, [r3, #72]	; 0x48
	  Buttons[2].third_function = SetSteps2;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <Init+0x1e8>)
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <Init+0x204>)
 8001ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  Buttons[4].addiction = &Buttons[3];
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <Init+0x1e8>)
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <Init+0x208>)
 8001ec8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	  Buttons[6].addiction = &Buttons[5];
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <Init+0x1e8>)
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <Init+0x20c>)
 8001ed0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  Buttons[7].third_function = SetSteps1;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <Init+0x1e8>)
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <Init+0x210>)
 8001ed8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Buttons[9].Label = "mode";
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <Init+0x1e8>)
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <Init+0x214>)
 8001ee0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  Buttons[10].Label = "auto_start";
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <Init+0x1e8>)
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <Init+0x218>)
 8001ee8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	  Buttons[13].Label = "reed_switch";
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <Init+0x1e8>)
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <Init+0x21c>)
 8001ef0:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4813      	ldr	r0, [pc, #76]	; (8001f48 <Init+0x220>)
 8001efa:	f001 f84f 	bl	8002f9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	4811      	ldr	r0, [pc, #68]	; (8001f48 <Init+0x220>)
 8001f04:	f001 f84a 	bl	8002f9c <HAL_GPIO_WritePin>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000484 	.word	0x20000484
 8001f14:	080020fd 	.word	0x080020fd
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	08002181 	.word	0x08002181
 8001f20:	08007428 	.word	0x08007428
 8001f24:	080024a9 	.word	0x080024a9
 8001f28:	200006c0 	.word	0x200006c0
 8001f2c:	08002489 	.word	0x08002489
 8001f30:	20000508 	.word	0x20000508
 8001f34:	20000560 	.word	0x20000560
 8001f38:	08002469 	.word	0x08002469
 8001f3c:	08007430 	.word	0x08007430
 8001f40:	08007438 	.word	0x08007438
 8001f44:	08007444 	.word	0x08007444
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a60      	ldr	r2, [pc, #384]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 80b9 	bne.w	80020d2 <HAL_TIM_PeriodElapsedCallback+0x186>
	{
		if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 8001f60:	2110      	movs	r1, #16
 8001f62:	485f      	ldr	r0, [pc, #380]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f64:	f001 f802 	bl	8002f6c <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d131      	bne.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e016      	b.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	330c      	adds	r3, #12
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3310      	adds	r3, #16
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4619      	mov	r1, r3
 8001f98:	f001 f800 	bl	8002f9c <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b16      	cmp	r3, #22
 8001fa6:	d9e5      	bls.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x28>
			}
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	484f      	ldr	r0, [pc, #316]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001fac:	f001 fe60 	bl	8003c70 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim7);
 8001fb0:	484e      	ldr	r0, [pc, #312]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001fb2:	f001 fd0d 	bl	80039d0 <HAL_TIM_Base_Stop_IT>
			Delay(4800000);
 8001fb6:	484e      	ldr	r0, [pc, #312]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001fb8:	f000 fa84 	bl	80024c4 <Delay>
			while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 8001fbc:	e000      	b.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001fbe:	bf00      	nop
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001fc4:	f000 ffd2 	bl	8002f6c <HAL_GPIO_ReadPin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f7      	beq.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_NVIC_SystemReset();
 8001fce:	f000 fe20 	bl	8002c12 <HAL_NVIC_SystemReset>
		}

		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73bb      	strb	r3, [r7, #14]
 8001fd6:	e045      	b.n	8002064 <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			if((Buttons[i].addiction->B_Out == 1 && Buttons[i].Mode == __DELAY && Buttons[i].addiction != 0) || Buttons[i].addiction == 0 || Buttons[i].Mode != __DELAY)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	331c      	adds	r3, #28
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7d1b      	ldrb	r3, [r3, #20]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d113      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0xca>
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3316      	adds	r3, #22
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d109      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0xca>
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	331c      	adds	r3, #28
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d113      	bne.n	800203e <HAL_TIM_PeriodElapsedCallback+0xf2>
 8002016:	7bbb      	ldrb	r3, [r7, #14]
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	331c      	adds	r3, #28
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_TIM_PeriodElapsedCallback+0xf2>
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3316      	adds	r3, #22
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d00f      	beq.n	800205e <HAL_TIM_PeriodElapsedCallback+0x112>
				Buttons[i].call_function(&Buttons[i]);
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3320      	adds	r3, #32
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	7bba      	ldrb	r2, [r7, #14]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f202 	mul.w	r2, r1, r2
 8002056:	4923      	ldr	r1, [pc, #140]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002058:	440a      	add	r2, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	3301      	adds	r3, #1
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	2b16      	cmp	r3, #22
 8002068:	d9b6      	bls.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		if(flag == true || Buttons[10].B_Out == 1)
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <HAL_TIM_PeriodElapsedCallback+0x130>
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002074:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_TIM_PeriodElapsedCallback+0x13c>
		{
			HoldPrepareMotorUntill(Buttons[1].addiction, 1);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f94c 	bl	8002320 <HoldPrepareMotorUntill>
		}
		if((flag == true && Buttons[10].B_Out == 0) || Buttons[9].B_State == 0)
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_TIM_PeriodElapsedCallback+0x14e>
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002092:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x158>
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800209c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <HAL_TIM_PeriodElapsedCallback+0x166>
		{
			flag = false;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80020aa:	2100      	movs	r1, #0
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80020ae:	f001 fddf 	bl	8003c70 <HAL_TIM_PWM_Stop>
		}
		if(Buttons[14].B_Out && counter > 0)
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80020b4:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x186>
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			Buttons[14].B_Out = 0;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
			counter = 0;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
	}
	if (htim->Instance==TIM6)
	{
		//ST7920_Update();
	}
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40001400 	.word	0x40001400
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	20000484 	.word	0x20000484
 80020e8:	2000043c 	.word	0x2000043c
 80020ec:	20000878 	.word	0x20000878
 80020f0:	00493e00 	.word	0x00493e00
 80020f4:	2000042d 	.word	0x2000042d
 80020f8:	20000428 	.word	0x20000428

080020fc <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	891b      	ldrh	r3, [r3, #8]
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 ff2c 	bl	8002f6c <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11d      	bne.n	8002156 <toggle_func+0x5a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7d5b      	ldrb	r3, [r3, #21]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d119      	bne.n	8002156 <toggle_func+0x5a>
		{
			if(button->B_counter < 20)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7c9b      	ldrb	r3, [r3, #18]
 8002126:	2b13      	cmp	r3, #19
 8002128:	d806      	bhi.n	8002138 <toggle_func+0x3c>
				button->B_counter++;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7c9b      	ldrb	r3, [r3, #18]
 800212e:	3301      	adds	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 20)
 8002136:	e01d      	b.n	8002174 <toggle_func+0x78>
			else
				if(button->B_State == 0)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7cdb      	ldrb	r3, [r3, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d119      	bne.n	8002174 <toggle_func+0x78>
				{
					button->B_State = 1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7d1b      	ldrb	r3, [r3, #20]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 20)
 8002154:	e00e      	b.n	8002174 <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7c9b      	ldrb	r3, [r3, #18]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <toggle_func+0x70>
				button->B_counter--;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7c9b      	ldrb	r3, [r3, #18]
 8002162:	3b01      	subs	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 800216a:	e004      	b.n	8002176 <toggle_func+0x7a>
				button->B_State = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	74da      	strb	r2, [r3, #19]
}
 8002172:	e000      	b.n	8002176 <toggle_func+0x7a>
			if(button->B_counter < 20)
 8002174:	bf00      	nop
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <macros1>:
void macros1(struct Button *button)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <macros1+0xc0>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <macros1+0xc0>)
 8002190:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 8002194:	2200      	movs	r2, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ff00 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <macros1+0xc0>)
 800219e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80021a2:	4a27      	ldr	r2, [pc, #156]	; (8002240 <macros1+0xc0>)
 80021a4:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 80021a8:	2200      	movs	r2, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fef6 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80021b0:	20c8      	movs	r0, #200	; 0xc8
 80021b2:	f000 fbef 	bl	8002994 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <macros1+0xc0>)
 80021b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021bc:	4a20      	ldr	r2, [pc, #128]	; (8002240 <macros1+0xc0>)
 80021be:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 80021c2:	2200      	movs	r2, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fee9 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <macros1+0xc0>)
 80021cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <macros1+0xc0>)
 80021d2:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80021d6:	2200      	movs	r2, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fedf 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80021de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021e2:	f000 fbd7 	bl	8002994 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <macros1+0xc0>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <macros1+0xc0>)
 80021ee:	f8b2 1094 	ldrh.w	r1, [r2, #148]	; 0x94
 80021f2:	2201      	movs	r2, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fed1 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <macros1+0xc0>)
 80021fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <macros1+0xc0>)
 8002202:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 8002206:	2201      	movs	r2, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fec7 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <macros1+0xc0>)
 8002210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <macros1+0xc0>)
 8002216:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
 800221a:	2201      	movs	r2, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 febd 	bl	8002f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <macros1+0xc0>)
 8002224:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <macros1+0xc0>)
 800222a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800222e:	2201      	movs	r2, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f000 feb3 	bl	8002f9c <HAL_GPIO_WritePin>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000484 	.word	0x20000484

08002244 <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]

	uint32_t Limitation = 100000;
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <HoldMotor+0xd8>)
 8002252:	617b      	str	r3, [r7, #20]
	uint16_t temp = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	827b      	strh	r3, [r7, #18]
	for(uint32_t j = 0; j < 10; j++)
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e020      	b.n	80022a0 <HoldMotor+0x5c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68d8      	ldr	r0, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8a1b      	ldrh	r3, [r3, #16]
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	f000 fe97 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8b1b      	ldrh	r3, [r3, #24]
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f924 	bl	80024c4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68d8      	ldr	r0, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8a1b      	ldrh	r3, [r3, #16]
 8002284:	2201      	movs	r2, #1
 8002286:	4619      	mov	r1, r3
 8002288:	f000 fe88 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8b1b      	ldrh	r3, [r3, #24]
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f915 	bl	80024c4 <Delay>
	for(uint32_t j = 0; j < 10; j++)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d9db      	bls.n	800225e <HoldMotor+0x1a>
	}
	while(Button->B_State == mode && Limitation)
 80022a6:	e02d      	b.n	8002304 <HoldMotor+0xc0>
	{
		Limitation--;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
		if(temp < ACCEL) temp++;
 80022ae:	8a7b      	ldrh	r3, [r7, #18]
 80022b0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80022b4:	d202      	bcs.n	80022bc <HoldMotor+0x78>
 80022b6:	8a7b      	ldrh	r3, [r7, #18]
 80022b8:	3301      	adds	r3, #1
 80022ba:	827b      	strh	r3, [r7, #18]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68d8      	ldr	r0, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8a1b      	ldrh	r3, [r3, #16]
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	f000 fe68 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8b1b      	ldrh	r3, [r3, #24]
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	8a7b      	ldrh	r3, [r7, #18]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f8f2 	bl	80024c4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68d8      	ldr	r0, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8a1b      	ldrh	r3, [r3, #16]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	f000 fe56 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8b1b      	ldrh	r3, [r3, #24]
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	8a7b      	ldrh	r3, [r7, #18]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f8e0 	bl	80024c4 <Delay>
	while(Button->B_State == mode && Limitation)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7cdb      	ldrb	r3, [r3, #19]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	429a      	cmp	r2, r3
 800230c:	d102      	bne.n	8002314 <HoldMotor+0xd0>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1c9      	bne.n	80022a8 <HoldMotor+0x64>
	}

}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	000186a0 	.word	0x000186a0

08002320 <HoldPrepareMotorUntill>:

void HoldPrepareMotorUntill(struct Button *Button, uint8_t mode)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
	if(Button->B_State == mode)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7cdb      	ldrb	r3, [r3, #19]
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	429a      	cmp	r2, r3
 8002334:	d10e      	bne.n	8002354 <HoldPrepareMotorUntill+0x34>
	{
		if(flag == false)
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HoldPrepareMotorUntill+0x54>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <HoldPrepareMotorUntill+0x4a>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002344:	2100      	movs	r1, #0
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <HoldPrepareMotorUntill+0x58>)
 8002348:	f001 fbca 	bl	8003ae0 <HAL_TIM_PWM_Start>
			flag = true;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HoldPrepareMotorUntill+0x54>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		flag = false;
		Buttons[1].B_Out = 0;
	}
}
 8002352:	e00a      	b.n	800236a <HoldPrepareMotorUntill+0x4a>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002354:	2100      	movs	r1, #0
 8002356:	4808      	ldr	r0, [pc, #32]	; (8002378 <HoldPrepareMotorUntill+0x58>)
 8002358:	f001 fc8a 	bl	8003c70 <HAL_TIM_PWM_Stop>
		flag = false;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HoldPrepareMotorUntill+0x54>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
		Buttons[1].B_Out = 0;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HoldPrepareMotorUntill+0x5c>)
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000042d 	.word	0x2000042d
 8002378:	2000043c 	.word	0x2000043c
 800237c:	20000484 	.word	0x20000484

08002380 <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 800238c:	23c8      	movs	r3, #200	; 0xc8
 800238e:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f107 0208 	add.w	r2, r7, #8
 80023a0:	4610      	mov	r0, r2
 80023a2:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e020      	b.n	80023ec <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68d8      	ldr	r0, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8a1b      	ldrh	r3, [r3, #16]
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	f000 fdf1 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8b1b      	ldrh	r3, [r3, #24]
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f87e 	bl	80024c4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d8      	ldr	r0, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8a1b      	ldrh	r3, [r3, #16]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	f000 fde2 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8b1b      	ldrh	r3, [r3, #24]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f86f 	bl	80024c4 <Delay>
	for(uint32_t j = 0; j < 20; j++)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	3301      	adds	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b13      	cmp	r3, #19
 80023f0:	d9db      	bls.n	80023aa <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e02d      	b.n	8002454 <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 80023f8:	8afb      	ldrh	r3, [r7, #22]
 80023fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80023fe:	d202      	bcs.n	8002406 <TimerMotor+0x86>
 8002400:	8afb      	ldrh	r3, [r7, #22]
 8002402:	3301      	adds	r3, #1
 8002404:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8a1b      	ldrh	r3, [r3, #16]
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	f000 fdc3 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8b1b      	ldrh	r3, [r3, #24]
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f84d 	bl	80024c4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68d8      	ldr	r0, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8a1b      	ldrh	r3, [r3, #16]
 8002432:	2201      	movs	r2, #1
 8002434:	4619      	mov	r1, r3
 8002436:	f000 fdb1 	bl	8002f9c <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8b1b      	ldrh	r3, [r3, #24]
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	8afb      	ldrh	r3, [r7, #22]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f83b 	bl	80024c4 <Delay>
	for(uint32_t j = 0; j < steps; j++)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d3cd      	bcc.n	80023f8 <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	*(steps) = Pullsteps;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SetSteps1+0x1c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20000000 	.word	0x20000000

08002488 <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	*(steps) = Dosesteps;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SetSteps2+0x1c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000004 	.word	0x20000004

080024a8 <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b6:	601a      	str	r2, [r3, #0]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <Delay>:

void Delay(uint32_t delay)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 80024cc:	e000      	b.n	80024d0 <Delay+0xc>
 80024ce:	bf00      	nop
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1e5a      	subs	r2, r3, #1
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <Delay+0xa>
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2140      	movs	r1, #64	; 0x40
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <Error_Handler+0x1c>)
 80024f2:	f000 fd53 	bl	8002f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	4802      	ldr	r0, [pc, #8]	; (8002504 <Error_Handler+0x1c>)
 80024fc:	f000 fd4e 	bl	8002f9c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40020000 	.word	0x40020000

08002508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_MspInit+0x4c>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_MspInit+0x4c>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_TIM_Base_MspInit+0x70>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002586:	e01a      	b.n	80025be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_TIM_Base_MspInit+0x78>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d115      	bne.n	80025be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 800259c:	f043 0320 	orr.w	r3, r3, #32
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_TIM_Base_MspInit+0x74>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2037      	movs	r0, #55	; 0x37
 80025b4:	f000 fb03 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025b8:	2037      	movs	r0, #55	; 0x37
 80025ba:	f000 fb1c 	bl	8002bf6 <HAL_NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40001400 	.word	0x40001400

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11d      	bne.n	8002632 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Prepare_OUT_Pin;
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261e:	2302      	movs	r3, #2
 8002620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002622:	2302      	movs	r3, #2
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Prepare_OUT_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_TIM_MspPostInit+0x70>)
 800262e:	f000 fb01 	bl	8002c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40000400 	.word	0x40000400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020800 	.word	0x40020800

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <MemManage_Handler+0x4>

08002662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <UsageFault_Handler+0x4>

0800266e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269c:	f000 f95a 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM7_IRQHandler+0x10>)
 80026aa:	f001 fb51 	bl	8003d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000878 	.word	0x20000878

080026b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_kill>:

int _kill(int pid, int sig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026d2:	f002 f997 	bl	8004a04 <__errno>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2216      	movs	r2, #22
 80026da:	601a      	str	r2, [r3, #0]
	return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_exit>:

void _exit (int status)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026fa:	e7fe      	b.n	80026fa <_exit+0x12>

080026fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e00a      	b.n	8002724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800270e:	f3af 8000 	nop.w
 8002712:	4601      	mov	r1, r0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	dbf0      	blt.n	800270e <_read+0x12>
	}

return len;
 800272c:	687b      	ldr	r3, [r7, #4]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e009      	b.n	800275c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	60ba      	str	r2, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	dbf1      	blt.n	8002748 <_write+0x12>
	}
	return len;
 8002764:	687b      	ldr	r3, [r7, #4]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_close>:

int _close(int file)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	return -1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002796:	605a      	str	r2, [r3, #4]
	return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_isatty>:

int _isatty(int file)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
	return 1;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	return 0;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <_sbrk+0x50>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x16>
		heap_end = &end;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <_sbrk+0x50>)
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <_sbrk+0x54>)
 80027ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <_sbrk+0x50>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <_sbrk+0x50>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	466a      	mov	r2, sp
 80027fe:	4293      	cmp	r3, r2
 8002800:	d907      	bls.n	8002812 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002802:	f002 f8ff 	bl	8004a04 <__errno>
 8002806:	4603      	mov	r3, r0
 8002808:	220c      	movs	r2, #12
 800280a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e006      	b.n	8002820 <_sbrk+0x48>
	}

	heap_end += incr;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <_sbrk+0x50>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a03      	ldr	r2, [pc, #12]	; (8002828 <_sbrk+0x50>)
 800281c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000430 	.word	0x20000430
 800282c:	200008d8 	.word	0x200008d8

08002830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <SystemInit+0x28>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <SystemInit+0x28>)
 800283c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SystemInit+0x28>)
 8002846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284a:	609a      	str	r2, [r3, #8]
#endif
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr  r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800287a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002886:	f7ff ffd3 	bl	8002830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f002 f8c1 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7fe fb53 	bl	8000f38 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002894:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002898:	08007854 	.word	0x08007854
  ldr  r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a0:	2000040c 	.word	0x2000040c
  ldr  r2, =_sbss
 80028a4:	2000040c 	.word	0x2000040c
  ldr  r3, = _ebss
 80028a8:	200008d4 	.word	0x200008d4

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 f965 	bl	8002ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fe10 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f981 	bl	8002c1a <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 f945 	bl	8002bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000230 	.word	0x20000230
 800294c:	20000238 	.word	0x20000238
 8002950:	20000234 	.word	0x20000234

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000238 	.word	0x20000238
 8002978:	200008c0 	.word	0x200008c0

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200008c0 	.word	0x200008c0

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000238 	.word	0x20000238

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b3c:	f3bf 8f4f 	dsb	sy
}
 8002b40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <__NVIC_SystemReset+0x24>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b4a:	4904      	ldr	r1, [pc, #16]	; (8002b5c <__NVIC_SystemReset+0x24>)
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_SystemReset+0x28>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b52:	f3bf 8f4f 	dsb	sy
}
 8002b56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <__NVIC_SystemReset+0x20>
 8002b5c:	e000ed00 	.word	0xe000ed00
 8002b60:	05fa0004 	.word	0x05fa0004

08002b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d301      	bcc.n	8002b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00f      	b.n	8002b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <SysTick_Config+0x40>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b82:	210f      	movs	r1, #15
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f7ff ff78 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SysTick_Config+0x40>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <SysTick_Config+0x40>)
 8002b94:	2207      	movs	r2, #7
 8002b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff13 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd0:	f7ff ff28 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f7ff ff78 	bl	8002ad0 <NVIC_EncodePriority>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff47 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff1b 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002c16:	f7ff ff8f 	bl	8002b38 <__NVIC_SystemReset>

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff9e 	bl	8002b64 <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e16b      	b.n	8002f28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 815a 	bne.w	8002f22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d005      	beq.n	8002c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d130      	bne.n	8002ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d017      	beq.n	8002d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d123      	bne.n	8002d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b4 	beq.w	8002f22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_GPIO_Init+0x310>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_GPIO_Init+0x314>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02b      	beq.n	8002e5a <HAL_GPIO_Init+0x226>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a51      	ldr	r2, [pc, #324]	; (8002f4c <HAL_GPIO_Init+0x318>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d025      	beq.n	8002e56 <HAL_GPIO_Init+0x222>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <HAL_GPIO_Init+0x31c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01f      	beq.n	8002e52 <HAL_GPIO_Init+0x21e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4f      	ldr	r2, [pc, #316]	; (8002f54 <HAL_GPIO_Init+0x320>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4d      	ldr	r2, [pc, #308]	; (8002f5c <HAL_GPIO_Init+0x328>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <HAL_GPIO_Init+0x32c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4b      	ldr	r2, [pc, #300]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x20a>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e00e      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	e00c      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e00a      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e008      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f002 0203 	and.w	r2, r2, #3
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	4093      	lsls	r3, r2
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6c:	4935      	ldr	r1, [pc, #212]	; (8002f44 <HAL_GPIO_Init+0x310>)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9e:	4a32      	ldr	r2, [pc, #200]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <HAL_GPIO_Init+0x334>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	f67f ae90 	bls.w	8002c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40021400 	.word	0x40021400
 8002f60:	40021800 	.word	0x40021800
 8002f64:	40021c00 	.word	0x40021c00
 8002f68:	40013c00 	.word	0x40013c00

08002f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e001      	b.n	8002f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fb8:	e003      	b.n	8002fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	619a      	str	r2, [r3, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e264      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d075      	beq.n	80030da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	4ba3      	ldr	r3, [pc, #652]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4ba0      	ldr	r3, [pc, #640]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	2b08      	cmp	r3, #8
 8003004:	d112      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b9d      	ldr	r3, [pc, #628]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b99      	ldr	r3, [pc, #612]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05b      	beq.n	80030d8 <HAL_RCC_OscConfig+0x108>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d157      	bne.n	80030d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e23f      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x74>
 8003036:	4b91      	ldr	r3, [pc, #580]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a90      	ldr	r2, [pc, #576]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x98>
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a8a      	ldr	r2, [pc, #552]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a87      	ldr	r2, [pc, #540]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fc78 	bl	800297c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff fc74 	bl	800297c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e204      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xc0>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7ff fc64 	bl	800297c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7ff fc60 	bl	800297c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1f0      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0xe8>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	4b65      	ldr	r3, [pc, #404]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f2:	4b62      	ldr	r3, [pc, #392]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11c      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b5f      	ldr	r3, [pc, #380]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	4b5c      	ldr	r3, [pc, #368]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1c4      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b56      	ldr	r3, [pc, #344]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4952      	ldr	r1, [pc, #328]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	e03a      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_RCC_OscConfig+0x2b0>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7ff fc19 	bl	800297c <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314e:	f7ff fc15 	bl	800297c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1a5      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	4b46      	ldr	r3, [pc, #280]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b43      	ldr	r3, [pc, #268]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4940      	ldr	r1, [pc, #256]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_OscConfig+0x2b0>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7ff fbf8 	bl	800297c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003190:	f7ff fbf4 	bl	800297c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e184      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d030      	beq.n	800321c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCC_OscConfig+0x2b4>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7ff fbd8 	bl	800297c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d0:	f7ff fbd4 	bl	800297c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e164      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x200>
 80031ee:	e015      	b.n	800321c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x2b4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7ff fbc1 	bl	800297c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fe:	f7ff fbbd 	bl	800297c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e14d      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a0 	beq.w	800336a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x2b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d121      	bne.n	80032aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_RCC_OscConfig+0x2b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_RCC_OscConfig+0x2b8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7ff fb83 	bl	800297c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	e011      	b.n	800329e <HAL_RCC_OscConfig+0x2ce>
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	42470000 	.word	0x42470000
 8003284:	42470e80 	.word	0x42470e80
 8003288:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7ff fb76 	bl	800297c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e106      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <HAL_RCC_OscConfig+0x4e4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2f0>
 80032b2:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e01c      	b.n	80032fa <HAL_RCC_OscConfig+0x32a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b05      	cmp	r3, #5
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x312>
 80032c8:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a7a      	ldr	r2, [pc, #488]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a77      	ldr	r2, [pc, #476]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0x32a>
 80032e2:	4b75      	ldr	r3, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a74      	ldr	r2, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a71      	ldr	r2, [pc, #452]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d015      	beq.n	800332e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7ff fb3b 	bl	800297c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7ff fb37 	bl	800297c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0c5      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ee      	beq.n	800330a <HAL_RCC_OscConfig+0x33a>
 800332c:	e014      	b.n	8003358 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7ff fb25 	bl	800297c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7ff fb21 	bl	800297c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0af      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ee      	bne.n	8003336 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a55      	ldr	r2, [pc, #340]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 809b 	beq.w	80034aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003374:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d05c      	beq.n	800343a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d141      	bne.n	800340c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x4ec>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7ff faf5 	bl	800297c <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003396:	f7ff faf1 	bl	800297c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e081      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	061b      	lsls	r3, r3, #24
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_RCC_OscConfig+0x4ec>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7ff faca 	bl	800297c <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ec:	f7ff fac6 	bl	800297c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e056      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x41c>
 800340a:	e04e      	b.n	80034aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCC_OscConfig+0x4ec>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7ff fab3 	bl	800297c <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341a:	f7ff faaf 	bl	800297c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e03f      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x44a>
 8003438:	e037      	b.n	80034aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e032      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d028      	beq.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d11a      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347e:	4293      	cmp	r3, r2
 8003480:	d111      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40007000 	.word	0x40007000
 80034b8:	40023800 	.word	0x40023800
 80034bc:	42470060 	.word	0x42470060

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90c      	bls.n	80034fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d044      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d003      	beq.n	800357e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e067      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7ff f9e4 	bl	800297c <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7ff f9e0 	bl	800297c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20c      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f821 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f944 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	08007450 	.word	0x08007450
 8003684:	20000230 	.word	0x20000230
 8003688:	20000234 	.word	0x20000234

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	2300      	movs	r3, #0
 800369e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a4:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d00d      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x40>
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	f200 80bd 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036be:	e0b7      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036c2:	60bb      	str	r3, [r7, #8]
       break;
 80036c4:	e0b7      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c6:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036c8:	60bb      	str	r3, [r7, #8]
      break;
 80036ca:	e0b4      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036cc:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d6:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04d      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e2:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	461a      	mov	r2, r3
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	ea02 0800 	and.w	r8, r2, r0
 80036fa:	ea03 0901 	and.w	r9, r3, r1
 80036fe:	4640      	mov	r0, r8
 8003700:	4649      	mov	r1, r9
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003710:	0142      	lsls	r2, r0, #5
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	ebb0 0008 	subs.w	r0, r0, r8
 800371a:	eb61 0109 	sbc.w	r1, r1, r9
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	018b      	lsls	r3, r1, #6
 8003728:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800372c:	0182      	lsls	r2, r0, #6
 800372e:	1a12      	subs	r2, r2, r0
 8003730:	eb63 0301 	sbc.w	r3, r3, r1
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	00d9      	lsls	r1, r3, #3
 800373e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003742:	00d0      	lsls	r0, r2, #3
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	eb12 0208 	adds.w	r2, r2, r8
 800374c:	eb43 0309 	adc.w	r3, r3, r9
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	0259      	lsls	r1, r3, #9
 800375a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800375e:	0250      	lsls	r0, r2, #9
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	f7fd fa1a 	bl	8000ba8 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e04a      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	461a      	mov	r2, r3
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	ea02 0400 	and.w	r4, r2, r0
 8003796:	ea03 0501 	and.w	r5, r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	014b      	lsls	r3, r1, #5
 80037a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037ac:	0142      	lsls	r2, r0, #5
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	1b00      	subs	r0, r0, r4
 80037b4:	eb61 0105 	sbc.w	r1, r1, r5
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	018b      	lsls	r3, r1, #6
 80037c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037c6:	0182      	lsls	r2, r0, #6
 80037c8:	1a12      	subs	r2, r2, r0
 80037ca:	eb63 0301 	sbc.w	r3, r3, r1
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	00d9      	lsls	r1, r3, #3
 80037d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037dc:	00d0      	lsls	r0, r2, #3
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	1912      	adds	r2, r2, r4
 80037e4:	eb45 0303 	adc.w	r3, r5, r3
 80037e8:	f04f 0000 	mov.w	r0, #0
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	0299      	lsls	r1, r3, #10
 80037f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037f6:	0290      	lsls	r0, r2, #10
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	461a      	mov	r2, r3
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f7fd f9ce 	bl	8000ba8 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	60bb      	str	r3, [r7, #8]
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003832:	60bb      	str	r3, [r7, #8]
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	68bb      	ldr	r3, [r7, #8]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e041      	b.n	80038e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe fe6e 	bl	8002558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fd18 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e04e      	b.n	80039a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d01d      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x80>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_TIM_Base_Start_IT+0xdc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d010      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	e007      	b.n	80039a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40001800 	.word	0x40001800

080039d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <HAL_TIM_Base_Stop_IT+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_Base_Stop_IT+0x48>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e041      	b.n	8003ac4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f839 	bl	8003acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f000 fc29 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x24>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e022      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d109      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x3e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e015      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07c      	b.n	8003c4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0x82>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	e013      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0x92>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	e00b      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xa2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	e003      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fe80 	bl	8004898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_TIM_PWM_Start+0x174>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_PWM_Start+0xcc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <HAL_TIM_PWM_Start+0x178>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0xd0>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xd2>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_TIM_PWM_Start+0x174>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d01d      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <HAL_TIM_PWM_Start+0x17c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_TIM_PWM_Start+0x180>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_TIM_PWM_Start+0x184>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <HAL_TIM_PWM_Start+0x178>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIM_PWM_Start+0x188>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x136>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIM_PWM_Start+0x18c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d111      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d010      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	e007      	b.n	8003c4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40001800 	.word	0x40001800

08003c70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fe08 	bl	8004898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_TIM_PWM_Stop+0xd8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_PWM_Stop+0x2c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_TIM_PWM_Stop+0xdc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_PWM_Stop+0x30>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_PWM_Stop+0x32>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d017      	beq.n	8003cd6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x66>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	f240 4344 	movw	r3, #1092	; 0x444
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x66>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_TIM_PWM_Stop+0x96>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	f240 4344 	movw	r3, #1092	; 0x444
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_TIM_PWM_Stop+0x96>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Stop+0xa6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xce>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Stop+0xb6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xce>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Stop+0xc6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_PWM_Stop+0xce>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40010400 	.word	0x40010400

08003d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d122      	bne.n	8003dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11b      	bne.n	8003dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0202 	mvn.w	r2, #2
 8003d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa77 	bl	8004286 <HAL_TIM_IC_CaptureCallback>
 8003d98:	e005      	b.n	8003da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa69 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa7a 	bl	800429a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d122      	bne.n	8003e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d11b      	bne.n	8003e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0204 	mvn.w	r2, #4
 8003dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa4d 	bl	8004286 <HAL_TIM_IC_CaptureCallback>
 8003dec:	e005      	b.n	8003dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa3f 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fa50 	bl	800429a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d122      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d11b      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0208 	mvn.w	r2, #8
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa23 	bl	8004286 <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa15 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa26 	bl	800429a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d122      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9f9 	bl	8004286 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9eb 	bl	8004272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9fc 	bl	800429a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0201 	mvn.w	r2, #1
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe f83c 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fd78 	bl	80049f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d10e      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9c1 	bl	80042ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d107      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0220 	mvn.w	r2, #32
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fd42 	bl	80049dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0ae      	b.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f200 809f 	bhi.w	80040cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	080040cd 	.word	0x080040cd
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	080040cd 	.word	0x080040cd
 8003fac:	080040cd 	.word	0x080040cd
 8003fb0:	080040cd 	.word	0x080040cd
 8003fb4:	0800404b 	.word	0x0800404b
 8003fb8:	080040cd 	.word	0x080040cd
 8003fbc:	080040cd 	.word	0x080040cd
 8003fc0:	080040cd 	.word	0x080040cd
 8003fc4:	0800408b 	.word	0x0800408b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa18 	bl	8004404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0208 	orr.w	r2, r2, #8
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	619a      	str	r2, [r3, #24]
      break;
 8004006:	e064      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fa68 	bl	80044e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	619a      	str	r2, [r3, #24]
      break;
 8004048:	e043      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fabd 	bl	80045d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0208 	orr.w	r2, r2, #8
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0204 	bic.w	r2, r2, #4
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      break;
 8004088:	e023      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fb11 	bl	80046b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	021a      	lsls	r2, r3, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	61da      	str	r2, [r3, #28]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_ConfigClockSource+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0b4      	b.n	800426a <HAL_TIM_ConfigClockSource+0x186>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800411e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004138:	d03e      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xd4>
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	f200 8087 	bhi.w	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	f000 8086 	beq.w	8004256 <HAL_TIM_ConfigClockSource+0x172>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d87f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b70      	cmp	r3, #112	; 0x70
 8004152:	d01a      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xa6>
 8004154:	2b70      	cmp	r3, #112	; 0x70
 8004156:	d87b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b60      	cmp	r3, #96	; 0x60
 800415a:	d050      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x11a>
 800415c:	2b60      	cmp	r3, #96	; 0x60
 800415e:	d877      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b50      	cmp	r3, #80	; 0x50
 8004162:	d03c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0xfa>
 8004164:	2b50      	cmp	r3, #80	; 0x50
 8004166:	d873      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d058      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x13a>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d86f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b30      	cmp	r3, #48	; 0x30
 8004172:	d064      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004174:	2b30      	cmp	r3, #48	; 0x30
 8004176:	d86b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d060      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d867      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b10      	cmp	r3, #16
 8004186:	d05a      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004188:	e062      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6899      	ldr	r1, [r3, #8]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f000 fb5d 	bl	8004858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	609a      	str	r2, [r3, #8]
      break;
 80041b6:	e04f      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f000 fb46 	bl	8004858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041da:	609a      	str	r2, [r3, #8]
      break;
 80041dc:	e03c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 faba 	bl	8004764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2150      	movs	r1, #80	; 0x50
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb13 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e02c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	461a      	mov	r2, r3
 800420c:	f000 fad9 	bl	80047c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2160      	movs	r1, #96	; 0x60
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fb03 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800421c:	e01c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	461a      	mov	r2, r3
 800422c:	f000 fa9a 	bl	8004764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	4618      	mov	r0, r3
 8004238:	f000 faf3 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800423c:	e00c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 faea 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 800424e:	e003      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e000      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <TIM_Base_SetConfig+0x118>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3b      	ldr	r2, [pc, #236]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3a      	ldr	r2, [pc, #232]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d027      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <TIM_Base_SetConfig+0x118>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d023      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <TIM_Base_SetConfig+0x11c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <TIM_Base_SetConfig+0x120>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d017      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a28      	ldr	r2, [pc, #160]	; (80043ec <TIM_Base_SetConfig+0x128>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <TIM_Base_SetConfig+0x12c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00f      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0x130>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00b      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0x134>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_Base_SetConfig+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <TIM_Base_SetConfig+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <TIM_Base_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0xf8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <TIM_Base_SetConfig+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	615a      	str	r2, [r3, #20]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40001800 	.word	0x40001800
 80043fc:	40001c00 	.word	0x40001c00
 8004400:	40002000 	.word	0x40002000

08004404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a20      	ldr	r2, [pc, #128]	; (80044dc <TIM_OC1_SetConfig+0xd8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC1_SetConfig+0x64>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10c      	bne.n	8004482 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0308 	bic.w	r3, r3, #8
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <TIM_OC1_SetConfig+0xd8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC1_SetConfig+0x8e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <TIM_OC1_SetConfig+0xdc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0320 	bic.w	r3, r3, #32
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <TIM_OC2_SetConfig+0xe4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_OC2_SetConfig+0x68>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <TIM_OC2_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d10d      	bne.n	8004568 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <TIM_OC2_SetConfig+0xe4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0x94>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <TIM_OC2_SetConfig+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d113      	bne.n	80045a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400

080045d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <TIM_OC3_SetConfig+0xe0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC3_SetConfig+0x66>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10d      	bne.n	8004652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800463c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <TIM_OC3_SetConfig+0xe0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC3_SetConfig+0x92>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d113      	bne.n	800468a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400

080046b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	031b      	lsls	r3, r3, #12
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <TIM_OC4_SetConfig+0xa4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC4_SetConfig+0x68>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <TIM_OC4_SetConfig+0xa8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40010400 	.word	0x40010400

08004764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 030a 	bic.w	r3, r3, #10
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b087      	sub	sp, #28
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f023 0210 	bic.w	r2, r3, #16
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	f043 0307 	orr.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	431a      	orrs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2201      	movs	r2, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	401a      	ands	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e05a      	b.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d01d      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10c      	bne.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	4313      	orrs	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40010400 	.word	0x40010400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40001800 	.word	0x40001800

080049dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <__errno>:
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <__errno+0x8>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000023c 	.word	0x2000023c

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	4d0d      	ldr	r5, [pc, #52]	; (8004a48 <__libc_init_array+0x38>)
 8004a14:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a16:	1b64      	subs	r4, r4, r5
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	42a6      	cmp	r6, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	4d0b      	ldr	r5, [pc, #44]	; (8004a50 <__libc_init_array+0x40>)
 8004a22:	4c0c      	ldr	r4, [pc, #48]	; (8004a54 <__libc_init_array+0x44>)
 8004a24:	f002 fcf2 	bl	800740c <_init>
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	2600      	movs	r6, #0
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a38:	4798      	blx	r3
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a42:	4798      	blx	r3
 8004a44:	3601      	adds	r6, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	0800784c 	.word	0x0800784c
 8004a4c:	0800784c 	.word	0x0800784c
 8004a50:	0800784c 	.word	0x0800784c
 8004a54:	08007850 	.word	0x08007850

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <__cvt>:
 8004a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	ec55 4b10 	vmov	r4, r5, d0
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	460e      	mov	r6, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	462b      	mov	r3, r5
 8004a78:	bfbb      	ittet	lt
 8004a7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a7e:	461d      	movlt	r5, r3
 8004a80:	2300      	movge	r3, #0
 8004a82:	232d      	movlt	r3, #45	; 0x2d
 8004a84:	700b      	strb	r3, [r1, #0]
 8004a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a8c:	4691      	mov	r9, r2
 8004a8e:	f023 0820 	bic.w	r8, r3, #32
 8004a92:	bfbc      	itt	lt
 8004a94:	4622      	movlt	r2, r4
 8004a96:	4614      	movlt	r4, r2
 8004a98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a9c:	d005      	beq.n	8004aaa <__cvt+0x42>
 8004a9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004aa2:	d100      	bne.n	8004aa6 <__cvt+0x3e>
 8004aa4:	3601      	adds	r6, #1
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	e000      	b.n	8004aac <__cvt+0x44>
 8004aaa:	2103      	movs	r1, #3
 8004aac:	ab03      	add	r3, sp, #12
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	ab02      	add	r3, sp, #8
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	ec45 4b10 	vmov	d0, r4, r5
 8004ab8:	4653      	mov	r3, sl
 8004aba:	4632      	mov	r2, r6
 8004abc:	f000 fccc 	bl	8005458 <_dtoa_r>
 8004ac0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	d102      	bne.n	8004ace <__cvt+0x66>
 8004ac8:	f019 0f01 	tst.w	r9, #1
 8004acc:	d022      	beq.n	8004b14 <__cvt+0xac>
 8004ace:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ad2:	eb07 0906 	add.w	r9, r7, r6
 8004ad6:	d110      	bne.n	8004afa <__cvt+0x92>
 8004ad8:	783b      	ldrb	r3, [r7, #0]
 8004ada:	2b30      	cmp	r3, #48	; 0x30
 8004adc:	d10a      	bne.n	8004af4 <__cvt+0x8c>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aea:	b918      	cbnz	r0, 8004af4 <__cvt+0x8c>
 8004aec:	f1c6 0601 	rsb	r6, r6, #1
 8004af0:	f8ca 6000 	str.w	r6, [sl]
 8004af4:	f8da 3000 	ldr.w	r3, [sl]
 8004af8:	4499      	add	r9, r3
 8004afa:	2200      	movs	r2, #0
 8004afc:	2300      	movs	r3, #0
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b06:	b108      	cbz	r0, 8004b0c <__cvt+0xa4>
 8004b08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b0c:	2230      	movs	r2, #48	; 0x30
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	454b      	cmp	r3, r9
 8004b12:	d307      	bcc.n	8004b24 <__cvt+0xbc>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b18:	1bdb      	subs	r3, r3, r7
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	b004      	add	sp, #16
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	9103      	str	r1, [sp, #12]
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e7f0      	b.n	8004b0e <__cvt+0xa6>

08004b2c <__exponent>:
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2900      	cmp	r1, #0
 8004b32:	bfb8      	it	lt
 8004b34:	4249      	neglt	r1, r1
 8004b36:	f803 2b02 	strb.w	r2, [r3], #2
 8004b3a:	bfb4      	ite	lt
 8004b3c:	222d      	movlt	r2, #45	; 0x2d
 8004b3e:	222b      	movge	r2, #43	; 0x2b
 8004b40:	2909      	cmp	r1, #9
 8004b42:	7042      	strb	r2, [r0, #1]
 8004b44:	dd2a      	ble.n	8004b9c <__exponent+0x70>
 8004b46:	f10d 0407 	add.w	r4, sp, #7
 8004b4a:	46a4      	mov	ip, r4
 8004b4c:	270a      	movs	r7, #10
 8004b4e:	46a6      	mov	lr, r4
 8004b50:	460a      	mov	r2, r1
 8004b52:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b56:	fb07 1516 	mls	r5, r7, r6, r1
 8004b5a:	3530      	adds	r5, #48	; 0x30
 8004b5c:	2a63      	cmp	r2, #99	; 0x63
 8004b5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b66:	4631      	mov	r1, r6
 8004b68:	dcf1      	bgt.n	8004b4e <__exponent+0x22>
 8004b6a:	3130      	adds	r1, #48	; 0x30
 8004b6c:	f1ae 0502 	sub.w	r5, lr, #2
 8004b70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b74:	1c44      	adds	r4, r0, #1
 8004b76:	4629      	mov	r1, r5
 8004b78:	4561      	cmp	r1, ip
 8004b7a:	d30a      	bcc.n	8004b92 <__exponent+0x66>
 8004b7c:	f10d 0209 	add.w	r2, sp, #9
 8004b80:	eba2 020e 	sub.w	r2, r2, lr
 8004b84:	4565      	cmp	r5, ip
 8004b86:	bf88      	it	hi
 8004b88:	2200      	movhi	r2, #0
 8004b8a:	4413      	add	r3, r2
 8004b8c:	1a18      	subs	r0, r3, r0
 8004b8e:	b003      	add	sp, #12
 8004b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b9a:	e7ed      	b.n	8004b78 <__exponent+0x4c>
 8004b9c:	2330      	movs	r3, #48	; 0x30
 8004b9e:	3130      	adds	r1, #48	; 0x30
 8004ba0:	7083      	strb	r3, [r0, #2]
 8004ba2:	70c1      	strb	r1, [r0, #3]
 8004ba4:	1d03      	adds	r3, r0, #4
 8004ba6:	e7f1      	b.n	8004b8c <__exponent+0x60>

08004ba8 <_printf_float>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	ed2d 8b02 	vpush	{d8}
 8004bb0:	b08d      	sub	sp, #52	; 0x34
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bb8:	4616      	mov	r6, r2
 8004bba:	461f      	mov	r7, r3
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	f001 fa37 	bl	8006030 <_localeconv_r>
 8004bc2:	f8d0 a000 	ldr.w	sl, [r0]
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fb02 	bl	80001d0 <strlen>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	930a      	str	r3, [sp, #40]	; 0x28
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bdc:	3307      	adds	r3, #7
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	f103 0208 	add.w	r2, r3, #8
 8004be6:	f8c8 2000 	str.w	r2, [r8]
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004bf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bfa:	9307      	str	r3, [sp, #28]
 8004bfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c00:	ee08 0a10 	vmov	s16, r0
 8004c04:	4b9f      	ldr	r3, [pc, #636]	; (8004e84 <_printf_float+0x2dc>)
 8004c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	f7fb ff8d 	bl	8000b2c <__aeabi_dcmpun>
 8004c12:	bb88      	cbnz	r0, 8004c78 <_printf_float+0xd0>
 8004c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c18:	4b9a      	ldr	r3, [pc, #616]	; (8004e84 <_printf_float+0x2dc>)
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	f7fb ff67 	bl	8000af0 <__aeabi_dcmple>
 8004c22:	bb48      	cbnz	r0, 8004c78 <_printf_float+0xd0>
 8004c24:	2200      	movs	r2, #0
 8004c26:	2300      	movs	r3, #0
 8004c28:	4640      	mov	r0, r8
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	f7fb ff56 	bl	8000adc <__aeabi_dcmplt>
 8004c30:	b110      	cbz	r0, 8004c38 <_printf_float+0x90>
 8004c32:	232d      	movs	r3, #45	; 0x2d
 8004c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c38:	4b93      	ldr	r3, [pc, #588]	; (8004e88 <_printf_float+0x2e0>)
 8004c3a:	4894      	ldr	r0, [pc, #592]	; (8004e8c <_printf_float+0x2e4>)
 8004c3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c40:	bf94      	ite	ls
 8004c42:	4698      	movls	r8, r3
 8004c44:	4680      	movhi	r8, r0
 8004c46:	2303      	movs	r3, #3
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	9b05      	ldr	r3, [sp, #20]
 8004c4c:	f023 0204 	bic.w	r2, r3, #4
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	f04f 0900 	mov.w	r9, #0
 8004c56:	9700      	str	r7, [sp, #0]
 8004c58:	4633      	mov	r3, r6
 8004c5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f9d8 	bl	8005014 <_printf_common>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f040 8090 	bne.w	8004d8a <_printf_float+0x1e2>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	b00d      	add	sp, #52	; 0x34
 8004c70:	ecbd 8b02 	vpop	{d8}
 8004c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	4649      	mov	r1, r9
 8004c80:	f7fb ff54 	bl	8000b2c <__aeabi_dcmpun>
 8004c84:	b140      	cbz	r0, 8004c98 <_printf_float+0xf0>
 8004c86:	464b      	mov	r3, r9
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfbc      	itt	lt
 8004c8c:	232d      	movlt	r3, #45	; 0x2d
 8004c8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c92:	487f      	ldr	r0, [pc, #508]	; (8004e90 <_printf_float+0x2e8>)
 8004c94:	4b7f      	ldr	r3, [pc, #508]	; (8004e94 <_printf_float+0x2ec>)
 8004c96:	e7d1      	b.n	8004c3c <_printf_float+0x94>
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c9e:	9206      	str	r2, [sp, #24]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	d13f      	bne.n	8004d24 <_printf_float+0x17c>
 8004ca4:	2306      	movs	r3, #6
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	9b05      	ldr	r3, [sp, #20]
 8004caa:	6861      	ldr	r1, [r4, #4]
 8004cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9303      	str	r3, [sp, #12]
 8004cb4:	ab0a      	add	r3, sp, #40	; 0x28
 8004cb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cba:	ab09      	add	r3, sp, #36	; 0x24
 8004cbc:	ec49 8b10 	vmov	d0, r8, r9
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	6022      	str	r2, [r4, #0]
 8004cc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f7ff fecd 	bl	8004a68 <__cvt>
 8004cce:	9b06      	ldr	r3, [sp, #24]
 8004cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cd2:	2b47      	cmp	r3, #71	; 0x47
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	d108      	bne.n	8004cea <_printf_float+0x142>
 8004cd8:	1cc8      	adds	r0, r1, #3
 8004cda:	db02      	blt.n	8004ce2 <_printf_float+0x13a>
 8004cdc:	6863      	ldr	r3, [r4, #4]
 8004cde:	4299      	cmp	r1, r3
 8004ce0:	dd41      	ble.n	8004d66 <_printf_float+0x1be>
 8004ce2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ce6:	fa5f fb8b 	uxtb.w	fp, fp
 8004cea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cee:	d820      	bhi.n	8004d32 <_printf_float+0x18a>
 8004cf0:	3901      	subs	r1, #1
 8004cf2:	465a      	mov	r2, fp
 8004cf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8004cfa:	f7ff ff17 	bl	8004b2c <__exponent>
 8004cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d00:	1813      	adds	r3, r2, r0
 8004d02:	2a01      	cmp	r2, #1
 8004d04:	4681      	mov	r9, r0
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	dc02      	bgt.n	8004d10 <_printf_float+0x168>
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	07d2      	lsls	r2, r2, #31
 8004d0e:	d501      	bpl.n	8004d14 <_printf_float+0x16c>
 8004d10:	3301      	adds	r3, #1
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d09c      	beq.n	8004c56 <_printf_float+0xae>
 8004d1c:	232d      	movs	r3, #45	; 0x2d
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d22:	e798      	b.n	8004c56 <_printf_float+0xae>
 8004d24:	9a06      	ldr	r2, [sp, #24]
 8004d26:	2a47      	cmp	r2, #71	; 0x47
 8004d28:	d1be      	bne.n	8004ca8 <_printf_float+0x100>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1bc      	bne.n	8004ca8 <_printf_float+0x100>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7b9      	b.n	8004ca6 <_printf_float+0xfe>
 8004d32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d36:	d118      	bne.n	8004d6a <_printf_float+0x1c2>
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	dd0b      	ble.n	8004d56 <_printf_float+0x1ae>
 8004d3e:	6121      	str	r1, [r4, #16]
 8004d40:	b913      	cbnz	r3, 8004d48 <_printf_float+0x1a0>
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	07d0      	lsls	r0, r2, #31
 8004d46:	d502      	bpl.n	8004d4e <_printf_float+0x1a6>
 8004d48:	3301      	adds	r3, #1
 8004d4a:	440b      	add	r3, r1
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d50:	f04f 0900 	mov.w	r9, #0
 8004d54:	e7de      	b.n	8004d14 <_printf_float+0x16c>
 8004d56:	b913      	cbnz	r3, 8004d5e <_printf_float+0x1b6>
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	07d2      	lsls	r2, r2, #31
 8004d5c:	d501      	bpl.n	8004d62 <_printf_float+0x1ba>
 8004d5e:	3302      	adds	r3, #2
 8004d60:	e7f4      	b.n	8004d4c <_printf_float+0x1a4>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e7f2      	b.n	8004d4c <_printf_float+0x1a4>
 8004d66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6c:	4299      	cmp	r1, r3
 8004d6e:	db05      	blt.n	8004d7c <_printf_float+0x1d4>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	6121      	str	r1, [r4, #16]
 8004d74:	07d8      	lsls	r0, r3, #31
 8004d76:	d5ea      	bpl.n	8004d4e <_printf_float+0x1a6>
 8004d78:	1c4b      	adds	r3, r1, #1
 8004d7a:	e7e7      	b.n	8004d4c <_printf_float+0x1a4>
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	bfd4      	ite	le
 8004d80:	f1c1 0202 	rsble	r2, r1, #2
 8004d84:	2201      	movgt	r2, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	e7e0      	b.n	8004d4c <_printf_float+0x1a4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	055a      	lsls	r2, r3, #21
 8004d8e:	d407      	bmi.n	8004da0 <_printf_float+0x1f8>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	4642      	mov	r2, r8
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d12c      	bne.n	8004df8 <_printf_float+0x250>
 8004d9e:	e764      	b.n	8004c6a <_printf_float+0xc2>
 8004da0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004da4:	f240 80e0 	bls.w	8004f68 <_printf_float+0x3c0>
 8004da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	f7fb fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d034      	beq.n	8004e22 <_printf_float+0x27a>
 8004db8:	4a37      	ldr	r2, [pc, #220]	; (8004e98 <_printf_float+0x2f0>)
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f af51 	beq.w	8004c6a <_printf_float+0xc2>
 8004dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	db02      	blt.n	8004dd6 <_printf_float+0x22e>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07d8      	lsls	r0, r3, #31
 8004dd4:	d510      	bpl.n	8004df8 <_printf_float+0x250>
 8004dd6:	ee18 3a10 	vmov	r3, s16
 8004dda:	4652      	mov	r2, sl
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b8      	blx	r7
 8004de2:	3001      	adds	r0, #1
 8004de4:	f43f af41 	beq.w	8004c6a <_printf_float+0xc2>
 8004de8:	f04f 0800 	mov.w	r8, #0
 8004dec:	f104 091a 	add.w	r9, r4, #26
 8004df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4543      	cmp	r3, r8
 8004df6:	dc09      	bgt.n	8004e0c <_printf_float+0x264>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	079b      	lsls	r3, r3, #30
 8004dfc:	f100 8105 	bmi.w	800500a <_printf_float+0x462>
 8004e00:	68e0      	ldr	r0, [r4, #12]
 8004e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e04:	4298      	cmp	r0, r3
 8004e06:	bfb8      	it	lt
 8004e08:	4618      	movlt	r0, r3
 8004e0a:	e730      	b.n	8004c6e <_printf_float+0xc6>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	464a      	mov	r2, r9
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f af27 	beq.w	8004c6a <_printf_float+0xc2>
 8004e1c:	f108 0801 	add.w	r8, r8, #1
 8004e20:	e7e6      	b.n	8004df0 <_printf_float+0x248>
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dc39      	bgt.n	8004e9c <_printf_float+0x2f4>
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <_printf_float+0x2f0>)
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f af19 	beq.w	8004c6a <_printf_float+0xc2>
 8004e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	d102      	bne.n	8004e46 <_printf_float+0x29e>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	d5d8      	bpl.n	8004df8 <_printf_float+0x250>
 8004e46:	ee18 3a10 	vmov	r3, s16
 8004e4a:	4652      	mov	r2, sl
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af09 	beq.w	8004c6a <_printf_float+0xc2>
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	f104 0a1a 	add.w	sl, r4, #26
 8004e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e62:	425b      	negs	r3, r3
 8004e64:	454b      	cmp	r3, r9
 8004e66:	dc01      	bgt.n	8004e6c <_printf_float+0x2c4>
 8004e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6a:	e792      	b.n	8004d92 <_printf_float+0x1ea>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4652      	mov	r2, sl
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f aef7 	beq.w	8004c6a <_printf_float+0xc2>
 8004e7c:	f109 0901 	add.w	r9, r9, #1
 8004e80:	e7ee      	b.n	8004e60 <_printf_float+0x2b8>
 8004e82:	bf00      	nop
 8004e84:	7fefffff 	.word	0x7fefffff
 8004e88:	08007464 	.word	0x08007464
 8004e8c:	08007468 	.word	0x08007468
 8004e90:	08007470 	.word	0x08007470
 8004e94:	0800746c 	.word	0x0800746c
 8004e98:	08007474 	.word	0x08007474
 8004e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	bfa8      	it	ge
 8004ea4:	461a      	movge	r2, r3
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	4691      	mov	r9, r2
 8004eaa:	dc37      	bgt.n	8004f1c <_printf_float+0x374>
 8004eac:	f04f 0b00 	mov.w	fp, #0
 8004eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eb4:	f104 021a 	add.w	r2, r4, #26
 8004eb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eba:	9305      	str	r3, [sp, #20]
 8004ebc:	eba3 0309 	sub.w	r3, r3, r9
 8004ec0:	455b      	cmp	r3, fp
 8004ec2:	dc33      	bgt.n	8004f2c <_printf_float+0x384>
 8004ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	db3b      	blt.n	8004f44 <_printf_float+0x39c>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	07da      	lsls	r2, r3, #31
 8004ed0:	d438      	bmi.n	8004f44 <_printf_float+0x39c>
 8004ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed4:	9b05      	ldr	r3, [sp, #20]
 8004ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	eba2 0901 	sub.w	r9, r2, r1
 8004ede:	4599      	cmp	r9, r3
 8004ee0:	bfa8      	it	ge
 8004ee2:	4699      	movge	r9, r3
 8004ee4:	f1b9 0f00 	cmp.w	r9, #0
 8004ee8:	dc35      	bgt.n	8004f56 <_printf_float+0x3ae>
 8004eea:	f04f 0800 	mov.w	r8, #0
 8004eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ef2:	f104 0a1a 	add.w	sl, r4, #26
 8004ef6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	eba3 0309 	sub.w	r3, r3, r9
 8004f00:	4543      	cmp	r3, r8
 8004f02:	f77f af79 	ble.w	8004df8 <_printf_float+0x250>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f aeaa 	beq.w	8004c6a <_printf_float+0xc2>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	e7ec      	b.n	8004ef6 <_printf_float+0x34e>
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4642      	mov	r2, r8
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	d1c0      	bne.n	8004eac <_printf_float+0x304>
 8004f2a:	e69e      	b.n	8004c6a <_printf_float+0xc2>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	9205      	str	r2, [sp, #20]
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f ae97 	beq.w	8004c6a <_printf_float+0xc2>
 8004f3c:	9a05      	ldr	r2, [sp, #20]
 8004f3e:	f10b 0b01 	add.w	fp, fp, #1
 8004f42:	e7b9      	b.n	8004eb8 <_printf_float+0x310>
 8004f44:	ee18 3a10 	vmov	r3, s16
 8004f48:	4652      	mov	r2, sl
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	d1be      	bne.n	8004ed2 <_printf_float+0x32a>
 8004f54:	e689      	b.n	8004c6a <_printf_float+0xc2>
 8004f56:	9a05      	ldr	r2, [sp, #20]
 8004f58:	464b      	mov	r3, r9
 8004f5a:	4442      	add	r2, r8
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	d1c1      	bne.n	8004eea <_printf_float+0x342>
 8004f66:	e680      	b.n	8004c6a <_printf_float+0xc2>
 8004f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f6a:	2a01      	cmp	r2, #1
 8004f6c:	dc01      	bgt.n	8004f72 <_printf_float+0x3ca>
 8004f6e:	07db      	lsls	r3, r3, #31
 8004f70:	d538      	bpl.n	8004fe4 <_printf_float+0x43c>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4642      	mov	r2, r8
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f43f ae74 	beq.w	8004c6a <_printf_float+0xc2>
 8004f82:	ee18 3a10 	vmov	r3, s16
 8004f86:	4652      	mov	r2, sl
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f ae6b 	beq.w	8004c6a <_printf_float+0xc2>
 8004f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f7fb fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fa0:	b9d8      	cbnz	r0, 8004fda <_printf_float+0x432>
 8004fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa4:	f108 0201 	add.w	r2, r8, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d10e      	bne.n	8004fd2 <_printf_float+0x42a>
 8004fb4:	e659      	b.n	8004c6a <_printf_float+0xc2>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4652      	mov	r2, sl
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f ae52 	beq.w	8004c6a <_printf_float+0xc2>
 8004fc6:	f108 0801 	add.w	r8, r8, #1
 8004fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4543      	cmp	r3, r8
 8004fd0:	dcf1      	bgt.n	8004fb6 <_printf_float+0x40e>
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd8:	e6dc      	b.n	8004d94 <_printf_float+0x1ec>
 8004fda:	f04f 0800 	mov.w	r8, #0
 8004fde:	f104 0a1a 	add.w	sl, r4, #26
 8004fe2:	e7f2      	b.n	8004fca <_printf_float+0x422>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	e7df      	b.n	8004faa <_printf_float+0x402>
 8004fea:	2301      	movs	r3, #1
 8004fec:	464a      	mov	r2, r9
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f ae38 	beq.w	8004c6a <_printf_float+0xc2>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005002:	1a5b      	subs	r3, r3, r1
 8005004:	4543      	cmp	r3, r8
 8005006:	dcf0      	bgt.n	8004fea <_printf_float+0x442>
 8005008:	e6fa      	b.n	8004e00 <_printf_float+0x258>
 800500a:	f04f 0800 	mov.w	r8, #0
 800500e:	f104 0919 	add.w	r9, r4, #25
 8005012:	e7f4      	b.n	8004ffe <_printf_float+0x456>

08005014 <_printf_common>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	4616      	mov	r6, r2
 800501a:	4699      	mov	r9, r3
 800501c:	688a      	ldr	r2, [r1, #8]
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005024:	4293      	cmp	r3, r2
 8005026:	bfb8      	it	lt
 8005028:	4613      	movlt	r3, r2
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005030:	4607      	mov	r7, r0
 8005032:	460c      	mov	r4, r1
 8005034:	b10a      	cbz	r2, 800503a <_printf_common+0x26>
 8005036:	3301      	adds	r3, #1
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	0699      	lsls	r1, r3, #26
 800503e:	bf42      	ittt	mi
 8005040:	6833      	ldrmi	r3, [r6, #0]
 8005042:	3302      	addmi	r3, #2
 8005044:	6033      	strmi	r3, [r6, #0]
 8005046:	6825      	ldr	r5, [r4, #0]
 8005048:	f015 0506 	ands.w	r5, r5, #6
 800504c:	d106      	bne.n	800505c <_printf_common+0x48>
 800504e:	f104 0a19 	add.w	sl, r4, #25
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	6832      	ldr	r2, [r6, #0]
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	42ab      	cmp	r3, r5
 800505a:	dc26      	bgt.n	80050aa <_printf_common+0x96>
 800505c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005060:	1e13      	subs	r3, r2, #0
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	bf18      	it	ne
 8005066:	2301      	movne	r3, #1
 8005068:	0692      	lsls	r2, r2, #26
 800506a:	d42b      	bmi.n	80050c4 <_printf_common+0xb0>
 800506c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005070:	4649      	mov	r1, r9
 8005072:	4638      	mov	r0, r7
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d01e      	beq.n	80050b8 <_printf_common+0xa4>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	68e5      	ldr	r5, [r4, #12]
 800507e:	6832      	ldr	r2, [r6, #0]
 8005080:	f003 0306 	and.w	r3, r3, #6
 8005084:	2b04      	cmp	r3, #4
 8005086:	bf08      	it	eq
 8005088:	1aad      	subeq	r5, r5, r2
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	bf0c      	ite	eq
 8005090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005094:	2500      	movne	r5, #0
 8005096:	4293      	cmp	r3, r2
 8005098:	bfc4      	itt	gt
 800509a:	1a9b      	subgt	r3, r3, r2
 800509c:	18ed      	addgt	r5, r5, r3
 800509e:	2600      	movs	r6, #0
 80050a0:	341a      	adds	r4, #26
 80050a2:	42b5      	cmp	r5, r6
 80050a4:	d11a      	bne.n	80050dc <_printf_common+0xc8>
 80050a6:	2000      	movs	r0, #0
 80050a8:	e008      	b.n	80050bc <_printf_common+0xa8>
 80050aa:	2301      	movs	r3, #1
 80050ac:	4652      	mov	r2, sl
 80050ae:	4649      	mov	r1, r9
 80050b0:	4638      	mov	r0, r7
 80050b2:	47c0      	blx	r8
 80050b4:	3001      	adds	r0, #1
 80050b6:	d103      	bne.n	80050c0 <_printf_common+0xac>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c0:	3501      	adds	r5, #1
 80050c2:	e7c6      	b.n	8005052 <_printf_common+0x3e>
 80050c4:	18e1      	adds	r1, r4, r3
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	2030      	movs	r0, #48	; 0x30
 80050ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ce:	4422      	add	r2, r4
 80050d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d8:	3302      	adds	r3, #2
 80050da:	e7c7      	b.n	800506c <_printf_common+0x58>
 80050dc:	2301      	movs	r3, #1
 80050de:	4622      	mov	r2, r4
 80050e0:	4649      	mov	r1, r9
 80050e2:	4638      	mov	r0, r7
 80050e4:	47c0      	blx	r8
 80050e6:	3001      	adds	r0, #1
 80050e8:	d0e6      	beq.n	80050b8 <_printf_common+0xa4>
 80050ea:	3601      	adds	r6, #1
 80050ec:	e7d9      	b.n	80050a2 <_printf_common+0x8e>
	...

080050f0 <_printf_i>:
 80050f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	460c      	mov	r4, r1
 80050f6:	4691      	mov	r9, r2
 80050f8:	7e27      	ldrb	r7, [r4, #24]
 80050fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050fc:	2f78      	cmp	r7, #120	; 0x78
 80050fe:	4680      	mov	r8, r0
 8005100:	469a      	mov	sl, r3
 8005102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005106:	d807      	bhi.n	8005118 <_printf_i+0x28>
 8005108:	2f62      	cmp	r7, #98	; 0x62
 800510a:	d80a      	bhi.n	8005122 <_printf_i+0x32>
 800510c:	2f00      	cmp	r7, #0
 800510e:	f000 80d8 	beq.w	80052c2 <_printf_i+0x1d2>
 8005112:	2f58      	cmp	r7, #88	; 0x58
 8005114:	f000 80a3 	beq.w	800525e <_printf_i+0x16e>
 8005118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800511c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005120:	e03a      	b.n	8005198 <_printf_i+0xa8>
 8005122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005126:	2b15      	cmp	r3, #21
 8005128:	d8f6      	bhi.n	8005118 <_printf_i+0x28>
 800512a:	a001      	add	r0, pc, #4	; (adr r0, 8005130 <_printf_i+0x40>)
 800512c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005130:	08005189 	.word	0x08005189
 8005134:	0800519d 	.word	0x0800519d
 8005138:	08005119 	.word	0x08005119
 800513c:	08005119 	.word	0x08005119
 8005140:	08005119 	.word	0x08005119
 8005144:	08005119 	.word	0x08005119
 8005148:	0800519d 	.word	0x0800519d
 800514c:	08005119 	.word	0x08005119
 8005150:	08005119 	.word	0x08005119
 8005154:	08005119 	.word	0x08005119
 8005158:	08005119 	.word	0x08005119
 800515c:	080052a9 	.word	0x080052a9
 8005160:	080051cd 	.word	0x080051cd
 8005164:	0800528b 	.word	0x0800528b
 8005168:	08005119 	.word	0x08005119
 800516c:	08005119 	.word	0x08005119
 8005170:	080052cb 	.word	0x080052cb
 8005174:	08005119 	.word	0x08005119
 8005178:	080051cd 	.word	0x080051cd
 800517c:	08005119 	.word	0x08005119
 8005180:	08005119 	.word	0x08005119
 8005184:	08005293 	.word	0x08005293
 8005188:	680b      	ldr	r3, [r1, #0]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	600a      	str	r2, [r1, #0]
 8005190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005198:	2301      	movs	r3, #1
 800519a:	e0a3      	b.n	80052e4 <_printf_i+0x1f4>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	6808      	ldr	r0, [r1, #0]
 80051a0:	062e      	lsls	r6, r5, #24
 80051a2:	f100 0304 	add.w	r3, r0, #4
 80051a6:	d50a      	bpl.n	80051be <_printf_i+0xce>
 80051a8:	6805      	ldr	r5, [r0, #0]
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	da03      	bge.n	80051b8 <_printf_i+0xc8>
 80051b0:	232d      	movs	r3, #45	; 0x2d
 80051b2:	426d      	negs	r5, r5
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b8:	485e      	ldr	r0, [pc, #376]	; (8005334 <_printf_i+0x244>)
 80051ba:	230a      	movs	r3, #10
 80051bc:	e019      	b.n	80051f2 <_printf_i+0x102>
 80051be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051c2:	6805      	ldr	r5, [r0, #0]
 80051c4:	600b      	str	r3, [r1, #0]
 80051c6:	bf18      	it	ne
 80051c8:	b22d      	sxthne	r5, r5
 80051ca:	e7ef      	b.n	80051ac <_printf_i+0xbc>
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	1d18      	adds	r0, r3, #4
 80051d2:	6008      	str	r0, [r1, #0]
 80051d4:	0628      	lsls	r0, r5, #24
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0xec>
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0xf2>
 80051dc:	0669      	lsls	r1, r5, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0xe8>
 80051e0:	881d      	ldrh	r5, [r3, #0]
 80051e2:	4854      	ldr	r0, [pc, #336]	; (8005334 <_printf_i+0x244>)
 80051e4:	2f6f      	cmp	r7, #111	; 0x6f
 80051e6:	bf0c      	ite	eq
 80051e8:	2308      	moveq	r3, #8
 80051ea:	230a      	movne	r3, #10
 80051ec:	2100      	movs	r1, #0
 80051ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f2:	6866      	ldr	r6, [r4, #4]
 80051f4:	60a6      	str	r6, [r4, #8]
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	bfa2      	ittt	ge
 80051fa:	6821      	ldrge	r1, [r4, #0]
 80051fc:	f021 0104 	bicge.w	r1, r1, #4
 8005200:	6021      	strge	r1, [r4, #0]
 8005202:	b90d      	cbnz	r5, 8005208 <_printf_i+0x118>
 8005204:	2e00      	cmp	r6, #0
 8005206:	d04d      	beq.n	80052a4 <_printf_i+0x1b4>
 8005208:	4616      	mov	r6, r2
 800520a:	fbb5 f1f3 	udiv	r1, r5, r3
 800520e:	fb03 5711 	mls	r7, r3, r1, r5
 8005212:	5dc7      	ldrb	r7, [r0, r7]
 8005214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005218:	462f      	mov	r7, r5
 800521a:	42bb      	cmp	r3, r7
 800521c:	460d      	mov	r5, r1
 800521e:	d9f4      	bls.n	800520a <_printf_i+0x11a>
 8005220:	2b08      	cmp	r3, #8
 8005222:	d10b      	bne.n	800523c <_printf_i+0x14c>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07df      	lsls	r7, r3, #31
 8005228:	d508      	bpl.n	800523c <_printf_i+0x14c>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	4299      	cmp	r1, r3
 8005230:	bfde      	ittt	le
 8005232:	2330      	movle	r3, #48	; 0x30
 8005234:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800523c:	1b92      	subs	r2, r2, r6
 800523e:	6122      	str	r2, [r4, #16]
 8005240:	f8cd a000 	str.w	sl, [sp]
 8005244:	464b      	mov	r3, r9
 8005246:	aa03      	add	r2, sp, #12
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f7ff fee2 	bl	8005014 <_printf_common>
 8005250:	3001      	adds	r0, #1
 8005252:	d14c      	bne.n	80052ee <_printf_i+0x1fe>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	b004      	add	sp, #16
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	4835      	ldr	r0, [pc, #212]	; (8005334 <_printf_i+0x244>)
 8005260:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	680e      	ldr	r6, [r1, #0]
 8005268:	061f      	lsls	r7, r3, #24
 800526a:	f856 5b04 	ldr.w	r5, [r6], #4
 800526e:	600e      	str	r6, [r1, #0]
 8005270:	d514      	bpl.n	800529c <_printf_i+0x1ac>
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	bf44      	itt	mi
 8005276:	f043 0320 	orrmi.w	r3, r3, #32
 800527a:	6023      	strmi	r3, [r4, #0]
 800527c:	b91d      	cbnz	r5, 8005286 <_printf_i+0x196>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f023 0320 	bic.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2310      	movs	r3, #16
 8005288:	e7b0      	b.n	80051ec <_printf_i+0xfc>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f043 0320 	orr.w	r3, r3, #32
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	2378      	movs	r3, #120	; 0x78
 8005294:	4828      	ldr	r0, [pc, #160]	; (8005338 <_printf_i+0x248>)
 8005296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529a:	e7e3      	b.n	8005264 <_printf_i+0x174>
 800529c:	065e      	lsls	r6, r3, #25
 800529e:	bf48      	it	mi
 80052a0:	b2ad      	uxthmi	r5, r5
 80052a2:	e7e6      	b.n	8005272 <_printf_i+0x182>
 80052a4:	4616      	mov	r6, r2
 80052a6:	e7bb      	b.n	8005220 <_printf_i+0x130>
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	6826      	ldr	r6, [r4, #0]
 80052ac:	6960      	ldr	r0, [r4, #20]
 80052ae:	1d1d      	adds	r5, r3, #4
 80052b0:	600d      	str	r5, [r1, #0]
 80052b2:	0635      	lsls	r5, r6, #24
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0x1cc>
 80052b8:	6018      	str	r0, [r3, #0]
 80052ba:	e002      	b.n	80052c2 <_printf_i+0x1d2>
 80052bc:	0671      	lsls	r1, r6, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0x1c8>
 80052c0:	8018      	strh	r0, [r3, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	4616      	mov	r6, r2
 80052c8:	e7ba      	b.n	8005240 <_printf_i+0x150>
 80052ca:	680b      	ldr	r3, [r1, #0]
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	600a      	str	r2, [r1, #0]
 80052d0:	681e      	ldr	r6, [r3, #0]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	2100      	movs	r1, #0
 80052d6:	4630      	mov	r0, r6
 80052d8:	f7fa ff82 	bl	80001e0 <memchr>
 80052dc:	b108      	cbz	r0, 80052e2 <_printf_i+0x1f2>
 80052de:	1b80      	subs	r0, r0, r6
 80052e0:	6060      	str	r0, [r4, #4]
 80052e2:	6863      	ldr	r3, [r4, #4]
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	2300      	movs	r3, #0
 80052e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ec:	e7a8      	b.n	8005240 <_printf_i+0x150>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	4632      	mov	r2, r6
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	47d0      	blx	sl
 80052f8:	3001      	adds	r0, #1
 80052fa:	d0ab      	beq.n	8005254 <_printf_i+0x164>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	079b      	lsls	r3, r3, #30
 8005300:	d413      	bmi.n	800532a <_printf_i+0x23a>
 8005302:	68e0      	ldr	r0, [r4, #12]
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	4298      	cmp	r0, r3
 8005308:	bfb8      	it	lt
 800530a:	4618      	movlt	r0, r3
 800530c:	e7a4      	b.n	8005258 <_printf_i+0x168>
 800530e:	2301      	movs	r3, #1
 8005310:	4632      	mov	r2, r6
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d09b      	beq.n	8005254 <_printf_i+0x164>
 800531c:	3501      	adds	r5, #1
 800531e:	68e3      	ldr	r3, [r4, #12]
 8005320:	9903      	ldr	r1, [sp, #12]
 8005322:	1a5b      	subs	r3, r3, r1
 8005324:	42ab      	cmp	r3, r5
 8005326:	dcf2      	bgt.n	800530e <_printf_i+0x21e>
 8005328:	e7eb      	b.n	8005302 <_printf_i+0x212>
 800532a:	2500      	movs	r5, #0
 800532c:	f104 0619 	add.w	r6, r4, #25
 8005330:	e7f5      	b.n	800531e <_printf_i+0x22e>
 8005332:	bf00      	nop
 8005334:	08007476 	.word	0x08007476
 8005338:	08007487 	.word	0x08007487

0800533c <quorem>:
 800533c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	6903      	ldr	r3, [r0, #16]
 8005342:	690c      	ldr	r4, [r1, #16]
 8005344:	42a3      	cmp	r3, r4
 8005346:	4607      	mov	r7, r0
 8005348:	f2c0 8081 	blt.w	800544e <quorem+0x112>
 800534c:	3c01      	subs	r4, #1
 800534e:	f101 0814 	add.w	r8, r1, #20
 8005352:	f100 0514 	add.w	r5, r0, #20
 8005356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005364:	3301      	adds	r3, #1
 8005366:	429a      	cmp	r2, r3
 8005368:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800536c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005370:	fbb2 f6f3 	udiv	r6, r2, r3
 8005374:	d331      	bcc.n	80053da <quorem+0x9e>
 8005376:	f04f 0e00 	mov.w	lr, #0
 800537a:	4640      	mov	r0, r8
 800537c:	46ac      	mov	ip, r5
 800537e:	46f2      	mov	sl, lr
 8005380:	f850 2b04 	ldr.w	r2, [r0], #4
 8005384:	b293      	uxth	r3, r2
 8005386:	fb06 e303 	mla	r3, r6, r3, lr
 800538a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800538e:	b29b      	uxth	r3, r3
 8005390:	ebaa 0303 	sub.w	r3, sl, r3
 8005394:	0c12      	lsrs	r2, r2, #16
 8005396:	f8dc a000 	ldr.w	sl, [ip]
 800539a:	fb06 e202 	mla	r2, r6, r2, lr
 800539e:	fa13 f38a 	uxtah	r3, r3, sl
 80053a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053a6:	fa1f fa82 	uxth.w	sl, r2
 80053aa:	f8dc 2000 	ldr.w	r2, [ip]
 80053ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80053b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053bc:	4581      	cmp	r9, r0
 80053be:	f84c 3b04 	str.w	r3, [ip], #4
 80053c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053c6:	d2db      	bcs.n	8005380 <quorem+0x44>
 80053c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80053cc:	b92b      	cbnz	r3, 80053da <quorem+0x9e>
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	429d      	cmp	r5, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	d32e      	bcc.n	8005436 <quorem+0xfa>
 80053d8:	613c      	str	r4, [r7, #16]
 80053da:	4638      	mov	r0, r7
 80053dc:	f001 f8c0 	bl	8006560 <__mcmp>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	db24      	blt.n	800542e <quorem+0xf2>
 80053e4:	3601      	adds	r6, #1
 80053e6:	4628      	mov	r0, r5
 80053e8:	f04f 0c00 	mov.w	ip, #0
 80053ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80053f0:	f8d0 e000 	ldr.w	lr, [r0]
 80053f4:	b293      	uxth	r3, r2
 80053f6:	ebac 0303 	sub.w	r3, ip, r3
 80053fa:	0c12      	lsrs	r2, r2, #16
 80053fc:	fa13 f38e 	uxtah	r3, r3, lr
 8005400:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005408:	b29b      	uxth	r3, r3
 800540a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800540e:	45c1      	cmp	r9, r8
 8005410:	f840 3b04 	str.w	r3, [r0], #4
 8005414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005418:	d2e8      	bcs.n	80053ec <quorem+0xb0>
 800541a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800541e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005422:	b922      	cbnz	r2, 800542e <quorem+0xf2>
 8005424:	3b04      	subs	r3, #4
 8005426:	429d      	cmp	r5, r3
 8005428:	461a      	mov	r2, r3
 800542a:	d30a      	bcc.n	8005442 <quorem+0x106>
 800542c:	613c      	str	r4, [r7, #16]
 800542e:	4630      	mov	r0, r6
 8005430:	b003      	add	sp, #12
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	3b04      	subs	r3, #4
 800543a:	2a00      	cmp	r2, #0
 800543c:	d1cc      	bne.n	80053d8 <quorem+0x9c>
 800543e:	3c01      	subs	r4, #1
 8005440:	e7c7      	b.n	80053d2 <quorem+0x96>
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	3b04      	subs	r3, #4
 8005446:	2a00      	cmp	r2, #0
 8005448:	d1f0      	bne.n	800542c <quorem+0xf0>
 800544a:	3c01      	subs	r4, #1
 800544c:	e7eb      	b.n	8005426 <quorem+0xea>
 800544e:	2000      	movs	r0, #0
 8005450:	e7ee      	b.n	8005430 <quorem+0xf4>
 8005452:	0000      	movs	r0, r0
 8005454:	0000      	movs	r0, r0
	...

08005458 <_dtoa_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	ed2d 8b02 	vpush	{d8}
 8005460:	ec57 6b10 	vmov	r6, r7, d0
 8005464:	b095      	sub	sp, #84	; 0x54
 8005466:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005468:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800546c:	9105      	str	r1, [sp, #20]
 800546e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005472:	4604      	mov	r4, r0
 8005474:	9209      	str	r2, [sp, #36]	; 0x24
 8005476:	930f      	str	r3, [sp, #60]	; 0x3c
 8005478:	b975      	cbnz	r5, 8005498 <_dtoa_r+0x40>
 800547a:	2010      	movs	r0, #16
 800547c:	f000 fddc 	bl	8006038 <malloc>
 8005480:	4602      	mov	r2, r0
 8005482:	6260      	str	r0, [r4, #36]	; 0x24
 8005484:	b920      	cbnz	r0, 8005490 <_dtoa_r+0x38>
 8005486:	4bb2      	ldr	r3, [pc, #712]	; (8005750 <_dtoa_r+0x2f8>)
 8005488:	21ea      	movs	r1, #234	; 0xea
 800548a:	48b2      	ldr	r0, [pc, #712]	; (8005754 <_dtoa_r+0x2fc>)
 800548c:	f001 fa32 	bl	80068f4 <__assert_func>
 8005490:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005494:	6005      	str	r5, [r0, #0]
 8005496:	60c5      	str	r5, [r0, #12]
 8005498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	b151      	cbz	r1, 80054b4 <_dtoa_r+0x5c>
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	604a      	str	r2, [r1, #4]
 80054a2:	2301      	movs	r3, #1
 80054a4:	4093      	lsls	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fe1b 	bl	80060e4 <_Bfree>
 80054ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	1e3b      	subs	r3, r7, #0
 80054b6:	bfb9      	ittee	lt
 80054b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	9303      	strlt	r3, [sp, #12]
 80054be:	2300      	movge	r3, #0
 80054c0:	f8c8 3000 	strge.w	r3, [r8]
 80054c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80054c8:	4ba3      	ldr	r3, [pc, #652]	; (8005758 <_dtoa_r+0x300>)
 80054ca:	bfbc      	itt	lt
 80054cc:	2201      	movlt	r2, #1
 80054ce:	f8c8 2000 	strlt.w	r2, [r8]
 80054d2:	ea33 0309 	bics.w	r3, r3, r9
 80054d6:	d11b      	bne.n	8005510 <_dtoa_r+0xb8>
 80054d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054da:	f242 730f 	movw	r3, #9999	; 0x270f
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054e4:	4333      	orrs	r3, r6
 80054e6:	f000 857a 	beq.w	8005fde <_dtoa_r+0xb86>
 80054ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ec:	b963      	cbnz	r3, 8005508 <_dtoa_r+0xb0>
 80054ee:	4b9b      	ldr	r3, [pc, #620]	; (800575c <_dtoa_r+0x304>)
 80054f0:	e024      	b.n	800553c <_dtoa_r+0xe4>
 80054f2:	4b9b      	ldr	r3, [pc, #620]	; (8005760 <_dtoa_r+0x308>)
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	9800      	ldr	r0, [sp, #0]
 80054fe:	b015      	add	sp, #84	; 0x54
 8005500:	ecbd 8b02 	vpop	{d8}
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	4b94      	ldr	r3, [pc, #592]	; (800575c <_dtoa_r+0x304>)
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	3303      	adds	r3, #3
 800550e:	e7f3      	b.n	80054f8 <_dtoa_r+0xa0>
 8005510:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	ec51 0b17 	vmov	r0, r1, d7
 800551a:	2300      	movs	r3, #0
 800551c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005520:	f7fb fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005524:	4680      	mov	r8, r0
 8005526:	b158      	cbz	r0, 8005540 <_dtoa_r+0xe8>
 8005528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800552a:	2301      	movs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 8551 	beq.w	8005fd8 <_dtoa_r+0xb80>
 8005536:	488b      	ldr	r0, [pc, #556]	; (8005764 <_dtoa_r+0x30c>)
 8005538:	6018      	str	r0, [r3, #0]
 800553a:	1e43      	subs	r3, r0, #1
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	e7dd      	b.n	80054fc <_dtoa_r+0xa4>
 8005540:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005544:	aa12      	add	r2, sp, #72	; 0x48
 8005546:	a913      	add	r1, sp, #76	; 0x4c
 8005548:	4620      	mov	r0, r4
 800554a:	f001 f8ad 	bl	80066a8 <__d2b>
 800554e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005552:	4683      	mov	fp, r0
 8005554:	2d00      	cmp	r5, #0
 8005556:	d07c      	beq.n	8005652 <_dtoa_r+0x1fa>
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800555e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005562:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005566:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800556a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800556e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005572:	4b7d      	ldr	r3, [pc, #500]	; (8005768 <_dtoa_r+0x310>)
 8005574:	2200      	movs	r2, #0
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fa fe85 	bl	8000288 <__aeabi_dsub>
 800557e:	a36e      	add	r3, pc, #440	; (adr r3, 8005738 <_dtoa_r+0x2e0>)
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f7fb f838 	bl	80005f8 <__aeabi_dmul>
 8005588:	a36d      	add	r3, pc, #436	; (adr r3, 8005740 <_dtoa_r+0x2e8>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa fe7d 	bl	800028c <__adddf3>
 8005592:	4606      	mov	r6, r0
 8005594:	4628      	mov	r0, r5
 8005596:	460f      	mov	r7, r1
 8005598:	f7fa ffc4 	bl	8000524 <__aeabi_i2d>
 800559c:	a36a      	add	r3, pc, #424	; (adr r3, 8005748 <_dtoa_r+0x2f0>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fb f829 	bl	80005f8 <__aeabi_dmul>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4630      	mov	r0, r6
 80055ac:	4639      	mov	r1, r7
 80055ae:	f7fa fe6d 	bl	800028c <__adddf3>
 80055b2:	4606      	mov	r6, r0
 80055b4:	460f      	mov	r7, r1
 80055b6:	f7fb facf 	bl	8000b58 <__aeabi_d2iz>
 80055ba:	2200      	movs	r2, #0
 80055bc:	4682      	mov	sl, r0
 80055be:	2300      	movs	r3, #0
 80055c0:	4630      	mov	r0, r6
 80055c2:	4639      	mov	r1, r7
 80055c4:	f7fb fa8a 	bl	8000adc <__aeabi_dcmplt>
 80055c8:	b148      	cbz	r0, 80055de <_dtoa_r+0x186>
 80055ca:	4650      	mov	r0, sl
 80055cc:	f7fa ffaa 	bl	8000524 <__aeabi_i2d>
 80055d0:	4632      	mov	r2, r6
 80055d2:	463b      	mov	r3, r7
 80055d4:	f7fb fa78 	bl	8000ac8 <__aeabi_dcmpeq>
 80055d8:	b908      	cbnz	r0, 80055de <_dtoa_r+0x186>
 80055da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055de:	f1ba 0f16 	cmp.w	sl, #22
 80055e2:	d854      	bhi.n	800568e <_dtoa_r+0x236>
 80055e4:	4b61      	ldr	r3, [pc, #388]	; (800576c <_dtoa_r+0x314>)
 80055e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055f2:	f7fb fa73 	bl	8000adc <__aeabi_dcmplt>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d04b      	beq.n	8005692 <_dtoa_r+0x23a>
 80055fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fe:	2300      	movs	r3, #0
 8005600:	930e      	str	r3, [sp, #56]	; 0x38
 8005602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005604:	1b5d      	subs	r5, r3, r5
 8005606:	1e6b      	subs	r3, r5, #1
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	bf43      	ittte	mi
 800560c:	2300      	movmi	r3, #0
 800560e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005612:	9304      	strmi	r3, [sp, #16]
 8005614:	f04f 0800 	movpl.w	r8, #0
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	db3b      	blt.n	8005696 <_dtoa_r+0x23e>
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005624:	4453      	add	r3, sl
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	9b05      	ldr	r3, [sp, #20]
 800562e:	2b09      	cmp	r3, #9
 8005630:	d869      	bhi.n	8005706 <_dtoa_r+0x2ae>
 8005632:	2b05      	cmp	r3, #5
 8005634:	bfc4      	itt	gt
 8005636:	3b04      	subgt	r3, #4
 8005638:	9305      	strgt	r3, [sp, #20]
 800563a:	9b05      	ldr	r3, [sp, #20]
 800563c:	f1a3 0302 	sub.w	r3, r3, #2
 8005640:	bfcc      	ite	gt
 8005642:	2500      	movgt	r5, #0
 8005644:	2501      	movle	r5, #1
 8005646:	2b03      	cmp	r3, #3
 8005648:	d869      	bhi.n	800571e <_dtoa_r+0x2c6>
 800564a:	e8df f003 	tbb	[pc, r3]
 800564e:	4e2c      	.short	0x4e2c
 8005650:	5a4c      	.short	0x5a4c
 8005652:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005656:	441d      	add	r5, r3
 8005658:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800565c:	2b20      	cmp	r3, #32
 800565e:	bfc1      	itttt	gt
 8005660:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005664:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005668:	fa09 f303 	lslgt.w	r3, r9, r3
 800566c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005670:	bfda      	itte	le
 8005672:	f1c3 0320 	rsble	r3, r3, #32
 8005676:	fa06 f003 	lslle.w	r0, r6, r3
 800567a:	4318      	orrgt	r0, r3
 800567c:	f7fa ff42 	bl	8000504 <__aeabi_ui2d>
 8005680:	2301      	movs	r3, #1
 8005682:	4606      	mov	r6, r0
 8005684:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005688:	3d01      	subs	r5, #1
 800568a:	9310      	str	r3, [sp, #64]	; 0x40
 800568c:	e771      	b.n	8005572 <_dtoa_r+0x11a>
 800568e:	2301      	movs	r3, #1
 8005690:	e7b6      	b.n	8005600 <_dtoa_r+0x1a8>
 8005692:	900e      	str	r0, [sp, #56]	; 0x38
 8005694:	e7b5      	b.n	8005602 <_dtoa_r+0x1aa>
 8005696:	f1ca 0300 	rsb	r3, sl, #0
 800569a:	9306      	str	r3, [sp, #24]
 800569c:	2300      	movs	r3, #0
 800569e:	eba8 080a 	sub.w	r8, r8, sl
 80056a2:	930d      	str	r3, [sp, #52]	; 0x34
 80056a4:	e7c2      	b.n	800562c <_dtoa_r+0x1d4>
 80056a6:	2300      	movs	r3, #0
 80056a8:	9308      	str	r3, [sp, #32]
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dc39      	bgt.n	8005724 <_dtoa_r+0x2cc>
 80056b0:	f04f 0901 	mov.w	r9, #1
 80056b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80056b8:	464b      	mov	r3, r9
 80056ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80056be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80056c0:	2200      	movs	r2, #0
 80056c2:	6042      	str	r2, [r0, #4]
 80056c4:	2204      	movs	r2, #4
 80056c6:	f102 0614 	add.w	r6, r2, #20
 80056ca:	429e      	cmp	r6, r3
 80056cc:	6841      	ldr	r1, [r0, #4]
 80056ce:	d92f      	bls.n	8005730 <_dtoa_r+0x2d8>
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fcc7 	bl	8006064 <_Balloc>
 80056d6:	9000      	str	r0, [sp, #0]
 80056d8:	2800      	cmp	r0, #0
 80056da:	d14b      	bne.n	8005774 <_dtoa_r+0x31c>
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <_dtoa_r+0x318>)
 80056de:	4602      	mov	r2, r0
 80056e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056e4:	e6d1      	b.n	800548a <_dtoa_r+0x32>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e7de      	b.n	80056a8 <_dtoa_r+0x250>
 80056ea:	2300      	movs	r3, #0
 80056ec:	9308      	str	r3, [sp, #32]
 80056ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f0:	eb0a 0903 	add.w	r9, sl, r3
 80056f4:	f109 0301 	add.w	r3, r9, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	bfb8      	it	lt
 80056fe:	2301      	movlt	r3, #1
 8005700:	e7dd      	b.n	80056be <_dtoa_r+0x266>
 8005702:	2301      	movs	r3, #1
 8005704:	e7f2      	b.n	80056ec <_dtoa_r+0x294>
 8005706:	2501      	movs	r5, #1
 8005708:	2300      	movs	r3, #0
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	9508      	str	r5, [sp, #32]
 800570e:	f04f 39ff 	mov.w	r9, #4294967295
 8005712:	2200      	movs	r2, #0
 8005714:	f8cd 9004 	str.w	r9, [sp, #4]
 8005718:	2312      	movs	r3, #18
 800571a:	9209      	str	r2, [sp, #36]	; 0x24
 800571c:	e7cf      	b.n	80056be <_dtoa_r+0x266>
 800571e:	2301      	movs	r3, #1
 8005720:	9308      	str	r3, [sp, #32]
 8005722:	e7f4      	b.n	800570e <_dtoa_r+0x2b6>
 8005724:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005728:	f8cd 9004 	str.w	r9, [sp, #4]
 800572c:	464b      	mov	r3, r9
 800572e:	e7c6      	b.n	80056be <_dtoa_r+0x266>
 8005730:	3101      	adds	r1, #1
 8005732:	6041      	str	r1, [r0, #4]
 8005734:	0052      	lsls	r2, r2, #1
 8005736:	e7c6      	b.n	80056c6 <_dtoa_r+0x26e>
 8005738:	636f4361 	.word	0x636f4361
 800573c:	3fd287a7 	.word	0x3fd287a7
 8005740:	8b60c8b3 	.word	0x8b60c8b3
 8005744:	3fc68a28 	.word	0x3fc68a28
 8005748:	509f79fb 	.word	0x509f79fb
 800574c:	3fd34413 	.word	0x3fd34413
 8005750:	080074a5 	.word	0x080074a5
 8005754:	080074bc 	.word	0x080074bc
 8005758:	7ff00000 	.word	0x7ff00000
 800575c:	080074a1 	.word	0x080074a1
 8005760:	08007498 	.word	0x08007498
 8005764:	08007475 	.word	0x08007475
 8005768:	3ff80000 	.word	0x3ff80000
 800576c:	080075b8 	.word	0x080075b8
 8005770:	0800751b 	.word	0x0800751b
 8005774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005776:	9a00      	ldr	r2, [sp, #0]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	9b01      	ldr	r3, [sp, #4]
 800577c:	2b0e      	cmp	r3, #14
 800577e:	f200 80ad 	bhi.w	80058dc <_dtoa_r+0x484>
 8005782:	2d00      	cmp	r5, #0
 8005784:	f000 80aa 	beq.w	80058dc <_dtoa_r+0x484>
 8005788:	f1ba 0f00 	cmp.w	sl, #0
 800578c:	dd36      	ble.n	80057fc <_dtoa_r+0x3a4>
 800578e:	4ac3      	ldr	r2, [pc, #780]	; (8005a9c <_dtoa_r+0x644>)
 8005790:	f00a 030f 	and.w	r3, sl, #15
 8005794:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005798:	ed93 7b00 	vldr	d7, [r3]
 800579c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80057a4:	eeb0 8a47 	vmov.f32	s16, s14
 80057a8:	eef0 8a67 	vmov.f32	s17, s15
 80057ac:	d016      	beq.n	80057dc <_dtoa_r+0x384>
 80057ae:	4bbc      	ldr	r3, [pc, #752]	; (8005aa0 <_dtoa_r+0x648>)
 80057b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057b8:	f7fb f848 	bl	800084c <__aeabi_ddiv>
 80057bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c0:	f007 070f 	and.w	r7, r7, #15
 80057c4:	2503      	movs	r5, #3
 80057c6:	4eb6      	ldr	r6, [pc, #728]	; (8005aa0 <_dtoa_r+0x648>)
 80057c8:	b957      	cbnz	r7, 80057e0 <_dtoa_r+0x388>
 80057ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ce:	ec53 2b18 	vmov	r2, r3, d8
 80057d2:	f7fb f83b 	bl	800084c <__aeabi_ddiv>
 80057d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057da:	e029      	b.n	8005830 <_dtoa_r+0x3d8>
 80057dc:	2502      	movs	r5, #2
 80057de:	e7f2      	b.n	80057c6 <_dtoa_r+0x36e>
 80057e0:	07f9      	lsls	r1, r7, #31
 80057e2:	d508      	bpl.n	80057f6 <_dtoa_r+0x39e>
 80057e4:	ec51 0b18 	vmov	r0, r1, d8
 80057e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057ec:	f7fa ff04 	bl	80005f8 <__aeabi_dmul>
 80057f0:	ec41 0b18 	vmov	d8, r0, r1
 80057f4:	3501      	adds	r5, #1
 80057f6:	107f      	asrs	r7, r7, #1
 80057f8:	3608      	adds	r6, #8
 80057fa:	e7e5      	b.n	80057c8 <_dtoa_r+0x370>
 80057fc:	f000 80a6 	beq.w	800594c <_dtoa_r+0x4f4>
 8005800:	f1ca 0600 	rsb	r6, sl, #0
 8005804:	4ba5      	ldr	r3, [pc, #660]	; (8005a9c <_dtoa_r+0x644>)
 8005806:	4fa6      	ldr	r7, [pc, #664]	; (8005aa0 <_dtoa_r+0x648>)
 8005808:	f006 020f 	and.w	r2, r6, #15
 800580c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005818:	f7fa feee 	bl	80005f8 <__aeabi_dmul>
 800581c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005820:	1136      	asrs	r6, r6, #4
 8005822:	2300      	movs	r3, #0
 8005824:	2502      	movs	r5, #2
 8005826:	2e00      	cmp	r6, #0
 8005828:	f040 8085 	bne.w	8005936 <_dtoa_r+0x4de>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1d2      	bne.n	80057d6 <_dtoa_r+0x37e>
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 808c 	beq.w	8005950 <_dtoa_r+0x4f8>
 8005838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800583c:	4b99      	ldr	r3, [pc, #612]	; (8005aa4 <_dtoa_r+0x64c>)
 800583e:	2200      	movs	r2, #0
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fb f94a 	bl	8000adc <__aeabi_dcmplt>
 8005848:	2800      	cmp	r0, #0
 800584a:	f000 8081 	beq.w	8005950 <_dtoa_r+0x4f8>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d07d      	beq.n	8005950 <_dtoa_r+0x4f8>
 8005854:	f1b9 0f00 	cmp.w	r9, #0
 8005858:	dd3c      	ble.n	80058d4 <_dtoa_r+0x47c>
 800585a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	2200      	movs	r2, #0
 8005862:	4b91      	ldr	r3, [pc, #580]	; (8005aa8 <_dtoa_r+0x650>)
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fec6 	bl	80005f8 <__aeabi_dmul>
 800586c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005870:	3501      	adds	r5, #1
 8005872:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005876:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800587a:	4628      	mov	r0, r5
 800587c:	f7fa fe52 	bl	8000524 <__aeabi_i2d>
 8005880:	4632      	mov	r2, r6
 8005882:	463b      	mov	r3, r7
 8005884:	f7fa feb8 	bl	80005f8 <__aeabi_dmul>
 8005888:	4b88      	ldr	r3, [pc, #544]	; (8005aac <_dtoa_r+0x654>)
 800588a:	2200      	movs	r2, #0
 800588c:	f7fa fcfe 	bl	800028c <__adddf3>
 8005890:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005898:	9303      	str	r3, [sp, #12]
 800589a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800589c:	2b00      	cmp	r3, #0
 800589e:	d15c      	bne.n	800595a <_dtoa_r+0x502>
 80058a0:	4b83      	ldr	r3, [pc, #524]	; (8005ab0 <_dtoa_r+0x658>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fa fcee 	bl	8000288 <__aeabi_dsub>
 80058ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b0:	4606      	mov	r6, r0
 80058b2:	460f      	mov	r7, r1
 80058b4:	f7fb f930 	bl	8000b18 <__aeabi_dcmpgt>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f040 8296 	bne.w	8005dea <_dtoa_r+0x992>
 80058be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80058c2:	4630      	mov	r0, r6
 80058c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fb f907 	bl	8000adc <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8288 	bne.w	8005de4 <_dtoa_r+0x98c>
 80058d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f2c0 8158 	blt.w	8005b94 <_dtoa_r+0x73c>
 80058e4:	f1ba 0f0e 	cmp.w	sl, #14
 80058e8:	f300 8154 	bgt.w	8005b94 <_dtoa_r+0x73c>
 80058ec:	4b6b      	ldr	r3, [pc, #428]	; (8005a9c <_dtoa_r+0x644>)
 80058ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f280 80e3 	bge.w	8005ac4 <_dtoa_r+0x66c>
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f300 80df 	bgt.w	8005ac4 <_dtoa_r+0x66c>
 8005906:	f040 826d 	bne.w	8005de4 <_dtoa_r+0x98c>
 800590a:	4b69      	ldr	r3, [pc, #420]	; (8005ab0 <_dtoa_r+0x658>)
 800590c:	2200      	movs	r2, #0
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fe71 	bl	80005f8 <__aeabi_dmul>
 8005916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591a:	f7fb f8f3 	bl	8000b04 <__aeabi_dcmpge>
 800591e:	9e01      	ldr	r6, [sp, #4]
 8005920:	4637      	mov	r7, r6
 8005922:	2800      	cmp	r0, #0
 8005924:	f040 8243 	bne.w	8005dae <_dtoa_r+0x956>
 8005928:	9d00      	ldr	r5, [sp, #0]
 800592a:	2331      	movs	r3, #49	; 0x31
 800592c:	f805 3b01 	strb.w	r3, [r5], #1
 8005930:	f10a 0a01 	add.w	sl, sl, #1
 8005934:	e23f      	b.n	8005db6 <_dtoa_r+0x95e>
 8005936:	07f2      	lsls	r2, r6, #31
 8005938:	d505      	bpl.n	8005946 <_dtoa_r+0x4ee>
 800593a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593e:	f7fa fe5b 	bl	80005f8 <__aeabi_dmul>
 8005942:	3501      	adds	r5, #1
 8005944:	2301      	movs	r3, #1
 8005946:	1076      	asrs	r6, r6, #1
 8005948:	3708      	adds	r7, #8
 800594a:	e76c      	b.n	8005826 <_dtoa_r+0x3ce>
 800594c:	2502      	movs	r5, #2
 800594e:	e76f      	b.n	8005830 <_dtoa_r+0x3d8>
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	f8cd a01c 	str.w	sl, [sp, #28]
 8005956:	930c      	str	r3, [sp, #48]	; 0x30
 8005958:	e78d      	b.n	8005876 <_dtoa_r+0x41e>
 800595a:	9900      	ldr	r1, [sp, #0]
 800595c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800595e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <_dtoa_r+0x644>)
 8005962:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005966:	4401      	add	r1, r0
 8005968:	9102      	str	r1, [sp, #8]
 800596a:	9908      	ldr	r1, [sp, #32]
 800596c:	eeb0 8a47 	vmov.f32	s16, s14
 8005970:	eef0 8a67 	vmov.f32	s17, s15
 8005974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800597c:	2900      	cmp	r1, #0
 800597e:	d045      	beq.n	8005a0c <_dtoa_r+0x5b4>
 8005980:	494c      	ldr	r1, [pc, #304]	; (8005ab4 <_dtoa_r+0x65c>)
 8005982:	2000      	movs	r0, #0
 8005984:	f7fa ff62 	bl	800084c <__aeabi_ddiv>
 8005988:	ec53 2b18 	vmov	r2, r3, d8
 800598c:	f7fa fc7c 	bl	8000288 <__aeabi_dsub>
 8005990:	9d00      	ldr	r5, [sp, #0]
 8005992:	ec41 0b18 	vmov	d8, r0, r1
 8005996:	4639      	mov	r1, r7
 8005998:	4630      	mov	r0, r6
 800599a:	f7fb f8dd 	bl	8000b58 <__aeabi_d2iz>
 800599e:	900c      	str	r0, [sp, #48]	; 0x30
 80059a0:	f7fa fdc0 	bl	8000524 <__aeabi_i2d>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4630      	mov	r0, r6
 80059aa:	4639      	mov	r1, r7
 80059ac:	f7fa fc6c 	bl	8000288 <__aeabi_dsub>
 80059b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b2:	3330      	adds	r3, #48	; 0x30
 80059b4:	f805 3b01 	strb.w	r3, [r5], #1
 80059b8:	ec53 2b18 	vmov	r2, r3, d8
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	f7fb f88c 	bl	8000adc <__aeabi_dcmplt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d165      	bne.n	8005a94 <_dtoa_r+0x63c>
 80059c8:	4632      	mov	r2, r6
 80059ca:	463b      	mov	r3, r7
 80059cc:	4935      	ldr	r1, [pc, #212]	; (8005aa4 <_dtoa_r+0x64c>)
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fa fc5a 	bl	8000288 <__aeabi_dsub>
 80059d4:	ec53 2b18 	vmov	r2, r3, d8
 80059d8:	f7fb f880 	bl	8000adc <__aeabi_dcmplt>
 80059dc:	2800      	cmp	r0, #0
 80059de:	f040 80b9 	bne.w	8005b54 <_dtoa_r+0x6fc>
 80059e2:	9b02      	ldr	r3, [sp, #8]
 80059e4:	429d      	cmp	r5, r3
 80059e6:	f43f af75 	beq.w	80058d4 <_dtoa_r+0x47c>
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <_dtoa_r+0x650>)
 80059ec:	ec51 0b18 	vmov	r0, r1, d8
 80059f0:	2200      	movs	r2, #0
 80059f2:	f7fa fe01 	bl	80005f8 <__aeabi_dmul>
 80059f6:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <_dtoa_r+0x650>)
 80059f8:	ec41 0b18 	vmov	d8, r0, r1
 80059fc:	2200      	movs	r2, #0
 80059fe:	4630      	mov	r0, r6
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7fa fdf9 	bl	80005f8 <__aeabi_dmul>
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	e7c4      	b.n	8005996 <_dtoa_r+0x53e>
 8005a0c:	ec51 0b17 	vmov	r0, r1, d7
 8005a10:	f7fa fdf2 	bl	80005f8 <__aeabi_dmul>
 8005a14:	9b02      	ldr	r3, [sp, #8]
 8005a16:	9d00      	ldr	r5, [sp, #0]
 8005a18:	930c      	str	r3, [sp, #48]	; 0x30
 8005a1a:	ec41 0b18 	vmov	d8, r0, r1
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7fb f899 	bl	8000b58 <__aeabi_d2iz>
 8005a26:	9011      	str	r0, [sp, #68]	; 0x44
 8005a28:	f7fa fd7c 	bl	8000524 <__aeabi_i2d>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa fc28 	bl	8000288 <__aeabi_dsub>
 8005a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a3a:	3330      	adds	r3, #48	; 0x30
 8005a3c:	f805 3b01 	strb.w	r3, [r5], #1
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	429d      	cmp	r5, r3
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	d134      	bne.n	8005ab8 <_dtoa_r+0x660>
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <_dtoa_r+0x65c>)
 8005a50:	ec51 0b18 	vmov	r0, r1, d8
 8005a54:	f7fa fc1a 	bl	800028c <__adddf3>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fb f85a 	bl	8000b18 <__aeabi_dcmpgt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d175      	bne.n	8005b54 <_dtoa_r+0x6fc>
 8005a68:	ec53 2b18 	vmov	r2, r3, d8
 8005a6c:	4911      	ldr	r1, [pc, #68]	; (8005ab4 <_dtoa_r+0x65c>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f7fa fc0a 	bl	8000288 <__aeabi_dsub>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	f7fb f82e 	bl	8000adc <__aeabi_dcmplt>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f43f af27 	beq.w	80058d4 <_dtoa_r+0x47c>
 8005a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a88:	1e6b      	subs	r3, r5, #1
 8005a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	d0f8      	beq.n	8005a86 <_dtoa_r+0x62e>
 8005a94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a98:	e04a      	b.n	8005b30 <_dtoa_r+0x6d8>
 8005a9a:	bf00      	nop
 8005a9c:	080075b8 	.word	0x080075b8
 8005aa0:	08007590 	.word	0x08007590
 8005aa4:	3ff00000 	.word	0x3ff00000
 8005aa8:	40240000 	.word	0x40240000
 8005aac:	401c0000 	.word	0x401c0000
 8005ab0:	40140000 	.word	0x40140000
 8005ab4:	3fe00000 	.word	0x3fe00000
 8005ab8:	4baf      	ldr	r3, [pc, #700]	; (8005d78 <_dtoa_r+0x920>)
 8005aba:	f7fa fd9d 	bl	80005f8 <__aeabi_dmul>
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	e7ac      	b.n	8005a1e <_dtoa_r+0x5c6>
 8005ac4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ac8:	9d00      	ldr	r5, [sp, #0]
 8005aca:	4642      	mov	r2, r8
 8005acc:	464b      	mov	r3, r9
 8005ace:	4630      	mov	r0, r6
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	f7fa febb 	bl	800084c <__aeabi_ddiv>
 8005ad6:	f7fb f83f 	bl	8000b58 <__aeabi_d2iz>
 8005ada:	9002      	str	r0, [sp, #8]
 8005adc:	f7fa fd22 	bl	8000524 <__aeabi_i2d>
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	f7fa fd88 	bl	80005f8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4630      	mov	r0, r6
 8005aee:	4639      	mov	r1, r7
 8005af0:	f7fa fbca 	bl	8000288 <__aeabi_dsub>
 8005af4:	9e02      	ldr	r6, [sp, #8]
 8005af6:	9f01      	ldr	r7, [sp, #4]
 8005af8:	3630      	adds	r6, #48	; 0x30
 8005afa:	f805 6b01 	strb.w	r6, [r5], #1
 8005afe:	9e00      	ldr	r6, [sp, #0]
 8005b00:	1bae      	subs	r6, r5, r6
 8005b02:	42b7      	cmp	r7, r6
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	d137      	bne.n	8005b7a <_dtoa_r+0x722>
 8005b0a:	f7fa fbbf 	bl	800028c <__adddf3>
 8005b0e:	4642      	mov	r2, r8
 8005b10:	464b      	mov	r3, r9
 8005b12:	4606      	mov	r6, r0
 8005b14:	460f      	mov	r7, r1
 8005b16:	f7fa ffff 	bl	8000b18 <__aeabi_dcmpgt>
 8005b1a:	b9c8      	cbnz	r0, 8005b50 <_dtoa_r+0x6f8>
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	4630      	mov	r0, r6
 8005b22:	4639      	mov	r1, r7
 8005b24:	f7fa ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b28:	b110      	cbz	r0, 8005b30 <_dtoa_r+0x6d8>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	07d9      	lsls	r1, r3, #31
 8005b2e:	d40f      	bmi.n	8005b50 <_dtoa_r+0x6f8>
 8005b30:	4620      	mov	r0, r4
 8005b32:	4659      	mov	r1, fp
 8005b34:	f000 fad6 	bl	80060e4 <_Bfree>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	702b      	strb	r3, [r5, #0]
 8005b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b3e:	f10a 0001 	add.w	r0, sl, #1
 8005b42:	6018      	str	r0, [r3, #0]
 8005b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f43f acd8 	beq.w	80054fc <_dtoa_r+0xa4>
 8005b4c:	601d      	str	r5, [r3, #0]
 8005b4e:	e4d5      	b.n	80054fc <_dtoa_r+0xa4>
 8005b50:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b54:	462b      	mov	r3, r5
 8005b56:	461d      	mov	r5, r3
 8005b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b5c:	2a39      	cmp	r2, #57	; 0x39
 8005b5e:	d108      	bne.n	8005b72 <_dtoa_r+0x71a>
 8005b60:	9a00      	ldr	r2, [sp, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1f7      	bne.n	8005b56 <_dtoa_r+0x6fe>
 8005b66:	9a07      	ldr	r2, [sp, #28]
 8005b68:	9900      	ldr	r1, [sp, #0]
 8005b6a:	3201      	adds	r2, #1
 8005b6c:	9207      	str	r2, [sp, #28]
 8005b6e:	2230      	movs	r2, #48	; 0x30
 8005b70:	700a      	strb	r2, [r1, #0]
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	3201      	adds	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	e78c      	b.n	8005a94 <_dtoa_r+0x63c>
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <_dtoa_r+0x920>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f7fa fd3b 	bl	80005f8 <__aeabi_dmul>
 8005b82:	2200      	movs	r2, #0
 8005b84:	2300      	movs	r3, #0
 8005b86:	4606      	mov	r6, r0
 8005b88:	460f      	mov	r7, r1
 8005b8a:	f7fa ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d09b      	beq.n	8005aca <_dtoa_r+0x672>
 8005b92:	e7cd      	b.n	8005b30 <_dtoa_r+0x6d8>
 8005b94:	9a08      	ldr	r2, [sp, #32]
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	f000 80c4 	beq.w	8005d24 <_dtoa_r+0x8cc>
 8005b9c:	9a05      	ldr	r2, [sp, #20]
 8005b9e:	2a01      	cmp	r2, #1
 8005ba0:	f300 80a8 	bgt.w	8005cf4 <_dtoa_r+0x89c>
 8005ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	f000 80a0 	beq.w	8005cec <_dtoa_r+0x894>
 8005bac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bb0:	9e06      	ldr	r6, [sp, #24]
 8005bb2:	4645      	mov	r5, r8
 8005bb4:	9a04      	ldr	r2, [sp, #16]
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	441a      	add	r2, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	4498      	add	r8, r3
 8005bbe:	9204      	str	r2, [sp, #16]
 8005bc0:	f000 fb4c 	bl	800625c <__i2b>
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	dd0b      	ble.n	8005be2 <_dtoa_r+0x78a>
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dd08      	ble.n	8005be2 <_dtoa_r+0x78a>
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	9a04      	ldr	r2, [sp, #16]
 8005bd4:	bfa8      	it	ge
 8005bd6:	462b      	movge	r3, r5
 8005bd8:	eba8 0803 	sub.w	r8, r8, r3
 8005bdc:	1aed      	subs	r5, r5, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	9b06      	ldr	r3, [sp, #24]
 8005be4:	b1fb      	cbz	r3, 8005c26 <_dtoa_r+0x7ce>
 8005be6:	9b08      	ldr	r3, [sp, #32]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 809f 	beq.w	8005d2c <_dtoa_r+0x8d4>
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	dd11      	ble.n	8005c16 <_dtoa_r+0x7be>
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 fbec 	bl	80063d4 <__pow5mult>
 8005bfc:	465a      	mov	r2, fp
 8005bfe:	4601      	mov	r1, r0
 8005c00:	4607      	mov	r7, r0
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fb40 	bl	8006288 <__multiply>
 8005c08:	4659      	mov	r1, fp
 8005c0a:	9007      	str	r0, [sp, #28]
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 fa69 	bl	80060e4 <_Bfree>
 8005c12:	9b07      	ldr	r3, [sp, #28]
 8005c14:	469b      	mov	fp, r3
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	1b9a      	subs	r2, r3, r6
 8005c1a:	d004      	beq.n	8005c26 <_dtoa_r+0x7ce>
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 fbd8 	bl	80063d4 <__pow5mult>
 8005c24:	4683      	mov	fp, r0
 8005c26:	2101      	movs	r1, #1
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fb17 	bl	800625c <__i2b>
 8005c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	4606      	mov	r6, r0
 8005c34:	dd7c      	ble.n	8005d30 <_dtoa_r+0x8d8>
 8005c36:	461a      	mov	r2, r3
 8005c38:	4601      	mov	r1, r0
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fbca 	bl	80063d4 <__pow5mult>
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	4606      	mov	r6, r0
 8005c46:	dd76      	ble.n	8005d36 <_dtoa_r+0x8de>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9306      	str	r3, [sp, #24]
 8005c4c:	6933      	ldr	r3, [r6, #16]
 8005c4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c52:	6918      	ldr	r0, [r3, #16]
 8005c54:	f000 fab2 	bl	80061bc <__hi0bits>
 8005c58:	f1c0 0020 	rsb	r0, r0, #32
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	4418      	add	r0, r3
 8005c60:	f010 001f 	ands.w	r0, r0, #31
 8005c64:	f000 8086 	beq.w	8005d74 <_dtoa_r+0x91c>
 8005c68:	f1c0 0320 	rsb	r3, r0, #32
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	dd7f      	ble.n	8005d70 <_dtoa_r+0x918>
 8005c70:	f1c0 001c 	rsb	r0, r0, #28
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	4403      	add	r3, r0
 8005c78:	4480      	add	r8, r0
 8005c7a:	4405      	add	r5, r0
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	dd05      	ble.n	8005c90 <_dtoa_r+0x838>
 8005c84:	4659      	mov	r1, fp
 8005c86:	4642      	mov	r2, r8
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fbfd 	bl	8006488 <__lshift>
 8005c8e:	4683      	mov	fp, r0
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd05      	ble.n	8005ca2 <_dtoa_r+0x84a>
 8005c96:	4631      	mov	r1, r6
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 fbf4 	bl	8006488 <__lshift>
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d069      	beq.n	8005d7c <_dtoa_r+0x924>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4658      	mov	r0, fp
 8005cac:	f000 fc58 	bl	8006560 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	da63      	bge.n	8005d7c <_dtoa_r+0x924>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fa34 	bl	8006128 <__multadd>
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cc6:	4683      	mov	fp, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 818f 	beq.w	8005fec <_dtoa_r+0xb94>
 8005cce:	4639      	mov	r1, r7
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fa27 	bl	8006128 <__multadd>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	4607      	mov	r7, r0
 8005ce0:	f300 808e 	bgt.w	8005e00 <_dtoa_r+0x9a8>
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dc50      	bgt.n	8005d8c <_dtoa_r+0x934>
 8005cea:	e089      	b.n	8005e00 <_dtoa_r+0x9a8>
 8005cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf2:	e75d      	b.n	8005bb0 <_dtoa_r+0x758>
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	1e5e      	subs	r6, r3, #1
 8005cf8:	9b06      	ldr	r3, [sp, #24]
 8005cfa:	42b3      	cmp	r3, r6
 8005cfc:	bfbf      	itttt	lt
 8005cfe:	9b06      	ldrlt	r3, [sp, #24]
 8005d00:	9606      	strlt	r6, [sp, #24]
 8005d02:	1af2      	sublt	r2, r6, r3
 8005d04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005d06:	bfb6      	itet	lt
 8005d08:	189b      	addlt	r3, r3, r2
 8005d0a:	1b9e      	subge	r6, r3, r6
 8005d0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	bfb8      	it	lt
 8005d12:	2600      	movlt	r6, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfb5      	itete	lt
 8005d18:	eba8 0503 	sublt.w	r5, r8, r3
 8005d1c:	9b01      	ldrge	r3, [sp, #4]
 8005d1e:	2300      	movlt	r3, #0
 8005d20:	4645      	movge	r5, r8
 8005d22:	e747      	b.n	8005bb4 <_dtoa_r+0x75c>
 8005d24:	9e06      	ldr	r6, [sp, #24]
 8005d26:	9f08      	ldr	r7, [sp, #32]
 8005d28:	4645      	mov	r5, r8
 8005d2a:	e74c      	b.n	8005bc6 <_dtoa_r+0x76e>
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	e775      	b.n	8005c1c <_dtoa_r+0x7c4>
 8005d30:	9b05      	ldr	r3, [sp, #20]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	dc18      	bgt.n	8005d68 <_dtoa_r+0x910>
 8005d36:	9b02      	ldr	r3, [sp, #8]
 8005d38:	b9b3      	cbnz	r3, 8005d68 <_dtoa_r+0x910>
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d40:	b9a3      	cbnz	r3, 8005d6c <_dtoa_r+0x914>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	0d1b      	lsrs	r3, r3, #20
 8005d4a:	051b      	lsls	r3, r3, #20
 8005d4c:	b12b      	cbz	r3, 8005d5a <_dtoa_r+0x902>
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	f108 0801 	add.w	r8, r8, #1
 8005d58:	2301      	movs	r3, #1
 8005d5a:	9306      	str	r3, [sp, #24]
 8005d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f47f af74 	bne.w	8005c4c <_dtoa_r+0x7f4>
 8005d64:	2001      	movs	r0, #1
 8005d66:	e779      	b.n	8005c5c <_dtoa_r+0x804>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e7f6      	b.n	8005d5a <_dtoa_r+0x902>
 8005d6c:	9b02      	ldr	r3, [sp, #8]
 8005d6e:	e7f4      	b.n	8005d5a <_dtoa_r+0x902>
 8005d70:	d085      	beq.n	8005c7e <_dtoa_r+0x826>
 8005d72:	4618      	mov	r0, r3
 8005d74:	301c      	adds	r0, #28
 8005d76:	e77d      	b.n	8005c74 <_dtoa_r+0x81c>
 8005d78:	40240000 	.word	0x40240000
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dc38      	bgt.n	8005df4 <_dtoa_r+0x99c>
 8005d82:	9b05      	ldr	r3, [sp, #20]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	dd35      	ble.n	8005df4 <_dtoa_r+0x99c>
 8005d88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	d10d      	bne.n	8005dae <_dtoa_r+0x956>
 8005d92:	4631      	mov	r1, r6
 8005d94:	464b      	mov	r3, r9
 8005d96:	2205      	movs	r2, #5
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 f9c5 	bl	8006128 <__multadd>
 8005d9e:	4601      	mov	r1, r0
 8005da0:	4606      	mov	r6, r0
 8005da2:	4658      	mov	r0, fp
 8005da4:	f000 fbdc 	bl	8006560 <__mcmp>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f73f adbd 	bgt.w	8005928 <_dtoa_r+0x4d0>
 8005dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db0:	9d00      	ldr	r5, [sp, #0]
 8005db2:	ea6f 0a03 	mvn.w	sl, r3
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f991 	bl	80060e4 <_Bfree>
 8005dc2:	2f00      	cmp	r7, #0
 8005dc4:	f43f aeb4 	beq.w	8005b30 <_dtoa_r+0x6d8>
 8005dc8:	f1b8 0f00 	cmp.w	r8, #0
 8005dcc:	d005      	beq.n	8005dda <_dtoa_r+0x982>
 8005dce:	45b8      	cmp	r8, r7
 8005dd0:	d003      	beq.n	8005dda <_dtoa_r+0x982>
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 f985 	bl	80060e4 <_Bfree>
 8005dda:	4639      	mov	r1, r7
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f981 	bl	80060e4 <_Bfree>
 8005de2:	e6a5      	b.n	8005b30 <_dtoa_r+0x6d8>
 8005de4:	2600      	movs	r6, #0
 8005de6:	4637      	mov	r7, r6
 8005de8:	e7e1      	b.n	8005dae <_dtoa_r+0x956>
 8005dea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005dec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005df0:	4637      	mov	r7, r6
 8005df2:	e599      	b.n	8005928 <_dtoa_r+0x4d0>
 8005df4:	9b08      	ldr	r3, [sp, #32]
 8005df6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80fd 	beq.w	8005ffa <_dtoa_r+0xba2>
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x9b8>
 8005e04:	4639      	mov	r1, r7
 8005e06:	462a      	mov	r2, r5
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fb3d 	bl	8006488 <__lshift>
 8005e0e:	4607      	mov	r7, r0
 8005e10:	9b06      	ldr	r3, [sp, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d05c      	beq.n	8005ed0 <_dtoa_r+0xa78>
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f923 	bl	8006064 <_Balloc>
 8005e1e:	4605      	mov	r5, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <_dtoa_r+0x9d6>
 8005e22:	4b80      	ldr	r3, [pc, #512]	; (8006024 <_dtoa_r+0xbcc>)
 8005e24:	4602      	mov	r2, r0
 8005e26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e2a:	f7ff bb2e 	b.w	800548a <_dtoa_r+0x32>
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	3202      	adds	r2, #2
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	f107 010c 	add.w	r1, r7, #12
 8005e38:	300c      	adds	r0, #12
 8005e3a:	f000 f905 	bl	8006048 <memcpy>
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4629      	mov	r1, r5
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fb20 	bl	8006488 <__lshift>
 8005e48:	9b00      	ldr	r3, [sp, #0]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	9b00      	ldr	r3, [sp, #0]
 8005e50:	444b      	add	r3, r9
 8005e52:	9307      	str	r3, [sp, #28]
 8005e54:	9b02      	ldr	r3, [sp, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	46b8      	mov	r8, r7
 8005e5c:	9306      	str	r3, [sp, #24]
 8005e5e:	4607      	mov	r7, r0
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	4631      	mov	r1, r6
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4658      	mov	r0, fp
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	f7ff fa67 	bl	800533c <quorem>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	3330      	adds	r3, #48	; 0x30
 8005e72:	9004      	str	r0, [sp, #16]
 8005e74:	4641      	mov	r1, r8
 8005e76:	4658      	mov	r0, fp
 8005e78:	9308      	str	r3, [sp, #32]
 8005e7a:	f000 fb71 	bl	8006560 <__mcmp>
 8005e7e:	463a      	mov	r2, r7
 8005e80:	4681      	mov	r9, r0
 8005e82:	4631      	mov	r1, r6
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fb87 	bl	8006598 <__mdiff>
 8005e8a:	68c2      	ldr	r2, [r0, #12]
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	4605      	mov	r5, r0
 8005e90:	bb02      	cbnz	r2, 8005ed4 <_dtoa_r+0xa7c>
 8005e92:	4601      	mov	r1, r0
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fb63 	bl	8006560 <__mcmp>
 8005e9a:	9b08      	ldr	r3, [sp, #32]
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005ea6:	f000 f91d 	bl	80060e4 <_Bfree>
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eae:	9d01      	ldr	r5, [sp, #4]
 8005eb0:	ea43 0102 	orr.w	r1, r3, r2
 8005eb4:	9b06      	ldr	r3, [sp, #24]
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	d10d      	bne.n	8005ed8 <_dtoa_r+0xa80>
 8005ebc:	2b39      	cmp	r3, #57	; 0x39
 8005ebe:	d029      	beq.n	8005f14 <_dtoa_r+0xabc>
 8005ec0:	f1b9 0f00 	cmp.w	r9, #0
 8005ec4:	dd01      	ble.n	8005eca <_dtoa_r+0xa72>
 8005ec6:	9b04      	ldr	r3, [sp, #16]
 8005ec8:	3331      	adds	r3, #49	; 0x31
 8005eca:	9a02      	ldr	r2, [sp, #8]
 8005ecc:	7013      	strb	r3, [r2, #0]
 8005ece:	e774      	b.n	8005dba <_dtoa_r+0x962>
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	e7b9      	b.n	8005e48 <_dtoa_r+0x9f0>
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	e7e2      	b.n	8005e9e <_dtoa_r+0xa46>
 8005ed8:	f1b9 0f00 	cmp.w	r9, #0
 8005edc:	db06      	blt.n	8005eec <_dtoa_r+0xa94>
 8005ede:	9905      	ldr	r1, [sp, #20]
 8005ee0:	ea41 0909 	orr.w	r9, r1, r9
 8005ee4:	9906      	ldr	r1, [sp, #24]
 8005ee6:	ea59 0101 	orrs.w	r1, r9, r1
 8005eea:	d120      	bne.n	8005f2e <_dtoa_r+0xad6>
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	ddec      	ble.n	8005eca <_dtoa_r+0xa72>
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f000 fac6 	bl	8006488 <__lshift>
 8005efc:	4631      	mov	r1, r6
 8005efe:	4683      	mov	fp, r0
 8005f00:	f000 fb2e 	bl	8006560 <__mcmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	dc02      	bgt.n	8005f10 <_dtoa_r+0xab8>
 8005f0a:	d1de      	bne.n	8005eca <_dtoa_r+0xa72>
 8005f0c:	07da      	lsls	r2, r3, #31
 8005f0e:	d5dc      	bpl.n	8005eca <_dtoa_r+0xa72>
 8005f10:	2b39      	cmp	r3, #57	; 0x39
 8005f12:	d1d8      	bne.n	8005ec6 <_dtoa_r+0xa6e>
 8005f14:	9a02      	ldr	r2, [sp, #8]
 8005f16:	2339      	movs	r3, #57	; 0x39
 8005f18:	7013      	strb	r3, [r2, #0]
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	461d      	mov	r5, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f24:	2a39      	cmp	r2, #57	; 0x39
 8005f26:	d050      	beq.n	8005fca <_dtoa_r+0xb72>
 8005f28:	3201      	adds	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e745      	b.n	8005dba <_dtoa_r+0x962>
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	dd03      	ble.n	8005f3a <_dtoa_r+0xae2>
 8005f32:	2b39      	cmp	r3, #57	; 0x39
 8005f34:	d0ee      	beq.n	8005f14 <_dtoa_r+0xabc>
 8005f36:	3301      	adds	r3, #1
 8005f38:	e7c7      	b.n	8005eca <_dtoa_r+0xa72>
 8005f3a:	9a01      	ldr	r2, [sp, #4]
 8005f3c:	9907      	ldr	r1, [sp, #28]
 8005f3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f42:	428a      	cmp	r2, r1
 8005f44:	d02a      	beq.n	8005f9c <_dtoa_r+0xb44>
 8005f46:	4659      	mov	r1, fp
 8005f48:	2300      	movs	r3, #0
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f8eb 	bl	8006128 <__multadd>
 8005f52:	45b8      	cmp	r8, r7
 8005f54:	4683      	mov	fp, r0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f04f 020a 	mov.w	r2, #10
 8005f5e:	4641      	mov	r1, r8
 8005f60:	4620      	mov	r0, r4
 8005f62:	d107      	bne.n	8005f74 <_dtoa_r+0xb1c>
 8005f64:	f000 f8e0 	bl	8006128 <__multadd>
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	e775      	b.n	8005e60 <_dtoa_r+0xa08>
 8005f74:	f000 f8d8 	bl	8006128 <__multadd>
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	220a      	movs	r2, #10
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 f8d1 	bl	8006128 <__multadd>
 8005f86:	4607      	mov	r7, r0
 8005f88:	e7f0      	b.n	8005f6c <_dtoa_r+0xb14>
 8005f8a:	f1b9 0f00 	cmp.w	r9, #0
 8005f8e:	9a00      	ldr	r2, [sp, #0]
 8005f90:	bfcc      	ite	gt
 8005f92:	464d      	movgt	r5, r9
 8005f94:	2501      	movle	r5, #1
 8005f96:	4415      	add	r5, r2
 8005f98:	f04f 0800 	mov.w	r8, #0
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	f000 fa70 	bl	8006488 <__lshift>
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4683      	mov	fp, r0
 8005fac:	f000 fad8 	bl	8006560 <__mcmp>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	dcb2      	bgt.n	8005f1a <_dtoa_r+0xac2>
 8005fb4:	d102      	bne.n	8005fbc <_dtoa_r+0xb64>
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	07db      	lsls	r3, r3, #31
 8005fba:	d4ae      	bmi.n	8005f1a <_dtoa_r+0xac2>
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fc4:	2a30      	cmp	r2, #48	; 0x30
 8005fc6:	d0fa      	beq.n	8005fbe <_dtoa_r+0xb66>
 8005fc8:	e6f7      	b.n	8005dba <_dtoa_r+0x962>
 8005fca:	9a00      	ldr	r2, [sp, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1a5      	bne.n	8005f1c <_dtoa_r+0xac4>
 8005fd0:	f10a 0a01 	add.w	sl, sl, #1
 8005fd4:	2331      	movs	r3, #49	; 0x31
 8005fd6:	e779      	b.n	8005ecc <_dtoa_r+0xa74>
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <_dtoa_r+0xbd0>)
 8005fda:	f7ff baaf 	b.w	800553c <_dtoa_r+0xe4>
 8005fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f aa86 	bne.w	80054f2 <_dtoa_r+0x9a>
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <_dtoa_r+0xbd4>)
 8005fe8:	f7ff baa8 	b.w	800553c <_dtoa_r+0xe4>
 8005fec:	f1b9 0f00 	cmp.w	r9, #0
 8005ff0:	dc03      	bgt.n	8005ffa <_dtoa_r+0xba2>
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	f73f aec9 	bgt.w	8005d8c <_dtoa_r+0x934>
 8005ffa:	9d00      	ldr	r5, [sp, #0]
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4658      	mov	r0, fp
 8006000:	f7ff f99c 	bl	800533c <quorem>
 8006004:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006008:	f805 3b01 	strb.w	r3, [r5], #1
 800600c:	9a00      	ldr	r2, [sp, #0]
 800600e:	1aaa      	subs	r2, r5, r2
 8006010:	4591      	cmp	r9, r2
 8006012:	ddba      	ble.n	8005f8a <_dtoa_r+0xb32>
 8006014:	4659      	mov	r1, fp
 8006016:	2300      	movs	r3, #0
 8006018:	220a      	movs	r2, #10
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f884 	bl	8006128 <__multadd>
 8006020:	4683      	mov	fp, r0
 8006022:	e7eb      	b.n	8005ffc <_dtoa_r+0xba4>
 8006024:	0800751b 	.word	0x0800751b
 8006028:	08007474 	.word	0x08007474
 800602c:	08007498 	.word	0x08007498

08006030 <_localeconv_r>:
 8006030:	4800      	ldr	r0, [pc, #0]	; (8006034 <_localeconv_r+0x4>)
 8006032:	4770      	bx	lr
 8006034:	20000390 	.word	0x20000390

08006038 <malloc>:
 8006038:	4b02      	ldr	r3, [pc, #8]	; (8006044 <malloc+0xc>)
 800603a:	4601      	mov	r1, r0
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f000 bbef 	b.w	8006820 <_malloc_r>
 8006042:	bf00      	nop
 8006044:	2000023c 	.word	0x2000023c

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	4291      	cmp	r1, r2
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <_Balloc>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006068:	4604      	mov	r4, r0
 800606a:	460d      	mov	r5, r1
 800606c:	b976      	cbnz	r6, 800608c <_Balloc+0x28>
 800606e:	2010      	movs	r0, #16
 8006070:	f7ff ffe2 	bl	8006038 <malloc>
 8006074:	4602      	mov	r2, r0
 8006076:	6260      	str	r0, [r4, #36]	; 0x24
 8006078:	b920      	cbnz	r0, 8006084 <_Balloc+0x20>
 800607a:	4b18      	ldr	r3, [pc, #96]	; (80060dc <_Balloc+0x78>)
 800607c:	4818      	ldr	r0, [pc, #96]	; (80060e0 <_Balloc+0x7c>)
 800607e:	2166      	movs	r1, #102	; 0x66
 8006080:	f000 fc38 	bl	80068f4 <__assert_func>
 8006084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006088:	6006      	str	r6, [r0, #0]
 800608a:	60c6      	str	r6, [r0, #12]
 800608c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800608e:	68f3      	ldr	r3, [r6, #12]
 8006090:	b183      	cbz	r3, 80060b4 <_Balloc+0x50>
 8006092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800609a:	b9b8      	cbnz	r0, 80060cc <_Balloc+0x68>
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f605 	lsl.w	r6, r1, r5
 80060a2:	1d72      	adds	r2, r6, #5
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fb5a 	bl	8006760 <_calloc_r>
 80060ac:	b160      	cbz	r0, 80060c8 <_Balloc+0x64>
 80060ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060b2:	e00e      	b.n	80060d2 <_Balloc+0x6e>
 80060b4:	2221      	movs	r2, #33	; 0x21
 80060b6:	2104      	movs	r1, #4
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fb51 	bl	8006760 <_calloc_r>
 80060be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c0:	60f0      	str	r0, [r6, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e4      	bne.n	8006092 <_Balloc+0x2e>
 80060c8:	2000      	movs	r0, #0
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	6802      	ldr	r2, [r0, #0]
 80060ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060d2:	2300      	movs	r3, #0
 80060d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060d8:	e7f7      	b.n	80060ca <_Balloc+0x66>
 80060da:	bf00      	nop
 80060dc:	080074a5 	.word	0x080074a5
 80060e0:	0800752c 	.word	0x0800752c

080060e4 <_Bfree>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b976      	cbnz	r6, 800610c <_Bfree+0x28>
 80060ee:	2010      	movs	r0, #16
 80060f0:	f7ff ffa2 	bl	8006038 <malloc>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6268      	str	r0, [r5, #36]	; 0x24
 80060f8:	b920      	cbnz	r0, 8006104 <_Bfree+0x20>
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <_Bfree+0x3c>)
 80060fc:	4809      	ldr	r0, [pc, #36]	; (8006124 <_Bfree+0x40>)
 80060fe:	218a      	movs	r1, #138	; 0x8a
 8006100:	f000 fbf8 	bl	80068f4 <__assert_func>
 8006104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006108:	6006      	str	r6, [r0, #0]
 800610a:	60c6      	str	r6, [r0, #12]
 800610c:	b13c      	cbz	r4, 800611e <_Bfree+0x3a>
 800610e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006110:	6862      	ldr	r2, [r4, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006118:	6021      	str	r1, [r4, #0]
 800611a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	080074a5 	.word	0x080074a5
 8006124:	0800752c 	.word	0x0800752c

08006128 <__multadd>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	690e      	ldr	r6, [r1, #16]
 800612e:	4607      	mov	r7, r0
 8006130:	4698      	mov	r8, r3
 8006132:	460c      	mov	r4, r1
 8006134:	f101 0014 	add.w	r0, r1, #20
 8006138:	2300      	movs	r3, #0
 800613a:	6805      	ldr	r5, [r0, #0]
 800613c:	b2a9      	uxth	r1, r5
 800613e:	fb02 8101 	mla	r1, r2, r1, r8
 8006142:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006146:	0c2d      	lsrs	r5, r5, #16
 8006148:	fb02 c505 	mla	r5, r2, r5, ip
 800614c:	b289      	uxth	r1, r1
 800614e:	3301      	adds	r3, #1
 8006150:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006154:	429e      	cmp	r6, r3
 8006156:	f840 1b04 	str.w	r1, [r0], #4
 800615a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800615e:	dcec      	bgt.n	800613a <__multadd+0x12>
 8006160:	f1b8 0f00 	cmp.w	r8, #0
 8006164:	d022      	beq.n	80061ac <__multadd+0x84>
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	42b3      	cmp	r3, r6
 800616a:	dc19      	bgt.n	80061a0 <__multadd+0x78>
 800616c:	6861      	ldr	r1, [r4, #4]
 800616e:	4638      	mov	r0, r7
 8006170:	3101      	adds	r1, #1
 8006172:	f7ff ff77 	bl	8006064 <_Balloc>
 8006176:	4605      	mov	r5, r0
 8006178:	b928      	cbnz	r0, 8006186 <__multadd+0x5e>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <__multadd+0x8c>)
 800617e:	480e      	ldr	r0, [pc, #56]	; (80061b8 <__multadd+0x90>)
 8006180:	21b5      	movs	r1, #181	; 0xb5
 8006182:	f000 fbb7 	bl	80068f4 <__assert_func>
 8006186:	6922      	ldr	r2, [r4, #16]
 8006188:	3202      	adds	r2, #2
 800618a:	f104 010c 	add.w	r1, r4, #12
 800618e:	0092      	lsls	r2, r2, #2
 8006190:	300c      	adds	r0, #12
 8006192:	f7ff ff59 	bl	8006048 <memcpy>
 8006196:	4621      	mov	r1, r4
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ffa3 	bl	80060e4 <_Bfree>
 800619e:	462c      	mov	r4, r5
 80061a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80061a4:	3601      	adds	r6, #1
 80061a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80061aa:	6126      	str	r6, [r4, #16]
 80061ac:	4620      	mov	r0, r4
 80061ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b2:	bf00      	nop
 80061b4:	0800751b 	.word	0x0800751b
 80061b8:	0800752c 	.word	0x0800752c

080061bc <__hi0bits>:
 80061bc:	0c03      	lsrs	r3, r0, #16
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	b9d3      	cbnz	r3, 80061f8 <__hi0bits+0x3c>
 80061c2:	0400      	lsls	r0, r0, #16
 80061c4:	2310      	movs	r3, #16
 80061c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061ca:	bf04      	itt	eq
 80061cc:	0200      	lsleq	r0, r0, #8
 80061ce:	3308      	addeq	r3, #8
 80061d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061d4:	bf04      	itt	eq
 80061d6:	0100      	lsleq	r0, r0, #4
 80061d8:	3304      	addeq	r3, #4
 80061da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061de:	bf04      	itt	eq
 80061e0:	0080      	lsleq	r0, r0, #2
 80061e2:	3302      	addeq	r3, #2
 80061e4:	2800      	cmp	r0, #0
 80061e6:	db05      	blt.n	80061f4 <__hi0bits+0x38>
 80061e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80061ec:	f103 0301 	add.w	r3, r3, #1
 80061f0:	bf08      	it	eq
 80061f2:	2320      	moveq	r3, #32
 80061f4:	4618      	mov	r0, r3
 80061f6:	4770      	bx	lr
 80061f8:	2300      	movs	r3, #0
 80061fa:	e7e4      	b.n	80061c6 <__hi0bits+0xa>

080061fc <__lo0bits>:
 80061fc:	6803      	ldr	r3, [r0, #0]
 80061fe:	f013 0207 	ands.w	r2, r3, #7
 8006202:	4601      	mov	r1, r0
 8006204:	d00b      	beq.n	800621e <__lo0bits+0x22>
 8006206:	07da      	lsls	r2, r3, #31
 8006208:	d424      	bmi.n	8006254 <__lo0bits+0x58>
 800620a:	0798      	lsls	r0, r3, #30
 800620c:	bf49      	itett	mi
 800620e:	085b      	lsrmi	r3, r3, #1
 8006210:	089b      	lsrpl	r3, r3, #2
 8006212:	2001      	movmi	r0, #1
 8006214:	600b      	strmi	r3, [r1, #0]
 8006216:	bf5c      	itt	pl
 8006218:	600b      	strpl	r3, [r1, #0]
 800621a:	2002      	movpl	r0, #2
 800621c:	4770      	bx	lr
 800621e:	b298      	uxth	r0, r3
 8006220:	b9b0      	cbnz	r0, 8006250 <__lo0bits+0x54>
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	2010      	movs	r0, #16
 8006226:	f013 0fff 	tst.w	r3, #255	; 0xff
 800622a:	bf04      	itt	eq
 800622c:	0a1b      	lsreq	r3, r3, #8
 800622e:	3008      	addeq	r0, #8
 8006230:	071a      	lsls	r2, r3, #28
 8006232:	bf04      	itt	eq
 8006234:	091b      	lsreq	r3, r3, #4
 8006236:	3004      	addeq	r0, #4
 8006238:	079a      	lsls	r2, r3, #30
 800623a:	bf04      	itt	eq
 800623c:	089b      	lsreq	r3, r3, #2
 800623e:	3002      	addeq	r0, #2
 8006240:	07da      	lsls	r2, r3, #31
 8006242:	d403      	bmi.n	800624c <__lo0bits+0x50>
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	f100 0001 	add.w	r0, r0, #1
 800624a:	d005      	beq.n	8006258 <__lo0bits+0x5c>
 800624c:	600b      	str	r3, [r1, #0]
 800624e:	4770      	bx	lr
 8006250:	4610      	mov	r0, r2
 8006252:	e7e8      	b.n	8006226 <__lo0bits+0x2a>
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr
 8006258:	2020      	movs	r0, #32
 800625a:	4770      	bx	lr

0800625c <__i2b>:
 800625c:	b510      	push	{r4, lr}
 800625e:	460c      	mov	r4, r1
 8006260:	2101      	movs	r1, #1
 8006262:	f7ff feff 	bl	8006064 <_Balloc>
 8006266:	4602      	mov	r2, r0
 8006268:	b928      	cbnz	r0, 8006276 <__i2b+0x1a>
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <__i2b+0x24>)
 800626c:	4805      	ldr	r0, [pc, #20]	; (8006284 <__i2b+0x28>)
 800626e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006272:	f000 fb3f 	bl	80068f4 <__assert_func>
 8006276:	2301      	movs	r3, #1
 8006278:	6144      	str	r4, [r0, #20]
 800627a:	6103      	str	r3, [r0, #16]
 800627c:	bd10      	pop	{r4, pc}
 800627e:	bf00      	nop
 8006280:	0800751b 	.word	0x0800751b
 8006284:	0800752c 	.word	0x0800752c

08006288 <__multiply>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	4614      	mov	r4, r2
 800628e:	690a      	ldr	r2, [r1, #16]
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	bfb8      	it	lt
 8006296:	460b      	movlt	r3, r1
 8006298:	460d      	mov	r5, r1
 800629a:	bfbc      	itt	lt
 800629c:	4625      	movlt	r5, r4
 800629e:	461c      	movlt	r4, r3
 80062a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80062a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062a8:	68ab      	ldr	r3, [r5, #8]
 80062aa:	6869      	ldr	r1, [r5, #4]
 80062ac:	eb0a 0709 	add.w	r7, sl, r9
 80062b0:	42bb      	cmp	r3, r7
 80062b2:	b085      	sub	sp, #20
 80062b4:	bfb8      	it	lt
 80062b6:	3101      	addlt	r1, #1
 80062b8:	f7ff fed4 	bl	8006064 <_Balloc>
 80062bc:	b930      	cbnz	r0, 80062cc <__multiply+0x44>
 80062be:	4602      	mov	r2, r0
 80062c0:	4b42      	ldr	r3, [pc, #264]	; (80063cc <__multiply+0x144>)
 80062c2:	4843      	ldr	r0, [pc, #268]	; (80063d0 <__multiply+0x148>)
 80062c4:	f240 115d 	movw	r1, #349	; 0x15d
 80062c8:	f000 fb14 	bl	80068f4 <__assert_func>
 80062cc:	f100 0614 	add.w	r6, r0, #20
 80062d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80062d4:	4633      	mov	r3, r6
 80062d6:	2200      	movs	r2, #0
 80062d8:	4543      	cmp	r3, r8
 80062da:	d31e      	bcc.n	800631a <__multiply+0x92>
 80062dc:	f105 0c14 	add.w	ip, r5, #20
 80062e0:	f104 0314 	add.w	r3, r4, #20
 80062e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80062e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80062ec:	9202      	str	r2, [sp, #8]
 80062ee:	ebac 0205 	sub.w	r2, ip, r5
 80062f2:	3a15      	subs	r2, #21
 80062f4:	f022 0203 	bic.w	r2, r2, #3
 80062f8:	3204      	adds	r2, #4
 80062fa:	f105 0115 	add.w	r1, r5, #21
 80062fe:	458c      	cmp	ip, r1
 8006300:	bf38      	it	cc
 8006302:	2204      	movcc	r2, #4
 8006304:	9201      	str	r2, [sp, #4]
 8006306:	9a02      	ldr	r2, [sp, #8]
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	429a      	cmp	r2, r3
 800630c:	d808      	bhi.n	8006320 <__multiply+0x98>
 800630e:	2f00      	cmp	r7, #0
 8006310:	dc55      	bgt.n	80063be <__multiply+0x136>
 8006312:	6107      	str	r7, [r0, #16]
 8006314:	b005      	add	sp, #20
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	f843 2b04 	str.w	r2, [r3], #4
 800631e:	e7db      	b.n	80062d8 <__multiply+0x50>
 8006320:	f8b3 a000 	ldrh.w	sl, [r3]
 8006324:	f1ba 0f00 	cmp.w	sl, #0
 8006328:	d020      	beq.n	800636c <__multiply+0xe4>
 800632a:	f105 0e14 	add.w	lr, r5, #20
 800632e:	46b1      	mov	r9, r6
 8006330:	2200      	movs	r2, #0
 8006332:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006336:	f8d9 b000 	ldr.w	fp, [r9]
 800633a:	b2a1      	uxth	r1, r4
 800633c:	fa1f fb8b 	uxth.w	fp, fp
 8006340:	fb0a b101 	mla	r1, sl, r1, fp
 8006344:	4411      	add	r1, r2
 8006346:	f8d9 2000 	ldr.w	r2, [r9]
 800634a:	0c24      	lsrs	r4, r4, #16
 800634c:	0c12      	lsrs	r2, r2, #16
 800634e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006352:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006356:	b289      	uxth	r1, r1
 8006358:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800635c:	45f4      	cmp	ip, lr
 800635e:	f849 1b04 	str.w	r1, [r9], #4
 8006362:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006366:	d8e4      	bhi.n	8006332 <__multiply+0xaa>
 8006368:	9901      	ldr	r1, [sp, #4]
 800636a:	5072      	str	r2, [r6, r1]
 800636c:	9a03      	ldr	r2, [sp, #12]
 800636e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006372:	3304      	adds	r3, #4
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	d01f      	beq.n	80063ba <__multiply+0x132>
 800637a:	6834      	ldr	r4, [r6, #0]
 800637c:	f105 0114 	add.w	r1, r5, #20
 8006380:	46b6      	mov	lr, r6
 8006382:	f04f 0a00 	mov.w	sl, #0
 8006386:	880a      	ldrh	r2, [r1, #0]
 8006388:	f8be b002 	ldrh.w	fp, [lr, #2]
 800638c:	fb09 b202 	mla	r2, r9, r2, fp
 8006390:	4492      	add	sl, r2
 8006392:	b2a4      	uxth	r4, r4
 8006394:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006398:	f84e 4b04 	str.w	r4, [lr], #4
 800639c:	f851 4b04 	ldr.w	r4, [r1], #4
 80063a0:	f8be 2000 	ldrh.w	r2, [lr]
 80063a4:	0c24      	lsrs	r4, r4, #16
 80063a6:	fb09 2404 	mla	r4, r9, r4, r2
 80063aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80063ae:	458c      	cmp	ip, r1
 80063b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80063b4:	d8e7      	bhi.n	8006386 <__multiply+0xfe>
 80063b6:	9a01      	ldr	r2, [sp, #4]
 80063b8:	50b4      	str	r4, [r6, r2]
 80063ba:	3604      	adds	r6, #4
 80063bc:	e7a3      	b.n	8006306 <__multiply+0x7e>
 80063be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1a5      	bne.n	8006312 <__multiply+0x8a>
 80063c6:	3f01      	subs	r7, #1
 80063c8:	e7a1      	b.n	800630e <__multiply+0x86>
 80063ca:	bf00      	nop
 80063cc:	0800751b 	.word	0x0800751b
 80063d0:	0800752c 	.word	0x0800752c

080063d4 <__pow5mult>:
 80063d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d8:	4615      	mov	r5, r2
 80063da:	f012 0203 	ands.w	r2, r2, #3
 80063de:	4606      	mov	r6, r0
 80063e0:	460f      	mov	r7, r1
 80063e2:	d007      	beq.n	80063f4 <__pow5mult+0x20>
 80063e4:	4c25      	ldr	r4, [pc, #148]	; (800647c <__pow5mult+0xa8>)
 80063e6:	3a01      	subs	r2, #1
 80063e8:	2300      	movs	r3, #0
 80063ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063ee:	f7ff fe9b 	bl	8006128 <__multadd>
 80063f2:	4607      	mov	r7, r0
 80063f4:	10ad      	asrs	r5, r5, #2
 80063f6:	d03d      	beq.n	8006474 <__pow5mult+0xa0>
 80063f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063fa:	b97c      	cbnz	r4, 800641c <__pow5mult+0x48>
 80063fc:	2010      	movs	r0, #16
 80063fe:	f7ff fe1b 	bl	8006038 <malloc>
 8006402:	4602      	mov	r2, r0
 8006404:	6270      	str	r0, [r6, #36]	; 0x24
 8006406:	b928      	cbnz	r0, 8006414 <__pow5mult+0x40>
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <__pow5mult+0xac>)
 800640a:	481e      	ldr	r0, [pc, #120]	; (8006484 <__pow5mult+0xb0>)
 800640c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006410:	f000 fa70 	bl	80068f4 <__assert_func>
 8006414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006418:	6004      	str	r4, [r0, #0]
 800641a:	60c4      	str	r4, [r0, #12]
 800641c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006424:	b94c      	cbnz	r4, 800643a <__pow5mult+0x66>
 8006426:	f240 2171 	movw	r1, #625	; 0x271
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ff16 	bl	800625c <__i2b>
 8006430:	2300      	movs	r3, #0
 8006432:	f8c8 0008 	str.w	r0, [r8, #8]
 8006436:	4604      	mov	r4, r0
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	07eb      	lsls	r3, r5, #31
 8006440:	d50a      	bpl.n	8006458 <__pow5mult+0x84>
 8006442:	4639      	mov	r1, r7
 8006444:	4622      	mov	r2, r4
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff1e 	bl	8006288 <__multiply>
 800644c:	4639      	mov	r1, r7
 800644e:	4680      	mov	r8, r0
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff fe47 	bl	80060e4 <_Bfree>
 8006456:	4647      	mov	r7, r8
 8006458:	106d      	asrs	r5, r5, #1
 800645a:	d00b      	beq.n	8006474 <__pow5mult+0xa0>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	b938      	cbnz	r0, 8006470 <__pow5mult+0x9c>
 8006460:	4622      	mov	r2, r4
 8006462:	4621      	mov	r1, r4
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff ff0f 	bl	8006288 <__multiply>
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	f8c0 9000 	str.w	r9, [r0]
 8006470:	4604      	mov	r4, r0
 8006472:	e7e4      	b.n	800643e <__pow5mult+0x6a>
 8006474:	4638      	mov	r0, r7
 8006476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647a:	bf00      	nop
 800647c:	08007680 	.word	0x08007680
 8006480:	080074a5 	.word	0x080074a5
 8006484:	0800752c 	.word	0x0800752c

08006488 <__lshift>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	6849      	ldr	r1, [r1, #4]
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006496:	68a3      	ldr	r3, [r4, #8]
 8006498:	4607      	mov	r7, r0
 800649a:	4691      	mov	r9, r2
 800649c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064a0:	f108 0601 	add.w	r6, r8, #1
 80064a4:	42b3      	cmp	r3, r6
 80064a6:	db0b      	blt.n	80064c0 <__lshift+0x38>
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff fddb 	bl	8006064 <_Balloc>
 80064ae:	4605      	mov	r5, r0
 80064b0:	b948      	cbnz	r0, 80064c6 <__lshift+0x3e>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <__lshift+0xd0>)
 80064b6:	4829      	ldr	r0, [pc, #164]	; (800655c <__lshift+0xd4>)
 80064b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064bc:	f000 fa1a 	bl	80068f4 <__assert_func>
 80064c0:	3101      	adds	r1, #1
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	e7ee      	b.n	80064a4 <__lshift+0x1c>
 80064c6:	2300      	movs	r3, #0
 80064c8:	f100 0114 	add.w	r1, r0, #20
 80064cc:	f100 0210 	add.w	r2, r0, #16
 80064d0:	4618      	mov	r0, r3
 80064d2:	4553      	cmp	r3, sl
 80064d4:	db33      	blt.n	800653e <__lshift+0xb6>
 80064d6:	6920      	ldr	r0, [r4, #16]
 80064d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064dc:	f104 0314 	add.w	r3, r4, #20
 80064e0:	f019 091f 	ands.w	r9, r9, #31
 80064e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064ec:	d02b      	beq.n	8006546 <__lshift+0xbe>
 80064ee:	f1c9 0e20 	rsb	lr, r9, #32
 80064f2:	468a      	mov	sl, r1
 80064f4:	2200      	movs	r2, #0
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	fa00 f009 	lsl.w	r0, r0, r9
 80064fc:	4302      	orrs	r2, r0
 80064fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006502:	f853 2b04 	ldr.w	r2, [r3], #4
 8006506:	459c      	cmp	ip, r3
 8006508:	fa22 f20e 	lsr.w	r2, r2, lr
 800650c:	d8f3      	bhi.n	80064f6 <__lshift+0x6e>
 800650e:	ebac 0304 	sub.w	r3, ip, r4
 8006512:	3b15      	subs	r3, #21
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	3304      	adds	r3, #4
 800651a:	f104 0015 	add.w	r0, r4, #21
 800651e:	4584      	cmp	ip, r0
 8006520:	bf38      	it	cc
 8006522:	2304      	movcc	r3, #4
 8006524:	50ca      	str	r2, [r1, r3]
 8006526:	b10a      	cbz	r2, 800652c <__lshift+0xa4>
 8006528:	f108 0602 	add.w	r6, r8, #2
 800652c:	3e01      	subs	r6, #1
 800652e:	4638      	mov	r0, r7
 8006530:	612e      	str	r6, [r5, #16]
 8006532:	4621      	mov	r1, r4
 8006534:	f7ff fdd6 	bl	80060e4 <_Bfree>
 8006538:	4628      	mov	r0, r5
 800653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006542:	3301      	adds	r3, #1
 8006544:	e7c5      	b.n	80064d2 <__lshift+0x4a>
 8006546:	3904      	subs	r1, #4
 8006548:	f853 2b04 	ldr.w	r2, [r3], #4
 800654c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006550:	459c      	cmp	ip, r3
 8006552:	d8f9      	bhi.n	8006548 <__lshift+0xc0>
 8006554:	e7ea      	b.n	800652c <__lshift+0xa4>
 8006556:	bf00      	nop
 8006558:	0800751b 	.word	0x0800751b
 800655c:	0800752c 	.word	0x0800752c

08006560 <__mcmp>:
 8006560:	b530      	push	{r4, r5, lr}
 8006562:	6902      	ldr	r2, [r0, #16]
 8006564:	690c      	ldr	r4, [r1, #16]
 8006566:	1b12      	subs	r2, r2, r4
 8006568:	d10e      	bne.n	8006588 <__mcmp+0x28>
 800656a:	f100 0314 	add.w	r3, r0, #20
 800656e:	3114      	adds	r1, #20
 8006570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800657c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006580:	42a5      	cmp	r5, r4
 8006582:	d003      	beq.n	800658c <__mcmp+0x2c>
 8006584:	d305      	bcc.n	8006592 <__mcmp+0x32>
 8006586:	2201      	movs	r2, #1
 8006588:	4610      	mov	r0, r2
 800658a:	bd30      	pop	{r4, r5, pc}
 800658c:	4283      	cmp	r3, r0
 800658e:	d3f3      	bcc.n	8006578 <__mcmp+0x18>
 8006590:	e7fa      	b.n	8006588 <__mcmp+0x28>
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	e7f7      	b.n	8006588 <__mcmp+0x28>

08006598 <__mdiff>:
 8006598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	460c      	mov	r4, r1
 800659e:	4606      	mov	r6, r0
 80065a0:	4611      	mov	r1, r2
 80065a2:	4620      	mov	r0, r4
 80065a4:	4617      	mov	r7, r2
 80065a6:	f7ff ffdb 	bl	8006560 <__mcmp>
 80065aa:	1e05      	subs	r5, r0, #0
 80065ac:	d110      	bne.n	80065d0 <__mdiff+0x38>
 80065ae:	4629      	mov	r1, r5
 80065b0:	4630      	mov	r0, r6
 80065b2:	f7ff fd57 	bl	8006064 <_Balloc>
 80065b6:	b930      	cbnz	r0, 80065c6 <__mdiff+0x2e>
 80065b8:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <__mdiff+0x108>)
 80065ba:	4602      	mov	r2, r0
 80065bc:	f240 2132 	movw	r1, #562	; 0x232
 80065c0:	4838      	ldr	r0, [pc, #224]	; (80066a4 <__mdiff+0x10c>)
 80065c2:	f000 f997 	bl	80068f4 <__assert_func>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	bfa4      	itt	ge
 80065d2:	463b      	movge	r3, r7
 80065d4:	4627      	movge	r7, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	bfa6      	itte	ge
 80065dc:	461c      	movge	r4, r3
 80065de:	2500      	movge	r5, #0
 80065e0:	2501      	movlt	r5, #1
 80065e2:	f7ff fd3f 	bl	8006064 <_Balloc>
 80065e6:	b920      	cbnz	r0, 80065f2 <__mdiff+0x5a>
 80065e8:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <__mdiff+0x108>)
 80065ea:	4602      	mov	r2, r0
 80065ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065f0:	e7e6      	b.n	80065c0 <__mdiff+0x28>
 80065f2:	693e      	ldr	r6, [r7, #16]
 80065f4:	60c5      	str	r5, [r0, #12]
 80065f6:	6925      	ldr	r5, [r4, #16]
 80065f8:	f107 0114 	add.w	r1, r7, #20
 80065fc:	f104 0914 	add.w	r9, r4, #20
 8006600:	f100 0e14 	add.w	lr, r0, #20
 8006604:	f107 0210 	add.w	r2, r7, #16
 8006608:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800660c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006610:	46f2      	mov	sl, lr
 8006612:	2700      	movs	r7, #0
 8006614:	f859 3b04 	ldr.w	r3, [r9], #4
 8006618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800661c:	fa1f f883 	uxth.w	r8, r3
 8006620:	fa17 f78b 	uxtah	r7, r7, fp
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	eba7 0808 	sub.w	r8, r7, r8
 800662a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800662e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006632:	fa1f f888 	uxth.w	r8, r8
 8006636:	141f      	asrs	r7, r3, #16
 8006638:	454d      	cmp	r5, r9
 800663a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800663e:	f84a 3b04 	str.w	r3, [sl], #4
 8006642:	d8e7      	bhi.n	8006614 <__mdiff+0x7c>
 8006644:	1b2b      	subs	r3, r5, r4
 8006646:	3b15      	subs	r3, #21
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	3304      	adds	r3, #4
 800664e:	3415      	adds	r4, #21
 8006650:	42a5      	cmp	r5, r4
 8006652:	bf38      	it	cc
 8006654:	2304      	movcc	r3, #4
 8006656:	4419      	add	r1, r3
 8006658:	4473      	add	r3, lr
 800665a:	469e      	mov	lr, r3
 800665c:	460d      	mov	r5, r1
 800665e:	4565      	cmp	r5, ip
 8006660:	d30e      	bcc.n	8006680 <__mdiff+0xe8>
 8006662:	f10c 0203 	add.w	r2, ip, #3
 8006666:	1a52      	subs	r2, r2, r1
 8006668:	f022 0203 	bic.w	r2, r2, #3
 800666c:	3903      	subs	r1, #3
 800666e:	458c      	cmp	ip, r1
 8006670:	bf38      	it	cc
 8006672:	2200      	movcc	r2, #0
 8006674:	441a      	add	r2, r3
 8006676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800667a:	b17b      	cbz	r3, 800669c <__mdiff+0x104>
 800667c:	6106      	str	r6, [r0, #16]
 800667e:	e7a5      	b.n	80065cc <__mdiff+0x34>
 8006680:	f855 8b04 	ldr.w	r8, [r5], #4
 8006684:	fa17 f488 	uxtah	r4, r7, r8
 8006688:	1422      	asrs	r2, r4, #16
 800668a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800668e:	b2a4      	uxth	r4, r4
 8006690:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006694:	f84e 4b04 	str.w	r4, [lr], #4
 8006698:	1417      	asrs	r7, r2, #16
 800669a:	e7e0      	b.n	800665e <__mdiff+0xc6>
 800669c:	3e01      	subs	r6, #1
 800669e:	e7ea      	b.n	8006676 <__mdiff+0xde>
 80066a0:	0800751b 	.word	0x0800751b
 80066a4:	0800752c 	.word	0x0800752c

080066a8 <__d2b>:
 80066a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	4689      	mov	r9, r1
 80066ae:	2101      	movs	r1, #1
 80066b0:	ec57 6b10 	vmov	r6, r7, d0
 80066b4:	4690      	mov	r8, r2
 80066b6:	f7ff fcd5 	bl	8006064 <_Balloc>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b930      	cbnz	r0, 80066cc <__d2b+0x24>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <__d2b+0xb0>)
 80066c2:	4826      	ldr	r0, [pc, #152]	; (800675c <__d2b+0xb4>)
 80066c4:	f240 310a 	movw	r1, #778	; 0x30a
 80066c8:	f000 f914 	bl	80068f4 <__assert_func>
 80066cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80066d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066d4:	bb35      	cbnz	r5, 8006724 <__d2b+0x7c>
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	d028      	beq.n	800672e <__d2b+0x86>
 80066dc:	4668      	mov	r0, sp
 80066de:	9600      	str	r6, [sp, #0]
 80066e0:	f7ff fd8c 	bl	80061fc <__lo0bits>
 80066e4:	9900      	ldr	r1, [sp, #0]
 80066e6:	b300      	cbz	r0, 800672a <__d2b+0x82>
 80066e8:	9a01      	ldr	r2, [sp, #4]
 80066ea:	f1c0 0320 	rsb	r3, r0, #32
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	430b      	orrs	r3, r1
 80066f4:	40c2      	lsrs	r2, r0
 80066f6:	6163      	str	r3, [r4, #20]
 80066f8:	9201      	str	r2, [sp, #4]
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	61a3      	str	r3, [r4, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf14      	ite	ne
 8006702:	2202      	movne	r2, #2
 8006704:	2201      	moveq	r2, #1
 8006706:	6122      	str	r2, [r4, #16]
 8006708:	b1d5      	cbz	r5, 8006740 <__d2b+0x98>
 800670a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800670e:	4405      	add	r5, r0
 8006710:	f8c9 5000 	str.w	r5, [r9]
 8006714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006718:	f8c8 0000 	str.w	r0, [r8]
 800671c:	4620      	mov	r0, r4
 800671e:	b003      	add	sp, #12
 8006720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006728:	e7d5      	b.n	80066d6 <__d2b+0x2e>
 800672a:	6161      	str	r1, [r4, #20]
 800672c:	e7e5      	b.n	80066fa <__d2b+0x52>
 800672e:	a801      	add	r0, sp, #4
 8006730:	f7ff fd64 	bl	80061fc <__lo0bits>
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	6163      	str	r3, [r4, #20]
 8006738:	2201      	movs	r2, #1
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	3020      	adds	r0, #32
 800673e:	e7e3      	b.n	8006708 <__d2b+0x60>
 8006740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006748:	f8c9 0000 	str.w	r0, [r9]
 800674c:	6918      	ldr	r0, [r3, #16]
 800674e:	f7ff fd35 	bl	80061bc <__hi0bits>
 8006752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006756:	e7df      	b.n	8006718 <__d2b+0x70>
 8006758:	0800751b 	.word	0x0800751b
 800675c:	0800752c 	.word	0x0800752c

08006760 <_calloc_r>:
 8006760:	b513      	push	{r0, r1, r4, lr}
 8006762:	434a      	muls	r2, r1
 8006764:	4611      	mov	r1, r2
 8006766:	9201      	str	r2, [sp, #4]
 8006768:	f000 f85a 	bl	8006820 <_malloc_r>
 800676c:	4604      	mov	r4, r0
 800676e:	b118      	cbz	r0, 8006778 <_calloc_r+0x18>
 8006770:	9a01      	ldr	r2, [sp, #4]
 8006772:	2100      	movs	r1, #0
 8006774:	f7fe f970 	bl	8004a58 <memset>
 8006778:	4620      	mov	r0, r4
 800677a:	b002      	add	sp, #8
 800677c:	bd10      	pop	{r4, pc}
	...

08006780 <_free_r>:
 8006780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006782:	2900      	cmp	r1, #0
 8006784:	d048      	beq.n	8006818 <_free_r+0x98>
 8006786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678a:	9001      	str	r0, [sp, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f1a1 0404 	sub.w	r4, r1, #4
 8006792:	bfb8      	it	lt
 8006794:	18e4      	addlt	r4, r4, r3
 8006796:	f000 f8ef 	bl	8006978 <__malloc_lock>
 800679a:	4a20      	ldr	r2, [pc, #128]	; (800681c <_free_r+0x9c>)
 800679c:	9801      	ldr	r0, [sp, #4]
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	4615      	mov	r5, r2
 80067a2:	b933      	cbnz	r3, 80067b2 <_free_r+0x32>
 80067a4:	6063      	str	r3, [r4, #4]
 80067a6:	6014      	str	r4, [r2, #0]
 80067a8:	b003      	add	sp, #12
 80067aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067ae:	f000 b8e9 	b.w	8006984 <__malloc_unlock>
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	d90b      	bls.n	80067ce <_free_r+0x4e>
 80067b6:	6821      	ldr	r1, [r4, #0]
 80067b8:	1862      	adds	r2, r4, r1
 80067ba:	4293      	cmp	r3, r2
 80067bc:	bf04      	itt	eq
 80067be:	681a      	ldreq	r2, [r3, #0]
 80067c0:	685b      	ldreq	r3, [r3, #4]
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	bf04      	itt	eq
 80067c6:	1852      	addeq	r2, r2, r1
 80067c8:	6022      	streq	r2, [r4, #0]
 80067ca:	602c      	str	r4, [r5, #0]
 80067cc:	e7ec      	b.n	80067a8 <_free_r+0x28>
 80067ce:	461a      	mov	r2, r3
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	b10b      	cbz	r3, 80067d8 <_free_r+0x58>
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	d9fa      	bls.n	80067ce <_free_r+0x4e>
 80067d8:	6811      	ldr	r1, [r2, #0]
 80067da:	1855      	adds	r5, r2, r1
 80067dc:	42a5      	cmp	r5, r4
 80067de:	d10b      	bne.n	80067f8 <_free_r+0x78>
 80067e0:	6824      	ldr	r4, [r4, #0]
 80067e2:	4421      	add	r1, r4
 80067e4:	1854      	adds	r4, r2, r1
 80067e6:	42a3      	cmp	r3, r4
 80067e8:	6011      	str	r1, [r2, #0]
 80067ea:	d1dd      	bne.n	80067a8 <_free_r+0x28>
 80067ec:	681c      	ldr	r4, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	6053      	str	r3, [r2, #4]
 80067f2:	4421      	add	r1, r4
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	e7d7      	b.n	80067a8 <_free_r+0x28>
 80067f8:	d902      	bls.n	8006800 <_free_r+0x80>
 80067fa:	230c      	movs	r3, #12
 80067fc:	6003      	str	r3, [r0, #0]
 80067fe:	e7d3      	b.n	80067a8 <_free_r+0x28>
 8006800:	6825      	ldr	r5, [r4, #0]
 8006802:	1961      	adds	r1, r4, r5
 8006804:	428b      	cmp	r3, r1
 8006806:	bf04      	itt	eq
 8006808:	6819      	ldreq	r1, [r3, #0]
 800680a:	685b      	ldreq	r3, [r3, #4]
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	bf04      	itt	eq
 8006810:	1949      	addeq	r1, r1, r5
 8006812:	6021      	streq	r1, [r4, #0]
 8006814:	6054      	str	r4, [r2, #4]
 8006816:	e7c7      	b.n	80067a8 <_free_r+0x28>
 8006818:	b003      	add	sp, #12
 800681a:	bd30      	pop	{r4, r5, pc}
 800681c:	20000434 	.word	0x20000434

08006820 <_malloc_r>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	1ccd      	adds	r5, r1, #3
 8006824:	f025 0503 	bic.w	r5, r5, #3
 8006828:	3508      	adds	r5, #8
 800682a:	2d0c      	cmp	r5, #12
 800682c:	bf38      	it	cc
 800682e:	250c      	movcc	r5, #12
 8006830:	2d00      	cmp	r5, #0
 8006832:	4606      	mov	r6, r0
 8006834:	db01      	blt.n	800683a <_malloc_r+0x1a>
 8006836:	42a9      	cmp	r1, r5
 8006838:	d903      	bls.n	8006842 <_malloc_r+0x22>
 800683a:	230c      	movs	r3, #12
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	2000      	movs	r0, #0
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	f000 f899 	bl	8006978 <__malloc_lock>
 8006846:	4921      	ldr	r1, [pc, #132]	; (80068cc <_malloc_r+0xac>)
 8006848:	680a      	ldr	r2, [r1, #0]
 800684a:	4614      	mov	r4, r2
 800684c:	b99c      	cbnz	r4, 8006876 <_malloc_r+0x56>
 800684e:	4f20      	ldr	r7, [pc, #128]	; (80068d0 <_malloc_r+0xb0>)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	b923      	cbnz	r3, 800685e <_malloc_r+0x3e>
 8006854:	4621      	mov	r1, r4
 8006856:	4630      	mov	r0, r6
 8006858:	f000 f83c 	bl	80068d4 <_sbrk_r>
 800685c:	6038      	str	r0, [r7, #0]
 800685e:	4629      	mov	r1, r5
 8006860:	4630      	mov	r0, r6
 8006862:	f000 f837 	bl	80068d4 <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d123      	bne.n	80068b2 <_malloc_r+0x92>
 800686a:	230c      	movs	r3, #12
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f888 	bl	8006984 <__malloc_unlock>
 8006874:	e7e3      	b.n	800683e <_malloc_r+0x1e>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	1b5b      	subs	r3, r3, r5
 800687a:	d417      	bmi.n	80068ac <_malloc_r+0x8c>
 800687c:	2b0b      	cmp	r3, #11
 800687e:	d903      	bls.n	8006888 <_malloc_r+0x68>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	441c      	add	r4, r3
 8006884:	6025      	str	r5, [r4, #0]
 8006886:	e004      	b.n	8006892 <_malloc_r+0x72>
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	42a2      	cmp	r2, r4
 800688c:	bf0c      	ite	eq
 800688e:	600b      	streq	r3, [r1, #0]
 8006890:	6053      	strne	r3, [r2, #4]
 8006892:	4630      	mov	r0, r6
 8006894:	f000 f876 	bl	8006984 <__malloc_unlock>
 8006898:	f104 000b 	add.w	r0, r4, #11
 800689c:	1d23      	adds	r3, r4, #4
 800689e:	f020 0007 	bic.w	r0, r0, #7
 80068a2:	1ac2      	subs	r2, r0, r3
 80068a4:	d0cc      	beq.n	8006840 <_malloc_r+0x20>
 80068a6:	1a1b      	subs	r3, r3, r0
 80068a8:	50a3      	str	r3, [r4, r2]
 80068aa:	e7c9      	b.n	8006840 <_malloc_r+0x20>
 80068ac:	4622      	mov	r2, r4
 80068ae:	6864      	ldr	r4, [r4, #4]
 80068b0:	e7cc      	b.n	800684c <_malloc_r+0x2c>
 80068b2:	1cc4      	adds	r4, r0, #3
 80068b4:	f024 0403 	bic.w	r4, r4, #3
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d0e3      	beq.n	8006884 <_malloc_r+0x64>
 80068bc:	1a21      	subs	r1, r4, r0
 80068be:	4630      	mov	r0, r6
 80068c0:	f000 f808 	bl	80068d4 <_sbrk_r>
 80068c4:	3001      	adds	r0, #1
 80068c6:	d1dd      	bne.n	8006884 <_malloc_r+0x64>
 80068c8:	e7cf      	b.n	800686a <_malloc_r+0x4a>
 80068ca:	bf00      	nop
 80068cc:	20000434 	.word	0x20000434
 80068d0:	20000438 	.word	0x20000438

080068d4 <_sbrk_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d06      	ldr	r5, [pc, #24]	; (80068f0 <_sbrk_r+0x1c>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fb ff7a 	bl	80027d8 <_sbrk>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_sbrk_r+0x1a>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_sbrk_r+0x1a>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	200008c4 	.word	0x200008c4

080068f4 <__assert_func>:
 80068f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068f6:	4614      	mov	r4, r2
 80068f8:	461a      	mov	r2, r3
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <__assert_func+0x2c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4605      	mov	r5, r0
 8006900:	68d8      	ldr	r0, [r3, #12]
 8006902:	b14c      	cbz	r4, 8006918 <__assert_func+0x24>
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <__assert_func+0x30>)
 8006906:	9100      	str	r1, [sp, #0]
 8006908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800690c:	4906      	ldr	r1, [pc, #24]	; (8006928 <__assert_func+0x34>)
 800690e:	462b      	mov	r3, r5
 8006910:	f000 f80e 	bl	8006930 <fiprintf>
 8006914:	f000 fa64 	bl	8006de0 <abort>
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <__assert_func+0x38>)
 800691a:	461c      	mov	r4, r3
 800691c:	e7f3      	b.n	8006906 <__assert_func+0x12>
 800691e:	bf00      	nop
 8006920:	2000023c 	.word	0x2000023c
 8006924:	0800768c 	.word	0x0800768c
 8006928:	08007699 	.word	0x08007699
 800692c:	080076c7 	.word	0x080076c7

08006930 <fiprintf>:
 8006930:	b40e      	push	{r1, r2, r3}
 8006932:	b503      	push	{r0, r1, lr}
 8006934:	4601      	mov	r1, r0
 8006936:	ab03      	add	r3, sp, #12
 8006938:	4805      	ldr	r0, [pc, #20]	; (8006950 <fiprintf+0x20>)
 800693a:	f853 2b04 	ldr.w	r2, [r3], #4
 800693e:	6800      	ldr	r0, [r0, #0]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f000 f84f 	bl	80069e4 <_vfiprintf_r>
 8006946:	b002      	add	sp, #8
 8006948:	f85d eb04 	ldr.w	lr, [sp], #4
 800694c:	b003      	add	sp, #12
 800694e:	4770      	bx	lr
 8006950:	2000023c 	.word	0x2000023c

08006954 <__ascii_mbtowc>:
 8006954:	b082      	sub	sp, #8
 8006956:	b901      	cbnz	r1, 800695a <__ascii_mbtowc+0x6>
 8006958:	a901      	add	r1, sp, #4
 800695a:	b142      	cbz	r2, 800696e <__ascii_mbtowc+0x1a>
 800695c:	b14b      	cbz	r3, 8006972 <__ascii_mbtowc+0x1e>
 800695e:	7813      	ldrb	r3, [r2, #0]
 8006960:	600b      	str	r3, [r1, #0]
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	1e10      	subs	r0, r2, #0
 8006966:	bf18      	it	ne
 8006968:	2001      	movne	r0, #1
 800696a:	b002      	add	sp, #8
 800696c:	4770      	bx	lr
 800696e:	4610      	mov	r0, r2
 8006970:	e7fb      	b.n	800696a <__ascii_mbtowc+0x16>
 8006972:	f06f 0001 	mvn.w	r0, #1
 8006976:	e7f8      	b.n	800696a <__ascii_mbtowc+0x16>

08006978 <__malloc_lock>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__malloc_lock+0x8>)
 800697a:	f000 bbf1 	b.w	8007160 <__retarget_lock_acquire_recursive>
 800697e:	bf00      	nop
 8006980:	200008cc 	.word	0x200008cc

08006984 <__malloc_unlock>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__malloc_unlock+0x8>)
 8006986:	f000 bbec 	b.w	8007162 <__retarget_lock_release_recursive>
 800698a:	bf00      	nop
 800698c:	200008cc 	.word	0x200008cc

08006990 <__sfputc_r>:
 8006990:	6893      	ldr	r3, [r2, #8]
 8006992:	3b01      	subs	r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	b410      	push	{r4}
 8006998:	6093      	str	r3, [r2, #8]
 800699a:	da08      	bge.n	80069ae <__sfputc_r+0x1e>
 800699c:	6994      	ldr	r4, [r2, #24]
 800699e:	42a3      	cmp	r3, r4
 80069a0:	db01      	blt.n	80069a6 <__sfputc_r+0x16>
 80069a2:	290a      	cmp	r1, #10
 80069a4:	d103      	bne.n	80069ae <__sfputc_r+0x1e>
 80069a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069aa:	f000 b94b 	b.w	8006c44 <__swbuf_r>
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	1c58      	adds	r0, r3, #1
 80069b2:	6010      	str	r0, [r2, #0]
 80069b4:	7019      	strb	r1, [r3, #0]
 80069b6:	4608      	mov	r0, r1
 80069b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069bc:	4770      	bx	lr

080069be <__sfputs_r>:
 80069be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	4614      	mov	r4, r2
 80069c6:	18d5      	adds	r5, r2, r3
 80069c8:	42ac      	cmp	r4, r5
 80069ca:	d101      	bne.n	80069d0 <__sfputs_r+0x12>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e007      	b.n	80069e0 <__sfputs_r+0x22>
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	463a      	mov	r2, r7
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ffda 	bl	8006990 <__sfputc_r>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d1f3      	bne.n	80069c8 <__sfputs_r+0xa>
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069e4 <_vfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	460d      	mov	r5, r1
 80069ea:	b09d      	sub	sp, #116	; 0x74
 80069ec:	4614      	mov	r4, r2
 80069ee:	4698      	mov	r8, r3
 80069f0:	4606      	mov	r6, r0
 80069f2:	b118      	cbz	r0, 80069fc <_vfiprintf_r+0x18>
 80069f4:	6983      	ldr	r3, [r0, #24]
 80069f6:	b90b      	cbnz	r3, 80069fc <_vfiprintf_r+0x18>
 80069f8:	f000 fb14 	bl	8007024 <__sinit>
 80069fc:	4b89      	ldr	r3, [pc, #548]	; (8006c24 <_vfiprintf_r+0x240>)
 80069fe:	429d      	cmp	r5, r3
 8006a00:	d11b      	bne.n	8006a3a <_vfiprintf_r+0x56>
 8006a02:	6875      	ldr	r5, [r6, #4]
 8006a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	059a      	lsls	r2, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a12:	f000 fba5 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	071b      	lsls	r3, r3, #28
 8006a1a:	d501      	bpl.n	8006a20 <_vfiprintf_r+0x3c>
 8006a1c:	692b      	ldr	r3, [r5, #16]
 8006a1e:	b9eb      	cbnz	r3, 8006a5c <_vfiprintf_r+0x78>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f000 f96e 	bl	8006d04 <__swsetup_r>
 8006a28:	b1c0      	cbz	r0, 8006a5c <_vfiprintf_r+0x78>
 8006a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a2c:	07dc      	lsls	r4, r3, #31
 8006a2e:	d50e      	bpl.n	8006a4e <_vfiprintf_r+0x6a>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	b01d      	add	sp, #116	; 0x74
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	4b7b      	ldr	r3, [pc, #492]	; (8006c28 <_vfiprintf_r+0x244>)
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	d101      	bne.n	8006a44 <_vfiprintf_r+0x60>
 8006a40:	68b5      	ldr	r5, [r6, #8]
 8006a42:	e7df      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <_vfiprintf_r+0x248>)
 8006a46:	429d      	cmp	r5, r3
 8006a48:	bf08      	it	eq
 8006a4a:	68f5      	ldreq	r5, [r6, #12]
 8006a4c:	e7da      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d4ed      	bmi.n	8006a30 <_vfiprintf_r+0x4c>
 8006a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a56:	f000 fb84 	bl	8007162 <__retarget_lock_release_recursive>
 8006a5a:	e7e9      	b.n	8006a30 <_vfiprintf_r+0x4c>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	2320      	movs	r3, #32
 8006a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6a:	2330      	movs	r3, #48	; 0x30
 8006a6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c30 <_vfiprintf_r+0x24c>
 8006a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a74:	f04f 0901 	mov.w	r9, #1
 8006a78:	4623      	mov	r3, r4
 8006a7a:	469a      	mov	sl, r3
 8006a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a80:	b10a      	cbz	r2, 8006a86 <_vfiprintf_r+0xa2>
 8006a82:	2a25      	cmp	r2, #37	; 0x25
 8006a84:	d1f9      	bne.n	8006a7a <_vfiprintf_r+0x96>
 8006a86:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8a:	d00b      	beq.n	8006aa4 <_vfiprintf_r+0xc0>
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ff93 	bl	80069be <__sfputs_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f000 80aa 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa0:	445a      	add	r2, fp
 8006aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a2 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab8:	f10a 0a01 	add.w	sl, sl, #1
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac6:	4654      	mov	r4, sl
 8006ac8:	2205      	movs	r2, #5
 8006aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ace:	4858      	ldr	r0, [pc, #352]	; (8006c30 <_vfiprintf_r+0x24c>)
 8006ad0:	f7f9 fb86 	bl	80001e0 <memchr>
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	b9d8      	cbnz	r0, 8006b10 <_vfiprintf_r+0x12c>
 8006ad8:	06d1      	lsls	r1, r2, #27
 8006ada:	bf44      	itt	mi
 8006adc:	2320      	movmi	r3, #32
 8006ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae2:	0713      	lsls	r3, r2, #28
 8006ae4:	bf44      	itt	mi
 8006ae6:	232b      	movmi	r3, #43	; 0x2b
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aec:	f89a 3000 	ldrb.w	r3, [sl]
 8006af0:	2b2a      	cmp	r3, #42	; 0x2a
 8006af2:	d015      	beq.n	8006b20 <_vfiprintf_r+0x13c>
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	4654      	mov	r4, sl
 8006af8:	2000      	movs	r0, #0
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4621      	mov	r1, r4
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94e      	bls.n	8006ba8 <_vfiprintf_r+0x1c4>
 8006b0a:	b1b0      	cbz	r0, 8006b3a <_vfiprintf_r+0x156>
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	e014      	b.n	8006b3a <_vfiprintf_r+0x156>
 8006b10:	eba0 0308 	sub.w	r3, r0, r8
 8006b14:	fa09 f303 	lsl.w	r3, r9, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	46a2      	mov	sl, r4
 8006b1e:	e7d2      	b.n	8006ac6 <_vfiprintf_r+0xe2>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	1d19      	adds	r1, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9103      	str	r1, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbb      	ittet	lt
 8006b2c:	425b      	neglt	r3, r3
 8006b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b32:	9307      	strge	r3, [sp, #28]
 8006b34:	9307      	strlt	r3, [sp, #28]
 8006b36:	bfb8      	it	lt
 8006b38:	9204      	strlt	r2, [sp, #16]
 8006b3a:	7823      	ldrb	r3, [r4, #0]
 8006b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3e:	d10c      	bne.n	8006b5a <_vfiprintf_r+0x176>
 8006b40:	7863      	ldrb	r3, [r4, #1]
 8006b42:	2b2a      	cmp	r3, #42	; 0x2a
 8006b44:	d135      	bne.n	8006bb2 <_vfiprintf_r+0x1ce>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9203      	str	r2, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b56:	3402      	adds	r4, #2
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c40 <_vfiprintf_r+0x25c>
 8006b5e:	7821      	ldrb	r1, [r4, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4650      	mov	r0, sl
 8006b64:	f7f9 fb3c 	bl	80001e0 <memchr>
 8006b68:	b140      	cbz	r0, 8006b7c <_vfiprintf_r+0x198>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	eba0 000a 	sub.w	r0, r0, sl
 8006b70:	fa03 f000 	lsl.w	r0, r3, r0
 8006b74:	9b04      	ldr	r3, [sp, #16]
 8006b76:	4303      	orrs	r3, r0
 8006b78:	3401      	adds	r4, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	482c      	ldr	r0, [pc, #176]	; (8006c34 <_vfiprintf_r+0x250>)
 8006b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b86:	2206      	movs	r2, #6
 8006b88:	f7f9 fb2a 	bl	80001e0 <memchr>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d03f      	beq.n	8006c10 <_vfiprintf_r+0x22c>
 8006b90:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <_vfiprintf_r+0x254>)
 8006b92:	bb1b      	cbnz	r3, 8006bdc <_vfiprintf_r+0x1f8>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	443b      	add	r3, r7
 8006ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba6:	e767      	b.n	8006a78 <_vfiprintf_r+0x94>
 8006ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bac:	460c      	mov	r4, r1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7a5      	b.n	8006afe <_vfiprintf_r+0x11a>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	3401      	adds	r4, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f04f 0c0a 	mov.w	ip, #10
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc4:	3a30      	subs	r2, #48	; 0x30
 8006bc6:	2a09      	cmp	r2, #9
 8006bc8:	d903      	bls.n	8006bd2 <_vfiprintf_r+0x1ee>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c5      	beq.n	8006b5a <_vfiprintf_r+0x176>
 8006bce:	9105      	str	r1, [sp, #20]
 8006bd0:	e7c3      	b.n	8006b5a <_vfiprintf_r+0x176>
 8006bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e7f0      	b.n	8006bbe <_vfiprintf_r+0x1da>
 8006bdc:	ab03      	add	r3, sp, #12
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	462a      	mov	r2, r5
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <_vfiprintf_r+0x258>)
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7fd ffde 	bl	8004ba8 <_printf_float>
 8006bec:	4607      	mov	r7, r0
 8006bee:	1c78      	adds	r0, r7, #1
 8006bf0:	d1d6      	bne.n	8006ba0 <_vfiprintf_r+0x1bc>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07d9      	lsls	r1, r3, #31
 8006bf6:	d405      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bf8:	89ab      	ldrh	r3, [r5, #12]
 8006bfa:	059a      	lsls	r2, r3, #22
 8006bfc:	d402      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c00:	f000 faaf 	bl	8007162 <__retarget_lock_release_recursive>
 8006c04:	89ab      	ldrh	r3, [r5, #12]
 8006c06:	065b      	lsls	r3, r3, #25
 8006c08:	f53f af12 	bmi.w	8006a30 <_vfiprintf_r+0x4c>
 8006c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c0e:	e711      	b.n	8006a34 <_vfiprintf_r+0x50>
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462a      	mov	r2, r5
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <_vfiprintf_r+0x258>)
 8006c18:	a904      	add	r1, sp, #16
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7fe fa68 	bl	80050f0 <_printf_i>
 8006c20:	e7e4      	b.n	8006bec <_vfiprintf_r+0x208>
 8006c22:	bf00      	nop
 8006c24:	08007804 	.word	0x08007804
 8006c28:	08007824 	.word	0x08007824
 8006c2c:	080077e4 	.word	0x080077e4
 8006c30:	080076d2 	.word	0x080076d2
 8006c34:	080076dc 	.word	0x080076dc
 8006c38:	08004ba9 	.word	0x08004ba9
 8006c3c:	080069bf 	.word	0x080069bf
 8006c40:	080076d8 	.word	0x080076d8

08006c44 <__swbuf_r>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	460e      	mov	r6, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b118      	cbz	r0, 8006c56 <__swbuf_r+0x12>
 8006c4e:	6983      	ldr	r3, [r0, #24]
 8006c50:	b90b      	cbnz	r3, 8006c56 <__swbuf_r+0x12>
 8006c52:	f000 f9e7 	bl	8007024 <__sinit>
 8006c56:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <__swbuf_r+0x98>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	d12b      	bne.n	8006cb4 <__swbuf_r+0x70>
 8006c5c:	686c      	ldr	r4, [r5, #4]
 8006c5e:	69a3      	ldr	r3, [r4, #24]
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	071a      	lsls	r2, r3, #28
 8006c66:	d52f      	bpl.n	8006cc8 <__swbuf_r+0x84>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	b36b      	cbz	r3, 8006cc8 <__swbuf_r+0x84>
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1ac0      	subs	r0, r0, r3
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	b2f6      	uxtb	r6, r6
 8006c76:	4283      	cmp	r3, r0
 8006c78:	4637      	mov	r7, r6
 8006c7a:	dc04      	bgt.n	8006c86 <__swbuf_r+0x42>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f93c 	bl	8006efc <_fflush_r>
 8006c84:	bb30      	cbnz	r0, 8006cd4 <__swbuf_r+0x90>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	6022      	str	r2, [r4, #0]
 8006c92:	701e      	strb	r6, [r3, #0]
 8006c94:	6963      	ldr	r3, [r4, #20]
 8006c96:	3001      	adds	r0, #1
 8006c98:	4283      	cmp	r3, r0
 8006c9a:	d004      	beq.n	8006ca6 <__swbuf_r+0x62>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	07db      	lsls	r3, r3, #31
 8006ca0:	d506      	bpl.n	8006cb0 <__swbuf_r+0x6c>
 8006ca2:	2e0a      	cmp	r6, #10
 8006ca4:	d104      	bne.n	8006cb0 <__swbuf_r+0x6c>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f927 	bl	8006efc <_fflush_r>
 8006cae:	b988      	cbnz	r0, 8006cd4 <__swbuf_r+0x90>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <__swbuf_r+0x9c>)
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	d101      	bne.n	8006cbe <__swbuf_r+0x7a>
 8006cba:	68ac      	ldr	r4, [r5, #8]
 8006cbc:	e7cf      	b.n	8006c5e <__swbuf_r+0x1a>
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <__swbuf_r+0xa0>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	bf08      	it	eq
 8006cc4:	68ec      	ldreq	r4, [r5, #12]
 8006cc6:	e7ca      	b.n	8006c5e <__swbuf_r+0x1a>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 f81a 	bl	8006d04 <__swsetup_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0cb      	beq.n	8006c6c <__swbuf_r+0x28>
 8006cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd8:	e7ea      	b.n	8006cb0 <__swbuf_r+0x6c>
 8006cda:	bf00      	nop
 8006cdc:	08007804 	.word	0x08007804
 8006ce0:	08007824 	.word	0x08007824
 8006ce4:	080077e4 	.word	0x080077e4

08006ce8 <__ascii_wctomb>:
 8006ce8:	b149      	cbz	r1, 8006cfe <__ascii_wctomb+0x16>
 8006cea:	2aff      	cmp	r2, #255	; 0xff
 8006cec:	bf85      	ittet	hi
 8006cee:	238a      	movhi	r3, #138	; 0x8a
 8006cf0:	6003      	strhi	r3, [r0, #0]
 8006cf2:	700a      	strbls	r2, [r1, #0]
 8006cf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cf8:	bf98      	it	ls
 8006cfa:	2001      	movls	r0, #1
 8006cfc:	4770      	bx	lr
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4770      	bx	lr
	...

08006d04 <__swsetup_r>:
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <__swsetup_r+0xcc>)
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	681d      	ldr	r5, [r3, #0]
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	b125      	cbz	r5, 8006d1a <__swsetup_r+0x16>
 8006d10:	69ab      	ldr	r3, [r5, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__swsetup_r+0x16>
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f985 	bl	8007024 <__sinit>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__swsetup_r+0xd0>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d10f      	bne.n	8006d40 <__swsetup_r+0x3c>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	d42c      	bmi.n	8006d86 <__swsetup_r+0x82>
 8006d2c:	06dd      	lsls	r5, r3, #27
 8006d2e:	d411      	bmi.n	8006d54 <__swsetup_r+0x50>
 8006d30:	2309      	movs	r3, #9
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	e03e      	b.n	8006dbe <__swsetup_r+0xba>
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <__swsetup_r+0xd4>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <__swsetup_r+0x46>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7eb      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <__swsetup_r+0xd8>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7e6      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d54:	0758      	lsls	r0, r3, #29
 8006d56:	d512      	bpl.n	8006d7e <__swsetup_r+0x7a>
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	b141      	cbz	r1, 8006d6e <__swsetup_r+0x6a>
 8006d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <__swsetup_r+0x66>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fd0b 	bl	8006780 <_free_r>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0308 	orr.w	r3, r3, #8
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	b94b      	cbnz	r3, 8006d9e <__swsetup_r+0x9a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d003      	beq.n	8006d9e <__swsetup_r+0x9a>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 fa07 	bl	80071ac <__smakebuf_r>
 8006d9e:	89a0      	ldrh	r0, [r4, #12]
 8006da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da4:	f010 0301 	ands.w	r3, r0, #1
 8006da8:	d00a      	beq.n	8006dc0 <__swsetup_r+0xbc>
 8006daa:	2300      	movs	r3, #0
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	425b      	negs	r3, r3
 8006db2:	61a3      	str	r3, [r4, #24]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b943      	cbnz	r3, 8006dca <__swsetup_r+0xc6>
 8006db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dbc:	d1ba      	bne.n	8006d34 <__swsetup_r+0x30>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	0781      	lsls	r1, r0, #30
 8006dc2:	bf58      	it	pl
 8006dc4:	6963      	ldrpl	r3, [r4, #20]
 8006dc6:	60a3      	str	r3, [r4, #8]
 8006dc8:	e7f4      	b.n	8006db4 <__swsetup_r+0xb0>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7f7      	b.n	8006dbe <__swsetup_r+0xba>
 8006dce:	bf00      	nop
 8006dd0:	2000023c 	.word	0x2000023c
 8006dd4:	08007804 	.word	0x08007804
 8006dd8:	08007824 	.word	0x08007824
 8006ddc:	080077e4 	.word	0x080077e4

08006de0 <abort>:
 8006de0:	b508      	push	{r3, lr}
 8006de2:	2006      	movs	r0, #6
 8006de4:	f000 fa4a 	bl	800727c <raise>
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7fb fc7d 	bl	80026e8 <_exit>
	...

08006df0 <__sflush_r>:
 8006df0:	898a      	ldrh	r2, [r1, #12]
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	0710      	lsls	r0, r2, #28
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	d458      	bmi.n	8006eb0 <__sflush_r+0xc0>
 8006dfe:	684b      	ldr	r3, [r1, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc05      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc02      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	d0f9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e1c:	682f      	ldr	r7, [r5, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	d032      	beq.n	8006e88 <__sflush_r+0x98>
 8006e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	075a      	lsls	r2, r3, #29
 8006e28:	d505      	bpl.n	8006e36 <__sflush_r+0x46>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	1ac0      	subs	r0, r0, r3
 8006e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e30:	b10b      	cbz	r3, 8006e36 <__sflush_r+0x46>
 8006e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b0      	blx	r6
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	d106      	bne.n	8006e56 <__sflush_r+0x66>
 8006e48:	6829      	ldr	r1, [r5, #0]
 8006e4a:	291d      	cmp	r1, #29
 8006e4c:	d82c      	bhi.n	8006ea8 <__sflush_r+0xb8>
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <__sflush_r+0x108>)
 8006e50:	40ca      	lsrs	r2, r1
 8006e52:	07d6      	lsls	r6, r2, #31
 8006e54:	d528      	bpl.n	8006ea8 <__sflush_r+0xb8>
 8006e56:	2200      	movs	r2, #0
 8006e58:	6062      	str	r2, [r4, #4]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	d504      	bpl.n	8006e6c <__sflush_r+0x7c>
 8006e62:	1c42      	adds	r2, r0, #1
 8006e64:	d101      	bne.n	8006e6a <__sflush_r+0x7a>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	b903      	cbnz	r3, 8006e6c <__sflush_r+0x7c>
 8006e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6e:	602f      	str	r7, [r5, #0]
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d0ca      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d002      	beq.n	8006e82 <__sflush_r+0x92>
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff fc7f 	bl	8006780 <_free_r>
 8006e82:	2000      	movs	r0, #0
 8006e84:	6360      	str	r0, [r4, #52]	; 0x34
 8006e86:	e7c1      	b.n	8006e0c <__sflush_r+0x1c>
 8006e88:	6a21      	ldr	r1, [r4, #32]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	1c41      	adds	r1, r0, #1
 8006e92:	d1c7      	bne.n	8006e24 <__sflush_r+0x34>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0c4      	beq.n	8006e24 <__sflush_r+0x34>
 8006e9a:	2b1d      	cmp	r3, #29
 8006e9c:	d001      	beq.n	8006ea2 <__sflush_r+0xb2>
 8006e9e:	2b16      	cmp	r3, #22
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0xb6>
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	e7b1      	b.n	8006e0a <__sflush_r+0x1a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	e7ad      	b.n	8006e0c <__sflush_r+0x1c>
 8006eb0:	690f      	ldr	r7, [r1, #16]
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	d0a9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006eb6:	0793      	lsls	r3, r2, #30
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	600f      	str	r7, [r1, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	eba6 0807 	sub.w	r8, r6, r7
 8006ec8:	608b      	str	r3, [r1, #8]
 8006eca:	f1b8 0f00 	cmp.w	r8, #0
 8006ece:	dd9c      	ble.n	8006e0a <__sflush_r+0x1a>
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dc06      	bgt.n	8006eee <__sflush_r+0xfe>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e78e      	b.n	8006e0c <__sflush_r+0x1c>
 8006eee:	4407      	add	r7, r0
 8006ef0:	eba8 0800 	sub.w	r8, r8, r0
 8006ef4:	e7e9      	b.n	8006eca <__sflush_r+0xda>
 8006ef6:	bf00      	nop
 8006ef8:	20400001 	.word	0x20400001

08006efc <_fflush_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	690b      	ldr	r3, [r1, #16]
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b913      	cbnz	r3, 8006f0c <_fflush_r+0x10>
 8006f06:	2500      	movs	r5, #0
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	b118      	cbz	r0, 8006f16 <_fflush_r+0x1a>
 8006f0e:	6983      	ldr	r3, [r0, #24]
 8006f10:	b90b      	cbnz	r3, 8006f16 <_fflush_r+0x1a>
 8006f12:	f000 f887 	bl	8007024 <__sinit>
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <_fflush_r+0x6c>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d11b      	bne.n	8006f54 <_fflush_r+0x58>
 8006f1c:	686c      	ldr	r4, [r5, #4]
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0ef      	beq.n	8006f06 <_fflush_r+0xa>
 8006f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f28:	07d0      	lsls	r0, r2, #31
 8006f2a:	d404      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f2c:	0599      	lsls	r1, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f000 f915 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f7ff ff59 	bl	8006df0 <__sflush_r>
 8006f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f40:	07da      	lsls	r2, r3, #31
 8006f42:	4605      	mov	r5, r0
 8006f44:	d4e0      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	059b      	lsls	r3, r3, #22
 8006f4a:	d4dd      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 f908 	bl	8007162 <__retarget_lock_release_recursive>
 8006f52:	e7d9      	b.n	8006f08 <_fflush_r+0xc>
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <_fflush_r+0x70>)
 8006f56:	429c      	cmp	r4, r3
 8006f58:	d101      	bne.n	8006f5e <_fflush_r+0x62>
 8006f5a:	68ac      	ldr	r4, [r5, #8]
 8006f5c:	e7df      	b.n	8006f1e <_fflush_r+0x22>
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <_fflush_r+0x74>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	bf08      	it	eq
 8006f64:	68ec      	ldreq	r4, [r5, #12]
 8006f66:	e7da      	b.n	8006f1e <_fflush_r+0x22>
 8006f68:	08007804 	.word	0x08007804
 8006f6c:	08007824 	.word	0x08007824
 8006f70:	080077e4 	.word	0x080077e4

08006f74 <std>:
 8006f74:	2300      	movs	r3, #0
 8006f76:	b510      	push	{r4, lr}
 8006f78:	4604      	mov	r4, r0
 8006f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f82:	6083      	str	r3, [r0, #8]
 8006f84:	8181      	strh	r1, [r0, #12]
 8006f86:	6643      	str	r3, [r0, #100]	; 0x64
 8006f88:	81c2      	strh	r2, [r0, #14]
 8006f8a:	6183      	str	r3, [r0, #24]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	2208      	movs	r2, #8
 8006f90:	305c      	adds	r0, #92	; 0x5c
 8006f92:	f7fd fd61 	bl	8004a58 <memset>
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <std+0x38>)
 8006f98:	6263      	str	r3, [r4, #36]	; 0x24
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <std+0x3c>)
 8006f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x40>)
 8006fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x44>)
 8006fa4:	6224      	str	r4, [r4, #32]
 8006fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	080072b5 	.word	0x080072b5
 8006fb0:	080072d7 	.word	0x080072d7
 8006fb4:	0800730f 	.word	0x0800730f
 8006fb8:	08007333 	.word	0x08007333

08006fbc <_cleanup_r>:
 8006fbc:	4901      	ldr	r1, [pc, #4]	; (8006fc4 <_cleanup_r+0x8>)
 8006fbe:	f000 b8af 	b.w	8007120 <_fwalk_reent>
 8006fc2:	bf00      	nop
 8006fc4:	08006efd 	.word	0x08006efd

08006fc8 <__sfmoreglue>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	1e4a      	subs	r2, r1, #1
 8006fcc:	2568      	movs	r5, #104	; 0x68
 8006fce:	4355      	muls	r5, r2
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fd6:	f7ff fc23 	bl	8006820 <_malloc_r>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	b140      	cbz	r0, 8006ff0 <__sfmoreglue+0x28>
 8006fde:	2100      	movs	r1, #0
 8006fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fe4:	300c      	adds	r0, #12
 8006fe6:	60a0      	str	r0, [r4, #8]
 8006fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fec:	f7fd fd34 	bl	8004a58 <memset>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <__sfp_lock_acquire>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__sfp_lock_acquire+0x8>)
 8006ff6:	f000 b8b3 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	200008d0 	.word	0x200008d0

08007000 <__sfp_lock_release>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_release+0x8>)
 8007002:	f000 b8ae 	b.w	8007162 <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	200008d0 	.word	0x200008d0

0800700c <__sinit_lock_acquire>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sinit_lock_acquire+0x8>)
 800700e:	f000 b8a7 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	200008cb 	.word	0x200008cb

08007018 <__sinit_lock_release>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_release+0x8>)
 800701a:	f000 b8a2 	b.w	8007162 <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	200008cb 	.word	0x200008cb

08007024 <__sinit>:
 8007024:	b510      	push	{r4, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	f7ff fff0 	bl	800700c <__sinit_lock_acquire>
 800702c:	69a3      	ldr	r3, [r4, #24]
 800702e:	b11b      	cbz	r3, 8007038 <__sinit+0x14>
 8007030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007034:	f7ff bff0 	b.w	8007018 <__sinit_lock_release>
 8007038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800703c:	6523      	str	r3, [r4, #80]	; 0x50
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <__sinit+0x68>)
 8007040:	4a13      	ldr	r2, [pc, #76]	; (8007090 <__sinit+0x6c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	62a2      	str	r2, [r4, #40]	; 0x28
 8007046:	42a3      	cmp	r3, r4
 8007048:	bf04      	itt	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	61a3      	streq	r3, [r4, #24]
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f820 	bl	8007094 <__sfp>
 8007054:	6060      	str	r0, [r4, #4]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f81c 	bl	8007094 <__sfp>
 800705c:	60a0      	str	r0, [r4, #8]
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f818 	bl	8007094 <__sfp>
 8007064:	2200      	movs	r2, #0
 8007066:	60e0      	str	r0, [r4, #12]
 8007068:	2104      	movs	r1, #4
 800706a:	6860      	ldr	r0, [r4, #4]
 800706c:	f7ff ff82 	bl	8006f74 <std>
 8007070:	68a0      	ldr	r0, [r4, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	2109      	movs	r1, #9
 8007076:	f7ff ff7d 	bl	8006f74 <std>
 800707a:	68e0      	ldr	r0, [r4, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	2112      	movs	r1, #18
 8007080:	f7ff ff78 	bl	8006f74 <std>
 8007084:	2301      	movs	r3, #1
 8007086:	61a3      	str	r3, [r4, #24]
 8007088:	e7d2      	b.n	8007030 <__sinit+0xc>
 800708a:	bf00      	nop
 800708c:	08007460 	.word	0x08007460
 8007090:	08006fbd 	.word	0x08006fbd

08007094 <__sfp>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4607      	mov	r7, r0
 8007098:	f7ff ffac 	bl	8006ff4 <__sfp_lock_acquire>
 800709c:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <__sfp+0x84>)
 800709e:	681e      	ldr	r6, [r3, #0]
 80070a0:	69b3      	ldr	r3, [r6, #24]
 80070a2:	b913      	cbnz	r3, 80070aa <__sfp+0x16>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffbd 	bl	8007024 <__sinit>
 80070aa:	3648      	adds	r6, #72	; 0x48
 80070ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	d503      	bpl.n	80070bc <__sfp+0x28>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	b30b      	cbz	r3, 80070fc <__sfp+0x68>
 80070b8:	6836      	ldr	r6, [r6, #0]
 80070ba:	e7f7      	b.n	80070ac <__sfp+0x18>
 80070bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c0:	b9d5      	cbnz	r5, 80070f8 <__sfp+0x64>
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <__sfp+0x88>)
 80070c4:	60e3      	str	r3, [r4, #12]
 80070c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070ca:	6665      	str	r5, [r4, #100]	; 0x64
 80070cc:	f000 f847 	bl	800715e <__retarget_lock_init_recursive>
 80070d0:	f7ff ff96 	bl	8007000 <__sfp_lock_release>
 80070d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070dc:	6025      	str	r5, [r4, #0]
 80070de:	61a5      	str	r5, [r4, #24]
 80070e0:	2208      	movs	r2, #8
 80070e2:	4629      	mov	r1, r5
 80070e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070e8:	f7fd fcb6 	bl	8004a58 <memset>
 80070ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070f4:	4620      	mov	r0, r4
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f8:	3468      	adds	r4, #104	; 0x68
 80070fa:	e7d9      	b.n	80070b0 <__sfp+0x1c>
 80070fc:	2104      	movs	r1, #4
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff ff62 	bl	8006fc8 <__sfmoreglue>
 8007104:	4604      	mov	r4, r0
 8007106:	6030      	str	r0, [r6, #0]
 8007108:	2800      	cmp	r0, #0
 800710a:	d1d5      	bne.n	80070b8 <__sfp+0x24>
 800710c:	f7ff ff78 	bl	8007000 <__sfp_lock_release>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	e7ee      	b.n	80070f4 <__sfp+0x60>
 8007116:	bf00      	nop
 8007118:	08007460 	.word	0x08007460
 800711c:	ffff0001 	.word	0xffff0001

08007120 <_fwalk_reent>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4606      	mov	r6, r0
 8007126:	4688      	mov	r8, r1
 8007128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800712c:	2700      	movs	r7, #0
 800712e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007132:	f1b9 0901 	subs.w	r9, r9, #1
 8007136:	d505      	bpl.n	8007144 <_fwalk_reent+0x24>
 8007138:	6824      	ldr	r4, [r4, #0]
 800713a:	2c00      	cmp	r4, #0
 800713c:	d1f7      	bne.n	800712e <_fwalk_reent+0xe>
 800713e:	4638      	mov	r0, r7
 8007140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007144:	89ab      	ldrh	r3, [r5, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d907      	bls.n	800715a <_fwalk_reent+0x3a>
 800714a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800714e:	3301      	adds	r3, #1
 8007150:	d003      	beq.n	800715a <_fwalk_reent+0x3a>
 8007152:	4629      	mov	r1, r5
 8007154:	4630      	mov	r0, r6
 8007156:	47c0      	blx	r8
 8007158:	4307      	orrs	r7, r0
 800715a:	3568      	adds	r5, #104	; 0x68
 800715c:	e7e9      	b.n	8007132 <_fwalk_reent+0x12>

0800715e <__retarget_lock_init_recursive>:
 800715e:	4770      	bx	lr

08007160 <__retarget_lock_acquire_recursive>:
 8007160:	4770      	bx	lr

08007162 <__retarget_lock_release_recursive>:
 8007162:	4770      	bx	lr

08007164 <__swhatbuf_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	460e      	mov	r6, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	2900      	cmp	r1, #0
 800716e:	b096      	sub	sp, #88	; 0x58
 8007170:	4614      	mov	r4, r2
 8007172:	461d      	mov	r5, r3
 8007174:	da07      	bge.n	8007186 <__swhatbuf_r+0x22>
 8007176:	2300      	movs	r3, #0
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	89b3      	ldrh	r3, [r6, #12]
 800717c:	061a      	lsls	r2, r3, #24
 800717e:	d410      	bmi.n	80071a2 <__swhatbuf_r+0x3e>
 8007180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007184:	e00e      	b.n	80071a4 <__swhatbuf_r+0x40>
 8007186:	466a      	mov	r2, sp
 8007188:	f000 f8fa 	bl	8007380 <_fstat_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	dbf2      	blt.n	8007176 <__swhatbuf_r+0x12>
 8007190:	9a01      	ldr	r2, [sp, #4]
 8007192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800719a:	425a      	negs	r2, r3
 800719c:	415a      	adcs	r2, r3
 800719e:	602a      	str	r2, [r5, #0]
 80071a0:	e7ee      	b.n	8007180 <__swhatbuf_r+0x1c>
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2000      	movs	r0, #0
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	b016      	add	sp, #88	; 0x58
 80071aa:	bd70      	pop	{r4, r5, r6, pc}

080071ac <__smakebuf_r>:
 80071ac:	898b      	ldrh	r3, [r1, #12]
 80071ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b0:	079d      	lsls	r5, r3, #30
 80071b2:	4606      	mov	r6, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	d507      	bpl.n	80071c8 <__smakebuf_r+0x1c>
 80071b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	2301      	movs	r3, #1
 80071c2:	6163      	str	r3, [r4, #20]
 80071c4:	b002      	add	sp, #8
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	ab01      	add	r3, sp, #4
 80071ca:	466a      	mov	r2, sp
 80071cc:	f7ff ffca 	bl	8007164 <__swhatbuf_r>
 80071d0:	9900      	ldr	r1, [sp, #0]
 80071d2:	4605      	mov	r5, r0
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff fb23 	bl	8006820 <_malloc_r>
 80071da:	b948      	cbnz	r0, 80071f0 <__smakebuf_r+0x44>
 80071dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e0:	059a      	lsls	r2, r3, #22
 80071e2:	d4ef      	bmi.n	80071c4 <__smakebuf_r+0x18>
 80071e4:	f023 0303 	bic.w	r3, r3, #3
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	e7e3      	b.n	80071b8 <__smakebuf_r+0xc>
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <__smakebuf_r+0x7c>)
 80071f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	6020      	str	r0, [r4, #0]
 80071f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	6163      	str	r3, [r4, #20]
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	6120      	str	r0, [r4, #16]
 8007206:	b15b      	cbz	r3, 8007220 <__smakebuf_r+0x74>
 8007208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f8c9 	bl	80073a4 <_isatty_r>
 8007212:	b128      	cbz	r0, 8007220 <__smakebuf_r+0x74>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	89a0      	ldrh	r0, [r4, #12]
 8007222:	4305      	orrs	r5, r0
 8007224:	81a5      	strh	r5, [r4, #12]
 8007226:	e7cd      	b.n	80071c4 <__smakebuf_r+0x18>
 8007228:	08006fbd 	.word	0x08006fbd

0800722c <_raise_r>:
 800722c:	291f      	cmp	r1, #31
 800722e:	b538      	push	{r3, r4, r5, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	d904      	bls.n	8007240 <_raise_r+0x14>
 8007236:	2316      	movs	r3, #22
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007242:	b112      	cbz	r2, 800724a <_raise_r+0x1e>
 8007244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007248:	b94b      	cbnz	r3, 800725e <_raise_r+0x32>
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f830 	bl	80072b0 <_getpid_r>
 8007250:	462a      	mov	r2, r5
 8007252:	4601      	mov	r1, r0
 8007254:	4620      	mov	r0, r4
 8007256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725a:	f000 b817 	b.w	800728c <_kill_r>
 800725e:	2b01      	cmp	r3, #1
 8007260:	d00a      	beq.n	8007278 <_raise_r+0x4c>
 8007262:	1c59      	adds	r1, r3, #1
 8007264:	d103      	bne.n	800726e <_raise_r+0x42>
 8007266:	2316      	movs	r3, #22
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	2001      	movs	r0, #1
 800726c:	e7e7      	b.n	800723e <_raise_r+0x12>
 800726e:	2400      	movs	r4, #0
 8007270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007274:	4628      	mov	r0, r5
 8007276:	4798      	blx	r3
 8007278:	2000      	movs	r0, #0
 800727a:	e7e0      	b.n	800723e <_raise_r+0x12>

0800727c <raise>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <raise+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f7ff bfd3 	b.w	800722c <_raise_r>
 8007286:	bf00      	nop
 8007288:	2000023c 	.word	0x2000023c

0800728c <_kill_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	; (80072ac <_kill_r+0x20>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	f7fb fa15 	bl	80026c8 <_kill>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d102      	bne.n	80072a8 <_kill_r+0x1c>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	b103      	cbz	r3, 80072a8 <_kill_r+0x1c>
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	200008c4 	.word	0x200008c4

080072b0 <_getpid_r>:
 80072b0:	f7fb ba02 	b.w	80026b8 <_getpid>

080072b4 <__sread>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	460c      	mov	r4, r1
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	f000 f894 	bl	80073e8 <_read_r>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	bfab      	itete	ge
 80072c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072c6:	89a3      	ldrhlt	r3, [r4, #12]
 80072c8:	181b      	addge	r3, r3, r0
 80072ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ce:	bfac      	ite	ge
 80072d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072d2:	81a3      	strhlt	r3, [r4, #12]
 80072d4:	bd10      	pop	{r4, pc}

080072d6 <__swrite>:
 80072d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072da:	461f      	mov	r7, r3
 80072dc:	898b      	ldrh	r3, [r1, #12]
 80072de:	05db      	lsls	r3, r3, #23
 80072e0:	4605      	mov	r5, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	4616      	mov	r6, r2
 80072e6:	d505      	bpl.n	80072f4 <__swrite+0x1e>
 80072e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ec:	2302      	movs	r3, #2
 80072ee:	2200      	movs	r2, #0
 80072f0:	f000 f868 	bl	80073c4 <_lseek_r>
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	4632      	mov	r2, r6
 8007302:	463b      	mov	r3, r7
 8007304:	4628      	mov	r0, r5
 8007306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	f000 b817 	b.w	800733c <_write_r>

0800730e <__sseek>:
 800730e:	b510      	push	{r4, lr}
 8007310:	460c      	mov	r4, r1
 8007312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007316:	f000 f855 	bl	80073c4 <_lseek_r>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	bf15      	itete	ne
 8007320:	6560      	strne	r0, [r4, #84]	; 0x54
 8007322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800732a:	81a3      	strheq	r3, [r4, #12]
 800732c:	bf18      	it	ne
 800732e:	81a3      	strhne	r3, [r4, #12]
 8007330:	bd10      	pop	{r4, pc}

08007332 <__sclose>:
 8007332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007336:	f000 b813 	b.w	8007360 <_close_r>
	...

0800733c <_write_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	; (800735c <_write_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fb f9f3 	bl	8002736 <_write>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_write_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_write_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200008c4 	.word	0x200008c4

08007360 <_close_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_close_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fb f9ff 	bl	800276e <_close>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_close_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_close_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200008c4 	.word	0x200008c4

08007380 <_fstat_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	; (80073a0 <_fstat_r+0x20>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7fb f9fa 	bl	8002786 <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_fstat_r+0x1c>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	b103      	cbz	r3, 800739c <_fstat_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	200008c4 	.word	0x200008c4

080073a4 <_isatty_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d06      	ldr	r5, [pc, #24]	; (80073c0 <_isatty_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fb f9f9 	bl	80027a6 <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_isatty_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_isatty_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	200008c4 	.word	0x200008c4

080073c4 <_lseek_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4d07      	ldr	r5, [pc, #28]	; (80073e4 <_lseek_r+0x20>)
 80073c8:	4604      	mov	r4, r0
 80073ca:	4608      	mov	r0, r1
 80073cc:	4611      	mov	r1, r2
 80073ce:	2200      	movs	r2, #0
 80073d0:	602a      	str	r2, [r5, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f7fb f9f2 	bl	80027bc <_lseek>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_lseek_r+0x1e>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_lseek_r+0x1e>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200008c4 	.word	0x200008c4

080073e8 <_read_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	; (8007408 <_read_r+0x20>)
 80073ec:	4604      	mov	r4, r0
 80073ee:	4608      	mov	r0, r1
 80073f0:	4611      	mov	r1, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	602a      	str	r2, [r5, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f7fb f980 	bl	80026fc <_read>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_read_r+0x1e>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_read_r+0x1e>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200008c4 	.word	0x200008c4

0800740c <_init>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr

08007418 <_fini>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr
