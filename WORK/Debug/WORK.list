
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08008168  08008168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e0  080087e0  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  080087e0  080087e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e8  080087e8  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  080087f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000344  08008b34  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  08008b34  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a7c  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000215c  00000000  00000000  00030df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00032f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022356  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba7b  00000000  00000000  00057146  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf0bc  00000000  00000000  00062bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  00131cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008150 	.word	0x08008150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	08008150 	.word	0x08008150

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ST7920_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <ST7920_Send_command+0x68>)
 8000eb8:	f002 fc62 	bl	8003780 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000ebc:	23f8      	movs	r3, #248	; 0xf8
 8000ebe:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000eca:	f003 fe71 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ee2:	f003 fe65 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000eee:	f107 030f 	add.w	r3, r7, #15
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ef8:	f003 fe5a 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <ST7920_Send_command+0x68>)
 8000f02:	f002 fc3d 	bl	8003780 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	200007f0 	.word	0x200007f0

08000f18 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000f22:	2201      	movs	r2, #1
 8000f24:	2120      	movs	r1, #32
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f28:	f002 fc2a 	bl	8003780 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000f2c:	23fa      	movs	r3, #250	; 0xfa
 8000f2e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f30:	f107 030f 	add.w	r3, r7, #15
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f3a:	f003 fe39 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f48:	f107 030f 	add.w	r3, r7, #15
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f52:	f003 fe2d 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f5e:	f107 030f 	add.w	r3, r7, #15
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f68:	f003 fe22 	bl	8004bb0 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f72:	f002 fc05 	bl	8003780 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	200007f0 	.word	0x200007f0

08000f88 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	481e      	ldr	r0, [pc, #120]	; (800100c <ST7920_Init+0x84>)
 8000f94:	f002 fbf4 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f001 fde9 	bl	8002b70 <HAL_Delay>
	RST_set();
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <ST7920_Init+0x84>)
 8000fa4:	f002 fbec 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_Delay(40); //Ждем 40 мс
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f001 fde1 	bl	8002b70 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000fae:	2330      	movs	r3, #48	; 0x30
 8000fb0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff77 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 fdd8 	bl	8002b70 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff70 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 fdd1 	bl	8002b70 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000fce:	230c      	movs	r3, #12
 8000fd0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff67 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 fdc8 	bl	8002b70 <HAL_Delay>
	tx_buffer = 0x01;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff5e 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(12);
 8000fec:	200c      	movs	r0, #12
 8000fee:	f001 fdbf 	bl	8002b70 <HAL_Delay>
	tx_buffer = 0x06;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff55 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 fdb6 	bl	8002b70 <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400

08001010 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8001020:	2034      	movs	r0, #52	; 0x34
 8001022:	f7ff ff41 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f001 fda2 	bl	8002b70 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 800102c:	2036      	movs	r0, #54	; 0x36
 800102e:	f7ff ff3b 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 fd9c 	bl	8002b70 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8001038:	e00b      	b.n	8001052 <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8001046:	2030      	movs	r0, #48	; 0x30
 8001048:	f7ff ff2e 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 fd8f 	bl	8002b70 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <ST7920_Clean>:
/*----------------Функция включения/выключения графического режима----------------*/

/*---------------Функция очистки дисплея в графическом режиме--------------------*/
void ST7920_Clean() {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
/// Функция очистки дисплея в графическом режиме
	uint8_t x, y;
	for (y = 0; y < 64; y++) {
 8001060:	2300      	movs	r3, #0
 8001062:	71bb      	strb	r3, [r7, #6]
 8001064:	e02d      	b.n	80010c2 <ST7920_Clean+0x68>
		if (y < 32) {
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b1f      	cmp	r3, #31
 800106a:	d80a      	bhi.n	8001082 <ST7920_Clean+0x28>
			ST7920_Send_command(0x80 | y);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff17 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x80);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f7ff ff14 	bl	8000ea8 <ST7920_Send_command>
 8001080:	e00d      	b.n	800109e <ST7920_Clean+0x44>
		} else {
			ST7920_Send_command(0x80 | (y - 32));
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	3b20      	subs	r3, #32
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff08 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x88);
 8001098:	2088      	movs	r0, #136	; 0x88
 800109a:	f7ff ff05 	bl	8000ea8 <ST7920_Send_command>
		}
		for (x = 0; x < 8; x++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e008      	b.n	80010b6 <ST7920_Clean+0x5c>
			ST7920_Send_data(0x00);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff37 	bl	8000f18 <ST7920_Send_data>
			ST7920_Send_data(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff34 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9f3      	bls.n	80010a4 <ST7920_Clean+0x4a>
	for (y = 0; y < 64; y++) {
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	3301      	adds	r3, #1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b3f      	cmp	r3, #63	; 0x3f
 80010c6:	d9ce      	bls.n	8001066 <ST7920_Clean+0xc>
		}
	}
	ST7920_Clean_Frame_buffer();
 80010c8:	f000 fa8a 	bl	80015e0 <ST7920_Clean_Frame_buffer>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ST7920_Draw_bitmap>:
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	e13a      	b.n	800135c <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e130      	b.n	800134e <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b1f      	cmp	r3, #31
 80010f0:	d80e      	bhi.n	8001110 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fed4 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fecd 	bl	8000ea8 <ST7920_Send_command>
 800110e:	e011      	b.n	8001134 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b20      	subs	r3, #32
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fec1 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f063 0377 	orn	r3, r3, #119	; 0x77
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff feba 	bl	8000ea8 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	00da      	lsls	r2, r3, #3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	fa42 f303 	asr.w	r3, r2, r3
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	b25a      	sxtb	r2, r3
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	fa41 f303 	asr.w	r3, r1, r3
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	3302      	adds	r3, #2
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	fa41 f303 	asr.w	r3, r1, r3
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	3303      	adds	r3, #3
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	440b      	add	r3, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	fa41 f303 	asr.w	r3, r1, r3
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	fa41 f303 	asr.w	r3, r1, r3
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	3305      	adds	r3, #5
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	fa41 f303 	asr.w	r3, r1, r3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	3306      	adds	r3, #6
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	440b      	add	r3, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	fa41 f303 	asr.w	r3, r1, r3
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25a      	sxtb	r2, r3
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	3307      	adds	r3, #7
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	fa41 f303 	asr.w	r3, r1, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	b25b      	sxtb	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8001240:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe67 	bl	8000f18 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	3308      	adds	r3, #8
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	01db      	lsls	r3, r3, #7
 800125e:	b25a      	sxtb	r2, r3
 8001260:	89bb      	ldrh	r3, [r7, #12]
 8001262:	3309      	adds	r3, #9
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	fa41 f303 	asr.w	r3, r1, r3
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b25a      	sxtb	r2, r3
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	330a      	adds	r3, #10
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	fa41 f303 	asr.w	r3, r1, r3
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	b25b      	sxtb	r3, r3
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	330b      	adds	r3, #11
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	fa41 f303 	asr.w	r3, r1, r3
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	330c      	adds	r3, #12
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	fa41 f303 	asr.w	r3, r1, r3
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	330d      	adds	r3, #13
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	440b      	add	r3, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	fa41 f303 	asr.w	r3, r1, r3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	330e      	adds	r3, #14
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	fa41 f303 	asr.w	r3, r1, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	330f      	adds	r3, #15
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	fa41 f303 	asr.w	r3, r1, r3
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800133e:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fde8 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b07      	cmp	r3, #7
 8001352:	f67f aecb 	bls.w	80010ec <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	3301      	adds	r3, #1
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	2b3f      	cmp	r3, #63	; 0x3f
 8001360:	f67f aec1 	bls.w	80010e6 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <ST7920_Update+0x10>)
 8001372:	f7ff feaf 	bl	80010d4 <ST7920_Draw_bitmap>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003e0 	.word	0x200003e0

08001380 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e028      	b.n	80013ea <print_symbol+0x6a>
		if (inversion) {
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <print_symbol+0x44>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <print_symbol+0x7c>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	88f9      	ldrh	r1, [r7, #6]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	440b      	add	r3, r1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	43d2      	mvns	r2, r2
 80013bc:	b2d1      	uxtb	r1, r2
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <print_symbol+0x80>)
 80013c0:	54d1      	strb	r1, [r2, r3]
 80013c2:	e00f      	b.n	80013e4 <print_symbol+0x64>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	441a      	add	r2, r3
 80013d4:	88f9      	ldrh	r1, [r7, #6]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	3b01      	subs	r3, #1
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <print_symbol+0x7c>)
 80013de:	5c89      	ldrb	r1, [r1, r2]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <print_symbol+0x80>)
 80013e2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 6; i++) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	ddd3      	ble.n	8001398 <print_symbol+0x18>
		}

	}
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	0800819c 	.word	0x0800819c
 8001400:	200003e0 	.word	0x200003e0

08001404 <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	460b      	mov	r3, r1
 8001412:	717b      	strb	r3, [r7, #5]
 8001414:	4613      	mov	r3, r2
 8001416:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	b29b      	uxth	r3, r3
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	b29a      	uxth	r2, r3
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e0c8      	b.n	80015c6 <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2bbf      	cmp	r3, #191	; 0xbf
 800143e:	d822      	bhi.n	8001486 <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e0b9      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	3b20      	subs	r3, #32
 8001460:	b299      	uxth	r1, r3
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	2201      	movs	r2, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff8a 	bl	8001380 <print_symbol>
 800146c:	e007      	b.n	800147e <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	3b20      	subs	r3, #32
 8001472:	b299      	uxth	r1, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	2200      	movs	r2, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff81 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	3306      	adds	r3, #6
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	e09c      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d820      	bhi.n	80014f0 <ST7920_Decode_UTF8+0xec>
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d91b      	bls.n	80014f0 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 80014b8:	793b      	ldrb	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00a      	beq.n	80014d4 <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014c4:	330f      	adds	r3, #15
 80014c6:	b299      	uxth	r1, r3
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff57 	bl	8001380 <print_symbol>
 80014d2:	e009      	b.n	80014e8 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014da:	330f      	adds	r3, #15
 80014dc:	b299      	uxth	r1, r3
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff4c 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	3306      	adds	r3, #6
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	e065      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d113      	bne.n	8001522 <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2201      	movs	r2, #1
 8001504:	219f      	movs	r1, #159	; 0x9f
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff3a 	bl	8001380 <print_symbol>
 800150c:	e005      	b.n	800151a <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2200      	movs	r2, #0
 8001512:	219f      	movs	r1, #159	; 0x9f
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	3306      	adds	r3, #6
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	e04c      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	f24d 1291 	movw	r2, #53649	; 0xd191
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	2201      	movs	r2, #1
 8001536:	21a0      	movs	r1, #160	; 0xa0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff21 	bl	8001380 <print_symbol>
 800153e:	e005      	b.n	800154c <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2200      	movs	r2, #0
 8001544:	21a0      	movs	r1, #160	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff1a 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	3306      	adds	r3, #6
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	e033      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2201      	movs	r2, #1
 8001568:	21a1      	movs	r1, #161	; 0xa1
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff08 	bl	8001380 <print_symbol>
 8001570:	e005      	b.n	800157e <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	2200      	movs	r2, #0
 8001576:	21a1      	movs	r1, #161	; 0xa1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff01 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	3306      	adds	r3, #6
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	e01a      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001592:	330f      	adds	r3, #15
 8001594:	b299      	uxth	r1, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2201      	movs	r2, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fef0 	bl	8001380 <print_symbol>
 80015a0:	e009      	b.n	80015b6 <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80015a8:	330f      	adds	r3, #15
 80015aa:	b299      	uxth	r1, r3
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fee5 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	3306      	adds	r3, #6
 80015ba:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe fe02 	bl	80001d0 <strlen>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f63f af2f 	bhi.w	8001434 <ST7920_Decode_UTF8+0x30>
		}
	}
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <ST7920_Clean_Frame_buffer>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	2100      	movs	r1, #0
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ST7920_Clean_Frame_buffer+0x14>)
 80015ec:	f004 fd6a 	bl	80060c4 <memset>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200003e0 	.word	0x200003e0

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f001 fa45 	bl	8002a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 fbd3 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 fcf5 	bl	8001ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 800160a:	f000 fcd3 	bl	8001fb4 <MX_DMA_Init>
  MX_TIM7_Init();
 800160e:	f000 fc9b 	bl	8001f48 <MX_TIM7_Init>
  MX_SDIO_SD_Init();
 8001612:	f000 fc33 	bl	8001e7c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001616:	f000 fc61 	bl	8001edc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  GPIOD->ODR = ~0;
 800161a:	4bb9      	ldr	r3, [pc, #740]	; (8001900 <main+0x308>)
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	615a      	str	r2, [r3, #20]
  HAL_Delay(100);
 8001622:	2064      	movs	r0, #100	; 0x64
 8001624:	f001 faa4 	bl	8002b70 <HAL_Delay>
  ST7920_Init();
 8001628:	f7ff fcae 	bl	8000f88 <ST7920_Init>
  ST7920_Graphic_mode(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fcef 	bl	8001010 <ST7920_Graphic_mode>
  sprintf(tx_buffer, "WELCOME");
 8001632:	4ab4      	ldr	r2, [pc, #720]	; (8001904 <main+0x30c>)
 8001634:	4bb4      	ldr	r3, [pc, #720]	; (8001908 <main+0x310>)
 8001636:	cb03      	ldmia	r3!, {r0, r1}
 8001638:	6010      	str	r0, [r2, #0]
 800163a:	6051      	str	r1, [r2, #4]
  ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
 800163c:	4bb1      	ldr	r3, [pc, #708]	; (8001904 <main+0x30c>)
 800163e:	2200      	movs	r2, #0
 8001640:	2103      	movs	r1, #3
 8001642:	2032      	movs	r0, #50	; 0x32
 8001644:	f7ff fede 	bl	8001404 <ST7920_Decode_UTF8>
  ST7920_Update();
 8001648:	f7ff fe90 	bl	800136c <ST7920_Update>
  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	e0b0      	b.n	80017b4 <main+0x1bc>
  {
	  Buttons[i].B_Out = 0;
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4aad      	ldr	r2, [pc, #692]	; (800190c <main+0x314>)
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	3314      	adds	r3, #20
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
	  Buttons[i].B_State = 0;
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4aa9      	ldr	r2, [pc, #676]	; (800190c <main+0x314>)
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3313      	adds	r3, #19
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	  Buttons[i].B_counter = 0;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4aa4      	ldr	r2, [pc, #656]	; (800190c <main+0x314>)
 800167a:	212c      	movs	r1, #44	; 0x2c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	3312      	adds	r3, #18
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	  Buttons[i].Lock = 0;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4aa0      	ldr	r2, [pc, #640]	; (800190c <main+0x314>)
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3315      	adds	r3, #21
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	  Buttons[i].call_function = toggle_func;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a9b      	ldr	r2, [pc, #620]	; (800190c <main+0x314>)
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3320      	adds	r3, #32
 80016a8:	4a99      	ldr	r2, [pc, #612]	; (8001910 <main+0x318>)
 80016aa:	601a      	str	r2, [r3, #0]
	  Buttons[i].alternate_function = 0;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a97      	ldr	r2, [pc, #604]	; (800190c <main+0x314>)
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3324      	adds	r3, #36	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
	  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4994      	ldr	r1, [pc, #592]	; (8001914 <main+0x31c>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4610      	mov	r0, r2
 80016d2:	4a8e      	ldr	r2, [pc, #568]	; (800190c <main+0x314>)
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	3304      	adds	r3, #4
 80016de:	6018      	str	r0, [r3, #0]
	  Buttons[i].GPIO_Pin = Defines[i][1];
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	498c      	ldr	r1, [pc, #560]	; (8001914 <main+0x31c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3304      	adds	r3, #4
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	b290      	uxth	r0, r2
 80016f6:	4a85      	ldr	r2, [pc, #532]	; (800190c <main+0x314>)
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3308      	adds	r3, #8
 8001702:	4602      	mov	r2, r0
 8001704:	801a      	strh	r2, [r3, #0]
	  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4982      	ldr	r1, [pc, #520]	; (8001914 <main+0x31c>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4610      	mov	r0, r2
 800171c:	4a7b      	ldr	r2, [pc, #492]	; (800190c <main+0x314>)
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	330c      	adds	r3, #12
 8001728:	6018      	str	r0, [r3, #0]
	  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	4979      	ldr	r1, [pc, #484]	; (8001914 <main+0x31c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	330c      	adds	r3, #12
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	b290      	uxth	r0, r2
 8001740:	4a72      	ldr	r2, [pc, #456]	; (800190c <main+0x314>)
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3310      	adds	r3, #16
 800174c:	4602      	mov	r2, r0
 800174e:	801a      	strh	r2, [r3, #0]
	  Buttons[i].Mode = Defines[i][4];
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	4970      	ldr	r1, [pc, #448]	; (8001914 <main+0x31c>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3310      	adds	r3, #16
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	b2d0      	uxtb	r0, r2
 8001766:	4a69      	ldr	r2, [pc, #420]	; (800190c <main+0x314>)
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3316      	adds	r3, #22
 8001772:	4602      	mov	r2, r0
 8001774:	701a      	strb	r2, [r3, #0]
	  Buttons[i].Delay = Defines[i][5];
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	4966      	ldr	r1, [pc, #408]	; (8001914 <main+0x31c>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	3314      	adds	r3, #20
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	b290      	uxth	r0, r2
 800178c:	4a5f      	ldr	r2, [pc, #380]	; (800190c <main+0x314>)
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3318      	adds	r3, #24
 8001798:	4602      	mov	r2, r0
 800179a:	801a      	strh	r2, [r3, #0]
	  Buttons[i].addiction = 0;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4a5b      	ldr	r2, [pc, #364]	; (800190c <main+0x314>)
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	331c      	adds	r3, #28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	3301      	adds	r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b0e      	cmp	r3, #14
 80017b8:	f67f af4b 	bls.w	8001652 <main+0x5a>
  }
  Buttons[0].alternate_function = macros1;
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <main+0x314>)
 80017be:	4a56      	ldr	r2, [pc, #344]	; (8001918 <main+0x320>)
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  Buttons[1].third_function = SetSteps0;
 80017c2:	4b52      	ldr	r3, [pc, #328]	; (800190c <main+0x314>)
 80017c4:	4a55      	ldr	r2, [pc, #340]	; (800191c <main+0x324>)
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
  Buttons[2].third_function = SetSteps2;
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <main+0x314>)
 80017ca:	4a55      	ldr	r2, [pc, #340]	; (8001920 <main+0x328>)
 80017cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  Buttons[1].addiction = &Buttons[13];
 80017d0:	4b4e      	ldr	r3, [pc, #312]	; (800190c <main+0x314>)
 80017d2:	4a54      	ldr	r2, [pc, #336]	; (8001924 <main+0x32c>)
 80017d4:	649a      	str	r2, [r3, #72]	; 0x48
  Buttons[4].addiction = &Buttons[3];
 80017d6:	4b4d      	ldr	r3, [pc, #308]	; (800190c <main+0x314>)
 80017d8:	4a53      	ldr	r2, [pc, #332]	; (8001928 <main+0x330>)
 80017da:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  Buttons[6].addiction = &Buttons[5];
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <main+0x314>)
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <main+0x334>)
 80017e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Buttons[7].third_function = SetSteps1;
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <main+0x314>)
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <main+0x338>)
 80017ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Buttons[9].Label = (uint8_t*)"mode";
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <main+0x314>)
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <main+0x33c>)
 80017f2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  Buttons[10].Label = (uint8_t*)"auto_start";
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <main+0x314>)
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <main+0x340>)
 80017fa:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
  Buttons[13].Label = (uint8_t*)"reed_switch";
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <main+0x314>)
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <main+0x344>)
 8001802:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	2140      	movs	r1, #64	; 0x40
 800180a:	484d      	ldr	r0, [pc, #308]	; (8001940 <main+0x348>)
 800180c:	f001 ffb8 	bl	8003780 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	484a      	ldr	r0, [pc, #296]	; (8001940 <main+0x348>)
 8001816:	f001 ffb3 	bl	8003780 <HAL_GPIO_WritePin>
  HAL_Delay(700);
 800181a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800181e:	f001 f9a7 	bl	8002b70 <HAL_Delay>
  ST7920_Clean();
 8001822:	f7ff fc1a 	bl	800105a <ST7920_Clean>
  sprintf(tx_buffer, "Count: %lu", counter);
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <main+0x34c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4946      	ldr	r1, [pc, #280]	; (8001948 <main+0x350>)
 800182e:	4835      	ldr	r0, [pc, #212]	; (8001904 <main+0x30c>)
 8001830:	f005 f8ac 	bl	800698c <siprintf>
  ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <main+0x30c>)
 8001836:	2200      	movs	r2, #0
 8001838:	2104      	movs	r1, #4
 800183a:	2014      	movs	r0, #20
 800183c:	f7ff fde2 	bl	8001404 <ST7920_Decode_UTF8>
  ST7920_Update();
 8001840:	f7ff fd94 	bl	800136c <ST7920_Update>
  HAL_TIM_Base_Start_IT(&htim7);
 8001844:	4841      	ldr	r0, [pc, #260]	; (800194c <main+0x354>)
 8001846:	f003 fcdc 	bl	8005202 <HAL_TIM_Base_Start_IT>
		{
			HAL_GPIO_WritePin(Led_1_GPIO_Port,Led_1_Pin,1);
		}
		*/

		if(!Buttons[9].B_State)
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <main+0x314>)
 800184c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 8204 	bne.w	8001c5e <main+0x666>
		{
			if(Buttons[9].B_Out == 1)
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <main+0x314>)
 8001858:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d115      	bne.n	800188c <main+0x294>
			{
				Buttons[9].B_Out = 0;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <main+0x314>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	71bb      	strb	r3, [r7, #6]
 800186c:	e00b      	b.n	8001886 <main+0x28e>
				{
					Buttons[i].B_Out = 0;
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	4a26      	ldr	r2, [pc, #152]	; (800190c <main+0x314>)
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3314      	adds	r3, #20
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	3301      	adds	r3, #1
 8001884:	71bb      	strb	r3, [r7, #6]
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	2b0e      	cmp	r3, #14
 800188a:	d9f0      	bls.n	800186e <main+0x276>
				};
			}

			// MANUAL MODE
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	717b      	strb	r3, [r7, #5]
 8001890:	e1e0      	b.n	8001c54 <main+0x65c>
			{
				if(Buttons[i].Lock == 0)
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <main+0x314>)
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3315      	adds	r3, #21
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 81d3 	bne.w	8001c4e <main+0x656>
				{
					if(Buttons[i].Mode == HOLD)
 80018a8:	797b      	ldrb	r3, [r7, #5]
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <main+0x314>)
 80018ac:	212c      	movs	r1, #44	; 0x2c
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	3316      	adds	r3, #22
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d149      	bne.n	8001950 <main+0x358>
					{
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 80018bc:	797b      	ldrb	r3, [r7, #5]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <main+0x314>)
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	330c      	adds	r3, #12
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <main+0x314>)
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3310      	adds	r3, #16
 80018da:	881c      	ldrh	r4, [r3, #0]
 80018dc:	797b      	ldrb	r3, [r7, #5]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <main+0x314>)
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3313      	adds	r3, #19
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	f001 ff41 	bl	8003780 <HAL_GPIO_WritePin>
						continue;
 80018fe:	e1a6      	b.n	8001c4e <main+0x656>
 8001900:	40020c00 	.word	0x40020c00
 8001904:	20000360 	.word	0x20000360
 8001908:	08008168 	.word	0x08008168
 800190c:	20000848 	.word	0x20000848
 8001910:	080022cd 	.word	0x080022cd
 8001914:	20000000 	.word	0x20000000
 8001918:	08002351 	.word	0x08002351
 800191c:	0800260b 	.word	0x0800260b
 8001920:	080025ef 	.word	0x080025ef
 8001924:	20000a84 	.word	0x20000a84
 8001928:	200008cc 	.word	0x200008cc
 800192c:	20000924 	.word	0x20000924
 8001930:	080025d3 	.word	0x080025d3
 8001934:	08008170 	.word	0x08008170
 8001938:	08008178 	.word	0x08008178
 800193c:	08008184 	.word	0x08008184
 8001940:	40020000 	.word	0x40020000
 8001944:	200007e0 	.word	0x200007e0
 8001948:	08008190 	.word	0x08008190
 800194c:	20000bc0 	.word	0x20000bc0
					}
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	4aa8      	ldr	r2, [pc, #672]	; (8001bf4 <main+0x5fc>)
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3316      	adds	r3, #22
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d163      	bne.n	8001a2c <main+0x434>
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	4aa3      	ldr	r2, [pc, #652]	; (8001bf4 <main+0x5fc>)
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3324      	adds	r3, #36	; 0x24
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d159      	bne.n	8001a2c <main+0x434>
					{
						if(Buttons[i].addiction != 0)
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	4a9e      	ldr	r2, [pc, #632]	; (8001bf4 <main+0x5fc>)
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	331c      	adds	r3, #28
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d02d      	beq.n	80019e8 <main+0x3f0>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 800198c:	797b      	ldrb	r3, [r7, #5]
 800198e:	4a99      	ldr	r2, [pc, #612]	; (8001bf4 <main+0x5fc>)
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	330c      	adds	r3, #12
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	4a95      	ldr	r2, [pc, #596]	; (8001bf4 <main+0x5fc>)
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3310      	adds	r3, #16
 80019aa:	881c      	ldrh	r4, [r3, #0]
 80019ac:	797b      	ldrb	r3, [r7, #5]
 80019ae:	4a91      	ldr	r2, [pc, #580]	; (8001bf4 <main+0x5fc>)
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3314      	adds	r3, #20
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <main+0x3de>
 80019c0:	797b      	ldrb	r3, [r7, #5]
 80019c2:	4a8c      	ldr	r2, [pc, #560]	; (8001bf4 <main+0x5fc>)
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	331c      	adds	r3, #28
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	7d1b      	ldrb	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <main+0x3e2>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <main+0x3e4>
 80019da:	2300      	movs	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f001 fecd 	bl	8003780 <HAL_GPIO_WritePin>
						else
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
						continue;
 80019e6:	e132      	b.n	8001c4e <main+0x656>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 80019e8:	797b      	ldrb	r3, [r7, #5]
 80019ea:	4a82      	ldr	r2, [pc, #520]	; (8001bf4 <main+0x5fc>)
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	330c      	adds	r3, #12
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	797b      	ldrb	r3, [r7, #5]
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <main+0x5fc>)
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3310      	adds	r3, #16
 8001a06:	881c      	ldrh	r4, [r3, #0]
 8001a08:	797b      	ldrb	r3, [r7, #5]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <main+0x5fc>)
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3314      	adds	r3, #20
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f001 feab 	bl	8003780 <HAL_GPIO_WritePin>
						continue;
 8001a2a:	e110      	b.n	8001c4e <main+0x656>
					}
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <main+0x5fc>)
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3324      	adds	r3, #36	; 0x24
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d02d      	beq.n	8001a9c <main+0x4a4>
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <main+0x5fc>)
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3316      	adds	r3, #22
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d123      	bne.n	8001a9c <main+0x4a4>
 8001a54:	797b      	ldrb	r3, [r7, #5]
 8001a56:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <main+0x5fc>)
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3314      	adds	r3, #20
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d019      	beq.n	8001a9c <main+0x4a4>
					{
						Buttons[i].B_Out = 0;
 8001a68:	797b      	ldrb	r3, [r7, #5]
 8001a6a:	4a62      	ldr	r2, [pc, #392]	; (8001bf4 <main+0x5fc>)
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3314      	adds	r3, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <main+0x5fc>)
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3324      	adds	r3, #36	; 0x24
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	797a      	ldrb	r2, [r7, #5]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f202 	mul.w	r2, r1, r2
 8001a92:	4958      	ldr	r1, [pc, #352]	; (8001bf4 <main+0x5fc>)
 8001a94:	440a      	add	r2, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4798      	blx	r3
						continue;
 8001a9a:	e0d8      	b.n	8001c4e <main+0x656>
					}
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 8001a9c:	797b      	ldrb	r3, [r7, #5]
 8001a9e:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <main+0x5fc>)
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3316      	adds	r3, #22
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d11c      	bne.n	8001aea <main+0x4f2>
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <main+0x5fc>)
 8001ab4:	212c      	movs	r1, #44	; 0x2c
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3314      	adds	r3, #20
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <main+0x4f2>
					{
						Buttons[i].B_Out = 0;
 8001ac4:	797b      	ldrb	r3, [r7, #5]
 8001ac6:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <main+0x5fc>)
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	222c      	movs	r2, #44	; 0x2c
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a45      	ldr	r2, [pc, #276]	; (8001bf4 <main+0x5fc>)
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fd03 	bl	80024ee <TimerMotor>
						continue;
 8001ae8:	e0b1      	b.n	8001c4e <main+0x656>
					}
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <main+0x5fc>)
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3316      	adds	r3, #22
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d152      	bne.n	8001ba4 <main+0x5ac>
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <main+0x5fc>)
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d048      	beq.n	8001ba4 <main+0x5ac>
					{
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	4a37      	ldr	r2, [pc, #220]	; (8001bf4 <main+0x5fc>)
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	331c      	adds	r3, #28
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	7d1b      	ldrb	r3, [r3, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8091 	beq.w	8001c4c <main+0x654>
						Buttons[i].B_Out = 0;
 8001b2a:	797b      	ldrb	r3, [r7, #5]
 8001b2c:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <main+0x5fc>)
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3314      	adds	r3, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <main+0x5fc>)
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	330c      	adds	r3, #12
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	797b      	ldrb	r3, [r7, #5]
 8001b4e:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <main+0x5fc>)
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3310      	adds	r3, #16
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f001 fe0e 	bl	8003780 <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <main+0x5fc>)
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3318      	adds	r3, #24
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fffb 	bl	8002b70 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8001b7a:	797b      	ldrb	r3, [r7, #5]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <main+0x5fc>)
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	330c      	adds	r3, #12
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	797b      	ldrb	r3, [r7, #5]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <main+0x5fc>)
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3310      	adds	r3, #16
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f001 fdef 	bl	8003780 <HAL_GPIO_WritePin>
						continue;
 8001ba2:	e054      	b.n	8001c4e <main+0x656>
					}
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 8001ba4:	797b      	ldrb	r3, [r7, #5]
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <main+0x5fc>)
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3316      	adds	r3, #22
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d11f      	bne.n	8001bf8 <main+0x600>
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <main+0x5fc>)
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <main+0x600>
					{
						Buttons[i].B_Out = 0;
 8001bcc:	797b      	ldrb	r3, [r7, #5]
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <main+0x5fc>)
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3314      	adds	r3, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 8001bde:	797b      	ldrb	r3, [r7, #5]
 8001be0:	222c      	movs	r2, #44	; 0x2c
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <main+0x5fc>)
 8001be8:	4413      	add	r3, r2
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fc11 	bl	8002414 <HoldMotor>
						continue;
 8001bf2:	e02c      	b.n	8001c4e <main+0x656>
 8001bf4:	20000848 	.word	0x20000848
					}
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <main+0x798>)
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3316      	adds	r3, #22
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d120      	bne.n	8001c4e <main+0x656>
 8001c0c:	797b      	ldrb	r3, [r7, #5]
 8001c0e:	4a60      	ldr	r2, [pc, #384]	; (8001d90 <main+0x798>)
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3314      	adds	r3, #20
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <main+0x656>
					{
						Buttons[i].B_Out = 0;
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	4a5b      	ldr	r2, [pc, #364]	; (8001d90 <main+0x798>)
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3314      	adds	r3, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
						HoldMotor(Buttons[i].addiction, 1);
 8001c32:	797b      	ldrb	r3, [r7, #5]
 8001c34:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <main+0x798>)
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	331c      	adds	r3, #28
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2101      	movs	r1, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fbe5 	bl	8002414 <HoldMotor>
						continue;
 8001c4a:	e000      	b.n	8001c4e <main+0x656>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001c4c:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001c4e:	797b      	ldrb	r3, [r7, #5]
 8001c50:	3301      	adds	r3, #1
 8001c52:	717b      	strb	r3, [r7, #5]
 8001c54:	797b      	ldrb	r3, [r7, #5]
 8001c56:	2b0e      	cmp	r3, #14
 8001c58:	f67f ae1b 	bls.w	8001892 <main+0x29a>
 8001c5c:	e5f5      	b.n	800184a <main+0x252>
    /* USER CODE BEGIN 3 */
		else
		{
			//AUTO MODE

			if(Buttons[10].B_Out) // AUTO MODE START
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <main+0x798>)
 8001c60:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8082 	beq.w	8001d6e <main+0x776>
			{

				if(Buttons[13].B_State == 1) // REED SWITCH
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <main+0x798>)
 8001c6c:	f893 324f 	ldrb.w	r3, [r3, #591]	; 0x24f
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d103      	bne.n	8001c7c <main+0x684>
				{
					HoldMotor(&Buttons[13], 1); // Prepare mat.
 8001c74:	2101      	movs	r1, #1
 8001c76:	4847      	ldr	r0, [pc, #284]	; (8001d94 <main+0x79c>)
 8001c78:	f000 fbcc 	bl	8002414 <HoldMotor>
				}
				TimerMotor(&Buttons[7]); // PULL mat.
 8001c7c:	4846      	ldr	r0, [pc, #280]	; (8001d98 <main+0x7a0>)
 8001c7e:	f000 fc36 	bl	80024ee <TimerMotor>
				HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0); // Push
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <main+0x798>)
 8001c84:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <main+0x798>)
 8001c8a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	f001 fd75 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0); // Push
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <main+0x798>)
 8001c98:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <main+0x798>)
 8001c9e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f001 fd6b 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001caa:	20c8      	movs	r0, #200	; 0xc8
 8001cac:	f000 ff60 	bl	8002b70 <HAL_Delay>
				HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 0); // CUT
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <main+0x798>)
 8001cb2:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <main+0x798>)
 8001cb8:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f001 fd5e 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0); // Weld
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <main+0x798>)
 8001cc6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <main+0x798>)
 8001ccc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f001 fd54 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0); // Weld
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <main+0x798>)
 8001cda:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <main+0x798>)
 8001ce0:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f001 fd4a 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8001cec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cf0:	f000 ff3e 	bl	8002b70 <HAL_Delay>
				HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 1); /*Release*/
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <main+0x798>)
 8001cf6:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <main+0x798>)
 8001cfc:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001d00:	2201      	movs	r2, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	f001 fd3c 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <main+0x798>)
 8001d0a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <main+0x798>)
 8001d10:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001d14:	2201      	movs	r2, #1
 8001d16:	4619      	mov	r1, r3
 8001d18:	f001 fd32 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <main+0x798>)
 8001d1e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <main+0x798>)
 8001d24:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f001 fd28 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <main+0x798>)
 8001d32:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <main+0x798>)
 8001d38:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f001 fd1e 	bl	8003780 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <main+0x798>)
 8001d46:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <main+0x798>)
 8001d4c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	f001 fd14 	bl	8003780 <HAL_GPIO_WritePin>
				TimerMotor(&Buttons[2]); // Dose
 8001d58:	4810      	ldr	r0, [pc, #64]	; (8001d9c <main+0x7a4>)
 8001d5a:	f000 fbc8 	bl	80024ee <TimerMotor>
				HAL_Delay(200);
 8001d5e:	20c8      	movs	r0, #200	; 0xc8
 8001d60:	f000 ff06 	bl	8002b70 <HAL_Delay>
				counter++;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <main+0x7a8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <main+0x7a8>)
 8001d6c:	6013      	str	r3, [r2, #0]

			}

			sprintf(tx_buffer, "Count: %lu", counter);
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <main+0x7a8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	490b      	ldr	r1, [pc, #44]	; (8001da4 <main+0x7ac>)
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <main+0x7b0>)
 8001d78:	f004 fe08 	bl	800698c <siprintf>
			ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <main+0x7b0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2104      	movs	r1, #4
 8001d82:	2014      	movs	r0, #20
 8001d84:	f7ff fb3e 	bl	8001404 <ST7920_Decode_UTF8>
			ST7920_Update();
 8001d88:	f7ff faf0 	bl	800136c <ST7920_Update>
		if(!Buttons[9].B_State)
 8001d8c:	e55d      	b.n	800184a <main+0x252>
 8001d8e:	bf00      	nop
 8001d90:	20000848 	.word	0x20000848
 8001d94:	20000a84 	.word	0x20000a84
 8001d98:	2000097c 	.word	0x2000097c
 8001d9c:	200008a0 	.word	0x200008a0
 8001da0:	200007e0 	.word	0x200007e0
 8001da4:	08008190 	.word	0x08008190
 8001da8:	20000360 	.word	0x20000360

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	; 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	2230      	movs	r2, #48	; 0x30
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f982 	bl	80060c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <SystemClock_Config+0xc8>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <SystemClock_Config+0xc8>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <SystemClock_Config+0xc8>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <SystemClock_Config+0xcc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <SystemClock_Config+0xcc>)
 8001df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <SystemClock_Config+0xcc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e12:	2302      	movs	r3, #2
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e20:	2348      	movs	r3, #72	; 0x48
 8001e22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001e24:	2306      	movs	r3, #6
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fcbf 	bl	80037b4 <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e3c:	f000 fc04 	bl	8002648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e40:	230f      	movs	r3, #15
 8001e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e44:	2302      	movs	r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 ff19 	bl	8003c94 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e68:	f000 fbee 	bl	8002648 <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3750      	adds	r7, #80	; 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000

08001e7c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <MX_SDIO_SD_Init+0x5c>)
 8001e84:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001eaa:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001eac:	f002 f8b0 	bl	8004010 <HAL_SD_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001eb6:	f000 fbc7 	bl	8002648 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_SDIO_SD_Init+0x58>)
 8001ec0:	f002 fada 	bl	8004478 <HAL_SD_ConfigWideBusOperation>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001eca:	f000 fbbd 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000adc 	.word	0x20000adc
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <MX_SPI2_Init+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f28:	220a      	movs	r2, #10
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MX_SPI2_Init+0x64>)
 8001f2e:	f002 fddb 	bl	8004ae8 <HAL_SPI_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f38:	f000 fb86 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200007f0 	.word	0x200007f0
 8001f44:	40003800 	.word	0x40003800

08001f48 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f58:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <MX_TIM7_Init+0x68>)
 8001f5a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f5e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001f62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f78:	f003 f918 	bl	80051ac <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f82:	f000 fb61 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <MX_TIM7_Init+0x64>)
 8001f94:	f003 fb54 	bl	8005640 <HAL_TIMEx_MasterConfigSynchronization>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f9e:	f000 fb53 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000bc0 	.word	0x20000bc0
 8001fb0:	40001400 	.word	0x40001400

08001fb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_DMA_Init+0x3c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <MX_DMA_Init+0x3c>)
 8001fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_DMA_Init+0x3c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 fed9 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001fe0:	200f      	movs	r0, #15
 8001fe2:	f000 fef2 	bl	8002dca <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a4f      	ldr	r2, [pc, #316]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <MX_GPIO_Init+0x1b0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2120      	movs	r1, #32
 80020b6:	483c      	ldr	r0, [pc, #240]	; (80021a8 <MX_GPIO_Init+0x1b4>)
 80020b8:	f001 fb62 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	21c0      	movs	r1, #192	; 0xc0
 80020c0:	483a      	ldr	r0, [pc, #232]	; (80021ac <MX_GPIO_Init+0x1b8>)
 80020c2:	f001 fb5d 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Prepare_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80020cc:	4838      	ldr	r0, [pc, #224]	; (80021b0 <MX_GPIO_Init+0x1bc>)
 80020ce:	f001 fb57 	bl	8003780 <HAL_GPIO_WritePin>
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	4837      	ldr	r0, [pc, #220]	; (80021b4 <MX_GPIO_Init+0x1c0>)
 80020d8:	f001 fb52 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin 
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin 
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin 
 80020dc:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 80020e0:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin 
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	482d      	ldr	r0, [pc, #180]	; (80021a8 <MX_GPIO_Init+0x1b4>)
 80020f2:	f001 f993 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80020f6:	2320      	movs	r3, #32
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4826      	ldr	r0, [pc, #152]	; (80021a8 <MX_GPIO_Init+0x1b4>)
 800210e:	f001 f985 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8002112:	23c0      	movs	r3, #192	; 0xc0
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	4820      	ldr	r0, [pc, #128]	; (80021ac <MX_GPIO_Init+0x1b8>)
 800212a:	f001 f977 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOLD_Dose_Pin HOLD_Pull_Pin Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin|HOLD_Pull_Pin|Mode_Pin|Auto_Start_Pin;
 800212e:	f640 4303 	movw	r3, #3075	; 0xc03
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	481c      	ldr	r0, [pc, #112]	; (80021b4 <MX_GPIO_Init+0x1c0>)
 8002144:	f001 f96a 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prepare_Out_Pin Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin 
                           H_Push_Out_Pin H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Prepare_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 8002148:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800214c:	61fb      	str	r3, [r7, #28]
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	4813      	ldr	r0, [pc, #76]	; (80021b0 <MX_GPIO_Init+0x1bc>)
 8002162:	f001 f95b 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin;
 8002166:	2318      	movs	r3, #24
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216e:	2301      	movs	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <MX_GPIO_Init+0x1bc>)
 800217a:	f001 f94f 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <MX_GPIO_Init+0x1c0>)
 8002196:	f001 f941 	bl	800341c <HAL_GPIO_Init>

}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	; 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 80021c0:	2110      	movs	r1, #16
 80021c2:	483c      	ldr	r0, [pc, #240]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80021c4:	f001 fac4 	bl	8003750 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12d      	bne.n	800222a <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e016      	b.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	330c      	adds	r3, #12
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3310      	adds	r3, #16
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4619      	mov	r1, r3
 80021f8:	f001 fac2 	bl	8003780 <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b0e      	cmp	r3, #14
 8002206:	d9e5      	bls.n	80021d4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		HAL_TIM_Base_Stop_IT(&htim7);
 8002208:	482c      	ldr	r0, [pc, #176]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800220a:	f003 f81e 	bl	800524a <HAL_TIM_Base_Stop_IT>
		Delay(4800000);
 800220e:	482c      	ldr	r0, [pc, #176]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002210:	f000 fa09 	bl	8002626 <Delay>
		while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 8002214:	e000      	b.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002216:	bf00      	nop
 8002218:	2110      	movs	r1, #16
 800221a:	4826      	ldr	r0, [pc, #152]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800221c:	f001 fa98 	bl	8003750 <HAL_GPIO_ReadPin>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f7      	beq.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_NVIC_SystemReset();
 8002226:	f000 fdde 	bl	8002de6 <HAL_NVIC_SystemReset>
	}

	if (htim->Instance==TIM7)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12d      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	73bb      	strb	r3, [r7, #14]
 8002238:	e027      	b.n	800228a <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			if(Buttons[i].addiction->B_Out || Buttons[i].addiction == 0)
 800223a:	7bbb      	ldrb	r3, [r7, #14]
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	331c      	adds	r3, #28
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	7d1b      	ldrb	r3, [r3, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_TIM_PeriodElapsedCallback+0xac>
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	331c      	adds	r3, #28
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_TIM_PeriodElapsedCallback+0xcc>
				Buttons[i].call_function(&Buttons[i]);
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3320      	adds	r3, #32
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	7bba      	ldrb	r2, [r7, #14]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f202 	mul.w	r2, r1, r2
 800227c:	490e      	ldr	r1, [pc, #56]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800227e:	440a      	add	r2, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	3301      	adds	r3, #1
 8002288:	73bb      	strb	r3, [r7, #14]
 800228a:	7bbb      	ldrb	r3, [r7, #14]
 800228c:	2b0e      	cmp	r3, #14
 800228e:	d9d4      	bls.n	800223a <HAL_TIM_PeriodElapsedCallback+0x82>
		}
	}
	if(Buttons[14].B_State && counter > 0)
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002292:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_TIM_PeriodElapsedCallback+0xf4>
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_TIM_PeriodElapsedCallback+0xf4>
	{
		counter = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
		ST7920_Clean();
 80022a8:	f7fe fed7 	bl	800105a <ST7920_Clean>
	}
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	20000848 	.word	0x20000848
 80022bc:	20000bc0 	.word	0x20000bc0
 80022c0:	00493e00 	.word	0x00493e00
 80022c4:	40001400 	.word	0x40001400
 80022c8:	200007e0 	.word	0x200007e0

080022cc <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	891b      	ldrh	r3, [r3, #8]
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f001 fa36 	bl	8003750 <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11d      	bne.n	8002326 <toggle_func+0x5a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7d5b      	ldrb	r3, [r3, #21]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <toggle_func+0x5a>
		{
			if(button->B_counter < 10)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c9b      	ldrb	r3, [r3, #18]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d806      	bhi.n	8002308 <toggle_func+0x3c>
				button->B_counter++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7c9b      	ldrb	r3, [r3, #18]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 10)
 8002306:	e01d      	b.n	8002344 <toggle_func+0x78>
			else
				if(button->B_State == 0)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7cdb      	ldrb	r3, [r3, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d119      	bne.n	8002344 <toggle_func+0x78>
				{
					button->B_State = 1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7d1b      	ldrb	r3, [r3, #20]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 10)
 8002324:	e00e      	b.n	8002344 <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7c9b      	ldrb	r3, [r3, #18]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <toggle_func+0x70>
				button->B_counter--;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7c9b      	ldrb	r3, [r3, #18]
 8002332:	3b01      	subs	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 800233a:	e004      	b.n	8002346 <toggle_func+0x7a>
				button->B_State = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	74da      	strb	r2, [r3, #19]
}
 8002342:	e000      	b.n	8002346 <toggle_func+0x7a>
			if(button->B_counter < 10)
 8002344:	bf00      	nop
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <macros1>:
void macros1(struct Button *button)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <macros1+0xc0>)
 800235a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <macros1+0xc0>)
 8002360:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	f001 fa0a 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <macros1+0xc0>)
 800236e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <macros1+0xc0>)
 8002374:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002378:	2200      	movs	r2, #0
 800237a:	4619      	mov	r1, r3
 800237c:	f001 fa00 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002380:	20c8      	movs	r0, #200	; 0xc8
 8002382:	f000 fbf5 	bl	8002b70 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <macros1+0xc0>)
 8002388:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <macros1+0xc0>)
 800238e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002392:	2200      	movs	r2, #0
 8002394:	4619      	mov	r1, r3
 8002396:	f001 f9f3 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <macros1+0xc0>)
 800239c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <macros1+0xc0>)
 80023a2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	f001 f9e9 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80023ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023b2:	f000 fbdd 	bl	8002b70 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <macros1+0xc0>)
 80023b8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <macros1+0xc0>)
 80023be:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	f001 f9db 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <macros1+0xc0>)
 80023cc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <macros1+0xc0>)
 80023d2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80023d6:	2201      	movs	r2, #1
 80023d8:	4619      	mov	r1, r3
 80023da:	f001 f9d1 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <macros1+0xc0>)
 80023e0:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <macros1+0xc0>)
 80023e6:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80023ea:	2201      	movs	r2, #1
 80023ec:	4619      	mov	r1, r3
 80023ee:	f001 f9c7 	bl	8003780 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <macros1+0xc0>)
 80023f4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <macros1+0xc0>)
 80023fa:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80023fe:	2201      	movs	r2, #1
 8002400:	4619      	mov	r1, r3
 8002402:	f001 f9bd 	bl	8003780 <HAL_GPIO_WritePin>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000848 	.word	0x20000848

08002414 <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
	uint16_t Limitation = 10000;
 8002420:	f242 7310 	movw	r3, #10000	; 0x2710
 8002424:	81fb      	strh	r3, [r7, #14]
	uint16_t temp = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	81bb      	strh	r3, [r7, #12]
	for(uint32_t j = 0; j < 10; j++)
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	e020      	b.n	8002472 <HoldMotor+0x5e>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68d8      	ldr	r0, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8a1b      	ldrh	r3, [r3, #16]
 8002438:	2200      	movs	r2, #0
 800243a:	4619      	mov	r1, r3
 800243c:	f001 f9a0 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8b1b      	ldrh	r3, [r3, #24]
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f8ec 	bl	8002626 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d8      	ldr	r0, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8a1b      	ldrh	r3, [r3, #16]
 8002456:	2201      	movs	r2, #1
 8002458:	4619      	mov	r1, r3
 800245a:	f001 f991 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8b1b      	ldrh	r3, [r3, #24]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8dd 	bl	8002626 <Delay>
	for(uint32_t j = 0; j < 10; j++)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3301      	adds	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d9db      	bls.n	8002430 <HoldMotor+0x1c>
	}
	while(Button->B_State == mode && Limitation)
 8002478:	e02d      	b.n	80024d6 <HoldMotor+0xc2>
	{
		Limitation--;
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	3b01      	subs	r3, #1
 800247e:	81fb      	strh	r3, [r7, #14]
		if(temp < ACCEL) temp++;
 8002480:	89bb      	ldrh	r3, [r7, #12]
 8002482:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002486:	d202      	bcs.n	800248e <HoldMotor+0x7a>
 8002488:	89bb      	ldrh	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68d8      	ldr	r0, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8a1b      	ldrh	r3, [r3, #16]
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	f001 f971 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8b1b      	ldrh	r3, [r3, #24]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	89bb      	ldrh	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f8ba 	bl	8002626 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68d8      	ldr	r0, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8a1b      	ldrh	r3, [r3, #16]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4619      	mov	r1, r3
 80024be:	f001 f95f 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8b1b      	ldrh	r3, [r3, #24]
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	89bb      	ldrh	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f8a8 	bl	8002626 <Delay>
	while(Button->B_State == mode && Limitation)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7cdb      	ldrb	r3, [r3, #19]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d102      	bne.n	80024e6 <HoldMotor+0xd2>
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1c9      	bne.n	800247a <HoldMotor+0x66>
	}
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 80024fa:	23c8      	movs	r3, #200	; 0xc8
 80024fc:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	f107 0208 	add.w	r2, r7, #8
 800250e:	4610      	mov	r0, r2
 8002510:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e020      	b.n	800255a <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68d8      	ldr	r0, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8a1b      	ldrh	r3, [r3, #16]
 8002520:	2200      	movs	r2, #0
 8002522:	4619      	mov	r1, r3
 8002524:	f001 f92c 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8b1b      	ldrh	r3, [r3, #24]
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f878 	bl	8002626 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68d8      	ldr	r0, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8a1b      	ldrh	r3, [r3, #16]
 800253e:	2201      	movs	r2, #1
 8002540:	4619      	mov	r1, r3
 8002542:	f001 f91d 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8b1b      	ldrh	r3, [r3, #24]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f869 	bl	8002626 <Delay>
	for(uint32_t j = 0; j < 20; j++)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3301      	adds	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b13      	cmp	r3, #19
 800255e:	d9db      	bls.n	8002518 <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e02d      	b.n	80025c2 <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 8002566:	8afb      	ldrh	r3, [r7, #22]
 8002568:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800256c:	d202      	bcs.n	8002574 <TimerMotor+0x86>
 800256e:	8afb      	ldrh	r3, [r7, #22]
 8002570:	3301      	adds	r3, #1
 8002572:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68d8      	ldr	r0, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8a1b      	ldrh	r3, [r3, #16]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	f001 f8fe 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8b1b      	ldrh	r3, [r3, #24]
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f847 	bl	8002626 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68d8      	ldr	r0, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8a1b      	ldrh	r3, [r3, #16]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4619      	mov	r1, r3
 80025a4:	f001 f8ec 	bl	8003780 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8b1b      	ldrh	r3, [r3, #24]
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	8afb      	ldrh	r3, [r7, #22]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f835 	bl	8002626 <Delay>
	for(uint32_t j = 0; j < steps; j++)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3cd      	bcc.n	8002566 <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
	*(steps) = PULL_STEPS;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f240 424c 	movw	r2, #1100	; 0x44c
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	*(steps) = STEPS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80025fc:	601a      	str	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <Delay>:

void Delay(uint32_t delay)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 800262e:	e000      	b.n	8002632 <Delay+0xc>
 8002630:	bf00      	nop
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <Delay+0xa>
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <Error_Handler+0x1c>)
 8002652:	f001 f895 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	4802      	ldr	r0, [pc, #8]	; (8002664 <Error_Handler+0x1c>)
 800265c:	f001 f890 	bl	8003780 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_MspInit+0x4c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_MspInit+0x4c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_MspInit+0x4c>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_MspInit+0x4c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_SD_MspInit+0xc0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d14a      	bne.n	8002770 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_SD_MspInit+0xc4>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_SD_MspInit+0xc4>)
 80026e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_SD_MspInit+0xc4>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_SD_MspInit+0xc4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_SD_MspInit+0xc4>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_SD_MspInit+0xc4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_SD_MspInit+0xc4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_SD_MspInit+0xc4>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_SD_MspInit+0xc4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800272e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002732:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002740:	230c      	movs	r3, #12
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	4619      	mov	r1, r3
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <HAL_SD_MspInit+0xc8>)
 800274c:	f000 fe66 	bl	800341c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002750:	2304      	movs	r3, #4
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002760:	230c      	movs	r3, #12
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <HAL_SD_MspInit+0xcc>)
 800276c:	f000 fe56 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40023800 	.word	0x40023800
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00

08002788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <HAL_SPI_MspInit+0x12c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d17f      	bne.n	80028aa <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a41      	ldr	r2, [pc, #260]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a33      	ldr	r2, [pc, #204]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_SPI_MspInit+0x130>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027fe:	2308      	movs	r3, #8
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800280e:	2305      	movs	r3, #5
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4828      	ldr	r0, [pc, #160]	; (80028bc <HAL_SPI_MspInit+0x134>)
 800281a:	f000 fdff 	bl	800341c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800281e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002830:	2305      	movs	r3, #5
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4821      	ldr	r0, [pc, #132]	; (80028c0 <HAL_SPI_MspInit+0x138>)
 800283c:	f000 fdee 	bl	800341c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002842:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_SPI_MspInit+0x140>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 800285a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800287e:	4811      	ldr	r0, [pc, #68]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002880:	f000 fac2 	bl	8002e08 <HAL_DMA_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800288a:	f7ff fedd 	bl	8002648 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002892:	649a      	str	r2, [r3, #72]	; 0x48
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_SPI_MspInit+0x13c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2024      	movs	r0, #36	; 0x24
 80028a0:	f000 fa77 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028a4:	2024      	movs	r0, #36	; 0x24
 80028a6:	f000 fa90 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40003800 	.word	0x40003800
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020400 	.word	0x40020400
 80028c4:	20000b60 	.word	0x20000b60
 80028c8:	40026070 	.word	0x40026070

080028cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_TIM_Base_MspInit+0x48>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d115      	bne.n	800290a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2037      	movs	r0, #55	; 0x37
 8002900:	f000 fa47 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002904:	2037      	movs	r0, #55	; 0x37
 8002906:	f000 fa60 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40001400 	.word	0x40001400
 8002918:	40023800 	.word	0x40023800

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <HardFault_Handler+0x4>

08002930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <MemManage_Handler+0x4>

08002936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <BusFault_Handler+0x4>

0800293c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <UsageFault_Handler+0x4>

08002942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002970:	f000 f8de 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <DMA1_Stream4_IRQHandler+0x10>)
 800297e:	f000 fb13 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000b60 	.word	0x20000b60

0800298c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <SPI2_IRQHandler+0x10>)
 8002992:	f002 f98f 	bl	8004cb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200007f0 	.word	0x200007f0

080029a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM7_IRQHandler+0x10>)
 80029a6:	f002 fc7b 	bl	80052a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000bc0 	.word	0x20000bc0

080029b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <_sbrk+0x50>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <_sbrk+0x16>
		heap_end = &end;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <_sbrk+0x50>)
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <_sbrk+0x54>)
 80029c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <_sbrk+0x50>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <_sbrk+0x50>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	466a      	mov	r2, sp
 80029da:	4293      	cmp	r3, r2
 80029dc:	d907      	bls.n	80029ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029de:	f003 fb47 	bl	8006070 <__errno>
 80029e2:	4602      	mov	r2, r0
 80029e4:	230c      	movs	r3, #12
 80029e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ec:	e006      	b.n	80029fc <_sbrk+0x48>
	}

	heap_end += incr;
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <_sbrk+0x50>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <_sbrk+0x50>)
 80029f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200007e4 	.word	0x200007e4
 8002a08:	20000c08 	.word	0x20000c08

08002a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <SystemInit+0x28>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <SystemInit+0x28>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SystemInit+0x28>)
 8002a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a26:	609a      	str	r2, [r3, #8]
#endif
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a3e:	e003      	b.n	8002a48 <LoopCopyDataInit>

08002a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a46:	3104      	adds	r1, #4

08002a48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a48:	480b      	ldr	r0, [pc, #44]	; (8002a78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a50:	d3f6      	bcc.n	8002a40 <CopyDataInit>
  ldr  r2, =_sbss
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a54:	e002      	b.n	8002a5c <LoopFillZerobss>

08002a56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a58:	f842 3b04 	str.w	r3, [r2], #4

08002a5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a60:	d3f9      	bcc.n	8002a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a62:	f7ff ffd3 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a66:	f003 fb09 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7fe fdc5 	bl	80015f8 <main>
  bx  lr    
 8002a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a74:	080087f0 	.word	0x080087f0
  ldr  r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a7c:	20000344 	.word	0x20000344
  ldr  r2, =_sbss
 8002a80:	20000344 	.word	0x20000344
  ldr  r3, = _ebss
 8002a84:	20000c08 	.word	0x20000c08

08002a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC_IRQHandler>
	...

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_Init+0x40>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_Init+0x40>)
 8002aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_Init+0x40>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f961 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f000 f808 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac0:	f7ff fdd2 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00

08002ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x54>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x58>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f97d 	bl	8002dee <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f000 f941 	bl	8002d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <HAL_InitTick+0x5c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000168 	.word	0x20000168
 8002b28:	20000170 	.word	0x20000170
 8002b2c:	2000016c 	.word	0x2000016c

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000170 	.word	0x20000170
 8002b54:	20000c00 	.word	0x20000c00

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000c00 	.word	0x20000c00

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_Delay+0x40>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000170 	.word	0x20000170

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d14:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <__NVIC_SystemReset+0x20>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d20:	4903      	ldr	r1, [pc, #12]	; (8002d30 <__NVIC_SystemReset+0x20>)
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_SystemReset+0x24>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <__NVIC_SystemReset+0x1c>
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	05fa0004 	.word	0x05fa0004

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff7a 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff15 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff2a 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff7a 	bl	8002ca8 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff49 	bl	8002c54 <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff1d 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002dea:	f7ff ff91 	bl	8002d10 <__NVIC_SystemReset>

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ff9e 	bl	8002d38 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fea0 	bl	8002b58 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e099      	b.n	8002f58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	e00f      	b.n	8002e66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e46:	f7ff fe87 	bl	8002b58 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d908      	bls.n	8002e66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e078      	b.n	8002f58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e8      	bne.n	8002e46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_DMA_Init+0x158>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d107      	bne.n	8002ed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0307 	bic.w	r3, r3, #7
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d117      	bne.n	8002f2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa0b 	bl	8003328 <DMA_CheckFifoParam>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f26:	2301      	movs	r3, #1
 8002f28:	e016      	b.n	8002f58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9c2 	bl	80032bc <DMA_CalcBaseAndBitshift>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	223f      	movs	r2, #63	; 0x3f
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	f010803f 	.word	0xf010803f

08002f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d004      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00c      	b.n	8002f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb4:	4b92      	ldr	r3, [pc, #584]	; (8003200 <HAL_DMA_IRQHandler+0x258>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_DMA_IRQHandler+0x25c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003000:	2208      	movs	r2, #8
 8003002:	409a      	lsls	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	2201      	movs	r2, #1
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	2210      	movs	r2, #16
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d043      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2210      	movs	r2, #16
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e01f      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e016      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	2220      	movs	r2, #32
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 808e 	beq.w	8003246 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8086 	beq.w	8003246 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2220      	movs	r2, #32
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b05      	cmp	r3, #5
 8003150:	d136      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_IRQHandler+0x1da>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	223f      	movs	r2, #63	; 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d07d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
        }
        return;
 80031be:	e078      	b.n	80032b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01c      	beq.n	8003208 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d030      	beq.n	8003246 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e02b      	b.n	8003246 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d027      	beq.n	8003246 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
 80031fe:	e022      	b.n	8003246 <HAL_DMA_IRQHandler+0x29e>
 8003200:	20000168 	.word	0x20000168
 8003204:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0210 	bic.w	r2, r2, #16
 8003224:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	2b00      	cmp	r3, #0
 800324c:	d032      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d022      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d307      	bcc.n	800328e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_DMA_IRQHandler+0x2ca>
 800328c:	e000      	b.n	8003290 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800328e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e000      	b.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032b2:	bf00      	nop
    }
  }
}
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop

080032bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b10      	subs	r3, #16
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <DMA_CalcBaseAndBitshift+0x64>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d909      	bls.n	80032fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58
 80032fc:	e007      	b.n	800330e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	aaaaaaab 	.word	0xaaaaaaab
 8003324:	08008578 	.word	0x08008578

08003328 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11f      	bne.n	8003382 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d855      	bhi.n	80033f4 <DMA_CheckFifoParam+0xcc>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <DMA_CheckFifoParam+0x28>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003361 	.word	0x08003361
 8003354:	08003373 	.word	0x08003373
 8003358:	08003361 	.word	0x08003361
 800335c:	080033f5 	.word	0x080033f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d045      	beq.n	80033f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e042      	b.n	80033f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800337a:	d13f      	bne.n	80033fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e03c      	b.n	80033fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d121      	bne.n	80033d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d836      	bhi.n	8003400 <DMA_CheckFifoParam+0xd8>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <DMA_CheckFifoParam+0x70>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033af 	.word	0x080033af
 80033a0:	080033a9 	.word	0x080033a9
 80033a4:	080033c1 	.word	0x080033c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e02f      	b.n	800340e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d024      	beq.n	8003404 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033be:	e021      	b.n	8003404 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c8:	d11e      	bne.n	8003408 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ce:	e01b      	b.n	8003408 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d902      	bls.n	80033dc <DMA_CheckFifoParam+0xb4>
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d003      	beq.n	80033e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033da:	e018      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e015      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00e      	beq.n	800340c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e00b      	b.n	800340c <DMA_CheckFifoParam+0xe4>
      break;
 80033f4:	bf00      	nop
 80033f6:	e00a      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 80033f8:	bf00      	nop
 80033fa:	e008      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 80033fc:	bf00      	nop
 80033fe:	e006      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 8003400:	bf00      	nop
 8003402:	e004      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;   
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 800340c:	bf00      	nop
    }
  } 
  
  return status; 
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e16b      	b.n	8003710 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 815a 	bne.w	800370a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d00b      	beq.n	8003476 <HAL_GPIO_Init+0x5a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800346a:	2b11      	cmp	r3, #17
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b12      	cmp	r3, #18
 8003474:	d130      	bne.n	80034d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0201 	and.w	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0xfc>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b12      	cmp	r3, #18
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80b4 	beq.w	800370a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_GPIO_Init+0x308>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a5e      	ldr	r2, [pc, #376]	; (8003724 <HAL_GPIO_Init+0x308>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <HAL_GPIO_Init+0x308>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_GPIO_Init+0x30c>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_GPIO_Init+0x310>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02b      	beq.n	8003642 <HAL_GPIO_Init+0x226>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_GPIO_Init+0x314>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x222>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x318>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x21e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_GPIO_Init+0x31c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x21a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x320>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x216>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_GPIO_Init+0x324>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x212>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <HAL_GPIO_Init+0x328>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x20e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x20a>
 8003622:	2307      	movs	r3, #7
 8003624:	e00e      	b.n	8003644 <HAL_GPIO_Init+0x228>
 8003626:	2308      	movs	r3, #8
 8003628:	e00c      	b.n	8003644 <HAL_GPIO_Init+0x228>
 800362a:	2306      	movs	r3, #6
 800362c:	e00a      	b.n	8003644 <HAL_GPIO_Init+0x228>
 800362e:	2305      	movs	r3, #5
 8003630:	e008      	b.n	8003644 <HAL_GPIO_Init+0x228>
 8003632:	2304      	movs	r3, #4
 8003634:	e006      	b.n	8003644 <HAL_GPIO_Init+0x228>
 8003636:	2303      	movs	r3, #3
 8003638:	e004      	b.n	8003644 <HAL_GPIO_Init+0x228>
 800363a:	2302      	movs	r3, #2
 800363c:	e002      	b.n	8003644 <HAL_GPIO_Init+0x228>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_GPIO_Init+0x228>
 8003642:	2300      	movs	r3, #0
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f002 0203 	and.w	r2, r2, #3
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	4093      	lsls	r3, r2
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003654:	4934      	ldr	r1, [pc, #208]	; (8003728 <HAL_GPIO_Init+0x30c>)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3302      	adds	r3, #2
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_GPIO_Init+0x330>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003686:	4a31      	ldr	r2, [pc, #196]	; (800374c <HAL_GPIO_Init+0x330>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800368c:	4b2f      	ldr	r3, [pc, #188]	; (800374c <HAL_GPIO_Init+0x330>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b0:	4a26      	ldr	r2, [pc, #152]	; (800374c <HAL_GPIO_Init+0x330>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_GPIO_Init+0x330>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_GPIO_Init+0x330>)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_GPIO_Init+0x330>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003704:	4a11      	ldr	r2, [pc, #68]	; (800374c <HAL_GPIO_Init+0x330>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3301      	adds	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	f67f ae90 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3724      	adds	r7, #36	; 0x24
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40013c00 	.word	0x40013c00

08003750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e001      	b.n	8003772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800379c:	e003      	b.n	80037a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	041a      	lsls	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e25b      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d075      	beq.n	80038be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d2:	4ba3      	ldr	r3, [pc, #652]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d00c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4ba0      	ldr	r3, [pc, #640]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d112      	bne.n	8003810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4b9d      	ldr	r3, [pc, #628]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f6:	d10b      	bne.n	8003810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	4b99      	ldr	r3, [pc, #612]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05b      	beq.n	80038bc <HAL_RCC_OscConfig+0x108>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d157      	bne.n	80038bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e236      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d106      	bne.n	8003828 <HAL_RCC_OscConfig+0x74>
 800381a:	4b91      	ldr	r3, [pc, #580]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a90      	ldr	r2, [pc, #576]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e01d      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x98>
 8003832:	4b8b      	ldr	r3, [pc, #556]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a8a      	ldr	r2, [pc, #552]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b88      	ldr	r3, [pc, #544]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a87      	ldr	r2, [pc, #540]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 800384c:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a83      	ldr	r2, [pc, #524]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a80      	ldr	r2, [pc, #512]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7ff f974 	bl	8002b58 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7ff f970 	bl	8002b58 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1fb      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0xc0>
 8003892:	e014      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7ff f960 	bl	8002b58 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389c:	f7ff f95c 	bl	8002b58 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1e7      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0xe8>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b62      	ldr	r3, [pc, #392]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d11c      	bne.n	800391c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e2:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d116      	bne.n	800391c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	4b5c      	ldr	r3, [pc, #368]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_RCC_OscConfig+0x152>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1bb      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003906:	4b56      	ldr	r3, [pc, #344]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4952      	ldr	r1, [pc, #328]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	e03a      	b.n	8003992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003924:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x2b0>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7ff f915 	bl	8002b58 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003932:	f7ff f911 	bl	8002b58 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e19c      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4940      	ldr	r1, [pc, #256]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]
 8003964:	e015      	b.n	8003992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x2b0>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7ff f8f4 	bl	8002b58 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003974:	f7ff f8f0 	bl	8002b58 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e17b      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d030      	beq.n	8003a00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x2b4>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7ff f8d4 	bl	8002b58 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b4:	f7ff f8d0 	bl	8002b58 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e15b      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x200>
 80039d2:	e015      	b.n	8003a00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_OscConfig+0x2b4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7ff f8bd 	bl	8002b58 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e2:	f7ff f8b9 	bl	8002b58 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e144      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a0 	beq.w	8003b4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a0e      	ldr	r2, [pc, #56]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_OscConfig+0x2b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d121      	bne.n	8003a8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCC_OscConfig+0x2b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_RCC_OscConfig+0x2b8>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7ff f87f 	bl	8002b58 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e011      	b.n	8003a82 <HAL_RCC_OscConfig+0x2ce>
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	42470000 	.word	0x42470000
 8003a68:	42470e80 	.word	0x42470e80
 8003a6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7ff f872 	bl	8002b58 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0fd      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b81      	ldr	r3, [pc, #516]	; (8003c88 <HAL_RCC_OscConfig+0x4d4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa2:	e01c      	b.n	8003ade <HAL_RCC_OscConfig+0x32a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x312>
 8003aac:	4b77      	ldr	r3, [pc, #476]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	4b74      	ldr	r3, [pc, #464]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a73      	ldr	r2, [pc, #460]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	e00b      	b.n	8003ade <HAL_RCC_OscConfig+0x32a>
 8003ac6:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a70      	ldr	r2, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a6d      	ldr	r2, [pc, #436]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d015      	beq.n	8003b12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7ff f837 	bl	8002b58 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7ff f833 	bl	8002b58 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0bc      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ee      	beq.n	8003aee <HAL_RCC_OscConfig+0x33a>
 8003b10:	e014      	b.n	8003b3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7ff f821 	bl	8002b58 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7ff f81d 	bl	8002b58 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0a6      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b30:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ee      	bne.n	8003b1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a51      	ldr	r2, [pc, #324]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8092 	beq.w	8003c7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d05c      	beq.n	8003c1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d141      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <HAL_RCC_OscConfig+0x4dc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fff1 	bl	8002b58 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe ffed 	bl	8002b58 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e078      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	019b      	lsls	r3, r3, #6
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	4933      	ldr	r1, [pc, #204]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4dc>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe ffc6 	bl	8002b58 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe ffc2 	bl	8002b58 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04d      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x41c>
 8003bee:	e045      	b.n	8003c7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x4dc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7fe ffaf 	bl	8002b58 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fe ffab 	bl	8002b58 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e036      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x44a>
 8003c1c:	e02e      	b.n	8003c7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e029      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCC_OscConfig+0x4d8>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d115      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d106      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	42470060 	.word	0x42470060

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0cc      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d90c      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b63      	ldr	r3, [pc, #396]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0b8      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce8:	4b59      	ldr	r3, [pc, #356]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a58      	ldr	r2, [pc, #352]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d00:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	494d      	ldr	r1, [pc, #308]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d044      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d52:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e067      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4934      	ldr	r1, [pc, #208]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fe fee8 	bl	8002b58 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fe fee4 	bl	8002b58 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db4:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d20c      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4916      	ldr	r1, [pc, #88]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1a:	f000 f821 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4601      	mov	r1, r0
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e32:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fe48 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08008568 	.word	0x08008568
 8003e58:	20000168 	.word	0x20000168
 8003e5c:	2000016c 	.word	0x2000016c

08003e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d007      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x32>
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d008      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x38>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 80b4 	bne.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e8e:	60bb      	str	r3, [r7, #8]
       break;
 8003e90:	e0b3      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e92:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e94:	60bb      	str	r3, [r7, #8]
      break;
 8003e96:	e0b0      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea2:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d04a      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	ea03 0501 	and.w	r5, r3, r1
 8003ec4:	ea04 0602 	and.w	r6, r4, r2
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4632      	mov	r2, r6
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	0154      	lsls	r4, r2, #5
 8003ed6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eda:	014b      	lsls	r3, r1, #5
 8003edc:	4619      	mov	r1, r3
 8003ede:	4622      	mov	r2, r4
 8003ee0:	1b49      	subs	r1, r1, r5
 8003ee2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	f04f 0400 	mov.w	r4, #0
 8003eee:	0194      	lsls	r4, r2, #6
 8003ef0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ef4:	018b      	lsls	r3, r1, #6
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	eb64 0402 	sbc.w	r4, r4, r2
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	00e2      	lsls	r2, r4, #3
 8003f06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f0a:	00d9      	lsls	r1, r3, #3
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4614      	mov	r4, r2
 8003f10:	195b      	adds	r3, r3, r5
 8003f12:	eb44 0406 	adc.w	r4, r4, r6
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	0262      	lsls	r2, r4, #9
 8003f20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f24:	0259      	lsls	r1, r3, #9
 8003f26:	460b      	mov	r3, r1
 8003f28:	4614      	mov	r4, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f04f 0400 	mov.w	r4, #0
 8003f34:	461a      	mov	r2, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	f7fc fe36 	bl	8000ba8 <__aeabi_uldivmod>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e049      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	f04f 0400 	mov.w	r4, #0
 8003f4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea03 0501 	and.w	r5, r3, r1
 8003f5a:	ea04 0602 	and.w	r6, r4, r2
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4632      	mov	r2, r6
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f04f 0400 	mov.w	r4, #0
 8003f6a:	0154      	lsls	r4, r2, #5
 8003f6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f70:	014b      	lsls	r3, r1, #5
 8003f72:	4619      	mov	r1, r3
 8003f74:	4622      	mov	r2, r4
 8003f76:	1b49      	subs	r1, r1, r5
 8003f78:	eb62 0206 	sbc.w	r2, r2, r6
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	f04f 0400 	mov.w	r4, #0
 8003f84:	0194      	lsls	r4, r2, #6
 8003f86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	1a5b      	subs	r3, r3, r1
 8003f8e:	eb64 0402 	sbc.w	r4, r4, r2
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fa0:	00d9      	lsls	r1, r3, #3
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	195b      	adds	r3, r3, r5
 8003fa8:	eb44 0406 	adc.w	r4, r4, r6
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	02a2      	lsls	r2, r4, #10
 8003fb6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fba:	0299      	lsls	r1, r3, #10
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f04f 0400 	mov.w	r4, #0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	f7fc fdeb 	bl	8000ba8 <__aeabi_uldivmod>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ff6:	60bb      	str	r3, [r7, #8]
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004004:	40023800 	.word	0x40023800
 8004008:	00f42400 	.word	0x00f42400
 800400c:	007a1200 	.word	0x007a1200

08004010 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e022      	b.n	8004068 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fe fb3f 	bl	80026b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f814 	bl	8004070 <HAL_SD_InitCard>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e00a      	b.n	8004068 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af04      	add	r7, sp, #16
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800408c:	2376      	movs	r3, #118	; 0x76
 800408e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681d      	ldr	r5, [r3, #0]
 8004094:	466c      	mov	r4, sp
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800409e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a8:	4628      	mov	r0, r5
 80040aa:	f001 fb59 	bl	8005760 <SDIO_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80040b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e031      	b.n	8004124 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_SD_InitCard+0xbc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fb80 	bl	80057d0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_SD_InitCard+0xbc>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb18 	bl	800470c <SD_PowerON>
 80040dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e013      	b.n	8004124 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fa37 	bl	8004570 <SD_InitCard>
 8004102:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bdb0      	pop	{r4, r5, r7, pc}
 800412c:	422580a0 	.word	0x422580a0

08004130 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413e:	0f9b      	lsrs	r3, r3, #30
 8004140:	b2da      	uxtb	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414a:	0e9b      	lsrs	r3, r3, #26
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	0e1b      	lsrs	r3, r3, #24
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	b2da      	uxtb	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	b2da      	uxtb	r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	b29a      	uxth	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ae:	0bdb      	lsrs	r3, r3, #15
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c0:	0b9b      	lsrs	r3, r3, #14
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e4:	0b1b      	lsrs	r3, r3, #12
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d163      	bne.n	80042c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004204:	009a      	lsls	r2, r3, #2
 8004206:	f640 73fc 	movw	r3, #4092	; 0xffc
 800420a:	4013      	ands	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004210:	0f92      	lsrs	r2, r2, #30
 8004212:	431a      	orrs	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421c:	0edb      	lsrs	r3, r3, #27
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	b2da      	uxtb	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422e:	0e1b      	lsrs	r3, r3, #24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	b2da      	uxtb	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004240:	0d5b      	lsrs	r3, r3, #21
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	b2da      	uxtb	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	0c9b      	lsrs	r3, r3, #18
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	0bdb      	lsrs	r3, r3, #15
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	b2da      	uxtb	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	7e1b      	ldrb	r3, [r3, #24]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	3302      	adds	r3, #2
 8004288:	2201      	movs	r2, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004292:	fb02 f203 	mul.w	r2, r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	7a1b      	ldrb	r3, [r3, #8]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	2201      	movs	r2, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80042b4:	0a52      	lsrs	r2, r2, #9
 80042b6:	fb02 f203 	mul.w	r2, r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60
 80042c6:	e031      	b.n	800432c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d11d      	bne.n	800430c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	3301      	adds	r3, #1
 80042ec:	029a      	lsls	r2, r3, #10
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004300:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	661a      	str	r2, [r3, #96]	; 0x60
 800430a:	e00f      	b.n	800432c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_SD_GetCardCSD+0x344>)
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e09d      	b.n	8004468 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004330:	0b9b      	lsrs	r3, r3, #14
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	09db      	lsrs	r3, r3, #7
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434a:	b2da      	uxtb	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800435a:	b2da      	uxtb	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	0fdb      	lsrs	r3, r3, #31
 8004366:	b2da      	uxtb	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	0f5b      	lsrs	r3, r3, #29
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	b2da      	uxtb	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	0e9b      	lsrs	r3, r3, #26
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	b2da      	uxtb	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	0d9b      	lsrs	r3, r3, #22
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	0d5b      	lsrs	r3, r3, #21
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	0bdb      	lsrs	r3, r3, #15
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	0b9b      	lsrs	r3, r3, #14
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	0b5b      	lsrs	r3, r3, #13
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	0b1b      	lsrs	r3, r3, #12
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	b2da      	uxtb	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	b2da      	uxtb	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004456:	b2da      	uxtb	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	004005ff 	.word	0x004005ff

08004478 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b08e      	sub	sp, #56	; 0x38
 800447c:	af04      	add	r7, sp, #16
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	2b03      	cmp	r3, #3
 8004490:	d02e      	beq.n	80044f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d106      	bne.n	80044a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
 80044a6:	e029      	b.n	80044fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ae:	d10a      	bne.n	80044c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f9b9 	bl	8004828 <SD_WideBus_Enable>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
 80044c4:	e01a      	b.n	80044fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9f6 	bl	80048be <SD_WideBus_Disable>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38
 80044e0:	e00c      	b.n	80044fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
 80044ee:	e005      	b.n	80044fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e024      	b.n	8004562 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681d      	ldr	r5, [r3, #0]
 800453e:	466c      	mov	r4, sp
 8004540:	f107 0318 	add.w	r3, r7, #24
 8004544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004552:	4628      	mov	r0, r5
 8004554:	f001 f904 	bl	8005760 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3728      	adds	r7, #40	; 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	bf00      	nop
 800456c:	004005ff 	.word	0x004005ff

08004570 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004570:	b5b0      	push	{r4, r5, r7, lr}
 8004572:	b094      	sub	sp, #80	; 0x50
 8004574:	af04      	add	r7, sp, #16
 8004576:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004578:	2301      	movs	r3, #1
 800457a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f001 f934 	bl	80057ee <SDIO_GetPowerState>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800458c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004590:	e0b7      	b.n	8004702 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	2b03      	cmp	r3, #3
 8004598:	d02f      	beq.n	80045fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fab3 	bl	8005b0a <SDMMC_CmdSendCID>
 80045a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80045ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ae:	e0a8      	b.n	8004702 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 f95e 	bl	8005878 <SDIO_GetResponse>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2104      	movs	r1, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f955 	bl	8005878 <SDIO_GetResponse>
 80045ce:	4602      	mov	r2, r0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2108      	movs	r1, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f94c 	bl	8005878 <SDIO_GetResponse>
 80045e0:	4602      	mov	r2, r0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	210c      	movs	r1, #12
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f943 	bl	8005878 <SDIO_GetResponse>
 80045f2:	4602      	mov	r2, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d00d      	beq.n	800461e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f107 020e 	add.w	r2, r7, #14
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fab9 	bl	8005b84 <SDMMC_CmdSetRelAdd>
 8004612:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <SD_InitCard+0xae>
    {
      return errorstate;
 800461a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461c:	e071      	b.n	8004702 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	2b03      	cmp	r3, #3
 8004624:	d036      	beq.n	8004694 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004626:	89fb      	ldrh	r3, [r7, #14]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f001 fa83 	bl	8005b46 <SDMMC_CmdSendCSD>
 8004640:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	e05a      	b.n	8004702 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f910 	bl	8005878 <SDIO_GetResponse>
 8004658:	4602      	mov	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2104      	movs	r1, #4
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f907 	bl	8005878 <SDIO_GetResponse>
 800466a:	4602      	mov	r2, r0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2108      	movs	r1, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f001 f8fe 	bl	8005878 <SDIO_GetResponse>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	210c      	movs	r1, #12
 8004688:	4618      	mov	r0, r3
 800468a:	f001 f8f5 	bl	8005878 <SDIO_GetResponse>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2104      	movs	r1, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f8ec 	bl	8005878 <SDIO_GetResponse>
 80046a0:	4603      	mov	r3, r0
 80046a2:	0d1a      	lsrs	r2, r3, #20
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fd3e 	bl	8004130 <HAL_SD_GetCardCSD>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046be:	e020      	b.n	8004702 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	f04f 0400 	mov.w	r4, #0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4623      	mov	r3, r4
 80046d2:	4608      	mov	r0, r1
 80046d4:	f001 f931 	bl	800593a <SDMMC_CmdSelDesel>
 80046d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	e00e      	b.n	8004702 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681d      	ldr	r5, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	466c      	mov	r4, sp
 80046ec:	f103 0210 	add.w	r2, r3, #16
 80046f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046f6:	3304      	adds	r3, #4
 80046f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046fa:	4628      	mov	r0, r5
 80046fc:	f001 f830 	bl	8005760 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3740      	adds	r7, #64	; 0x40
 8004706:	46bd      	mov	sp, r7
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800470c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f92b 	bl	8005980 <SDMMC_CmdGoIdleState>
 800472a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	e072      	b.n	800481c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f93e 	bl	80059bc <SDMMC_CmdOperCond>
 8004740:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f914 	bl	8005980 <SDMMC_CmdGoIdleState>
 8004758:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	e05b      	b.n	800481c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	2b01      	cmp	r3, #1
 8004770:	d137      	bne.n	80047e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f001 f93e 	bl	80059fa <SDMMC_CmdAppCommand>
 800477e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02d      	beq.n	80047e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800478a:	e047      	b.n	800481c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f931 	bl	80059fa <SDMMC_CmdAppCommand>
 8004798:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	e03b      	b.n	800481c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	491e      	ldr	r1, [pc, #120]	; (8004824 <SD_PowerON+0x118>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f947 	bl	8005a3e <SDMMC_CmdAppOperCommand>
 80047b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047bc:	e02e      	b.n	800481c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f857 	bl	8005878 <SDIO_GetResponse>
 80047ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	0fdb      	lsrs	r3, r3, #31
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <SD_PowerON+0xcc>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <SD_PowerON+0xce>
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]

    count++;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	3301      	adds	r3, #1
 80047e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d802      	bhi.n	80047f2 <SD_PowerON+0xe6>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0cc      	beq.n	800478c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d902      	bls.n	8004802 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80047fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004800:	e00c      	b.n	800481c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
 8004812:	e002      	b.n	800481a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	c1100000 	.word	0xc1100000

08004828 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f81a 	bl	8005878 <SDIO_GetResponse>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484e:	d102      	bne.n	8004856 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004854:	e02f      	b.n	80048b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004856:	f107 030c 	add.w	r3, r7, #12
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f879 	bl	8004954 <SD_FindSCR>
 8004862:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	e023      	b.n	80048b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01c      	beq.n	80048b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f001 f8b8 	bl	80059fa <SDMMC_CmdAppCommand>
 800488a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	e00f      	b.n	80048b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f8f1 	bl	8005a84 <SDMMC_CmdBusWidth>
 80048a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e003      	b.n	80048b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e001      	b.n	80048b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 ffcf 	bl	8005878 <SDIO_GetResponse>
 80048da:	4603      	mov	r3, r0
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e4:	d102      	bne.n	80048ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048ea:	e02f      	b.n	800494c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f82e 	bl	8004954 <SD_FindSCR>
 80048f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	e023      	b.n	800494c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01c      	beq.n	8004948 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f001 f86d 	bl	80059fa <SDMMC_CmdAppCommand>
 8004920:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e00f      	b.n	800494c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f8a6 	bl	8005a84 <SDMMC_CmdBusWidth>
 8004938:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e003      	b.n	800494c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
 8004946:	e001      	b.n	800494c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b08f      	sub	sp, #60	; 0x3c
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800495e:	f7fe f8fb 	bl	8002b58 <HAL_GetTick>
 8004962:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2108      	movs	r1, #8
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ffbb 	bl	80058f6 <SDMMC_CmdBlockLength>
 8004980:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	e0a9      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f001 f82e 	bl	80059fa <SDMMC_CmdAppCommand>
 800499e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	e09a      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80049b0:	2308      	movs	r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80049b4:	2330      	movs	r3, #48	; 0x30
 80049b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80049b8:	2302      	movs	r3, #2
 80049ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80049bc:	2300      	movs	r3, #0
 80049be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f107 0210 	add.w	r2, r7, #16
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 ff65 	bl	800589e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f875 	bl	8005ac8 <SDMMC_CmdSendSCR>
 80049de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d022      	beq.n	8004a2c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	e07a      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f107 0208 	add.w	r2, r7, #8
 8004a04:	18d4      	adds	r4, r2, r3
 8004a06:	4608      	mov	r0, r1
 8004a08:	f000 fed5 	bl	80057b6 <SDIO_ReadFIFO>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	6023      	str	r3, [r4, #0]
      index++;
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	3301      	adds	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a16:	f7fe f89f 	bl	8002b58 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d102      	bne.n	8004a2c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a2a:	e059      	b.n	8004ae0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a32:	f240 432a 	movw	r3, #1066	; 0x42a
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0d6      	beq.n	80049ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004a52:	2308      	movs	r3, #8
 8004a54:	e044      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e037      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2220      	movs	r2, #32
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004a86:	2320      	movs	r3, #32
 8004a88:	e02a      	b.n	8004ae0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	061a      	lsls	r2, r3, #24
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aa0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004aaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	601a      	str	r2, [r3, #0]
    scr++;
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	3304      	adds	r3, #4
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	061a      	lsls	r2, r3, #24
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ac8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ad2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0e1b      	lsrs	r3, r3, #24
 8004ad8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	373c      	adds	r7, #60	; 0x3c
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}

08004ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e056      	b.n	8004ba8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fd fe37 	bl	8002788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	ea42 0103 	orr.w	r1, r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	f003 0104 	and.w	r1, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_SPI_Transmit_IT+0x20>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e067      	b.n	8004ca0 <HAL_SPI_Transmit_IT+0xf0>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit_IT+0x34>
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004be8:	e055      	b.n	8004c96 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bfa:	e04c      	b.n	8004c96 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2203      	movs	r2, #3
 8004c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_SPI_Transmit_IT+0xfc>)
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
 8004c42:	e002      	b.n	8004c4a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_SPI_Transmit_IT+0x100>)
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d107      	bne.n	8004c64 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004c72:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d008      	beq.n	8004c94 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e000      	b.n	8004c96 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004c94:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	08004f4b 	.word	0x08004f4b
 8004cb0:	08004f05 	.word	0x08004f05

08004cb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10f      	bne.n	8004cf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
    return;
 8004cf6:	e0d8      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_SPI_IRQHandler+0x66>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	09db      	lsrs	r3, r3, #7
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
    return;
 8004d18:	e0c7      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_SPI_IRQHandler+0x8c>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80b5 	beq.w	8004eaa <HAL_SPI_IRQHandler+0x1f6>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80ae 	beq.w	8004eaa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d023      	beq.n	8004da2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d011      	beq.n	8004d8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0204 	orr.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	e00b      	b.n	8004da2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]
        return;
 8004da0:	e083      	b.n	8004eaa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f043 0208 	orr.w	r2, r3, #8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004df0:	2300      	movs	r3, #0
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d050      	beq.n	8004ea8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_SPI_IRQHandler+0x17e>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d034      	beq.n	8004e9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0203 	bic.w	r2, r2, #3
 8004e40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_SPI_IRQHandler+0x1fc>)
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f884 	bl	8002f64 <HAL_DMA_Abort_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d016      	beq.n	8004ea4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <HAL_SPI_IRQHandler+0x1fc>)
 8004e7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe f86e 	bl	8002f64 <HAL_DMA_Abort_IT>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e9a:	e003      	b.n	8004ea4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f813 	bl	8004ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ea4:	bf00      	nop
    return;
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
  }
}
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08004edd 	.word	0x08004edd

08004eb4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ffe6 	bl	8004ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8d3 	bl	80050e8 <SPI_CloseTx_ISR>
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	881a      	ldrh	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	1c9a      	adds	r2, r3, #2
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8b1 	bl	80050e8 <SPI_CloseTx_ISR>
  }
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9e:	e04c      	b.n	800503a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d048      	beq.n	800503a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fa8:	f7fd fdd6 	bl	8002b58 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d902      	bls.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d13d      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd6:	d111      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	d004      	beq.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d107      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005004:	d10f      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00f      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d1a3      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <SPI_EndRxTxTransaction+0x7c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <SPI_EndRxTxTransaction+0x80>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0d5b      	lsrs	r3, r3, #21
 800507c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d112      	bne.n	80050b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2200      	movs	r2, #0
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff77 	bl	8004f8e <SPI_WaitFlagStateUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00f      	b.n	80050d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3b01      	subs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b80      	cmp	r3, #128	; 0x80
 80050ce:	d0f2      	beq.n	80050b6 <SPI_EndRxTxTransaction+0x52>
 80050d0:	e000      	b.n	80050d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050d2:	bf00      	nop
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000168 	.word	0x20000168
 80050e4:	165e9f81 	.word	0x165e9f81

080050e8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <SPI_CloseTx_ISR+0xbc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <SPI_CloseTx_ISR+0xc0>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a5b      	lsrs	r3, r3, #9
 80050fc:	2264      	movs	r2, #100	; 0x64
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005104:	f7fd fd28 	bl	8002b58 <HAL_GetTick>
 8005108:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800511c:	e009      	b.n	8005132 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3b01      	subs	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0eb      	beq.n	800510a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005140:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	2164      	movs	r1, #100	; 0x64
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff ff8c 	bl	8005064 <SPI_EndRxTxTransaction>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fe9b 	bl	8004ec8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005192:	e002      	b.n	800519a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fe8d 	bl	8004eb4 <HAL_SPI_TxCpltCallback>
}
 800519a:	bf00      	nop
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000168 	.word	0x20000168
 80051a8:	057619f1 	.word	0x057619f1

080051ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01d      	b.n	80051fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd fb7a 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f000 f988 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b06      	cmp	r3, #6
 800522a:	d007      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	f241 1311 	movw	r3, #4369	; 0x1111
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_TIM_Base_Stop_IT+0x48>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	f240 4344 	movw	r3, #1092	; 0x444
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <HAL_TIM_Base_Stop_IT+0x48>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0202 	mvn.w	r2, #2
 80052cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8ee 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8e0 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8f1 	bl	80054d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0204 	mvn.w	r2, #4
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8c4 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8b6 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f8c7 	bl	80054d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b08      	cmp	r3, #8
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b08      	cmp	r3, #8
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0208 	mvn.w	r2, #8
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f89a 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f88c 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f89d 	bl	80054d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0210 	mvn.w	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2208      	movs	r2, #8
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f870 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f862 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f873 	bl	80054d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10e      	bne.n	8005424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d107      	bne.n	8005424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0201 	mvn.w	r2, #1
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc feca 	bl	80021b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d10e      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d107      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f97e 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f838 	bl	80054ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b20      	cmp	r3, #32
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b20      	cmp	r3, #32
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0220 	mvn.w	r2, #32
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f948 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d02b      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d027      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d023      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01b      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d017      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <TIM_Base_SetConfig+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00f      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a26      	ldr	r2, [pc, #152]	; (8005630 <TIM_Base_SetConfig+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <TIM_Base_SetConfig+0x134>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <TIM_Base_SetConfig+0x138>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a23      	ldr	r2, [pc, #140]	; (800563c <TIM_Base_SetConfig+0x13c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <TIM_Base_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0c      	ldr	r2, [pc, #48]	; (8005624 <TIM_Base_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800
 8005634:	40001800 	.word	0x40001800
 8005638:	40001c00 	.word	0x40001c00
 800563c:	40002000 	.word	0x40002000

08005640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005654:	2302      	movs	r3, #2
 8005656:	e05a      	b.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a21      	ldr	r2, [pc, #132]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d01d      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a15      	ldr	r2, [pc, #84]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10c      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40010400 	.word	0x40010400
 8005730:	40014000 	.word	0x40014000
 8005734:	40001800 	.word	0x40001800

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005760:	b084      	sub	sp, #16
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	f107 001c 	add.w	r0, r7, #28
 800576e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005776:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005778:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800577a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800577e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005782:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005786:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800578a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800579a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	b004      	add	sp, #16
 80057b4:	4770      	bx	lr

080057b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2203      	movs	r2, #3
 80057dc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80057de:	2002      	movs	r0, #2
 80057e0:	f7fd f9c6 	bl	8002b70 <HAL_Delay>
  
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0303 	and.w	r3, r3, #3
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005828:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800582e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005834:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005844:	f023 030f 	bic.w	r3, r3, #15
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	b2db      	uxtb	r3, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3314      	adds	r3, #20
 8005886:	461a      	mov	r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4413      	add	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
}  
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80058ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80058d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0

}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b088      	sub	sp, #32
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005904:	2310      	movs	r3, #16
 8005906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff74 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	2110      	movs	r1, #16
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f975 	bl	8005c18 <SDMMC_GetCmdResp1>
 800592e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005930:	69fb      	ldr	r3, [r7, #28]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	; 0x28
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800594a:	2307      	movs	r3, #7
 800594c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800594e:	2340      	movs	r3, #64	; 0x40
 8005950:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800595c:	f107 0310 	add.w	r3, r7, #16
 8005960:	4619      	mov	r1, r3
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff ff51 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	2107      	movs	r1, #7
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f952 	bl	8005c18 <SDMMC_GetCmdResp1>
 8005974:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005978:	4618      	mov	r0, r3
 800597a:	3728      	adds	r7, #40	; 0x28
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ff30 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f90c 	bl	8005bc8 <SDMMC_GetCmdError>
 80059b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059b2:	69fb      	ldr	r3, [r7, #28]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80059c4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80059c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80059ca:	2308      	movs	r3, #8
 80059cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059dc:	f107 0308 	add.w	r3, r7, #8
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ff11 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 faf5 	bl	8005fd8 <SDMMC_GetCmdResp7>
 80059ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059f0:	69fb      	ldr	r3, [r7, #28]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005a08:	2337      	movs	r3, #55	; 0x37
 8005a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a1a:	f107 0308 	add.w	r3, r7, #8
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fef2 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2a:	2137      	movs	r1, #55	; 0x37
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f8f3 	bl	8005c18 <SDMMC_GetCmdResp1>
 8005a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a34:	69fb      	ldr	r3, [r7, #28]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b088      	sub	sp, #32
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005a54:	2329      	movs	r3, #41	; 0x29
 8005a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a66:	f107 0308 	add.w	r3, r7, #8
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fecc 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa02 	bl	8005e7c <SDMMC_GetCmdResp3>
 8005a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005a92:	2306      	movs	r3, #6
 8005a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fead 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab4:	2106      	movs	r1, #6
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8ae 	bl	8005c18 <SDMMC_GetCmdResp1>
 8005abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005abe:	69fb      	ldr	r3, [r7, #28]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005ad4:	2333      	movs	r3, #51	; 0x33
 8005ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad8:	2340      	movs	r3, #64	; 0x40
 8005ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ae6:	f107 0308 	add.w	r3, r7, #8
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fe8c 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	2133      	movs	r1, #51	; 0x33
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f88d 	bl	8005c18 <SDMMC_GetCmdResp1>
 8005afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b00:	69fb      	ldr	r3, [r7, #28]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005b16:	2302      	movs	r3, #2
 8005b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005b1a:	23c0      	movs	r3, #192	; 0xc0
 8005b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fe6b 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f95b 	bl	8005df0 <SDMMC_GetCmdResp2>
 8005b3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005b54:	2309      	movs	r3, #9
 8005b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005b58:	23c0      	movs	r3, #192	; 0xc0
 8005b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fe4c 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f93c 	bl	8005df0 <SDMMC_GetCmdResp2>
 8005b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b92:	2303      	movs	r3, #3
 8005b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b96:	2340      	movs	r3, #64	; 0x40
 8005b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe2d 	bl	800580a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	2103      	movs	r1, #3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f99b 	bl	8005ef0 <SDMMC_GetCmdResp6>
 8005bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005bc8:	b490      	push	{r4, r7}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <SDMMC_GetCmdError+0x48>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <SDMMC_GetCmdError+0x4c>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	0a5b      	lsrs	r3, r3, #9
 8005bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005be4:	4623      	mov	r3, r4
 8005be6:	1e5c      	subs	r4, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bf0:	e009      	b.n	8005c06 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f2      	beq.n	8005be4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	22c5      	movs	r2, #197	; 0xc5
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc90      	pop	{r4, r7}
 8005c0e:	4770      	bx	lr
 8005c10:	20000168 	.word	0x20000168
 8005c14:	10624dd3 	.word	0x10624dd3

08005c18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c26:	4b6f      	ldr	r3, [pc, #444]	; (8005de4 <SDMMC_GetCmdResp1+0x1cc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a6f      	ldr	r2, [pc, #444]	; (8005de8 <SDMMC_GetCmdResp1+0x1d0>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	0a5b      	lsrs	r3, r3, #9
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c38:	4623      	mov	r3, r4
 8005c3a:	1e5c      	subs	r4, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c44:	e0c9      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <SDMMC_GetCmdResp1+0x20>
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1eb      	bne.n	8005c38 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c72:	2304      	movs	r3, #4
 8005c74:	e0b1      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0a6      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	22c5      	movs	r2, #197	; 0xc5
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff fde3 	bl	800585e <SDIO_GetCommandResponse>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d001      	beq.n	8005ca6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e099      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff fde5 	bl	8005878 <SDIO_GetResponse>
 8005cae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4b4e      	ldr	r3, [pc, #312]	; (8005dec <SDMMC_GetCmdResp1+0x1d4>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e08d      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da02      	bge.n	8005cca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc8:	e087      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	e080      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	e079      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf4:	e071      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d04:	e069      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d14:	e061      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d24:	e059      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d34:	e051      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d44:	e049      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d54:	e041      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d64:	e039      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d74:	e031      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d84:	e029      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d94:	e021      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005da4:	e019      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005db4:	e011      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005dc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005dc4:	e009      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005dd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005dd4:	e001      	b.n	8005dda <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000168 	.word	0x20000168
 8005de8:	10624dd3 	.word	0x10624dd3
 8005dec:	fdffe008 	.word	0xfdffe008

08005df0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005df0:	b490      	push	{r4, r7}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005df8:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <SDMMC_GetCmdResp2+0x84>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <SDMMC_GetCmdResp2+0x88>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0a5b      	lsrs	r3, r3, #9
 8005e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	1e5c      	subs	r4, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e18:	e026      	b.n	8005e68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <SDMMC_GetCmdResp2+0x1c>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1eb      	bne.n	8005e0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2204      	movs	r2, #4
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e46:	2304      	movs	r3, #4
 8005e48:	e00e      	b.n	8005e68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e003      	b.n	8005e68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	22c5      	movs	r2, #197	; 0xc5
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc90      	pop	{r4, r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000168 	.word	0x20000168
 8005e78:	10624dd3 	.word	0x10624dd3

08005e7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005e7c:	b490      	push	{r4, r7}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e84:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <SDMMC_GetCmdResp3+0x6c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <SDMMC_GetCmdResp3+0x70>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	0a5b      	lsrs	r3, r3, #9
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e98:	4623      	mov	r3, r4
 8005e9a:	1e5c      	subs	r4, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ea4:	e01b      	b.n	8005ede <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <SDMMC_GetCmdResp3+0x1c>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1eb      	bne.n	8005e98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	e003      	b.n	8005ede <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	22c5      	movs	r2, #197	; 0xc5
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc90      	pop	{r4, r7}
 8005ee6:	4770      	bx	lr
 8005ee8:	20000168 	.word	0x20000168
 8005eec:	10624dd3 	.word	0x10624dd3

08005ef0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005efe:	4b34      	ldr	r3, [pc, #208]	; (8005fd0 <SDMMC_GetCmdResp6+0xe0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a34      	ldr	r2, [pc, #208]	; (8005fd4 <SDMMC_GetCmdResp6+0xe4>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	0a5b      	lsrs	r3, r3, #9
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f12:	4623      	mov	r3, r4
 8005f14:	1e5c      	subs	r4, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f1e:	e052      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <SDMMC_GetCmdResp6+0x22>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1eb      	bne.n	8005f12 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	e03a      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e02f      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fc79 	bl	800585e <SDIO_GetCommandResponse>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d001      	beq.n	8005f7a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e025      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	22c5      	movs	r2, #197	; 0xc5
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005f80:	2100      	movs	r1, #0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fc78 	bl	8005878 <SDIO_GetResponse>
 8005f88:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e011      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fb0:	e009      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc0:	e001      	b.n	8005fc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000168 	.word	0x20000168
 8005fd4:	10624dd3 	.word	0x10624dd3

08005fd8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005fd8:	b490      	push	{r4, r7}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <SDMMC_GetCmdResp7+0x90>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a21      	ldr	r2, [pc, #132]	; (800606c <SDMMC_GetCmdResp7+0x94>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0a5b      	lsrs	r3, r3, #9
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	1e5c      	subs	r4, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006000:	e02c      	b.n	800605c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <SDMMC_GetCmdResp7+0x1c>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1eb      	bne.n	8005ff4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2204      	movs	r2, #4
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800602e:	2304      	movs	r3, #4
 8006030:	e014      	b.n	800605c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006044:	2301      	movs	r3, #1
 8006046:	e009      	b.n	800605c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
  
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bc90      	pop	{r4, r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000168 	.word	0x20000168
 800606c:	10624dd3 	.word	0x10624dd3

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000174 	.word	0x20000174

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4e0d      	ldr	r6, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1ba4      	subs	r4, r4, r6
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2500      	movs	r5, #0
 8006088:	42a5      	cmp	r5, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4e0b      	ldr	r6, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f002 f85e 	bl	8008150 <_init>
 8006094:	1ba4      	subs	r4, r4, r6
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2500      	movs	r5, #0
 800609a:	42a5      	cmp	r5, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060a4:	4798      	blx	r3
 80060a6:	3501      	adds	r5, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060ae:	4798      	blx	r3
 80060b0:	3501      	adds	r5, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	080087e8 	.word	0x080087e8
 80060b8:	080087e8 	.word	0x080087e8
 80060bc:	080087e8 	.word	0x080087e8
 80060c0:	080087ec 	.word	0x080087ec

080060c4 <memset>:
 80060c4:	4402      	add	r2, r0
 80060c6:	4603      	mov	r3, r0
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d100      	bne.n	80060ce <memset+0xa>
 80060cc:	4770      	bx	lr
 80060ce:	f803 1b01 	strb.w	r1, [r3], #1
 80060d2:	e7f9      	b.n	80060c8 <memset+0x4>

080060d4 <__cvt>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	ec55 4b10 	vmov	r4, r5, d0
 80060dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80060de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	460e      	mov	r6, r1
 80060e6:	4691      	mov	r9, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	bfb8      	it	lt
 80060ec:	4622      	movlt	r2, r4
 80060ee:	462b      	mov	r3, r5
 80060f0:	f027 0720 	bic.w	r7, r7, #32
 80060f4:	bfbb      	ittet	lt
 80060f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060fa:	461d      	movlt	r5, r3
 80060fc:	2300      	movge	r3, #0
 80060fe:	232d      	movlt	r3, #45	; 0x2d
 8006100:	bfb8      	it	lt
 8006102:	4614      	movlt	r4, r2
 8006104:	2f46      	cmp	r7, #70	; 0x46
 8006106:	700b      	strb	r3, [r1, #0]
 8006108:	d004      	beq.n	8006114 <__cvt+0x40>
 800610a:	2f45      	cmp	r7, #69	; 0x45
 800610c:	d100      	bne.n	8006110 <__cvt+0x3c>
 800610e:	3601      	adds	r6, #1
 8006110:	2102      	movs	r1, #2
 8006112:	e000      	b.n	8006116 <__cvt+0x42>
 8006114:	2103      	movs	r1, #3
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	ab02      	add	r3, sp, #8
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	4632      	mov	r2, r6
 8006120:	4653      	mov	r3, sl
 8006122:	ec45 4b10 	vmov	d0, r4, r5
 8006126:	f000 fcdf 	bl	8006ae8 <_dtoa_r>
 800612a:	2f47      	cmp	r7, #71	; 0x47
 800612c:	4680      	mov	r8, r0
 800612e:	d102      	bne.n	8006136 <__cvt+0x62>
 8006130:	f019 0f01 	tst.w	r9, #1
 8006134:	d026      	beq.n	8006184 <__cvt+0xb0>
 8006136:	2f46      	cmp	r7, #70	; 0x46
 8006138:	eb08 0906 	add.w	r9, r8, r6
 800613c:	d111      	bne.n	8006162 <__cvt+0x8e>
 800613e:	f898 3000 	ldrb.w	r3, [r8]
 8006142:	2b30      	cmp	r3, #48	; 0x30
 8006144:	d10a      	bne.n	800615c <__cvt+0x88>
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	4620      	mov	r0, r4
 800614c:	4629      	mov	r1, r5
 800614e:	f7fa fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006152:	b918      	cbnz	r0, 800615c <__cvt+0x88>
 8006154:	f1c6 0601 	rsb	r6, r6, #1
 8006158:	f8ca 6000 	str.w	r6, [sl]
 800615c:	f8da 3000 	ldr.w	r3, [sl]
 8006160:	4499      	add	r9, r3
 8006162:	2200      	movs	r2, #0
 8006164:	2300      	movs	r3, #0
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f7fa fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 800616e:	b938      	cbnz	r0, 8006180 <__cvt+0xac>
 8006170:	2230      	movs	r2, #48	; 0x30
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	454b      	cmp	r3, r9
 8006176:	d205      	bcs.n	8006184 <__cvt+0xb0>
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	9103      	str	r1, [sp, #12]
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e7f8      	b.n	8006172 <__cvt+0x9e>
 8006180:	f8cd 900c 	str.w	r9, [sp, #12]
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006188:	eba3 0308 	sub.w	r3, r3, r8
 800618c:	4640      	mov	r0, r8
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	b004      	add	sp, #16
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006196 <__exponent>:
 8006196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006198:	2900      	cmp	r1, #0
 800619a:	4604      	mov	r4, r0
 800619c:	bfba      	itte	lt
 800619e:	4249      	neglt	r1, r1
 80061a0:	232d      	movlt	r3, #45	; 0x2d
 80061a2:	232b      	movge	r3, #43	; 0x2b
 80061a4:	2909      	cmp	r1, #9
 80061a6:	f804 2b02 	strb.w	r2, [r4], #2
 80061aa:	7043      	strb	r3, [r0, #1]
 80061ac:	dd20      	ble.n	80061f0 <__exponent+0x5a>
 80061ae:	f10d 0307 	add.w	r3, sp, #7
 80061b2:	461f      	mov	r7, r3
 80061b4:	260a      	movs	r6, #10
 80061b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80061ba:	fb06 1115 	mls	r1, r6, r5, r1
 80061be:	3130      	adds	r1, #48	; 0x30
 80061c0:	2d09      	cmp	r5, #9
 80061c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061c6:	f103 32ff 	add.w	r2, r3, #4294967295
 80061ca:	4629      	mov	r1, r5
 80061cc:	dc09      	bgt.n	80061e2 <__exponent+0x4c>
 80061ce:	3130      	adds	r1, #48	; 0x30
 80061d0:	3b02      	subs	r3, #2
 80061d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061d6:	42bb      	cmp	r3, r7
 80061d8:	4622      	mov	r2, r4
 80061da:	d304      	bcc.n	80061e6 <__exponent+0x50>
 80061dc:	1a10      	subs	r0, r2, r0
 80061de:	b003      	add	sp, #12
 80061e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e2:	4613      	mov	r3, r2
 80061e4:	e7e7      	b.n	80061b6 <__exponent+0x20>
 80061e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ea:	f804 2b01 	strb.w	r2, [r4], #1
 80061ee:	e7f2      	b.n	80061d6 <__exponent+0x40>
 80061f0:	2330      	movs	r3, #48	; 0x30
 80061f2:	4419      	add	r1, r3
 80061f4:	7083      	strb	r3, [r0, #2]
 80061f6:	1d02      	adds	r2, r0, #4
 80061f8:	70c1      	strb	r1, [r0, #3]
 80061fa:	e7ef      	b.n	80061dc <__exponent+0x46>

080061fc <_printf_float>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	b08d      	sub	sp, #52	; 0x34
 8006202:	460c      	mov	r4, r1
 8006204:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006208:	4616      	mov	r6, r2
 800620a:	461f      	mov	r7, r3
 800620c:	4605      	mov	r5, r0
 800620e:	f001 fa23 	bl	8007658 <_localeconv_r>
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	4618      	mov	r0, r3
 8006218:	f7f9 ffda 	bl	80001d0 <strlen>
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	f8d8 3000 	ldr.w	r3, [r8]
 8006224:	9005      	str	r0, [sp, #20]
 8006226:	3307      	adds	r3, #7
 8006228:	f023 0307 	bic.w	r3, r3, #7
 800622c:	f103 0208 	add.w	r2, r3, #8
 8006230:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006234:	f8d4 b000 	ldr.w	fp, [r4]
 8006238:	f8c8 2000 	str.w	r2, [r8]
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006244:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006248:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	4ba7      	ldr	r3, [pc, #668]	; (80064f4 <_printf_float+0x2f8>)
 8006258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800625c:	f7fa fc66 	bl	8000b2c <__aeabi_dcmpun>
 8006260:	bb70      	cbnz	r0, 80062c0 <_printf_float+0xc4>
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	4ba3      	ldr	r3, [pc, #652]	; (80064f4 <_printf_float+0x2f8>)
 8006268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800626c:	f7fa fc40 	bl	8000af0 <__aeabi_dcmple>
 8006270:	bb30      	cbnz	r0, 80062c0 <_printf_float+0xc4>
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7fa fc2f 	bl	8000adc <__aeabi_dcmplt>
 800627e:	b110      	cbz	r0, 8006286 <_printf_float+0x8a>
 8006280:	232d      	movs	r3, #45	; 0x2d
 8006282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006286:	4a9c      	ldr	r2, [pc, #624]	; (80064f8 <_printf_float+0x2fc>)
 8006288:	4b9c      	ldr	r3, [pc, #624]	; (80064fc <_printf_float+0x300>)
 800628a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800628e:	bf8c      	ite	hi
 8006290:	4690      	movhi	r8, r2
 8006292:	4698      	movls	r8, r3
 8006294:	2303      	movs	r3, #3
 8006296:	f02b 0204 	bic.w	r2, fp, #4
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	f04f 0900 	mov.w	r9, #0
 80062a2:	9700      	str	r7, [sp, #0]
 80062a4:	4633      	mov	r3, r6
 80062a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 f9e6 	bl	800667c <_printf_common>
 80062b0:	3001      	adds	r0, #1
 80062b2:	f040 808d 	bne.w	80063d0 <_printf_float+0x1d4>
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	b00d      	add	sp, #52	; 0x34
 80062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fc30 	bl	8000b2c <__aeabi_dcmpun>
 80062cc:	b110      	cbz	r0, 80062d4 <_printf_float+0xd8>
 80062ce:	4a8c      	ldr	r2, [pc, #560]	; (8006500 <_printf_float+0x304>)
 80062d0:	4b8c      	ldr	r3, [pc, #560]	; (8006504 <_printf_float+0x308>)
 80062d2:	e7da      	b.n	800628a <_printf_float+0x8e>
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	1c4b      	adds	r3, r1, #1
 80062d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80062dc:	a80a      	add	r0, sp, #40	; 0x28
 80062de:	d13e      	bne.n	800635e <_printf_float+0x162>
 80062e0:	2306      	movs	r3, #6
 80062e2:	6063      	str	r3, [r4, #4]
 80062e4:	2300      	movs	r3, #0
 80062e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80062ea:	ab09      	add	r3, sp, #36	; 0x24
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	ec49 8b10 	vmov	d0, r8, r9
 80062f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062f6:	6022      	str	r2, [r4, #0]
 80062f8:	f8cd a004 	str.w	sl, [sp, #4]
 80062fc:	6861      	ldr	r1, [r4, #4]
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fee8 	bl	80060d4 <__cvt>
 8006304:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006308:	2b47      	cmp	r3, #71	; 0x47
 800630a:	4680      	mov	r8, r0
 800630c:	d109      	bne.n	8006322 <_printf_float+0x126>
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	1cd8      	adds	r0, r3, #3
 8006312:	db02      	blt.n	800631a <_printf_float+0x11e>
 8006314:	6862      	ldr	r2, [r4, #4]
 8006316:	4293      	cmp	r3, r2
 8006318:	dd47      	ble.n	80063aa <_printf_float+0x1ae>
 800631a:	f1aa 0a02 	sub.w	sl, sl, #2
 800631e:	fa5f fa8a 	uxtb.w	sl, sl
 8006322:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006326:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006328:	d824      	bhi.n	8006374 <_printf_float+0x178>
 800632a:	3901      	subs	r1, #1
 800632c:	4652      	mov	r2, sl
 800632e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006332:	9109      	str	r1, [sp, #36]	; 0x24
 8006334:	f7ff ff2f 	bl	8006196 <__exponent>
 8006338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633a:	1813      	adds	r3, r2, r0
 800633c:	2a01      	cmp	r2, #1
 800633e:	4681      	mov	r9, r0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	dc02      	bgt.n	800634a <_printf_float+0x14e>
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	07d1      	lsls	r1, r2, #31
 8006348:	d501      	bpl.n	800634e <_printf_float+0x152>
 800634a:	3301      	adds	r3, #1
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0a5      	beq.n	80062a2 <_printf_float+0xa6>
 8006356:	232d      	movs	r3, #45	; 0x2d
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635c:	e7a1      	b.n	80062a2 <_printf_float+0xa6>
 800635e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006362:	f000 8177 	beq.w	8006654 <_printf_float+0x458>
 8006366:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800636a:	d1bb      	bne.n	80062e4 <_printf_float+0xe8>
 800636c:	2900      	cmp	r1, #0
 800636e:	d1b9      	bne.n	80062e4 <_printf_float+0xe8>
 8006370:	2301      	movs	r3, #1
 8006372:	e7b6      	b.n	80062e2 <_printf_float+0xe6>
 8006374:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006378:	d119      	bne.n	80063ae <_printf_float+0x1b2>
 800637a:	2900      	cmp	r1, #0
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	dd0c      	ble.n	800639a <_printf_float+0x19e>
 8006380:	6121      	str	r1, [r4, #16]
 8006382:	b913      	cbnz	r3, 800638a <_printf_float+0x18e>
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	07d2      	lsls	r2, r2, #31
 8006388:	d502      	bpl.n	8006390 <_printf_float+0x194>
 800638a:	3301      	adds	r3, #1
 800638c:	440b      	add	r3, r1
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006392:	65a3      	str	r3, [r4, #88]	; 0x58
 8006394:	f04f 0900 	mov.w	r9, #0
 8006398:	e7d9      	b.n	800634e <_printf_float+0x152>
 800639a:	b913      	cbnz	r3, 80063a2 <_printf_float+0x1a6>
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	07d0      	lsls	r0, r2, #31
 80063a0:	d501      	bpl.n	80063a6 <_printf_float+0x1aa>
 80063a2:	3302      	adds	r3, #2
 80063a4:	e7f3      	b.n	800638e <_printf_float+0x192>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7f1      	b.n	800638e <_printf_float+0x192>
 80063aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80063ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063b2:	4293      	cmp	r3, r2
 80063b4:	db05      	blt.n	80063c2 <_printf_float+0x1c6>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	07d1      	lsls	r1, r2, #31
 80063bc:	d5e8      	bpl.n	8006390 <_printf_float+0x194>
 80063be:	3301      	adds	r3, #1
 80063c0:	e7e5      	b.n	800638e <_printf_float+0x192>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bfd4      	ite	le
 80063c6:	f1c3 0302 	rsble	r3, r3, #2
 80063ca:	2301      	movgt	r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	e7de      	b.n	800638e <_printf_float+0x192>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	055a      	lsls	r2, r3, #21
 80063d4:	d407      	bmi.n	80063e6 <_printf_float+0x1ea>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	4642      	mov	r2, r8
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	d12b      	bne.n	800643c <_printf_float+0x240>
 80063e4:	e767      	b.n	80062b6 <_printf_float+0xba>
 80063e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80063ea:	f240 80dc 	bls.w	80065a6 <_printf_float+0x3aa>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063f6:	f7fa fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d033      	beq.n	8006466 <_printf_float+0x26a>
 80063fe:	2301      	movs	r3, #1
 8006400:	4a41      	ldr	r2, [pc, #260]	; (8006508 <_printf_float+0x30c>)
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f af54 	beq.w	80062b6 <_printf_float+0xba>
 800640e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006412:	429a      	cmp	r2, r3
 8006414:	db02      	blt.n	800641c <_printf_float+0x220>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	07d8      	lsls	r0, r3, #31
 800641a:	d50f      	bpl.n	800643c <_printf_float+0x240>
 800641c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f af45 	beq.w	80062b6 <_printf_float+0xba>
 800642c:	f04f 0800 	mov.w	r8, #0
 8006430:	f104 091a 	add.w	r9, r4, #26
 8006434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	4543      	cmp	r3, r8
 800643a:	dc09      	bgt.n	8006450 <_printf_float+0x254>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	079b      	lsls	r3, r3, #30
 8006440:	f100 8103 	bmi.w	800664a <_printf_float+0x44e>
 8006444:	68e0      	ldr	r0, [r4, #12]
 8006446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006448:	4298      	cmp	r0, r3
 800644a:	bfb8      	it	lt
 800644c:	4618      	movlt	r0, r3
 800644e:	e734      	b.n	80062ba <_printf_float+0xbe>
 8006450:	2301      	movs	r3, #1
 8006452:	464a      	mov	r2, r9
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af2b 	beq.w	80062b6 <_printf_float+0xba>
 8006460:	f108 0801 	add.w	r8, r8, #1
 8006464:	e7e6      	b.n	8006434 <_printf_float+0x238>
 8006466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	dc2b      	bgt.n	80064c4 <_printf_float+0x2c8>
 800646c:	2301      	movs	r3, #1
 800646e:	4a26      	ldr	r2, [pc, #152]	; (8006508 <_printf_float+0x30c>)
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f af1d 	beq.w	80062b6 <_printf_float+0xba>
 800647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647e:	b923      	cbnz	r3, 800648a <_printf_float+0x28e>
 8006480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006482:	b913      	cbnz	r3, 800648a <_printf_float+0x28e>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	07d9      	lsls	r1, r3, #31
 8006488:	d5d8      	bpl.n	800643c <_printf_float+0x240>
 800648a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f af0e 	beq.w	80062b6 <_printf_float+0xba>
 800649a:	f04f 0900 	mov.w	r9, #0
 800649e:	f104 0a1a 	add.w	sl, r4, #26
 80064a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a4:	425b      	negs	r3, r3
 80064a6:	454b      	cmp	r3, r9
 80064a8:	dc01      	bgt.n	80064ae <_printf_float+0x2b2>
 80064aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ac:	e794      	b.n	80063d8 <_printf_float+0x1dc>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4652      	mov	r2, sl
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f aefc 	beq.w	80062b6 <_printf_float+0xba>
 80064be:	f109 0901 	add.w	r9, r9, #1
 80064c2:	e7ee      	b.n	80064a2 <_printf_float+0x2a6>
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bfa8      	it	ge
 80064cc:	461a      	movge	r2, r3
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	4691      	mov	r9, r2
 80064d2:	dd07      	ble.n	80064e4 <_printf_float+0x2e8>
 80064d4:	4613      	mov	r3, r2
 80064d6:	4631      	mov	r1, r6
 80064d8:	4642      	mov	r2, r8
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f aee9 	beq.w	80062b6 <_printf_float+0xba>
 80064e4:	f104 031a 	add.w	r3, r4, #26
 80064e8:	f04f 0b00 	mov.w	fp, #0
 80064ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064f0:	9306      	str	r3, [sp, #24]
 80064f2:	e015      	b.n	8006520 <_printf_float+0x324>
 80064f4:	7fefffff 	.word	0x7fefffff
 80064f8:	08008584 	.word	0x08008584
 80064fc:	08008580 	.word	0x08008580
 8006500:	0800858c 	.word	0x0800858c
 8006504:	08008588 	.word	0x08008588
 8006508:	08008590 	.word	0x08008590
 800650c:	2301      	movs	r3, #1
 800650e:	9a06      	ldr	r2, [sp, #24]
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f aecd 	beq.w	80062b6 <_printf_float+0xba>
 800651c:	f10b 0b01 	add.w	fp, fp, #1
 8006520:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006524:	ebaa 0309 	sub.w	r3, sl, r9
 8006528:	455b      	cmp	r3, fp
 800652a:	dcef      	bgt.n	800650c <_printf_float+0x310>
 800652c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006530:	429a      	cmp	r2, r3
 8006532:	44d0      	add	r8, sl
 8006534:	db15      	blt.n	8006562 <_printf_float+0x366>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	07da      	lsls	r2, r3, #31
 800653a:	d412      	bmi.n	8006562 <_printf_float+0x366>
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006540:	eba3 020a 	sub.w	r2, r3, sl
 8006544:	eba3 0a01 	sub.w	sl, r3, r1
 8006548:	4592      	cmp	sl, r2
 800654a:	bfa8      	it	ge
 800654c:	4692      	movge	sl, r2
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	dc0e      	bgt.n	8006572 <_printf_float+0x376>
 8006554:	f04f 0800 	mov.w	r8, #0
 8006558:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800655c:	f104 091a 	add.w	r9, r4, #26
 8006560:	e019      	b.n	8006596 <_printf_float+0x39a>
 8006562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	d1e5      	bne.n	800653c <_printf_float+0x340>
 8006570:	e6a1      	b.n	80062b6 <_printf_float+0xba>
 8006572:	4653      	mov	r3, sl
 8006574:	4642      	mov	r2, r8
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	d1e9      	bne.n	8006554 <_printf_float+0x358>
 8006580:	e699      	b.n	80062b6 <_printf_float+0xba>
 8006582:	2301      	movs	r3, #1
 8006584:	464a      	mov	r2, r9
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f ae92 	beq.w	80062b6 <_printf_float+0xba>
 8006592:	f108 0801 	add.w	r8, r8, #1
 8006596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	eba3 030a 	sub.w	r3, r3, sl
 80065a0:	4543      	cmp	r3, r8
 80065a2:	dcee      	bgt.n	8006582 <_printf_float+0x386>
 80065a4:	e74a      	b.n	800643c <_printf_float+0x240>
 80065a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065a8:	2a01      	cmp	r2, #1
 80065aa:	dc01      	bgt.n	80065b0 <_printf_float+0x3b4>
 80065ac:	07db      	lsls	r3, r3, #31
 80065ae:	d53a      	bpl.n	8006626 <_printf_float+0x42a>
 80065b0:	2301      	movs	r3, #1
 80065b2:	4642      	mov	r2, r8
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	f43f ae7b 	beq.w	80062b6 <_printf_float+0xba>
 80065c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	f108 0801 	add.w	r8, r8, #1
 80065d0:	f43f ae71 	beq.w	80062b6 <_printf_float+0xba>
 80065d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d6:	2200      	movs	r2, #0
 80065d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80065dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065e0:	2300      	movs	r3, #0
 80065e2:	f7fa fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e6:	b9c8      	cbnz	r0, 800661c <_printf_float+0x420>
 80065e8:	4653      	mov	r3, sl
 80065ea:	4642      	mov	r2, r8
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	d10e      	bne.n	8006614 <_printf_float+0x418>
 80065f6:	e65e      	b.n	80062b6 <_printf_float+0xba>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f ae57 	beq.w	80062b6 <_printf_float+0xba>
 8006608:	f108 0801 	add.w	r8, r8, #1
 800660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	4543      	cmp	r3, r8
 8006612:	dcf1      	bgt.n	80065f8 <_printf_float+0x3fc>
 8006614:	464b      	mov	r3, r9
 8006616:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800661a:	e6de      	b.n	80063da <_printf_float+0x1de>
 800661c:	f04f 0800 	mov.w	r8, #0
 8006620:	f104 0a1a 	add.w	sl, r4, #26
 8006624:	e7f2      	b.n	800660c <_printf_float+0x410>
 8006626:	2301      	movs	r3, #1
 8006628:	e7df      	b.n	80065ea <_printf_float+0x3ee>
 800662a:	2301      	movs	r3, #1
 800662c:	464a      	mov	r2, r9
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae3e 	beq.w	80062b6 <_printf_float+0xba>
 800663a:	f108 0801 	add.w	r8, r8, #1
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	4543      	cmp	r3, r8
 8006646:	dcf0      	bgt.n	800662a <_printf_float+0x42e>
 8006648:	e6fc      	b.n	8006444 <_printf_float+0x248>
 800664a:	f04f 0800 	mov.w	r8, #0
 800664e:	f104 0919 	add.w	r9, r4, #25
 8006652:	e7f4      	b.n	800663e <_printf_float+0x442>
 8006654:	2900      	cmp	r1, #0
 8006656:	f43f ae8b 	beq.w	8006370 <_printf_float+0x174>
 800665a:	2300      	movs	r3, #0
 800665c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006660:	ab09      	add	r3, sp, #36	; 0x24
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	ec49 8b10 	vmov	d0, r8, r9
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	f8cd a004 	str.w	sl, [sp, #4]
 800666e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006672:	4628      	mov	r0, r5
 8006674:	f7ff fd2e 	bl	80060d4 <__cvt>
 8006678:	4680      	mov	r8, r0
 800667a:	e648      	b.n	800630e <_printf_float+0x112>

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4691      	mov	r9, r2
 8006682:	461f      	mov	r7, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800668c:	4293      	cmp	r3, r2
 800668e:	bfb8      	it	lt
 8006690:	4613      	movlt	r3, r2
 8006692:	f8c9 3000 	str.w	r3, [r9]
 8006696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669a:	4606      	mov	r6, r0
 800669c:	460c      	mov	r4, r1
 800669e:	b112      	cbz	r2, 80066a6 <_printf_common+0x2a>
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c9 3000 	str.w	r3, [r9]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066b0:	3302      	addmi	r3, #2
 80066b2:	f8c9 3000 	strmi.w	r3, [r9]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	f015 0506 	ands.w	r5, r5, #6
 80066bc:	d107      	bne.n	80066ce <_printf_common+0x52>
 80066be:	f104 0a19 	add.w	sl, r4, #25
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	f8d9 2000 	ldr.w	r2, [r9]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dc28      	bgt.n	8006720 <_printf_common+0xa4>
 80066ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	3300      	adds	r3, #0
 80066d6:	bf18      	it	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	0692      	lsls	r2, r2, #26
 80066dc:	d42d      	bmi.n	800673a <_printf_common+0xbe>
 80066de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e2:	4639      	mov	r1, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	47c0      	blx	r8
 80066e8:	3001      	adds	r0, #1
 80066ea:	d020      	beq.n	800672e <_printf_common+0xb2>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	68e5      	ldr	r5, [r4, #12]
 80066f0:	f8d9 2000 	ldr.w	r2, [r9]
 80066f4:	f003 0306 	and.w	r3, r3, #6
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	bf08      	it	eq
 80066fc:	1aad      	subeq	r5, r5, r2
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	6922      	ldr	r2, [r4, #16]
 8006702:	bf0c      	ite	eq
 8006704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006708:	2500      	movne	r5, #0
 800670a:	4293      	cmp	r3, r2
 800670c:	bfc4      	itt	gt
 800670e:	1a9b      	subgt	r3, r3, r2
 8006710:	18ed      	addgt	r5, r5, r3
 8006712:	f04f 0900 	mov.w	r9, #0
 8006716:	341a      	adds	r4, #26
 8006718:	454d      	cmp	r5, r9
 800671a:	d11a      	bne.n	8006752 <_printf_common+0xd6>
 800671c:	2000      	movs	r0, #0
 800671e:	e008      	b.n	8006732 <_printf_common+0xb6>
 8006720:	2301      	movs	r3, #1
 8006722:	4652      	mov	r2, sl
 8006724:	4639      	mov	r1, r7
 8006726:	4630      	mov	r0, r6
 8006728:	47c0      	blx	r8
 800672a:	3001      	adds	r0, #1
 800672c:	d103      	bne.n	8006736 <_printf_common+0xba>
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006736:	3501      	adds	r5, #1
 8006738:	e7c3      	b.n	80066c2 <_printf_common+0x46>
 800673a:	18e1      	adds	r1, r4, r3
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	2030      	movs	r0, #48	; 0x30
 8006740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006744:	4422      	add	r2, r4
 8006746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800674a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800674e:	3302      	adds	r3, #2
 8006750:	e7c5      	b.n	80066de <_printf_common+0x62>
 8006752:	2301      	movs	r3, #1
 8006754:	4622      	mov	r2, r4
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	47c0      	blx	r8
 800675c:	3001      	adds	r0, #1
 800675e:	d0e6      	beq.n	800672e <_printf_common+0xb2>
 8006760:	f109 0901 	add.w	r9, r9, #1
 8006764:	e7d8      	b.n	8006718 <_printf_common+0x9c>
	...

08006768 <_printf_i>:
 8006768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800676c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006770:	460c      	mov	r4, r1
 8006772:	7e09      	ldrb	r1, [r1, #24]
 8006774:	b085      	sub	sp, #20
 8006776:	296e      	cmp	r1, #110	; 0x6e
 8006778:	4617      	mov	r7, r2
 800677a:	4606      	mov	r6, r0
 800677c:	4698      	mov	r8, r3
 800677e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006780:	f000 80b3 	beq.w	80068ea <_printf_i+0x182>
 8006784:	d822      	bhi.n	80067cc <_printf_i+0x64>
 8006786:	2963      	cmp	r1, #99	; 0x63
 8006788:	d036      	beq.n	80067f8 <_printf_i+0x90>
 800678a:	d80a      	bhi.n	80067a2 <_printf_i+0x3a>
 800678c:	2900      	cmp	r1, #0
 800678e:	f000 80b9 	beq.w	8006904 <_printf_i+0x19c>
 8006792:	2958      	cmp	r1, #88	; 0x58
 8006794:	f000 8083 	beq.w	800689e <_printf_i+0x136>
 8006798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067a0:	e032      	b.n	8006808 <_printf_i+0xa0>
 80067a2:	2964      	cmp	r1, #100	; 0x64
 80067a4:	d001      	beq.n	80067aa <_printf_i+0x42>
 80067a6:	2969      	cmp	r1, #105	; 0x69
 80067a8:	d1f6      	bne.n	8006798 <_printf_i+0x30>
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	0605      	lsls	r5, r0, #24
 80067b0:	f103 0104 	add.w	r1, r3, #4
 80067b4:	d52a      	bpl.n	800680c <_printf_i+0xa4>
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6011      	str	r1, [r2, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da03      	bge.n	80067c6 <_printf_i+0x5e>
 80067be:	222d      	movs	r2, #45	; 0x2d
 80067c0:	425b      	negs	r3, r3
 80067c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067c6:	486f      	ldr	r0, [pc, #444]	; (8006984 <_printf_i+0x21c>)
 80067c8:	220a      	movs	r2, #10
 80067ca:	e039      	b.n	8006840 <_printf_i+0xd8>
 80067cc:	2973      	cmp	r1, #115	; 0x73
 80067ce:	f000 809d 	beq.w	800690c <_printf_i+0x1a4>
 80067d2:	d808      	bhi.n	80067e6 <_printf_i+0x7e>
 80067d4:	296f      	cmp	r1, #111	; 0x6f
 80067d6:	d020      	beq.n	800681a <_printf_i+0xb2>
 80067d8:	2970      	cmp	r1, #112	; 0x70
 80067da:	d1dd      	bne.n	8006798 <_printf_i+0x30>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	f043 0320 	orr.w	r3, r3, #32
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	e003      	b.n	80067ee <_printf_i+0x86>
 80067e6:	2975      	cmp	r1, #117	; 0x75
 80067e8:	d017      	beq.n	800681a <_printf_i+0xb2>
 80067ea:	2978      	cmp	r1, #120	; 0x78
 80067ec:	d1d4      	bne.n	8006798 <_printf_i+0x30>
 80067ee:	2378      	movs	r3, #120	; 0x78
 80067f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067f4:	4864      	ldr	r0, [pc, #400]	; (8006988 <_printf_i+0x220>)
 80067f6:	e055      	b.n	80068a4 <_printf_i+0x13c>
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	1d19      	adds	r1, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6011      	str	r1, [r2, #0]
 8006800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e08c      	b.n	8006926 <_printf_i+0x1be>
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006814:	bf18      	it	ne
 8006816:	b21b      	sxthne	r3, r3
 8006818:	e7cf      	b.n	80067ba <_printf_i+0x52>
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	0628      	lsls	r0, r5, #24
 8006824:	d501      	bpl.n	800682a <_printf_i+0xc2>
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	e002      	b.n	8006830 <_printf_i+0xc8>
 800682a:	0668      	lsls	r0, r5, #25
 800682c:	d5fb      	bpl.n	8006826 <_printf_i+0xbe>
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	4854      	ldr	r0, [pc, #336]	; (8006984 <_printf_i+0x21c>)
 8006832:	296f      	cmp	r1, #111	; 0x6f
 8006834:	bf14      	ite	ne
 8006836:	220a      	movne	r2, #10
 8006838:	2208      	moveq	r2, #8
 800683a:	2100      	movs	r1, #0
 800683c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006840:	6865      	ldr	r5, [r4, #4]
 8006842:	60a5      	str	r5, [r4, #8]
 8006844:	2d00      	cmp	r5, #0
 8006846:	f2c0 8095 	blt.w	8006974 <_printf_i+0x20c>
 800684a:	6821      	ldr	r1, [r4, #0]
 800684c:	f021 0104 	bic.w	r1, r1, #4
 8006850:	6021      	str	r1, [r4, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d13d      	bne.n	80068d2 <_printf_i+0x16a>
 8006856:	2d00      	cmp	r5, #0
 8006858:	f040 808e 	bne.w	8006978 <_printf_i+0x210>
 800685c:	4665      	mov	r5, ip
 800685e:	2a08      	cmp	r2, #8
 8006860:	d10b      	bne.n	800687a <_printf_i+0x112>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	07db      	lsls	r3, r3, #31
 8006866:	d508      	bpl.n	800687a <_printf_i+0x112>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	bfde      	ittt	le
 8006870:	2330      	movle	r3, #48	; 0x30
 8006872:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006876:	f105 35ff 	addle.w	r5, r5, #4294967295
 800687a:	ebac 0305 	sub.w	r3, ip, r5
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	f8cd 8000 	str.w	r8, [sp]
 8006884:	463b      	mov	r3, r7
 8006886:	aa03      	add	r2, sp, #12
 8006888:	4621      	mov	r1, r4
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff fef6 	bl	800667c <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	d14d      	bne.n	8006930 <_printf_i+0x1c8>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b005      	add	sp, #20
 800689a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689e:	4839      	ldr	r0, [pc, #228]	; (8006984 <_printf_i+0x21c>)
 80068a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068a4:	6813      	ldr	r3, [r2, #0]
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	1d1d      	adds	r5, r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6015      	str	r5, [r2, #0]
 80068ae:	060a      	lsls	r2, r1, #24
 80068b0:	d50b      	bpl.n	80068ca <_printf_i+0x162>
 80068b2:	07ca      	lsls	r2, r1, #31
 80068b4:	bf44      	itt	mi
 80068b6:	f041 0120 	orrmi.w	r1, r1, #32
 80068ba:	6021      	strmi	r1, [r4, #0]
 80068bc:	b91b      	cbnz	r3, 80068c6 <_printf_i+0x15e>
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	f022 0220 	bic.w	r2, r2, #32
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	2210      	movs	r2, #16
 80068c8:	e7b7      	b.n	800683a <_printf_i+0xd2>
 80068ca:	064d      	lsls	r5, r1, #25
 80068cc:	bf48      	it	mi
 80068ce:	b29b      	uxthmi	r3, r3
 80068d0:	e7ef      	b.n	80068b2 <_printf_i+0x14a>
 80068d2:	4665      	mov	r5, ip
 80068d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80068d8:	fb02 3311 	mls	r3, r2, r1, r3
 80068dc:	5cc3      	ldrb	r3, [r0, r3]
 80068de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068e2:	460b      	mov	r3, r1
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d1f5      	bne.n	80068d4 <_printf_i+0x16c>
 80068e8:	e7b9      	b.n	800685e <_printf_i+0xf6>
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	6961      	ldr	r1, [r4, #20]
 80068f0:	1d18      	adds	r0, r3, #4
 80068f2:	6010      	str	r0, [r2, #0]
 80068f4:	0628      	lsls	r0, r5, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	d501      	bpl.n	80068fe <_printf_i+0x196>
 80068fa:	6019      	str	r1, [r3, #0]
 80068fc:	e002      	b.n	8006904 <_printf_i+0x19c>
 80068fe:	066a      	lsls	r2, r5, #25
 8006900:	d5fb      	bpl.n	80068fa <_printf_i+0x192>
 8006902:	8019      	strh	r1, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	6123      	str	r3, [r4, #16]
 8006908:	4665      	mov	r5, ip
 800690a:	e7b9      	b.n	8006880 <_printf_i+0x118>
 800690c:	6813      	ldr	r3, [r2, #0]
 800690e:	1d19      	adds	r1, r3, #4
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	681d      	ldr	r5, [r3, #0]
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	2100      	movs	r1, #0
 8006918:	4628      	mov	r0, r5
 800691a:	f7f9 fc61 	bl	80001e0 <memchr>
 800691e:	b108      	cbz	r0, 8006924 <_printf_i+0x1bc>
 8006920:	1b40      	subs	r0, r0, r5
 8006922:	6060      	str	r0, [r4, #4]
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	2300      	movs	r3, #0
 800692a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692e:	e7a7      	b.n	8006880 <_printf_i+0x118>
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	462a      	mov	r2, r5
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d0aa      	beq.n	8006894 <_printf_i+0x12c>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	d413      	bmi.n	800696c <_printf_i+0x204>
 8006944:	68e0      	ldr	r0, [r4, #12]
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	4298      	cmp	r0, r3
 800694a:	bfb8      	it	lt
 800694c:	4618      	movlt	r0, r3
 800694e:	e7a3      	b.n	8006898 <_printf_i+0x130>
 8006950:	2301      	movs	r3, #1
 8006952:	464a      	mov	r2, r9
 8006954:	4639      	mov	r1, r7
 8006956:	4630      	mov	r0, r6
 8006958:	47c0      	blx	r8
 800695a:	3001      	adds	r0, #1
 800695c:	d09a      	beq.n	8006894 <_printf_i+0x12c>
 800695e:	3501      	adds	r5, #1
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	9a03      	ldr	r2, [sp, #12]
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	42ab      	cmp	r3, r5
 8006968:	dcf2      	bgt.n	8006950 <_printf_i+0x1e8>
 800696a:	e7eb      	b.n	8006944 <_printf_i+0x1dc>
 800696c:	2500      	movs	r5, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f5      	b.n	8006960 <_printf_i+0x1f8>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1ac      	bne.n	80068d2 <_printf_i+0x16a>
 8006978:	7803      	ldrb	r3, [r0, #0]
 800697a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800697e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006982:	e76c      	b.n	800685e <_printf_i+0xf6>
 8006984:	08008592 	.word	0x08008592
 8006988:	080085a3 	.word	0x080085a3

0800698c <siprintf>:
 800698c:	b40e      	push	{r1, r2, r3}
 800698e:	b500      	push	{lr}
 8006990:	b09c      	sub	sp, #112	; 0x70
 8006992:	ab1d      	add	r3, sp, #116	; 0x74
 8006994:	9002      	str	r0, [sp, #8]
 8006996:	9006      	str	r0, [sp, #24]
 8006998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800699c:	4809      	ldr	r0, [pc, #36]	; (80069c4 <siprintf+0x38>)
 800699e:	9107      	str	r1, [sp, #28]
 80069a0:	9104      	str	r1, [sp, #16]
 80069a2:	4909      	ldr	r1, [pc, #36]	; (80069c8 <siprintf+0x3c>)
 80069a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a8:	9105      	str	r1, [sp, #20]
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	a902      	add	r1, sp, #8
 80069b0:	f001 fa5e 	bl	8007e70 <_svfiprintf_r>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	b01c      	add	sp, #112	; 0x70
 80069bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c0:	b003      	add	sp, #12
 80069c2:	4770      	bx	lr
 80069c4:	20000174 	.word	0x20000174
 80069c8:	ffff0208 	.word	0xffff0208

080069cc <quorem>:
 80069cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	6903      	ldr	r3, [r0, #16]
 80069d2:	690c      	ldr	r4, [r1, #16]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	4680      	mov	r8, r0
 80069d8:	f2c0 8082 	blt.w	8006ae0 <quorem+0x114>
 80069dc:	3c01      	subs	r4, #1
 80069de:	f101 0714 	add.w	r7, r1, #20
 80069e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80069e6:	f100 0614 	add.w	r6, r0, #20
 80069ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80069ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80069f2:	eb06 030c 	add.w	r3, r6, ip
 80069f6:	3501      	adds	r5, #1
 80069f8:	eb07 090c 	add.w	r9, r7, ip
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8006a02:	b395      	cbz	r5, 8006a6a <quorem+0x9e>
 8006a04:	f04f 0a00 	mov.w	sl, #0
 8006a08:	4638      	mov	r0, r7
 8006a0a:	46b6      	mov	lr, r6
 8006a0c:	46d3      	mov	fp, sl
 8006a0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a12:	b293      	uxth	r3, r2
 8006a14:	fb05 a303 	mla	r3, r5, r3, sl
 8006a18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	ebab 0303 	sub.w	r3, fp, r3
 8006a22:	0c12      	lsrs	r2, r2, #16
 8006a24:	f8de b000 	ldr.w	fp, [lr]
 8006a28:	fb05 a202 	mla	r2, r5, r2, sl
 8006a2c:	fa13 f38b 	uxtah	r3, r3, fp
 8006a30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a34:	fa1f fb82 	uxth.w	fp, r2
 8006a38:	f8de 2000 	ldr.w	r2, [lr]
 8006a3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4a:	4581      	cmp	r9, r0
 8006a4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a50:	f84e 3b04 	str.w	r3, [lr], #4
 8006a54:	d2db      	bcs.n	8006a0e <quorem+0x42>
 8006a56:	f856 300c 	ldr.w	r3, [r6, ip]
 8006a5a:	b933      	cbnz	r3, 8006a6a <quorem+0x9e>
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	3b04      	subs	r3, #4
 8006a60:	429e      	cmp	r6, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	d330      	bcc.n	8006ac8 <quorem+0xfc>
 8006a66:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f001 f82a 	bl	8007ac4 <__mcmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	db25      	blt.n	8006ac0 <quorem+0xf4>
 8006a74:	3501      	adds	r5, #1
 8006a76:	4630      	mov	r0, r6
 8006a78:	f04f 0c00 	mov.w	ip, #0
 8006a7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006a80:	f8d0 e000 	ldr.w	lr, [r0]
 8006a84:	b293      	uxth	r3, r2
 8006a86:	ebac 0303 	sub.w	r3, ip, r3
 8006a8a:	0c12      	lsrs	r2, r2, #16
 8006a8c:	fa13 f38e 	uxtah	r3, r3, lr
 8006a90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a9e:	45b9      	cmp	r9, r7
 8006aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aa4:	f840 3b04 	str.w	r3, [r0], #4
 8006aa8:	d2e8      	bcs.n	8006a7c <quorem+0xb0>
 8006aaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006aae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ab2:	b92a      	cbnz	r2, 8006ac0 <quorem+0xf4>
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	429e      	cmp	r6, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	d30b      	bcc.n	8006ad4 <quorem+0x108>
 8006abc:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	b003      	add	sp, #12
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	3b04      	subs	r3, #4
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	d1ca      	bne.n	8006a66 <quorem+0x9a>
 8006ad0:	3c01      	subs	r4, #1
 8006ad2:	e7c5      	b.n	8006a60 <quorem+0x94>
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	d1ef      	bne.n	8006abc <quorem+0xf0>
 8006adc:	3c01      	subs	r4, #1
 8006ade:	e7ea      	b.n	8006ab6 <quorem+0xea>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e7ee      	b.n	8006ac2 <quorem+0xf6>
 8006ae4:	0000      	movs	r0, r0
	...

08006ae8 <_dtoa_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	ec57 6b10 	vmov	r6, r7, d0
 8006af0:	b097      	sub	sp, #92	; 0x5c
 8006af2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af4:	9106      	str	r1, [sp, #24]
 8006af6:	4604      	mov	r4, r0
 8006af8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006afa:	9312      	str	r3, [sp, #72]	; 0x48
 8006afc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b00:	e9cd 6700 	strd	r6, r7, [sp]
 8006b04:	b93d      	cbnz	r5, 8006b16 <_dtoa_r+0x2e>
 8006b06:	2010      	movs	r0, #16
 8006b08:	f000 fdb4 	bl	8007674 <malloc>
 8006b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006b0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b12:	6005      	str	r5, [r0, #0]
 8006b14:	60c5      	str	r5, [r0, #12]
 8006b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	b151      	cbz	r1, 8006b32 <_dtoa_r+0x4a>
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	604a      	str	r2, [r1, #4]
 8006b20:	2301      	movs	r3, #1
 8006b22:	4093      	lsls	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fdeb 	bl	8007702 <_Bfree>
 8006b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	1e3b      	subs	r3, r7, #0
 8006b34:	bfbb      	ittet	lt
 8006b36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b3a:	9301      	strlt	r3, [sp, #4]
 8006b3c:	2300      	movge	r3, #0
 8006b3e:	2201      	movlt	r2, #1
 8006b40:	bfac      	ite	ge
 8006b42:	f8c8 3000 	strge.w	r3, [r8]
 8006b46:	f8c8 2000 	strlt.w	r2, [r8]
 8006b4a:	4baf      	ldr	r3, [pc, #700]	; (8006e08 <_dtoa_r+0x320>)
 8006b4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b50:	ea33 0308 	bics.w	r3, r3, r8
 8006b54:	d114      	bne.n	8006b80 <_dtoa_r+0x98>
 8006b56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	b923      	cbnz	r3, 8006b6c <_dtoa_r+0x84>
 8006b62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f000 8542 	beq.w	80075f0 <_dtoa_r+0xb08>
 8006b6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006e1c <_dtoa_r+0x334>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8544 	beq.w	8007600 <_dtoa_r+0xb18>
 8006b78:	f10b 0303 	add.w	r3, fp, #3
 8006b7c:	f000 bd3e 	b.w	80075fc <_dtoa_r+0xb14>
 8006b80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b90:	4681      	mov	r9, r0
 8006b92:	b168      	cbz	r0, 8006bb0 <_dtoa_r+0xc8>
 8006b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b96:	2301      	movs	r3, #1
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8524 	beq.w	80075ea <_dtoa_r+0xb02>
 8006ba2:	4b9a      	ldr	r3, [pc, #616]	; (8006e0c <_dtoa_r+0x324>)
 8006ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ba6:	f103 3bff 	add.w	fp, r3, #4294967295
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	f000 bd28 	b.w	8007600 <_dtoa_r+0xb18>
 8006bb0:	aa14      	add	r2, sp, #80	; 0x50
 8006bb2:	a915      	add	r1, sp, #84	; 0x54
 8006bb4:	ec47 6b10 	vmov	d0, r6, r7
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fffa 	bl	8007bb2 <__d2b>
 8006bbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bc2:	9004      	str	r0, [sp, #16]
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d07c      	beq.n	8006cc2 <_dtoa_r+0x1da>
 8006bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006bd0:	46b2      	mov	sl, r6
 8006bd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006bde:	2200      	movs	r2, #0
 8006be0:	4b8b      	ldr	r3, [pc, #556]	; (8006e10 <_dtoa_r+0x328>)
 8006be2:	4650      	mov	r0, sl
 8006be4:	4659      	mov	r1, fp
 8006be6:	f7f9 fb4f 	bl	8000288 <__aeabi_dsub>
 8006bea:	a381      	add	r3, pc, #516	; (adr r3, 8006df0 <_dtoa_r+0x308>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	a380      	add	r3, pc, #512	; (adr r3, 8006df8 <_dtoa_r+0x310>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fb47 	bl	800028c <__adddf3>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	4628      	mov	r0, r5
 8006c02:	460f      	mov	r7, r1
 8006c04:	f7f9 fc8e 	bl	8000524 <__aeabi_i2d>
 8006c08:	a37d      	add	r3, pc, #500	; (adr r3, 8006e00 <_dtoa_r+0x318>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fcf3 	bl	80005f8 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4630      	mov	r0, r6
 8006c18:	4639      	mov	r1, r7
 8006c1a:	f7f9 fb37 	bl	800028c <__adddf3>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	f7f9 ff99 	bl	8000b58 <__aeabi_d2iz>
 8006c26:	2200      	movs	r2, #0
 8006c28:	4682      	mov	sl, r0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 ff54 	bl	8000adc <__aeabi_dcmplt>
 8006c34:	b148      	cbz	r0, 8006c4a <_dtoa_r+0x162>
 8006c36:	4650      	mov	r0, sl
 8006c38:	f7f9 fc74 	bl	8000524 <__aeabi_i2d>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	f7f9 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c44:	b908      	cbnz	r0, 8006c4a <_dtoa_r+0x162>
 8006c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4a:	f1ba 0f16 	cmp.w	sl, #22
 8006c4e:	d859      	bhi.n	8006d04 <_dtoa_r+0x21c>
 8006c50:	4970      	ldr	r1, [pc, #448]	; (8006e14 <_dtoa_r+0x32c>)
 8006c52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c5e:	f7f9 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d050      	beq.n	8006d08 <_dtoa_r+0x220>
 8006c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c70:	1b5d      	subs	r5, r3, r5
 8006c72:	f1b5 0801 	subs.w	r8, r5, #1
 8006c76:	bf49      	itett	mi
 8006c78:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c7c:	2300      	movpl	r3, #0
 8006c7e:	9305      	strmi	r3, [sp, #20]
 8006c80:	f04f 0800 	movmi.w	r8, #0
 8006c84:	bf58      	it	pl
 8006c86:	9305      	strpl	r3, [sp, #20]
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	db3e      	blt.n	8006d0c <_dtoa_r+0x224>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	44d0      	add	r8, sl
 8006c92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	2b09      	cmp	r3, #9
 8006c9c:	f200 8090 	bhi.w	8006dc0 <_dtoa_r+0x2d8>
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	bfc4      	itt	gt
 8006ca4:	3b04      	subgt	r3, #4
 8006ca6:	9306      	strgt	r3, [sp, #24]
 8006ca8:	9b06      	ldr	r3, [sp, #24]
 8006caa:	f1a3 0302 	sub.w	r3, r3, #2
 8006cae:	bfcc      	ite	gt
 8006cb0:	2500      	movgt	r5, #0
 8006cb2:	2501      	movle	r5, #1
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	f200 808f 	bhi.w	8006dd8 <_dtoa_r+0x2f0>
 8006cba:	e8df f003 	tbb	[pc, r3]
 8006cbe:	7f7d      	.short	0x7f7d
 8006cc0:	7131      	.short	0x7131
 8006cc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006cc6:	441d      	add	r5, r3
 8006cc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006ccc:	2820      	cmp	r0, #32
 8006cce:	dd13      	ble.n	8006cf8 <_dtoa_r+0x210>
 8006cd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	fa08 f800 	lsl.w	r8, r8, r0
 8006cda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006cde:	fa23 f000 	lsr.w	r0, r3, r0
 8006ce2:	ea48 0000 	orr.w	r0, r8, r0
 8006ce6:	f7f9 fc0d 	bl	8000504 <__aeabi_ui2d>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4682      	mov	sl, r0
 8006cee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006cf2:	3d01      	subs	r5, #1
 8006cf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cf6:	e772      	b.n	8006bde <_dtoa_r+0xf6>
 8006cf8:	9b00      	ldr	r3, [sp, #0]
 8006cfa:	f1c0 0020 	rsb	r0, r0, #32
 8006cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8006d02:	e7f0      	b.n	8006ce6 <_dtoa_r+0x1fe>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e7b1      	b.n	8006c6c <_dtoa_r+0x184>
 8006d08:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d0a:	e7b0      	b.n	8006c6e <_dtoa_r+0x186>
 8006d0c:	9b05      	ldr	r3, [sp, #20]
 8006d0e:	eba3 030a 	sub.w	r3, r3, sl
 8006d12:	9305      	str	r3, [sp, #20]
 8006d14:	f1ca 0300 	rsb	r3, sl, #0
 8006d18:	9307      	str	r3, [sp, #28]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d1e:	e7bb      	b.n	8006c98 <_dtoa_r+0x1b0>
 8006d20:	2301      	movs	r3, #1
 8006d22:	930a      	str	r3, [sp, #40]	; 0x28
 8006d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd59      	ble.n	8006dde <_dtoa_r+0x2f6>
 8006d2a:	9302      	str	r3, [sp, #8]
 8006d2c:	4699      	mov	r9, r3
 8006d2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d30:	2200      	movs	r2, #0
 8006d32:	6072      	str	r2, [r6, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	f102 0014 	add.w	r0, r2, #20
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	6871      	ldr	r1, [r6, #4]
 8006d3e:	d953      	bls.n	8006de8 <_dtoa_r+0x300>
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 fcaa 	bl	800769a <_Balloc>
 8006d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d48:	6030      	str	r0, [r6, #0]
 8006d4a:	f1b9 0f0e 	cmp.w	r9, #14
 8006d4e:	f8d3 b000 	ldr.w	fp, [r3]
 8006d52:	f200 80e6 	bhi.w	8006f22 <_dtoa_r+0x43a>
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	f000 80e3 	beq.w	8006f22 <_dtoa_r+0x43a>
 8006d5c:	ed9d 7b00 	vldr	d7, [sp]
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006d68:	dd74      	ble.n	8006e54 <_dtoa_r+0x36c>
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <_dtoa_r+0x32c>)
 8006d6c:	f00a 030f 	and.w	r3, sl, #15
 8006d70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d74:	ed93 7b00 	vldr	d7, [r3]
 8006d78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006d7c:	06f0      	lsls	r0, r6, #27
 8006d7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d82:	d565      	bpl.n	8006e50 <_dtoa_r+0x368>
 8006d84:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <_dtoa_r+0x330>)
 8006d86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d8e:	f7f9 fd5d 	bl	800084c <__aeabi_ddiv>
 8006d92:	e9cd 0100 	strd	r0, r1, [sp]
 8006d96:	f006 060f 	and.w	r6, r6, #15
 8006d9a:	2503      	movs	r5, #3
 8006d9c:	4f1e      	ldr	r7, [pc, #120]	; (8006e18 <_dtoa_r+0x330>)
 8006d9e:	e04c      	b.n	8006e3a <_dtoa_r+0x352>
 8006da0:	2301      	movs	r3, #1
 8006da2:	930a      	str	r3, [sp, #40]	; 0x28
 8006da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da6:	4453      	add	r3, sl
 8006da8:	f103 0901 	add.w	r9, r3, #1
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	464b      	mov	r3, r9
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	bfb8      	it	lt
 8006db4:	2301      	movlt	r3, #1
 8006db6:	e7ba      	b.n	8006d2e <_dtoa_r+0x246>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e7b2      	b.n	8006d22 <_dtoa_r+0x23a>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e7f0      	b.n	8006da2 <_dtoa_r+0x2ba>
 8006dc0:	2501      	movs	r5, #1
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9306      	str	r3, [sp, #24]
 8006dc6:	950a      	str	r5, [sp, #40]	; 0x28
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	4699      	mov	r9, r3
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2312      	movs	r3, #18
 8006dd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8006dd6:	e7aa      	b.n	8006d2e <_dtoa_r+0x246>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	930a      	str	r3, [sp, #40]	; 0x28
 8006ddc:	e7f4      	b.n	8006dc8 <_dtoa_r+0x2e0>
 8006dde:	2301      	movs	r3, #1
 8006de0:	9302      	str	r3, [sp, #8]
 8006de2:	4699      	mov	r9, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	e7f5      	b.n	8006dd4 <_dtoa_r+0x2ec>
 8006de8:	3101      	adds	r1, #1
 8006dea:	6071      	str	r1, [r6, #4]
 8006dec:	0052      	lsls	r2, r2, #1
 8006dee:	e7a2      	b.n	8006d36 <_dtoa_r+0x24e>
 8006df0:	636f4361 	.word	0x636f4361
 8006df4:	3fd287a7 	.word	0x3fd287a7
 8006df8:	8b60c8b3 	.word	0x8b60c8b3
 8006dfc:	3fc68a28 	.word	0x3fc68a28
 8006e00:	509f79fb 	.word	0x509f79fb
 8006e04:	3fd34413 	.word	0x3fd34413
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	08008591 	.word	0x08008591
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	080085f0 	.word	0x080085f0
 8006e18:	080085c8 	.word	0x080085c8
 8006e1c:	080085bd 	.word	0x080085bd
 8006e20:	07f1      	lsls	r1, r6, #31
 8006e22:	d508      	bpl.n	8006e36 <_dtoa_r+0x34e>
 8006e24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2c:	f7f9 fbe4 	bl	80005f8 <__aeabi_dmul>
 8006e30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e34:	3501      	adds	r5, #1
 8006e36:	1076      	asrs	r6, r6, #1
 8006e38:	3708      	adds	r7, #8
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	d1f0      	bne.n	8006e20 <_dtoa_r+0x338>
 8006e3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e46:	f7f9 fd01 	bl	800084c <__aeabi_ddiv>
 8006e4a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e4e:	e01a      	b.n	8006e86 <_dtoa_r+0x39e>
 8006e50:	2502      	movs	r5, #2
 8006e52:	e7a3      	b.n	8006d9c <_dtoa_r+0x2b4>
 8006e54:	f000 80a0 	beq.w	8006f98 <_dtoa_r+0x4b0>
 8006e58:	f1ca 0600 	rsb	r6, sl, #0
 8006e5c:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <_dtoa_r+0x5f4>)
 8006e5e:	4fa0      	ldr	r7, [pc, #640]	; (80070e0 <_dtoa_r+0x5f8>)
 8006e60:	f006 020f 	and.w	r2, r6, #15
 8006e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	e9cd 0100 	strd	r0, r1, [sp]
 8006e78:	1136      	asrs	r6, r6, #4
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2502      	movs	r5, #2
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	d17f      	bne.n	8006f82 <_dtoa_r+0x49a>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e1      	bne.n	8006e4a <_dtoa_r+0x362>
 8006e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8087 	beq.w	8006f9c <_dtoa_r+0x4b4>
 8006e8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006e92:	2200      	movs	r2, #0
 8006e94:	4b93      	ldr	r3, [pc, #588]	; (80070e4 <_dtoa_r+0x5fc>)
 8006e96:	4630      	mov	r0, r6
 8006e98:	4639      	mov	r1, r7
 8006e9a:	f7f9 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d07c      	beq.n	8006f9c <_dtoa_r+0x4b4>
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	d079      	beq.n	8006f9c <_dtoa_r+0x4b4>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dd35      	ble.n	8006f1a <_dtoa_r+0x432>
 8006eae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006eb2:	9308      	str	r3, [sp, #32]
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b8b      	ldr	r3, [pc, #556]	; (80070e8 <_dtoa_r+0x600>)
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7f9 fb9c 	bl	80005f8 <__aeabi_dmul>
 8006ec0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ec4:	9f02      	ldr	r7, [sp, #8]
 8006ec6:	3501      	adds	r5, #1
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f7f9 fb2b 	bl	8000524 <__aeabi_i2d>
 8006ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4b84      	ldr	r3, [pc, #528]	; (80070ec <_dtoa_r+0x604>)
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	4605      	mov	r5, r0
 8006ee0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	d15d      	bne.n	8006fa4 <_dtoa_r+0x4bc>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b81      	ldr	r3, [pc, #516]	; (80070f0 <_dtoa_r+0x608>)
 8006eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef0:	f7f9 f9ca 	bl	8000288 <__aeabi_dsub>
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4633      	mov	r3, r6
 8006ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8006efc:	f7f9 fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f040 8288 	bne.w	8007416 <_dtoa_r+0x92e>
 8006f06:	462a      	mov	r2, r5
 8006f08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f10:	f7f9 fde4 	bl	8000adc <__aeabi_dcmplt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 827c 	bne.w	8007412 <_dtoa_r+0x92a>
 8006f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f1e:	e9cd 2300 	strd	r2, r3, [sp]
 8006f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f2c0 8150 	blt.w	80071ca <_dtoa_r+0x6e2>
 8006f2a:	f1ba 0f0e 	cmp.w	sl, #14
 8006f2e:	f300 814c 	bgt.w	80071ca <_dtoa_r+0x6e2>
 8006f32:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <_dtoa_r+0x5f4>)
 8006f34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f38:	ed93 7b00 	vldr	d7, [r3]
 8006f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f44:	f280 80d8 	bge.w	80070f8 <_dtoa_r+0x610>
 8006f48:	f1b9 0f00 	cmp.w	r9, #0
 8006f4c:	f300 80d4 	bgt.w	80070f8 <_dtoa_r+0x610>
 8006f50:	f040 825e 	bne.w	8007410 <_dtoa_r+0x928>
 8006f54:	2200      	movs	r2, #0
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <_dtoa_r+0x608>)
 8006f58:	ec51 0b17 	vmov	r0, r1, d7
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f64:	f7f9 fdce 	bl	8000b04 <__aeabi_dcmpge>
 8006f68:	464f      	mov	r7, r9
 8006f6a:	464e      	mov	r6, r9
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f040 8234 	bne.w	80073da <_dtoa_r+0x8f2>
 8006f72:	2331      	movs	r3, #49	; 0x31
 8006f74:	f10b 0501 	add.w	r5, fp, #1
 8006f78:	f88b 3000 	strb.w	r3, [fp]
 8006f7c:	f10a 0a01 	add.w	sl, sl, #1
 8006f80:	e22f      	b.n	80073e2 <_dtoa_r+0x8fa>
 8006f82:	07f2      	lsls	r2, r6, #31
 8006f84:	d505      	bpl.n	8006f92 <_dtoa_r+0x4aa>
 8006f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8a:	f7f9 fb35 	bl	80005f8 <__aeabi_dmul>
 8006f8e:	3501      	adds	r5, #1
 8006f90:	2301      	movs	r3, #1
 8006f92:	1076      	asrs	r6, r6, #1
 8006f94:	3708      	adds	r7, #8
 8006f96:	e772      	b.n	8006e7e <_dtoa_r+0x396>
 8006f98:	2502      	movs	r5, #2
 8006f9a:	e774      	b.n	8006e86 <_dtoa_r+0x39e>
 8006f9c:	f8cd a020 	str.w	sl, [sp, #32]
 8006fa0:	464f      	mov	r7, r9
 8006fa2:	e791      	b.n	8006ec8 <_dtoa_r+0x3e0>
 8006fa4:	4b4d      	ldr	r3, [pc, #308]	; (80070dc <_dtoa_r+0x5f4>)
 8006fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006faa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d047      	beq.n	8007044 <_dtoa_r+0x55c>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	2000      	movs	r0, #0
 8006fba:	494e      	ldr	r1, [pc, #312]	; (80070f4 <_dtoa_r+0x60c>)
 8006fbc:	f7f9 fc46 	bl	800084c <__aeabi_ddiv>
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4633      	mov	r3, r6
 8006fc4:	f7f9 f960 	bl	8000288 <__aeabi_dsub>
 8006fc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006fcc:	465d      	mov	r5, fp
 8006fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd2:	f7f9 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	f7f9 faa4 	bl	8000524 <__aeabi_i2d>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fe4:	f7f9 f950 	bl	8000288 <__aeabi_dsub>
 8006fe8:	3630      	adds	r6, #48	; 0x30
 8006fea:	f805 6b01 	strb.w	r6, [r5], #1
 8006fee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ff6:	f7f9 fd71 	bl	8000adc <__aeabi_dcmplt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d163      	bne.n	80070c6 <_dtoa_r+0x5de>
 8006ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007002:	2000      	movs	r0, #0
 8007004:	4937      	ldr	r1, [pc, #220]	; (80070e4 <_dtoa_r+0x5fc>)
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800700e:	f7f9 fd65 	bl	8000adc <__aeabi_dcmplt>
 8007012:	2800      	cmp	r0, #0
 8007014:	f040 80b7 	bne.w	8007186 <_dtoa_r+0x69e>
 8007018:	eba5 030b 	sub.w	r3, r5, fp
 800701c:	429f      	cmp	r7, r3
 800701e:	f77f af7c 	ble.w	8006f1a <_dtoa_r+0x432>
 8007022:	2200      	movs	r2, #0
 8007024:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <_dtoa_r+0x600>)
 8007026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800702a:	f7f9 fae5 	bl	80005f8 <__aeabi_dmul>
 800702e:	2200      	movs	r2, #0
 8007030:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007034:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <_dtoa_r+0x600>)
 8007036:	e9dd 0100 	ldrd	r0, r1, [sp]
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	e9cd 0100 	strd	r0, r1, [sp]
 8007042:	e7c4      	b.n	8006fce <_dtoa_r+0x4e6>
 8007044:	462a      	mov	r2, r5
 8007046:	4633      	mov	r3, r6
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007050:	eb0b 0507 	add.w	r5, fp, r7
 8007054:	465e      	mov	r6, fp
 8007056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800705a:	f7f9 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800705e:	4607      	mov	r7, r0
 8007060:	f7f9 fa60 	bl	8000524 <__aeabi_i2d>
 8007064:	3730      	adds	r7, #48	; 0x30
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800706e:	f7f9 f90b 	bl	8000288 <__aeabi_dsub>
 8007072:	f806 7b01 	strb.w	r7, [r6], #1
 8007076:	42ae      	cmp	r6, r5
 8007078:	e9cd 0100 	strd	r0, r1, [sp]
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	d126      	bne.n	80070d0 <_dtoa_r+0x5e8>
 8007082:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <_dtoa_r+0x60c>)
 8007084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007088:	f7f9 f900 	bl	800028c <__adddf3>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007094:	f7f9 fd40 	bl	8000b18 <__aeabi_dcmpgt>
 8007098:	2800      	cmp	r0, #0
 800709a:	d174      	bne.n	8007186 <_dtoa_r+0x69e>
 800709c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070a0:	2000      	movs	r0, #0
 80070a2:	4914      	ldr	r1, [pc, #80]	; (80070f4 <_dtoa_r+0x60c>)
 80070a4:	f7f9 f8f0 	bl	8000288 <__aeabi_dsub>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070b0:	f7f9 fd14 	bl	8000adc <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f43f af30 	beq.w	8006f1a <_dtoa_r+0x432>
 80070ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070be:	2b30      	cmp	r3, #48	; 0x30
 80070c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80070c4:	d002      	beq.n	80070cc <_dtoa_r+0x5e4>
 80070c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80070ca:	e04a      	b.n	8007162 <_dtoa_r+0x67a>
 80070cc:	4615      	mov	r5, r2
 80070ce:	e7f4      	b.n	80070ba <_dtoa_r+0x5d2>
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <_dtoa_r+0x600>)
 80070d2:	f7f9 fa91 	bl	80005f8 <__aeabi_dmul>
 80070d6:	e9cd 0100 	strd	r0, r1, [sp]
 80070da:	e7bc      	b.n	8007056 <_dtoa_r+0x56e>
 80070dc:	080085f0 	.word	0x080085f0
 80070e0:	080085c8 	.word	0x080085c8
 80070e4:	3ff00000 	.word	0x3ff00000
 80070e8:	40240000 	.word	0x40240000
 80070ec:	401c0000 	.word	0x401c0000
 80070f0:	40140000 	.word	0x40140000
 80070f4:	3fe00000 	.word	0x3fe00000
 80070f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070fc:	465d      	mov	r5, fp
 80070fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	f7f9 fba1 	bl	800084c <__aeabi_ddiv>
 800710a:	f7f9 fd25 	bl	8000b58 <__aeabi_d2iz>
 800710e:	4680      	mov	r8, r0
 8007110:	f7f9 fa08 	bl	8000524 <__aeabi_i2d>
 8007114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007128:	f7f9 f8ae 	bl	8000288 <__aeabi_dsub>
 800712c:	f805 6b01 	strb.w	r6, [r5], #1
 8007130:	eba5 060b 	sub.w	r6, r5, fp
 8007134:	45b1      	cmp	r9, r6
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	d139      	bne.n	80071b0 <_dtoa_r+0x6c8>
 800713c:	f7f9 f8a6 	bl	800028c <__adddf3>
 8007140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007144:	4606      	mov	r6, r0
 8007146:	460f      	mov	r7, r1
 8007148:	f7f9 fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800714c:	b9c8      	cbnz	r0, 8007182 <_dtoa_r+0x69a>
 800714e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007152:	4630      	mov	r0, r6
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800715a:	b110      	cbz	r0, 8007162 <_dtoa_r+0x67a>
 800715c:	f018 0f01 	tst.w	r8, #1
 8007160:	d10f      	bne.n	8007182 <_dtoa_r+0x69a>
 8007162:	9904      	ldr	r1, [sp, #16]
 8007164:	4620      	mov	r0, r4
 8007166:	f000 facc 	bl	8007702 <_Bfree>
 800716a:	2300      	movs	r3, #0
 800716c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800716e:	702b      	strb	r3, [r5, #0]
 8007170:	f10a 0301 	add.w	r3, sl, #1
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8241 	beq.w	8007600 <_dtoa_r+0xb18>
 800717e:	601d      	str	r5, [r3, #0]
 8007180:	e23e      	b.n	8007600 <_dtoa_r+0xb18>
 8007182:	f8cd a020 	str.w	sl, [sp, #32]
 8007186:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800718a:	2a39      	cmp	r2, #57	; 0x39
 800718c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007190:	d108      	bne.n	80071a4 <_dtoa_r+0x6bc>
 8007192:	459b      	cmp	fp, r3
 8007194:	d10a      	bne.n	80071ac <_dtoa_r+0x6c4>
 8007196:	9b08      	ldr	r3, [sp, #32]
 8007198:	3301      	adds	r3, #1
 800719a:	9308      	str	r3, [sp, #32]
 800719c:	2330      	movs	r3, #48	; 0x30
 800719e:	f88b 3000 	strb.w	r3, [fp]
 80071a2:	465b      	mov	r3, fp
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	3201      	adds	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e78c      	b.n	80070c6 <_dtoa_r+0x5de>
 80071ac:	461d      	mov	r5, r3
 80071ae:	e7ea      	b.n	8007186 <_dtoa_r+0x69e>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b9b      	ldr	r3, [pc, #620]	; (8007420 <_dtoa_r+0x938>)
 80071b4:	f7f9 fa20 	bl	80005f8 <__aeabi_dmul>
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	f7f9 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d09a      	beq.n	80070fe <_dtoa_r+0x616>
 80071c8:	e7cb      	b.n	8007162 <_dtoa_r+0x67a>
 80071ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	f000 808b 	beq.w	80072e8 <_dtoa_r+0x800>
 80071d2:	9a06      	ldr	r2, [sp, #24]
 80071d4:	2a01      	cmp	r2, #1
 80071d6:	dc6e      	bgt.n	80072b6 <_dtoa_r+0x7ce>
 80071d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071da:	2a00      	cmp	r2, #0
 80071dc:	d067      	beq.n	80072ae <_dtoa_r+0x7c6>
 80071de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071e2:	9f07      	ldr	r7, [sp, #28]
 80071e4:	9d05      	ldr	r5, [sp, #20]
 80071e6:	9a05      	ldr	r2, [sp, #20]
 80071e8:	2101      	movs	r1, #1
 80071ea:	441a      	add	r2, r3
 80071ec:	4620      	mov	r0, r4
 80071ee:	9205      	str	r2, [sp, #20]
 80071f0:	4498      	add	r8, r3
 80071f2:	f000 fb26 	bl	8007842 <__i2b>
 80071f6:	4606      	mov	r6, r0
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	dd0c      	ble.n	8007216 <_dtoa_r+0x72e>
 80071fc:	f1b8 0f00 	cmp.w	r8, #0
 8007200:	dd09      	ble.n	8007216 <_dtoa_r+0x72e>
 8007202:	4545      	cmp	r5, r8
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	462b      	mov	r3, r5
 8007208:	bfa8      	it	ge
 800720a:	4643      	movge	r3, r8
 800720c:	1ad2      	subs	r2, r2, r3
 800720e:	9205      	str	r2, [sp, #20]
 8007210:	1aed      	subs	r5, r5, r3
 8007212:	eba8 0803 	sub.w	r8, r8, r3
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	b1eb      	cbz	r3, 8007256 <_dtoa_r+0x76e>
 800721a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d067      	beq.n	80072f0 <_dtoa_r+0x808>
 8007220:	b18f      	cbz	r7, 8007246 <_dtoa_r+0x75e>
 8007222:	4631      	mov	r1, r6
 8007224:	463a      	mov	r2, r7
 8007226:	4620      	mov	r0, r4
 8007228:	f000 fbaa 	bl	8007980 <__pow5mult>
 800722c:	9a04      	ldr	r2, [sp, #16]
 800722e:	4601      	mov	r1, r0
 8007230:	4606      	mov	r6, r0
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fb0e 	bl	8007854 <__multiply>
 8007238:	9904      	ldr	r1, [sp, #16]
 800723a:	9008      	str	r0, [sp, #32]
 800723c:	4620      	mov	r0, r4
 800723e:	f000 fa60 	bl	8007702 <_Bfree>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	9b07      	ldr	r3, [sp, #28]
 8007248:	1bda      	subs	r2, r3, r7
 800724a:	d004      	beq.n	8007256 <_dtoa_r+0x76e>
 800724c:	9904      	ldr	r1, [sp, #16]
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fb96 	bl	8007980 <__pow5mult>
 8007254:	9004      	str	r0, [sp, #16]
 8007256:	2101      	movs	r1, #1
 8007258:	4620      	mov	r0, r4
 800725a:	f000 faf2 	bl	8007842 <__i2b>
 800725e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007260:	4607      	mov	r7, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 81d0 	beq.w	8007608 <_dtoa_r+0xb20>
 8007268:	461a      	mov	r2, r3
 800726a:	4601      	mov	r1, r0
 800726c:	4620      	mov	r0, r4
 800726e:	f000 fb87 	bl	8007980 <__pow5mult>
 8007272:	9b06      	ldr	r3, [sp, #24]
 8007274:	2b01      	cmp	r3, #1
 8007276:	4607      	mov	r7, r0
 8007278:	dc40      	bgt.n	80072fc <_dtoa_r+0x814>
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d139      	bne.n	80072f4 <_dtoa_r+0x80c>
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007286:	2b00      	cmp	r3, #0
 8007288:	d136      	bne.n	80072f8 <_dtoa_r+0x810>
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007290:	0d1b      	lsrs	r3, r3, #20
 8007292:	051b      	lsls	r3, r3, #20
 8007294:	b12b      	cbz	r3, 80072a2 <_dtoa_r+0x7ba>
 8007296:	9b05      	ldr	r3, [sp, #20]
 8007298:	3301      	adds	r3, #1
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	f108 0801 	add.w	r8, r8, #1
 80072a0:	2301      	movs	r3, #1
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d12a      	bne.n	8007300 <_dtoa_r+0x818>
 80072aa:	2001      	movs	r0, #1
 80072ac:	e030      	b.n	8007310 <_dtoa_r+0x828>
 80072ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072b4:	e795      	b.n	80071e2 <_dtoa_r+0x6fa>
 80072b6:	9b07      	ldr	r3, [sp, #28]
 80072b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80072bc:	42bb      	cmp	r3, r7
 80072be:	bfbf      	itttt	lt
 80072c0:	9b07      	ldrlt	r3, [sp, #28]
 80072c2:	9707      	strlt	r7, [sp, #28]
 80072c4:	1afa      	sublt	r2, r7, r3
 80072c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80072c8:	bfbb      	ittet	lt
 80072ca:	189b      	addlt	r3, r3, r2
 80072cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80072ce:	1bdf      	subge	r7, r3, r7
 80072d0:	2700      	movlt	r7, #0
 80072d2:	f1b9 0f00 	cmp.w	r9, #0
 80072d6:	bfb5      	itete	lt
 80072d8:	9b05      	ldrlt	r3, [sp, #20]
 80072da:	9d05      	ldrge	r5, [sp, #20]
 80072dc:	eba3 0509 	sublt.w	r5, r3, r9
 80072e0:	464b      	movge	r3, r9
 80072e2:	bfb8      	it	lt
 80072e4:	2300      	movlt	r3, #0
 80072e6:	e77e      	b.n	80071e6 <_dtoa_r+0x6fe>
 80072e8:	9f07      	ldr	r7, [sp, #28]
 80072ea:	9d05      	ldr	r5, [sp, #20]
 80072ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80072ee:	e783      	b.n	80071f8 <_dtoa_r+0x710>
 80072f0:	9a07      	ldr	r2, [sp, #28]
 80072f2:	e7ab      	b.n	800724c <_dtoa_r+0x764>
 80072f4:	2300      	movs	r3, #0
 80072f6:	e7d4      	b.n	80072a2 <_dtoa_r+0x7ba>
 80072f8:	9b00      	ldr	r3, [sp, #0]
 80072fa:	e7d2      	b.n	80072a2 <_dtoa_r+0x7ba>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007306:	6918      	ldr	r0, [r3, #16]
 8007308:	f000 fa4d 	bl	80077a6 <__hi0bits>
 800730c:	f1c0 0020 	rsb	r0, r0, #32
 8007310:	4440      	add	r0, r8
 8007312:	f010 001f 	ands.w	r0, r0, #31
 8007316:	d047      	beq.n	80073a8 <_dtoa_r+0x8c0>
 8007318:	f1c0 0320 	rsb	r3, r0, #32
 800731c:	2b04      	cmp	r3, #4
 800731e:	dd3b      	ble.n	8007398 <_dtoa_r+0x8b0>
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	f1c0 001c 	rsb	r0, r0, #28
 8007326:	4403      	add	r3, r0
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	4405      	add	r5, r0
 800732c:	4480      	add	r8, r0
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	dd05      	ble.n	8007340 <_dtoa_r+0x858>
 8007334:	461a      	mov	r2, r3
 8007336:	9904      	ldr	r1, [sp, #16]
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fb6f 	bl	8007a1c <__lshift>
 800733e:	9004      	str	r0, [sp, #16]
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x86a>
 8007346:	4639      	mov	r1, r7
 8007348:	4642      	mov	r2, r8
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fb66 	bl	8007a1c <__lshift>
 8007350:	4607      	mov	r7, r0
 8007352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007354:	b353      	cbz	r3, 80073ac <_dtoa_r+0x8c4>
 8007356:	4639      	mov	r1, r7
 8007358:	9804      	ldr	r0, [sp, #16]
 800735a:	f000 fbb3 	bl	8007ac4 <__mcmp>
 800735e:	2800      	cmp	r0, #0
 8007360:	da24      	bge.n	80073ac <_dtoa_r+0x8c4>
 8007362:	2300      	movs	r3, #0
 8007364:	220a      	movs	r2, #10
 8007366:	9904      	ldr	r1, [sp, #16]
 8007368:	4620      	mov	r0, r4
 800736a:	f000 f9e1 	bl	8007730 <__multadd>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9004      	str	r0, [sp, #16]
 8007372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 814d 	beq.w	8007616 <_dtoa_r+0xb2e>
 800737c:	2300      	movs	r3, #0
 800737e:	4631      	mov	r1, r6
 8007380:	220a      	movs	r2, #10
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f9d4 	bl	8007730 <__multadd>
 8007388:	9b02      	ldr	r3, [sp, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	4606      	mov	r6, r0
 800738e:	dc4f      	bgt.n	8007430 <_dtoa_r+0x948>
 8007390:	9b06      	ldr	r3, [sp, #24]
 8007392:	2b02      	cmp	r3, #2
 8007394:	dd4c      	ble.n	8007430 <_dtoa_r+0x948>
 8007396:	e011      	b.n	80073bc <_dtoa_r+0x8d4>
 8007398:	d0c9      	beq.n	800732e <_dtoa_r+0x846>
 800739a:	9a05      	ldr	r2, [sp, #20]
 800739c:	331c      	adds	r3, #28
 800739e:	441a      	add	r2, r3
 80073a0:	9205      	str	r2, [sp, #20]
 80073a2:	441d      	add	r5, r3
 80073a4:	4498      	add	r8, r3
 80073a6:	e7c2      	b.n	800732e <_dtoa_r+0x846>
 80073a8:	4603      	mov	r3, r0
 80073aa:	e7f6      	b.n	800739a <_dtoa_r+0x8b2>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	dc38      	bgt.n	8007424 <_dtoa_r+0x93c>
 80073b2:	9b06      	ldr	r3, [sp, #24]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	dd35      	ble.n	8007424 <_dtoa_r+0x93c>
 80073b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	b963      	cbnz	r3, 80073da <_dtoa_r+0x8f2>
 80073c0:	4639      	mov	r1, r7
 80073c2:	2205      	movs	r2, #5
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 f9b3 	bl	8007730 <__multadd>
 80073ca:	4601      	mov	r1, r0
 80073cc:	4607      	mov	r7, r0
 80073ce:	9804      	ldr	r0, [sp, #16]
 80073d0:	f000 fb78 	bl	8007ac4 <__mcmp>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f73f adcc 	bgt.w	8006f72 <_dtoa_r+0x48a>
 80073da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073dc:	465d      	mov	r5, fp
 80073de:	ea6f 0a03 	mvn.w	sl, r3
 80073e2:	f04f 0900 	mov.w	r9, #0
 80073e6:	4639      	mov	r1, r7
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 f98a 	bl	8007702 <_Bfree>
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	f43f aeb7 	beq.w	8007162 <_dtoa_r+0x67a>
 80073f4:	f1b9 0f00 	cmp.w	r9, #0
 80073f8:	d005      	beq.n	8007406 <_dtoa_r+0x91e>
 80073fa:	45b1      	cmp	r9, r6
 80073fc:	d003      	beq.n	8007406 <_dtoa_r+0x91e>
 80073fe:	4649      	mov	r1, r9
 8007400:	4620      	mov	r0, r4
 8007402:	f000 f97e 	bl	8007702 <_Bfree>
 8007406:	4631      	mov	r1, r6
 8007408:	4620      	mov	r0, r4
 800740a:	f000 f97a 	bl	8007702 <_Bfree>
 800740e:	e6a8      	b.n	8007162 <_dtoa_r+0x67a>
 8007410:	2700      	movs	r7, #0
 8007412:	463e      	mov	r6, r7
 8007414:	e7e1      	b.n	80073da <_dtoa_r+0x8f2>
 8007416:	f8dd a020 	ldr.w	sl, [sp, #32]
 800741a:	463e      	mov	r6, r7
 800741c:	e5a9      	b.n	8006f72 <_dtoa_r+0x48a>
 800741e:	bf00      	nop
 8007420:	40240000 	.word	0x40240000
 8007424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007426:	f8cd 9008 	str.w	r9, [sp, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80fa 	beq.w	8007624 <_dtoa_r+0xb3c>
 8007430:	2d00      	cmp	r5, #0
 8007432:	dd05      	ble.n	8007440 <_dtoa_r+0x958>
 8007434:	4631      	mov	r1, r6
 8007436:	462a      	mov	r2, r5
 8007438:	4620      	mov	r0, r4
 800743a:	f000 faef 	bl	8007a1c <__lshift>
 800743e:	4606      	mov	r6, r0
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d04c      	beq.n	80074e0 <_dtoa_r+0x9f8>
 8007446:	6871      	ldr	r1, [r6, #4]
 8007448:	4620      	mov	r0, r4
 800744a:	f000 f926 	bl	800769a <_Balloc>
 800744e:	6932      	ldr	r2, [r6, #16]
 8007450:	3202      	adds	r2, #2
 8007452:	4605      	mov	r5, r0
 8007454:	0092      	lsls	r2, r2, #2
 8007456:	f106 010c 	add.w	r1, r6, #12
 800745a:	300c      	adds	r0, #12
 800745c:	f000 f912 	bl	8007684 <memcpy>
 8007460:	2201      	movs	r2, #1
 8007462:	4629      	mov	r1, r5
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fad9 	bl	8007a1c <__lshift>
 800746a:	9b00      	ldr	r3, [sp, #0]
 800746c:	f8cd b014 	str.w	fp, [sp, #20]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	46b1      	mov	r9, r6
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	4606      	mov	r6, r0
 800747a:	4639      	mov	r1, r7
 800747c:	9804      	ldr	r0, [sp, #16]
 800747e:	f7ff faa5 	bl	80069cc <quorem>
 8007482:	4649      	mov	r1, r9
 8007484:	4605      	mov	r5, r0
 8007486:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800748a:	9804      	ldr	r0, [sp, #16]
 800748c:	f000 fb1a 	bl	8007ac4 <__mcmp>
 8007490:	4632      	mov	r2, r6
 8007492:	9000      	str	r0, [sp, #0]
 8007494:	4639      	mov	r1, r7
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fb2e 	bl	8007af8 <__mdiff>
 800749c:	68c3      	ldr	r3, [r0, #12]
 800749e:	4602      	mov	r2, r0
 80074a0:	bb03      	cbnz	r3, 80074e4 <_dtoa_r+0x9fc>
 80074a2:	4601      	mov	r1, r0
 80074a4:	9008      	str	r0, [sp, #32]
 80074a6:	9804      	ldr	r0, [sp, #16]
 80074a8:	f000 fb0c 	bl	8007ac4 <__mcmp>
 80074ac:	9a08      	ldr	r2, [sp, #32]
 80074ae:	4603      	mov	r3, r0
 80074b0:	4611      	mov	r1, r2
 80074b2:	4620      	mov	r0, r4
 80074b4:	9308      	str	r3, [sp, #32]
 80074b6:	f000 f924 	bl	8007702 <_Bfree>
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	b9a3      	cbnz	r3, 80074e8 <_dtoa_r+0xa00>
 80074be:	9a06      	ldr	r2, [sp, #24]
 80074c0:	b992      	cbnz	r2, 80074e8 <_dtoa_r+0xa00>
 80074c2:	9a07      	ldr	r2, [sp, #28]
 80074c4:	b982      	cbnz	r2, 80074e8 <_dtoa_r+0xa00>
 80074c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074ca:	d029      	beq.n	8007520 <_dtoa_r+0xa38>
 80074cc:	9b00      	ldr	r3, [sp, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd01      	ble.n	80074d6 <_dtoa_r+0x9ee>
 80074d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80074d6:	9b05      	ldr	r3, [sp, #20]
 80074d8:	1c5d      	adds	r5, r3, #1
 80074da:	f883 8000 	strb.w	r8, [r3]
 80074de:	e782      	b.n	80073e6 <_dtoa_r+0x8fe>
 80074e0:	4630      	mov	r0, r6
 80074e2:	e7c2      	b.n	800746a <_dtoa_r+0x982>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e7e3      	b.n	80074b0 <_dtoa_r+0x9c8>
 80074e8:	9a00      	ldr	r2, [sp, #0]
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	db04      	blt.n	80074f8 <_dtoa_r+0xa10>
 80074ee:	d125      	bne.n	800753c <_dtoa_r+0xa54>
 80074f0:	9a06      	ldr	r2, [sp, #24]
 80074f2:	bb1a      	cbnz	r2, 800753c <_dtoa_r+0xa54>
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	bb0a      	cbnz	r2, 800753c <_dtoa_r+0xa54>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	ddec      	ble.n	80074d6 <_dtoa_r+0x9ee>
 80074fc:	2201      	movs	r2, #1
 80074fe:	9904      	ldr	r1, [sp, #16]
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fa8b 	bl	8007a1c <__lshift>
 8007506:	4639      	mov	r1, r7
 8007508:	9004      	str	r0, [sp, #16]
 800750a:	f000 fadb 	bl	8007ac4 <__mcmp>
 800750e:	2800      	cmp	r0, #0
 8007510:	dc03      	bgt.n	800751a <_dtoa_r+0xa32>
 8007512:	d1e0      	bne.n	80074d6 <_dtoa_r+0x9ee>
 8007514:	f018 0f01 	tst.w	r8, #1
 8007518:	d0dd      	beq.n	80074d6 <_dtoa_r+0x9ee>
 800751a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800751e:	d1d8      	bne.n	80074d2 <_dtoa_r+0x9ea>
 8007520:	9b05      	ldr	r3, [sp, #20]
 8007522:	9a05      	ldr	r2, [sp, #20]
 8007524:	1c5d      	adds	r5, r3, #1
 8007526:	2339      	movs	r3, #57	; 0x39
 8007528:	7013      	strb	r3, [r2, #0]
 800752a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800752e:	2b39      	cmp	r3, #57	; 0x39
 8007530:	f105 32ff 	add.w	r2, r5, #4294967295
 8007534:	d04f      	beq.n	80075d6 <_dtoa_r+0xaee>
 8007536:	3301      	adds	r3, #1
 8007538:	7013      	strb	r3, [r2, #0]
 800753a:	e754      	b.n	80073e6 <_dtoa_r+0x8fe>
 800753c:	9a05      	ldr	r2, [sp, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f102 0501 	add.w	r5, r2, #1
 8007544:	dd06      	ble.n	8007554 <_dtoa_r+0xa6c>
 8007546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800754a:	d0e9      	beq.n	8007520 <_dtoa_r+0xa38>
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	9b05      	ldr	r3, [sp, #20]
 8007552:	e7c2      	b.n	80074da <_dtoa_r+0x9f2>
 8007554:	9a02      	ldr	r2, [sp, #8]
 8007556:	f805 8c01 	strb.w	r8, [r5, #-1]
 800755a:	eba5 030b 	sub.w	r3, r5, fp
 800755e:	4293      	cmp	r3, r2
 8007560:	d021      	beq.n	80075a6 <_dtoa_r+0xabe>
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	9904      	ldr	r1, [sp, #16]
 8007568:	4620      	mov	r0, r4
 800756a:	f000 f8e1 	bl	8007730 <__multadd>
 800756e:	45b1      	cmp	r9, r6
 8007570:	9004      	str	r0, [sp, #16]
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	f04f 020a 	mov.w	r2, #10
 800757a:	4649      	mov	r1, r9
 800757c:	4620      	mov	r0, r4
 800757e:	d105      	bne.n	800758c <_dtoa_r+0xaa4>
 8007580:	f000 f8d6 	bl	8007730 <__multadd>
 8007584:	4681      	mov	r9, r0
 8007586:	4606      	mov	r6, r0
 8007588:	9505      	str	r5, [sp, #20]
 800758a:	e776      	b.n	800747a <_dtoa_r+0x992>
 800758c:	f000 f8d0 	bl	8007730 <__multadd>
 8007590:	4631      	mov	r1, r6
 8007592:	4681      	mov	r9, r0
 8007594:	2300      	movs	r3, #0
 8007596:	220a      	movs	r2, #10
 8007598:	4620      	mov	r0, r4
 800759a:	f000 f8c9 	bl	8007730 <__multadd>
 800759e:	4606      	mov	r6, r0
 80075a0:	e7f2      	b.n	8007588 <_dtoa_r+0xaa0>
 80075a2:	f04f 0900 	mov.w	r9, #0
 80075a6:	2201      	movs	r2, #1
 80075a8:	9904      	ldr	r1, [sp, #16]
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fa36 	bl	8007a1c <__lshift>
 80075b0:	4639      	mov	r1, r7
 80075b2:	9004      	str	r0, [sp, #16]
 80075b4:	f000 fa86 	bl	8007ac4 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dcb6      	bgt.n	800752a <_dtoa_r+0xa42>
 80075bc:	d102      	bne.n	80075c4 <_dtoa_r+0xadc>
 80075be:	f018 0f01 	tst.w	r8, #1
 80075c2:	d1b2      	bne.n	800752a <_dtoa_r+0xa42>
 80075c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075c8:	2b30      	cmp	r3, #48	; 0x30
 80075ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80075ce:	f47f af0a 	bne.w	80073e6 <_dtoa_r+0x8fe>
 80075d2:	4615      	mov	r5, r2
 80075d4:	e7f6      	b.n	80075c4 <_dtoa_r+0xadc>
 80075d6:	4593      	cmp	fp, r2
 80075d8:	d105      	bne.n	80075e6 <_dtoa_r+0xafe>
 80075da:	2331      	movs	r3, #49	; 0x31
 80075dc:	f10a 0a01 	add.w	sl, sl, #1
 80075e0:	f88b 3000 	strb.w	r3, [fp]
 80075e4:	e6ff      	b.n	80073e6 <_dtoa_r+0x8fe>
 80075e6:	4615      	mov	r5, r2
 80075e8:	e79f      	b.n	800752a <_dtoa_r+0xa42>
 80075ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007650 <_dtoa_r+0xb68>
 80075ee:	e007      	b.n	8007600 <_dtoa_r+0xb18>
 80075f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007654 <_dtoa_r+0xb6c>
 80075f6:	b11b      	cbz	r3, 8007600 <_dtoa_r+0xb18>
 80075f8:	f10b 0308 	add.w	r3, fp, #8
 80075fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	4658      	mov	r0, fp
 8007602:	b017      	add	sp, #92	; 0x5c
 8007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	2b01      	cmp	r3, #1
 800760c:	f77f ae35 	ble.w	800727a <_dtoa_r+0x792>
 8007610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007612:	9307      	str	r3, [sp, #28]
 8007614:	e649      	b.n	80072aa <_dtoa_r+0x7c2>
 8007616:	9b02      	ldr	r3, [sp, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dc03      	bgt.n	8007624 <_dtoa_r+0xb3c>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	2b02      	cmp	r3, #2
 8007620:	f73f aecc 	bgt.w	80073bc <_dtoa_r+0x8d4>
 8007624:	465d      	mov	r5, fp
 8007626:	4639      	mov	r1, r7
 8007628:	9804      	ldr	r0, [sp, #16]
 800762a:	f7ff f9cf 	bl	80069cc <quorem>
 800762e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007632:	f805 8b01 	strb.w	r8, [r5], #1
 8007636:	9a02      	ldr	r2, [sp, #8]
 8007638:	eba5 030b 	sub.w	r3, r5, fp
 800763c:	429a      	cmp	r2, r3
 800763e:	ddb0      	ble.n	80075a2 <_dtoa_r+0xaba>
 8007640:	2300      	movs	r3, #0
 8007642:	220a      	movs	r2, #10
 8007644:	9904      	ldr	r1, [sp, #16]
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f872 	bl	8007730 <__multadd>
 800764c:	9004      	str	r0, [sp, #16]
 800764e:	e7ea      	b.n	8007626 <_dtoa_r+0xb3e>
 8007650:	08008590 	.word	0x08008590
 8007654:	080085b4 	.word	0x080085b4

08007658 <_localeconv_r>:
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <_localeconv_r+0x14>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a18      	ldr	r0, [r3, #32]
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <_localeconv_r+0x18>)
 8007660:	2800      	cmp	r0, #0
 8007662:	bf08      	it	eq
 8007664:	4618      	moveq	r0, r3
 8007666:	30f0      	adds	r0, #240	; 0xf0
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000174 	.word	0x20000174
 8007670:	200001d8 	.word	0x200001d8

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 bb45 	b.w	8007d08 <_malloc_r>
 800767e:	bf00      	nop
 8007680:	20000174 	.word	0x20000174

08007684 <memcpy>:
 8007684:	b510      	push	{r4, lr}
 8007686:	1e43      	subs	r3, r0, #1
 8007688:	440a      	add	r2, r1
 800768a:	4291      	cmp	r1, r2
 800768c:	d100      	bne.n	8007690 <memcpy+0xc>
 800768e:	bd10      	pop	{r4, pc}
 8007690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007698:	e7f7      	b.n	800768a <memcpy+0x6>

0800769a <_Balloc>:
 800769a:	b570      	push	{r4, r5, r6, lr}
 800769c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800769e:	4604      	mov	r4, r0
 80076a0:	460e      	mov	r6, r1
 80076a2:	b93d      	cbnz	r5, 80076b4 <_Balloc+0x1a>
 80076a4:	2010      	movs	r0, #16
 80076a6:	f7ff ffe5 	bl	8007674 <malloc>
 80076aa:	6260      	str	r0, [r4, #36]	; 0x24
 80076ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076b0:	6005      	str	r5, [r0, #0]
 80076b2:	60c5      	str	r5, [r0, #12]
 80076b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076b6:	68eb      	ldr	r3, [r5, #12]
 80076b8:	b183      	cbz	r3, 80076dc <_Balloc+0x42>
 80076ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076c2:	b9b8      	cbnz	r0, 80076f4 <_Balloc+0x5a>
 80076c4:	2101      	movs	r1, #1
 80076c6:	fa01 f506 	lsl.w	r5, r1, r6
 80076ca:	1d6a      	adds	r2, r5, #5
 80076cc:	0092      	lsls	r2, r2, #2
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fabe 	bl	8007c50 <_calloc_r>
 80076d4:	b160      	cbz	r0, 80076f0 <_Balloc+0x56>
 80076d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076da:	e00e      	b.n	80076fa <_Balloc+0x60>
 80076dc:	2221      	movs	r2, #33	; 0x21
 80076de:	2104      	movs	r1, #4
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fab5 	bl	8007c50 <_calloc_r>
 80076e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e8:	60e8      	str	r0, [r5, #12]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e4      	bne.n	80076ba <_Balloc+0x20>
 80076f0:	2000      	movs	r0, #0
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	6802      	ldr	r2, [r0, #0]
 80076f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076fa:	2300      	movs	r3, #0
 80076fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007700:	e7f7      	b.n	80076f2 <_Balloc+0x58>

08007702 <_Bfree>:
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007706:	4606      	mov	r6, r0
 8007708:	460d      	mov	r5, r1
 800770a:	b93c      	cbnz	r4, 800771c <_Bfree+0x1a>
 800770c:	2010      	movs	r0, #16
 800770e:	f7ff ffb1 	bl	8007674 <malloc>
 8007712:	6270      	str	r0, [r6, #36]	; 0x24
 8007714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007718:	6004      	str	r4, [r0, #0]
 800771a:	60c4      	str	r4, [r0, #12]
 800771c:	b13d      	cbz	r5, 800772e <_Bfree+0x2c>
 800771e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007720:	686a      	ldr	r2, [r5, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007728:	6029      	str	r1, [r5, #0]
 800772a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800772e:	bd70      	pop	{r4, r5, r6, pc}

08007730 <__multadd>:
 8007730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007734:	690d      	ldr	r5, [r1, #16]
 8007736:	461f      	mov	r7, r3
 8007738:	4606      	mov	r6, r0
 800773a:	460c      	mov	r4, r1
 800773c:	f101 0c14 	add.w	ip, r1, #20
 8007740:	2300      	movs	r3, #0
 8007742:	f8dc 0000 	ldr.w	r0, [ip]
 8007746:	b281      	uxth	r1, r0
 8007748:	fb02 7101 	mla	r1, r2, r1, r7
 800774c:	0c0f      	lsrs	r7, r1, #16
 800774e:	0c00      	lsrs	r0, r0, #16
 8007750:	fb02 7000 	mla	r0, r2, r0, r7
 8007754:	b289      	uxth	r1, r1
 8007756:	3301      	adds	r3, #1
 8007758:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800775c:	429d      	cmp	r5, r3
 800775e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007762:	f84c 1b04 	str.w	r1, [ip], #4
 8007766:	dcec      	bgt.n	8007742 <__multadd+0x12>
 8007768:	b1d7      	cbz	r7, 80077a0 <__multadd+0x70>
 800776a:	68a3      	ldr	r3, [r4, #8]
 800776c:	42ab      	cmp	r3, r5
 800776e:	dc12      	bgt.n	8007796 <__multadd+0x66>
 8007770:	6861      	ldr	r1, [r4, #4]
 8007772:	4630      	mov	r0, r6
 8007774:	3101      	adds	r1, #1
 8007776:	f7ff ff90 	bl	800769a <_Balloc>
 800777a:	6922      	ldr	r2, [r4, #16]
 800777c:	3202      	adds	r2, #2
 800777e:	f104 010c 	add.w	r1, r4, #12
 8007782:	4680      	mov	r8, r0
 8007784:	0092      	lsls	r2, r2, #2
 8007786:	300c      	adds	r0, #12
 8007788:	f7ff ff7c 	bl	8007684 <memcpy>
 800778c:	4621      	mov	r1, r4
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff ffb7 	bl	8007702 <_Bfree>
 8007794:	4644      	mov	r4, r8
 8007796:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800779a:	3501      	adds	r5, #1
 800779c:	615f      	str	r7, [r3, #20]
 800779e:	6125      	str	r5, [r4, #16]
 80077a0:	4620      	mov	r0, r4
 80077a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077a6 <__hi0bits>:
 80077a6:	0c02      	lsrs	r2, r0, #16
 80077a8:	0412      	lsls	r2, r2, #16
 80077aa:	4603      	mov	r3, r0
 80077ac:	b9b2      	cbnz	r2, 80077dc <__hi0bits+0x36>
 80077ae:	0403      	lsls	r3, r0, #16
 80077b0:	2010      	movs	r0, #16
 80077b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80077b6:	bf04      	itt	eq
 80077b8:	021b      	lsleq	r3, r3, #8
 80077ba:	3008      	addeq	r0, #8
 80077bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80077c0:	bf04      	itt	eq
 80077c2:	011b      	lsleq	r3, r3, #4
 80077c4:	3004      	addeq	r0, #4
 80077c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077ca:	bf04      	itt	eq
 80077cc:	009b      	lsleq	r3, r3, #2
 80077ce:	3002      	addeq	r0, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	db06      	blt.n	80077e2 <__hi0bits+0x3c>
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	d503      	bpl.n	80077e0 <__hi0bits+0x3a>
 80077d8:	3001      	adds	r0, #1
 80077da:	4770      	bx	lr
 80077dc:	2000      	movs	r0, #0
 80077de:	e7e8      	b.n	80077b2 <__hi0bits+0xc>
 80077e0:	2020      	movs	r0, #32
 80077e2:	4770      	bx	lr

080077e4 <__lo0bits>:
 80077e4:	6803      	ldr	r3, [r0, #0]
 80077e6:	f013 0207 	ands.w	r2, r3, #7
 80077ea:	4601      	mov	r1, r0
 80077ec:	d00b      	beq.n	8007806 <__lo0bits+0x22>
 80077ee:	07da      	lsls	r2, r3, #31
 80077f0:	d423      	bmi.n	800783a <__lo0bits+0x56>
 80077f2:	0798      	lsls	r0, r3, #30
 80077f4:	bf49      	itett	mi
 80077f6:	085b      	lsrmi	r3, r3, #1
 80077f8:	089b      	lsrpl	r3, r3, #2
 80077fa:	2001      	movmi	r0, #1
 80077fc:	600b      	strmi	r3, [r1, #0]
 80077fe:	bf5c      	itt	pl
 8007800:	600b      	strpl	r3, [r1, #0]
 8007802:	2002      	movpl	r0, #2
 8007804:	4770      	bx	lr
 8007806:	b298      	uxth	r0, r3
 8007808:	b9a8      	cbnz	r0, 8007836 <__lo0bits+0x52>
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	2010      	movs	r0, #16
 800780e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007812:	bf04      	itt	eq
 8007814:	0a1b      	lsreq	r3, r3, #8
 8007816:	3008      	addeq	r0, #8
 8007818:	071a      	lsls	r2, r3, #28
 800781a:	bf04      	itt	eq
 800781c:	091b      	lsreq	r3, r3, #4
 800781e:	3004      	addeq	r0, #4
 8007820:	079a      	lsls	r2, r3, #30
 8007822:	bf04      	itt	eq
 8007824:	089b      	lsreq	r3, r3, #2
 8007826:	3002      	addeq	r0, #2
 8007828:	07da      	lsls	r2, r3, #31
 800782a:	d402      	bmi.n	8007832 <__lo0bits+0x4e>
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	d006      	beq.n	800783e <__lo0bits+0x5a>
 8007830:	3001      	adds	r0, #1
 8007832:	600b      	str	r3, [r1, #0]
 8007834:	4770      	bx	lr
 8007836:	4610      	mov	r0, r2
 8007838:	e7e9      	b.n	800780e <__lo0bits+0x2a>
 800783a:	2000      	movs	r0, #0
 800783c:	4770      	bx	lr
 800783e:	2020      	movs	r0, #32
 8007840:	4770      	bx	lr

08007842 <__i2b>:
 8007842:	b510      	push	{r4, lr}
 8007844:	460c      	mov	r4, r1
 8007846:	2101      	movs	r1, #1
 8007848:	f7ff ff27 	bl	800769a <_Balloc>
 800784c:	2201      	movs	r2, #1
 800784e:	6144      	str	r4, [r0, #20]
 8007850:	6102      	str	r2, [r0, #16]
 8007852:	bd10      	pop	{r4, pc}

08007854 <__multiply>:
 8007854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	4614      	mov	r4, r2
 800785a:	690a      	ldr	r2, [r1, #16]
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	bfb8      	it	lt
 8007862:	460b      	movlt	r3, r1
 8007864:	4688      	mov	r8, r1
 8007866:	bfbc      	itt	lt
 8007868:	46a0      	movlt	r8, r4
 800786a:	461c      	movlt	r4, r3
 800786c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007874:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800787c:	eb07 0609 	add.w	r6, r7, r9
 8007880:	42b3      	cmp	r3, r6
 8007882:	bfb8      	it	lt
 8007884:	3101      	addlt	r1, #1
 8007886:	f7ff ff08 	bl	800769a <_Balloc>
 800788a:	f100 0514 	add.w	r5, r0, #20
 800788e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007892:	462b      	mov	r3, r5
 8007894:	2200      	movs	r2, #0
 8007896:	4573      	cmp	r3, lr
 8007898:	d316      	bcc.n	80078c8 <__multiply+0x74>
 800789a:	f104 0214 	add.w	r2, r4, #20
 800789e:	f108 0114 	add.w	r1, r8, #20
 80078a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80078a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	9b00      	ldr	r3, [sp, #0]
 80078ae:	9201      	str	r2, [sp, #4]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d80c      	bhi.n	80078ce <__multiply+0x7a>
 80078b4:	2e00      	cmp	r6, #0
 80078b6:	dd03      	ble.n	80078c0 <__multiply+0x6c>
 80078b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d05d      	beq.n	800797c <__multiply+0x128>
 80078c0:	6106      	str	r6, [r0, #16]
 80078c2:	b003      	add	sp, #12
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c8:	f843 2b04 	str.w	r2, [r3], #4
 80078cc:	e7e3      	b.n	8007896 <__multiply+0x42>
 80078ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80078d2:	f1bb 0f00 	cmp.w	fp, #0
 80078d6:	d023      	beq.n	8007920 <__multiply+0xcc>
 80078d8:	4689      	mov	r9, r1
 80078da:	46ac      	mov	ip, r5
 80078dc:	f04f 0800 	mov.w	r8, #0
 80078e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80078e4:	f8dc a000 	ldr.w	sl, [ip]
 80078e8:	b2a3      	uxth	r3, r4
 80078ea:	fa1f fa8a 	uxth.w	sl, sl
 80078ee:	fb0b a303 	mla	r3, fp, r3, sl
 80078f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078f6:	f8dc 4000 	ldr.w	r4, [ip]
 80078fa:	4443      	add	r3, r8
 80078fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007900:	fb0b 840a 	mla	r4, fp, sl, r8
 8007904:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007908:	46e2      	mov	sl, ip
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007910:	454f      	cmp	r7, r9
 8007912:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007916:	f84a 3b04 	str.w	r3, [sl], #4
 800791a:	d82b      	bhi.n	8007974 <__multiply+0x120>
 800791c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007920:	9b01      	ldr	r3, [sp, #4]
 8007922:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007926:	3204      	adds	r2, #4
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	d020      	beq.n	8007970 <__multiply+0x11c>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	4689      	mov	r9, r1
 8007932:	46a8      	mov	r8, r5
 8007934:	f04f 0b00 	mov.w	fp, #0
 8007938:	f8b9 c000 	ldrh.w	ip, [r9]
 800793c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007940:	fb0a 440c 	mla	r4, sl, ip, r4
 8007944:	445c      	add	r4, fp
 8007946:	46c4      	mov	ip, r8
 8007948:	b29b      	uxth	r3, r3
 800794a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800794e:	f84c 3b04 	str.w	r3, [ip], #4
 8007952:	f859 3b04 	ldr.w	r3, [r9], #4
 8007956:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	fb0a b303 	mla	r3, sl, r3, fp
 8007960:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007964:	454f      	cmp	r7, r9
 8007966:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800796a:	d805      	bhi.n	8007978 <__multiply+0x124>
 800796c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007970:	3504      	adds	r5, #4
 8007972:	e79b      	b.n	80078ac <__multiply+0x58>
 8007974:	46d4      	mov	ip, sl
 8007976:	e7b3      	b.n	80078e0 <__multiply+0x8c>
 8007978:	46e0      	mov	r8, ip
 800797a:	e7dd      	b.n	8007938 <__multiply+0xe4>
 800797c:	3e01      	subs	r6, #1
 800797e:	e799      	b.n	80078b4 <__multiply+0x60>

08007980 <__pow5mult>:
 8007980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007984:	4615      	mov	r5, r2
 8007986:	f012 0203 	ands.w	r2, r2, #3
 800798a:	4606      	mov	r6, r0
 800798c:	460f      	mov	r7, r1
 800798e:	d007      	beq.n	80079a0 <__pow5mult+0x20>
 8007990:	3a01      	subs	r2, #1
 8007992:	4c21      	ldr	r4, [pc, #132]	; (8007a18 <__pow5mult+0x98>)
 8007994:	2300      	movs	r3, #0
 8007996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800799a:	f7ff fec9 	bl	8007730 <__multadd>
 800799e:	4607      	mov	r7, r0
 80079a0:	10ad      	asrs	r5, r5, #2
 80079a2:	d035      	beq.n	8007a10 <__pow5mult+0x90>
 80079a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079a6:	b93c      	cbnz	r4, 80079b8 <__pow5mult+0x38>
 80079a8:	2010      	movs	r0, #16
 80079aa:	f7ff fe63 	bl	8007674 <malloc>
 80079ae:	6270      	str	r0, [r6, #36]	; 0x24
 80079b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079b4:	6004      	str	r4, [r0, #0]
 80079b6:	60c4      	str	r4, [r0, #12]
 80079b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079c0:	b94c      	cbnz	r4, 80079d6 <__pow5mult+0x56>
 80079c2:	f240 2171 	movw	r1, #625	; 0x271
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ff3b 	bl	8007842 <__i2b>
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80079d2:	4604      	mov	r4, r0
 80079d4:	6003      	str	r3, [r0, #0]
 80079d6:	f04f 0800 	mov.w	r8, #0
 80079da:	07eb      	lsls	r3, r5, #31
 80079dc:	d50a      	bpl.n	80079f4 <__pow5mult+0x74>
 80079de:	4639      	mov	r1, r7
 80079e0:	4622      	mov	r2, r4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ff36 	bl	8007854 <__multiply>
 80079e8:	4639      	mov	r1, r7
 80079ea:	4681      	mov	r9, r0
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff fe88 	bl	8007702 <_Bfree>
 80079f2:	464f      	mov	r7, r9
 80079f4:	106d      	asrs	r5, r5, #1
 80079f6:	d00b      	beq.n	8007a10 <__pow5mult+0x90>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	b938      	cbnz	r0, 8007a0c <__pow5mult+0x8c>
 80079fc:	4622      	mov	r2, r4
 80079fe:	4621      	mov	r1, r4
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff ff27 	bl	8007854 <__multiply>
 8007a06:	6020      	str	r0, [r4, #0]
 8007a08:	f8c0 8000 	str.w	r8, [r0]
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	e7e4      	b.n	80079da <__pow5mult+0x5a>
 8007a10:	4638      	mov	r0, r7
 8007a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a16:	bf00      	nop
 8007a18:	080086b8 	.word	0x080086b8

08007a1c <__lshift>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	6849      	ldr	r1, [r1, #4]
 8007a2a:	eb0a 0903 	add.w	r9, sl, r3
 8007a2e:	68a3      	ldr	r3, [r4, #8]
 8007a30:	4607      	mov	r7, r0
 8007a32:	4616      	mov	r6, r2
 8007a34:	f109 0501 	add.w	r5, r9, #1
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	db32      	blt.n	8007aa2 <__lshift+0x86>
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fe2c 	bl	800769a <_Balloc>
 8007a42:	2300      	movs	r3, #0
 8007a44:	4680      	mov	r8, r0
 8007a46:	f100 0114 	add.w	r1, r0, #20
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4553      	cmp	r3, sl
 8007a4e:	db2b      	blt.n	8007aa8 <__lshift+0x8c>
 8007a50:	6920      	ldr	r0, [r4, #16]
 8007a52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a56:	f104 0314 	add.w	r3, r4, #20
 8007a5a:	f016 021f 	ands.w	r2, r6, #31
 8007a5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a66:	d025      	beq.n	8007ab4 <__lshift+0x98>
 8007a68:	f1c2 0e20 	rsb	lr, r2, #32
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	681e      	ldr	r6, [r3, #0]
 8007a70:	468a      	mov	sl, r1
 8007a72:	4096      	lsls	r6, r2
 8007a74:	4330      	orrs	r0, r6
 8007a76:	f84a 0b04 	str.w	r0, [sl], #4
 8007a7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a7e:	459c      	cmp	ip, r3
 8007a80:	fa20 f00e 	lsr.w	r0, r0, lr
 8007a84:	d814      	bhi.n	8007ab0 <__lshift+0x94>
 8007a86:	6048      	str	r0, [r1, #4]
 8007a88:	b108      	cbz	r0, 8007a8e <__lshift+0x72>
 8007a8a:	f109 0502 	add.w	r5, r9, #2
 8007a8e:	3d01      	subs	r5, #1
 8007a90:	4638      	mov	r0, r7
 8007a92:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a96:	4621      	mov	r1, r4
 8007a98:	f7ff fe33 	bl	8007702 <_Bfree>
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa2:	3101      	adds	r1, #1
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	e7c7      	b.n	8007a38 <__lshift+0x1c>
 8007aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007aac:	3301      	adds	r3, #1
 8007aae:	e7cd      	b.n	8007a4c <__lshift+0x30>
 8007ab0:	4651      	mov	r1, sl
 8007ab2:	e7dc      	b.n	8007a6e <__lshift+0x52>
 8007ab4:	3904      	subs	r1, #4
 8007ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007abe:	459c      	cmp	ip, r3
 8007ac0:	d8f9      	bhi.n	8007ab6 <__lshift+0x9a>
 8007ac2:	e7e4      	b.n	8007a8e <__lshift+0x72>

08007ac4 <__mcmp>:
 8007ac4:	6903      	ldr	r3, [r0, #16]
 8007ac6:	690a      	ldr	r2, [r1, #16]
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	b530      	push	{r4, r5, lr}
 8007acc:	d10c      	bne.n	8007ae8 <__mcmp+0x24>
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	3014      	adds	r0, #20
 8007ad2:	3114      	adds	r1, #20
 8007ad4:	1884      	adds	r4, r0, r2
 8007ad6:	4411      	add	r1, r2
 8007ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ae0:	4295      	cmp	r5, r2
 8007ae2:	d003      	beq.n	8007aec <__mcmp+0x28>
 8007ae4:	d305      	bcc.n	8007af2 <__mcmp+0x2e>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd30      	pop	{r4, r5, pc}
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d3f3      	bcc.n	8007ad8 <__mcmp+0x14>
 8007af0:	e7fa      	b.n	8007ae8 <__mcmp+0x24>
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295
 8007af6:	e7f7      	b.n	8007ae8 <__mcmp+0x24>

08007af8 <__mdiff>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	460d      	mov	r5, r1
 8007afe:	4607      	mov	r7, r0
 8007b00:	4611      	mov	r1, r2
 8007b02:	4628      	mov	r0, r5
 8007b04:	4614      	mov	r4, r2
 8007b06:	f7ff ffdd 	bl	8007ac4 <__mcmp>
 8007b0a:	1e06      	subs	r6, r0, #0
 8007b0c:	d108      	bne.n	8007b20 <__mdiff+0x28>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff fdc2 	bl	800769a <_Balloc>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b20:	bfa4      	itt	ge
 8007b22:	4623      	movge	r3, r4
 8007b24:	462c      	movge	r4, r5
 8007b26:	4638      	mov	r0, r7
 8007b28:	6861      	ldr	r1, [r4, #4]
 8007b2a:	bfa6      	itte	ge
 8007b2c:	461d      	movge	r5, r3
 8007b2e:	2600      	movge	r6, #0
 8007b30:	2601      	movlt	r6, #1
 8007b32:	f7ff fdb2 	bl	800769a <_Balloc>
 8007b36:	692b      	ldr	r3, [r5, #16]
 8007b38:	60c6      	str	r6, [r0, #12]
 8007b3a:	6926      	ldr	r6, [r4, #16]
 8007b3c:	f105 0914 	add.w	r9, r5, #20
 8007b40:	f104 0214 	add.w	r2, r4, #20
 8007b44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b4c:	f100 0514 	add.w	r5, r0, #20
 8007b50:	f04f 0e00 	mov.w	lr, #0
 8007b54:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b58:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b5c:	fa1e f18a 	uxtah	r1, lr, sl
 8007b60:	b2a3      	uxth	r3, r4
 8007b62:	1ac9      	subs	r1, r1, r3
 8007b64:	0c23      	lsrs	r3, r4, #16
 8007b66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007b6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b6e:	b289      	uxth	r1, r1
 8007b70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b74:	45c8      	cmp	r8, r9
 8007b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b7a:	4694      	mov	ip, r2
 8007b7c:	f845 3b04 	str.w	r3, [r5], #4
 8007b80:	d8e8      	bhi.n	8007b54 <__mdiff+0x5c>
 8007b82:	45bc      	cmp	ip, r7
 8007b84:	d304      	bcc.n	8007b90 <__mdiff+0x98>
 8007b86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b8a:	b183      	cbz	r3, 8007bae <__mdiff+0xb6>
 8007b8c:	6106      	str	r6, [r0, #16]
 8007b8e:	e7c5      	b.n	8007b1c <__mdiff+0x24>
 8007b90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b94:	fa1e f381 	uxtah	r3, lr, r1
 8007b98:	141a      	asrs	r2, r3, #16
 8007b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ba4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007ba8:	f845 3b04 	str.w	r3, [r5], #4
 8007bac:	e7e9      	b.n	8007b82 <__mdiff+0x8a>
 8007bae:	3e01      	subs	r6, #1
 8007bb0:	e7e9      	b.n	8007b86 <__mdiff+0x8e>

08007bb2 <__d2b>:
 8007bb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bb6:	460e      	mov	r6, r1
 8007bb8:	2101      	movs	r1, #1
 8007bba:	ec59 8b10 	vmov	r8, r9, d0
 8007bbe:	4615      	mov	r5, r2
 8007bc0:	f7ff fd6b 	bl	800769a <_Balloc>
 8007bc4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007bc8:	4607      	mov	r7, r0
 8007bca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bce:	bb34      	cbnz	r4, 8007c1e <__d2b+0x6c>
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	f1b8 0300 	subs.w	r3, r8, #0
 8007bd6:	d027      	beq.n	8007c28 <__d2b+0x76>
 8007bd8:	a802      	add	r0, sp, #8
 8007bda:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007bde:	f7ff fe01 	bl	80077e4 <__lo0bits>
 8007be2:	9900      	ldr	r1, [sp, #0]
 8007be4:	b1f0      	cbz	r0, 8007c24 <__d2b+0x72>
 8007be6:	9a01      	ldr	r2, [sp, #4]
 8007be8:	f1c0 0320 	rsb	r3, r0, #32
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	40c2      	lsrs	r2, r0
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf14      	ite	ne
 8007c00:	2102      	movne	r1, #2
 8007c02:	2101      	moveq	r1, #1
 8007c04:	6139      	str	r1, [r7, #16]
 8007c06:	b1c4      	cbz	r4, 8007c3a <__d2b+0x88>
 8007c08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c0c:	4404      	add	r4, r0
 8007c0e:	6034      	str	r4, [r6, #0]
 8007c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c14:	6028      	str	r0, [r5, #0]
 8007c16:	4638      	mov	r0, r7
 8007c18:	b003      	add	sp, #12
 8007c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c22:	e7d5      	b.n	8007bd0 <__d2b+0x1e>
 8007c24:	6179      	str	r1, [r7, #20]
 8007c26:	e7e7      	b.n	8007bf8 <__d2b+0x46>
 8007c28:	a801      	add	r0, sp, #4
 8007c2a:	f7ff fddb 	bl	80077e4 <__lo0bits>
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	2101      	movs	r1, #1
 8007c34:	6139      	str	r1, [r7, #16]
 8007c36:	3020      	adds	r0, #32
 8007c38:	e7e5      	b.n	8007c06 <__d2b+0x54>
 8007c3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c42:	6030      	str	r0, [r6, #0]
 8007c44:	6918      	ldr	r0, [r3, #16]
 8007c46:	f7ff fdae 	bl	80077a6 <__hi0bits>
 8007c4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c4e:	e7e1      	b.n	8007c14 <__d2b+0x62>

08007c50 <_calloc_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	fb02 f401 	mul.w	r4, r2, r1
 8007c56:	4621      	mov	r1, r4
 8007c58:	f000 f856 	bl	8007d08 <_malloc_r>
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b118      	cbz	r0, 8007c68 <_calloc_r+0x18>
 8007c60:	4622      	mov	r2, r4
 8007c62:	2100      	movs	r1, #0
 8007c64:	f7fe fa2e 	bl	80060c4 <memset>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}

08007c6c <_free_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4605      	mov	r5, r0
 8007c70:	2900      	cmp	r1, #0
 8007c72:	d045      	beq.n	8007d00 <_free_r+0x94>
 8007c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c78:	1f0c      	subs	r4, r1, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bfb8      	it	lt
 8007c7e:	18e4      	addlt	r4, r4, r3
 8007c80:	f000 fa29 	bl	80080d6 <__malloc_lock>
 8007c84:	4a1f      	ldr	r2, [pc, #124]	; (8007d04 <_free_r+0x98>)
 8007c86:	6813      	ldr	r3, [r2, #0]
 8007c88:	4610      	mov	r0, r2
 8007c8a:	b933      	cbnz	r3, 8007c9a <_free_r+0x2e>
 8007c8c:	6063      	str	r3, [r4, #4]
 8007c8e:	6014      	str	r4, [r2, #0]
 8007c90:	4628      	mov	r0, r5
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f000 ba1f 	b.w	80080d8 <__malloc_unlock>
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	d90c      	bls.n	8007cb8 <_free_r+0x4c>
 8007c9e:	6821      	ldr	r1, [r4, #0]
 8007ca0:	1862      	adds	r2, r4, r1
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	bf04      	itt	eq
 8007ca6:	681a      	ldreq	r2, [r3, #0]
 8007ca8:	685b      	ldreq	r3, [r3, #4]
 8007caa:	6063      	str	r3, [r4, #4]
 8007cac:	bf04      	itt	eq
 8007cae:	1852      	addeq	r2, r2, r1
 8007cb0:	6022      	streq	r2, [r4, #0]
 8007cb2:	6004      	str	r4, [r0, #0]
 8007cb4:	e7ec      	b.n	8007c90 <_free_r+0x24>
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	b10a      	cbz	r2, 8007cc0 <_free_r+0x54>
 8007cbc:	42a2      	cmp	r2, r4
 8007cbe:	d9fa      	bls.n	8007cb6 <_free_r+0x4a>
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	1858      	adds	r0, r3, r1
 8007cc4:	42a0      	cmp	r0, r4
 8007cc6:	d10b      	bne.n	8007ce0 <_free_r+0x74>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	4401      	add	r1, r0
 8007ccc:	1858      	adds	r0, r3, r1
 8007cce:	4282      	cmp	r2, r0
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	d1dd      	bne.n	8007c90 <_free_r+0x24>
 8007cd4:	6810      	ldr	r0, [r2, #0]
 8007cd6:	6852      	ldr	r2, [r2, #4]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	4401      	add	r1, r0
 8007cdc:	6019      	str	r1, [r3, #0]
 8007cde:	e7d7      	b.n	8007c90 <_free_r+0x24>
 8007ce0:	d902      	bls.n	8007ce8 <_free_r+0x7c>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	e7d3      	b.n	8007c90 <_free_r+0x24>
 8007ce8:	6820      	ldr	r0, [r4, #0]
 8007cea:	1821      	adds	r1, r4, r0
 8007cec:	428a      	cmp	r2, r1
 8007cee:	bf04      	itt	eq
 8007cf0:	6811      	ldreq	r1, [r2, #0]
 8007cf2:	6852      	ldreq	r2, [r2, #4]
 8007cf4:	6062      	str	r2, [r4, #4]
 8007cf6:	bf04      	itt	eq
 8007cf8:	1809      	addeq	r1, r1, r0
 8007cfa:	6021      	streq	r1, [r4, #0]
 8007cfc:	605c      	str	r4, [r3, #4]
 8007cfe:	e7c7      	b.n	8007c90 <_free_r+0x24>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	200007e8 	.word	0x200007e8

08007d08 <_malloc_r>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	1ccd      	adds	r5, r1, #3
 8007d0c:	f025 0503 	bic.w	r5, r5, #3
 8007d10:	3508      	adds	r5, #8
 8007d12:	2d0c      	cmp	r5, #12
 8007d14:	bf38      	it	cc
 8007d16:	250c      	movcc	r5, #12
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	db01      	blt.n	8007d22 <_malloc_r+0x1a>
 8007d1e:	42a9      	cmp	r1, r5
 8007d20:	d903      	bls.n	8007d2a <_malloc_r+0x22>
 8007d22:	230c      	movs	r3, #12
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	2000      	movs	r0, #0
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	f000 f9d4 	bl	80080d6 <__malloc_lock>
 8007d2e:	4a21      	ldr	r2, [pc, #132]	; (8007db4 <_malloc_r+0xac>)
 8007d30:	6814      	ldr	r4, [r2, #0]
 8007d32:	4621      	mov	r1, r4
 8007d34:	b991      	cbnz	r1, 8007d5c <_malloc_r+0x54>
 8007d36:	4c20      	ldr	r4, [pc, #128]	; (8007db8 <_malloc_r+0xb0>)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	b91b      	cbnz	r3, 8007d44 <_malloc_r+0x3c>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f000 f98f 	bl	8008060 <_sbrk_r>
 8007d42:	6020      	str	r0, [r4, #0]
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 f98a 	bl	8008060 <_sbrk_r>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d124      	bne.n	8007d9a <_malloc_r+0x92>
 8007d50:	230c      	movs	r3, #12
 8007d52:	6033      	str	r3, [r6, #0]
 8007d54:	4630      	mov	r0, r6
 8007d56:	f000 f9bf 	bl	80080d8 <__malloc_unlock>
 8007d5a:	e7e4      	b.n	8007d26 <_malloc_r+0x1e>
 8007d5c:	680b      	ldr	r3, [r1, #0]
 8007d5e:	1b5b      	subs	r3, r3, r5
 8007d60:	d418      	bmi.n	8007d94 <_malloc_r+0x8c>
 8007d62:	2b0b      	cmp	r3, #11
 8007d64:	d90f      	bls.n	8007d86 <_malloc_r+0x7e>
 8007d66:	600b      	str	r3, [r1, #0]
 8007d68:	50cd      	str	r5, [r1, r3]
 8007d6a:	18cc      	adds	r4, r1, r3
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 f9b3 	bl	80080d8 <__malloc_unlock>
 8007d72:	f104 000b 	add.w	r0, r4, #11
 8007d76:	1d23      	adds	r3, r4, #4
 8007d78:	f020 0007 	bic.w	r0, r0, #7
 8007d7c:	1ac3      	subs	r3, r0, r3
 8007d7e:	d0d3      	beq.n	8007d28 <_malloc_r+0x20>
 8007d80:	425a      	negs	r2, r3
 8007d82:	50e2      	str	r2, [r4, r3]
 8007d84:	e7d0      	b.n	8007d28 <_malloc_r+0x20>
 8007d86:	428c      	cmp	r4, r1
 8007d88:	684b      	ldr	r3, [r1, #4]
 8007d8a:	bf16      	itet	ne
 8007d8c:	6063      	strne	r3, [r4, #4]
 8007d8e:	6013      	streq	r3, [r2, #0]
 8007d90:	460c      	movne	r4, r1
 8007d92:	e7eb      	b.n	8007d6c <_malloc_r+0x64>
 8007d94:	460c      	mov	r4, r1
 8007d96:	6849      	ldr	r1, [r1, #4]
 8007d98:	e7cc      	b.n	8007d34 <_malloc_r+0x2c>
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d005      	beq.n	8007db0 <_malloc_r+0xa8>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 f95a 	bl	8008060 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d0cf      	beq.n	8007d50 <_malloc_r+0x48>
 8007db0:	6025      	str	r5, [r4, #0]
 8007db2:	e7db      	b.n	8007d6c <_malloc_r+0x64>
 8007db4:	200007e8 	.word	0x200007e8
 8007db8:	200007ec 	.word	0x200007ec

08007dbc <__ssputs_r>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	688e      	ldr	r6, [r1, #8]
 8007dc2:	429e      	cmp	r6, r3
 8007dc4:	4682      	mov	sl, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4690      	mov	r8, r2
 8007dca:	4699      	mov	r9, r3
 8007dcc:	d837      	bhi.n	8007e3e <__ssputs_r+0x82>
 8007dce:	898a      	ldrh	r2, [r1, #12]
 8007dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dd4:	d031      	beq.n	8007e3a <__ssputs_r+0x7e>
 8007dd6:	6825      	ldr	r5, [r4, #0]
 8007dd8:	6909      	ldr	r1, [r1, #16]
 8007dda:	1a6f      	subs	r7, r5, r1
 8007ddc:	6965      	ldr	r5, [r4, #20]
 8007dde:	2302      	movs	r3, #2
 8007de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007de4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007de8:	f109 0301 	add.w	r3, r9, #1
 8007dec:	443b      	add	r3, r7
 8007dee:	429d      	cmp	r5, r3
 8007df0:	bf38      	it	cc
 8007df2:	461d      	movcc	r5, r3
 8007df4:	0553      	lsls	r3, r2, #21
 8007df6:	d530      	bpl.n	8007e5a <__ssputs_r+0x9e>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7ff ff85 	bl	8007d08 <_malloc_r>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	b950      	cbnz	r0, 8007e18 <__ssputs_r+0x5c>
 8007e02:	230c      	movs	r3, #12
 8007e04:	f8ca 3000 	str.w	r3, [sl]
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	463a      	mov	r2, r7
 8007e1a:	6921      	ldr	r1, [r4, #16]
 8007e1c:	f7ff fc32 	bl	8007684 <memcpy>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	6126      	str	r6, [r4, #16]
 8007e2e:	6165      	str	r5, [r4, #20]
 8007e30:	443e      	add	r6, r7
 8007e32:	1bed      	subs	r5, r5, r7
 8007e34:	6026      	str	r6, [r4, #0]
 8007e36:	60a5      	str	r5, [r4, #8]
 8007e38:	464e      	mov	r6, r9
 8007e3a:	454e      	cmp	r6, r9
 8007e3c:	d900      	bls.n	8007e40 <__ssputs_r+0x84>
 8007e3e:	464e      	mov	r6, r9
 8007e40:	4632      	mov	r2, r6
 8007e42:	4641      	mov	r1, r8
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	f000 f92d 	bl	80080a4 <memmove>
 8007e4a:	68a3      	ldr	r3, [r4, #8]
 8007e4c:	1b9b      	subs	r3, r3, r6
 8007e4e:	60a3      	str	r3, [r4, #8]
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	441e      	add	r6, r3
 8007e54:	6026      	str	r6, [r4, #0]
 8007e56:	2000      	movs	r0, #0
 8007e58:	e7dc      	b.n	8007e14 <__ssputs_r+0x58>
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	f000 f93d 	bl	80080da <_realloc_r>
 8007e60:	4606      	mov	r6, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d1e2      	bne.n	8007e2c <__ssputs_r+0x70>
 8007e66:	6921      	ldr	r1, [r4, #16]
 8007e68:	4650      	mov	r0, sl
 8007e6a:	f7ff feff 	bl	8007c6c <_free_r>
 8007e6e:	e7c8      	b.n	8007e02 <__ssputs_r+0x46>

08007e70 <_svfiprintf_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	461d      	mov	r5, r3
 8007e76:	898b      	ldrh	r3, [r1, #12]
 8007e78:	061f      	lsls	r7, r3, #24
 8007e7a:	b09d      	sub	sp, #116	; 0x74
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4616      	mov	r6, r2
 8007e82:	d50f      	bpl.n	8007ea4 <_svfiprintf_r+0x34>
 8007e84:	690b      	ldr	r3, [r1, #16]
 8007e86:	b96b      	cbnz	r3, 8007ea4 <_svfiprintf_r+0x34>
 8007e88:	2140      	movs	r1, #64	; 0x40
 8007e8a:	f7ff ff3d 	bl	8007d08 <_malloc_r>
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	6120      	str	r0, [r4, #16]
 8007e92:	b928      	cbnz	r0, 8007ea0 <_svfiprintf_r+0x30>
 8007e94:	230c      	movs	r3, #12
 8007e96:	f8c8 3000 	str.w	r3, [r8]
 8007e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9e:	e0c8      	b.n	8008032 <_svfiprintf_r+0x1c2>
 8007ea0:	2340      	movs	r3, #64	; 0x40
 8007ea2:	6163      	str	r3, [r4, #20]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eae:	2330      	movs	r3, #48	; 0x30
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb4:	9503      	str	r5, [sp, #12]
 8007eb6:	f04f 0b01 	mov.w	fp, #1
 8007eba:	4637      	mov	r7, r6
 8007ebc:	463d      	mov	r5, r7
 8007ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ec2:	b10b      	cbz	r3, 8007ec8 <_svfiprintf_r+0x58>
 8007ec4:	2b25      	cmp	r3, #37	; 0x25
 8007ec6:	d13e      	bne.n	8007f46 <_svfiprintf_r+0xd6>
 8007ec8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ecc:	d00b      	beq.n	8007ee6 <_svfiprintf_r+0x76>
 8007ece:	4653      	mov	r3, sl
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	f7ff ff71 	bl	8007dbc <__ssputs_r>
 8007eda:	3001      	adds	r0, #1
 8007edc:	f000 80a4 	beq.w	8008028 <_svfiprintf_r+0x1b8>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	4453      	add	r3, sl
 8007ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee6:	783b      	ldrb	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 809d 	beq.w	8008028 <_svfiprintf_r+0x1b8>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f00:	931a      	str	r3, [sp, #104]	; 0x68
 8007f02:	462f      	mov	r7, r5
 8007f04:	2205      	movs	r2, #5
 8007f06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f0a:	4850      	ldr	r0, [pc, #320]	; (800804c <_svfiprintf_r+0x1dc>)
 8007f0c:	f7f8 f968 	bl	80001e0 <memchr>
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	b9d0      	cbnz	r0, 8007f4a <_svfiprintf_r+0xda>
 8007f14:	06d9      	lsls	r1, r3, #27
 8007f16:	bf44      	itt	mi
 8007f18:	2220      	movmi	r2, #32
 8007f1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f1e:	071a      	lsls	r2, r3, #28
 8007f20:	bf44      	itt	mi
 8007f22:	222b      	movmi	r2, #43	; 0x2b
 8007f24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f28:	782a      	ldrb	r2, [r5, #0]
 8007f2a:	2a2a      	cmp	r2, #42	; 0x2a
 8007f2c:	d015      	beq.n	8007f5a <_svfiprintf_r+0xea>
 8007f2e:	9a07      	ldr	r2, [sp, #28]
 8007f30:	462f      	mov	r7, r5
 8007f32:	2000      	movs	r0, #0
 8007f34:	250a      	movs	r5, #10
 8007f36:	4639      	mov	r1, r7
 8007f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3c:	3b30      	subs	r3, #48	; 0x30
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d94d      	bls.n	8007fde <_svfiprintf_r+0x16e>
 8007f42:	b1b8      	cbz	r0, 8007f74 <_svfiprintf_r+0x104>
 8007f44:	e00f      	b.n	8007f66 <_svfiprintf_r+0xf6>
 8007f46:	462f      	mov	r7, r5
 8007f48:	e7b8      	b.n	8007ebc <_svfiprintf_r+0x4c>
 8007f4a:	4a40      	ldr	r2, [pc, #256]	; (800804c <_svfiprintf_r+0x1dc>)
 8007f4c:	1a80      	subs	r0, r0, r2
 8007f4e:	fa0b f000 	lsl.w	r0, fp, r0
 8007f52:	4318      	orrs	r0, r3
 8007f54:	9004      	str	r0, [sp, #16]
 8007f56:	463d      	mov	r5, r7
 8007f58:	e7d3      	b.n	8007f02 <_svfiprintf_r+0x92>
 8007f5a:	9a03      	ldr	r2, [sp, #12]
 8007f5c:	1d11      	adds	r1, r2, #4
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	9103      	str	r1, [sp, #12]
 8007f62:	2a00      	cmp	r2, #0
 8007f64:	db01      	blt.n	8007f6a <_svfiprintf_r+0xfa>
 8007f66:	9207      	str	r2, [sp, #28]
 8007f68:	e004      	b.n	8007f74 <_svfiprintf_r+0x104>
 8007f6a:	4252      	negs	r2, r2
 8007f6c:	f043 0302 	orr.w	r3, r3, #2
 8007f70:	9207      	str	r2, [sp, #28]
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	783b      	ldrb	r3, [r7, #0]
 8007f76:	2b2e      	cmp	r3, #46	; 0x2e
 8007f78:	d10c      	bne.n	8007f94 <_svfiprintf_r+0x124>
 8007f7a:	787b      	ldrb	r3, [r7, #1]
 8007f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7e:	d133      	bne.n	8007fe8 <_svfiprintf_r+0x178>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9203      	str	r2, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfb8      	it	lt
 8007f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f90:	3702      	adds	r7, #2
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	4d2e      	ldr	r5, [pc, #184]	; (8008050 <_svfiprintf_r+0x1e0>)
 8007f96:	7839      	ldrb	r1, [r7, #0]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7f8 f920 	bl	80001e0 <memchr>
 8007fa0:	b138      	cbz	r0, 8007fb2 <_svfiprintf_r+0x142>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	1b40      	subs	r0, r0, r5
 8007fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	4303      	orrs	r3, r0
 8007fae:	3701      	adds	r7, #1
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	7839      	ldrb	r1, [r7, #0]
 8007fb4:	4827      	ldr	r0, [pc, #156]	; (8008054 <_svfiprintf_r+0x1e4>)
 8007fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fba:	2206      	movs	r2, #6
 8007fbc:	1c7e      	adds	r6, r7, #1
 8007fbe:	f7f8 f90f 	bl	80001e0 <memchr>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d038      	beq.n	8008038 <_svfiprintf_r+0x1c8>
 8007fc6:	4b24      	ldr	r3, [pc, #144]	; (8008058 <_svfiprintf_r+0x1e8>)
 8007fc8:	bb13      	cbnz	r3, 8008010 <_svfiprintf_r+0x1a0>
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	3307      	adds	r3, #7
 8007fce:	f023 0307 	bic.w	r3, r3, #7
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	9303      	str	r3, [sp, #12]
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	444b      	add	r3, r9
 8007fda:	9309      	str	r3, [sp, #36]	; 0x24
 8007fdc:	e76d      	b.n	8007eba <_svfiprintf_r+0x4a>
 8007fde:	fb05 3202 	mla	r2, r5, r2, r3
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	e7a6      	b.n	8007f36 <_svfiprintf_r+0xc6>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	3701      	adds	r7, #1
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	250a      	movs	r5, #10
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff8:	3a30      	subs	r2, #48	; 0x30
 8007ffa:	2a09      	cmp	r2, #9
 8007ffc:	d903      	bls.n	8008006 <_svfiprintf_r+0x196>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0c8      	beq.n	8007f94 <_svfiprintf_r+0x124>
 8008002:	9105      	str	r1, [sp, #20]
 8008004:	e7c6      	b.n	8007f94 <_svfiprintf_r+0x124>
 8008006:	fb05 2101 	mla	r1, r5, r1, r2
 800800a:	2301      	movs	r3, #1
 800800c:	4607      	mov	r7, r0
 800800e:	e7f0      	b.n	8007ff2 <_svfiprintf_r+0x182>
 8008010:	ab03      	add	r3, sp, #12
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	4622      	mov	r2, r4
 8008016:	4b11      	ldr	r3, [pc, #68]	; (800805c <_svfiprintf_r+0x1ec>)
 8008018:	a904      	add	r1, sp, #16
 800801a:	4640      	mov	r0, r8
 800801c:	f7fe f8ee 	bl	80061fc <_printf_float>
 8008020:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008024:	4681      	mov	r9, r0
 8008026:	d1d6      	bne.n	8007fd6 <_svfiprintf_r+0x166>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	065b      	lsls	r3, r3, #25
 800802c:	f53f af35 	bmi.w	8007e9a <_svfiprintf_r+0x2a>
 8008030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008032:	b01d      	add	sp, #116	; 0x74
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4622      	mov	r2, r4
 800803e:	4b07      	ldr	r3, [pc, #28]	; (800805c <_svfiprintf_r+0x1ec>)
 8008040:	a904      	add	r1, sp, #16
 8008042:	4640      	mov	r0, r8
 8008044:	f7fe fb90 	bl	8006768 <_printf_i>
 8008048:	e7ea      	b.n	8008020 <_svfiprintf_r+0x1b0>
 800804a:	bf00      	nop
 800804c:	080086c4 	.word	0x080086c4
 8008050:	080086ca 	.word	0x080086ca
 8008054:	080086ce 	.word	0x080086ce
 8008058:	080061fd 	.word	0x080061fd
 800805c:	08007dbd 	.word	0x08007dbd

08008060 <_sbrk_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4c06      	ldr	r4, [pc, #24]	; (800807c <_sbrk_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4605      	mov	r5, r0
 8008068:	4608      	mov	r0, r1
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	f7fa fca2 	bl	80029b4 <_sbrk>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_sbrk_r+0x1a>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	b103      	cbz	r3, 800807a <_sbrk_r+0x1a>
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20000c04 	.word	0x20000c04

08008080 <__ascii_mbtowc>:
 8008080:	b082      	sub	sp, #8
 8008082:	b901      	cbnz	r1, 8008086 <__ascii_mbtowc+0x6>
 8008084:	a901      	add	r1, sp, #4
 8008086:	b142      	cbz	r2, 800809a <__ascii_mbtowc+0x1a>
 8008088:	b14b      	cbz	r3, 800809e <__ascii_mbtowc+0x1e>
 800808a:	7813      	ldrb	r3, [r2, #0]
 800808c:	600b      	str	r3, [r1, #0]
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	1c10      	adds	r0, r2, #0
 8008092:	bf18      	it	ne
 8008094:	2001      	movne	r0, #1
 8008096:	b002      	add	sp, #8
 8008098:	4770      	bx	lr
 800809a:	4610      	mov	r0, r2
 800809c:	e7fb      	b.n	8008096 <__ascii_mbtowc+0x16>
 800809e:	f06f 0001 	mvn.w	r0, #1
 80080a2:	e7f8      	b.n	8008096 <__ascii_mbtowc+0x16>

080080a4 <memmove>:
 80080a4:	4288      	cmp	r0, r1
 80080a6:	b510      	push	{r4, lr}
 80080a8:	eb01 0302 	add.w	r3, r1, r2
 80080ac:	d807      	bhi.n	80080be <memmove+0x1a>
 80080ae:	1e42      	subs	r2, r0, #1
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d00a      	beq.n	80080ca <memmove+0x26>
 80080b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080bc:	e7f8      	b.n	80080b0 <memmove+0xc>
 80080be:	4283      	cmp	r3, r0
 80080c0:	d9f5      	bls.n	80080ae <memmove+0xa>
 80080c2:	1881      	adds	r1, r0, r2
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	42d3      	cmn	r3, r2
 80080c8:	d100      	bne.n	80080cc <memmove+0x28>
 80080ca:	bd10      	pop	{r4, pc}
 80080cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080d4:	e7f7      	b.n	80080c6 <memmove+0x22>

080080d6 <__malloc_lock>:
 80080d6:	4770      	bx	lr

080080d8 <__malloc_unlock>:
 80080d8:	4770      	bx	lr

080080da <_realloc_r>:
 80080da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080dc:	4607      	mov	r7, r0
 80080de:	4614      	mov	r4, r2
 80080e0:	460e      	mov	r6, r1
 80080e2:	b921      	cbnz	r1, 80080ee <_realloc_r+0x14>
 80080e4:	4611      	mov	r1, r2
 80080e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080ea:	f7ff be0d 	b.w	8007d08 <_malloc_r>
 80080ee:	b922      	cbnz	r2, 80080fa <_realloc_r+0x20>
 80080f0:	f7ff fdbc 	bl	8007c6c <_free_r>
 80080f4:	4625      	mov	r5, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fa:	f000 f821 	bl	8008140 <_malloc_usable_size_r>
 80080fe:	42a0      	cmp	r0, r4
 8008100:	d20f      	bcs.n	8008122 <_realloc_r+0x48>
 8008102:	4621      	mov	r1, r4
 8008104:	4638      	mov	r0, r7
 8008106:	f7ff fdff 	bl	8007d08 <_malloc_r>
 800810a:	4605      	mov	r5, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d0f2      	beq.n	80080f6 <_realloc_r+0x1c>
 8008110:	4631      	mov	r1, r6
 8008112:	4622      	mov	r2, r4
 8008114:	f7ff fab6 	bl	8007684 <memcpy>
 8008118:	4631      	mov	r1, r6
 800811a:	4638      	mov	r0, r7
 800811c:	f7ff fda6 	bl	8007c6c <_free_r>
 8008120:	e7e9      	b.n	80080f6 <_realloc_r+0x1c>
 8008122:	4635      	mov	r5, r6
 8008124:	e7e7      	b.n	80080f6 <_realloc_r+0x1c>

08008126 <__ascii_wctomb>:
 8008126:	b149      	cbz	r1, 800813c <__ascii_wctomb+0x16>
 8008128:	2aff      	cmp	r2, #255	; 0xff
 800812a:	bf85      	ittet	hi
 800812c:	238a      	movhi	r3, #138	; 0x8a
 800812e:	6003      	strhi	r3, [r0, #0]
 8008130:	700a      	strbls	r2, [r1, #0]
 8008132:	f04f 30ff 	movhi.w	r0, #4294967295
 8008136:	bf98      	it	ls
 8008138:	2001      	movls	r0, #1
 800813a:	4770      	bx	lr
 800813c:	4608      	mov	r0, r1
 800813e:	4770      	bx	lr

08008140 <_malloc_usable_size_r>:
 8008140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008144:	1f18      	subs	r0, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfbc      	itt	lt
 800814a:	580b      	ldrlt	r3, [r1, r0]
 800814c:	18c0      	addlt	r0, r0, r3
 800814e:	4770      	bx	lr

08008150 <_init>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr

0800815c <_fini>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr
