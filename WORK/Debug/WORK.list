
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007888  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08007a18  08007a18  00017a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008098  08008098  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a0  080080a0  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  080080a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  20000364  0800840c  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  0800840c  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e318  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d5b  00000000  00000000  0002e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f92  00000000  00000000  00031d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f35  00000000  00000000  00053cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce648  00000000  00000000  0005dc0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004098  00000000  00000000  0012c2d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a00 	.word	0x08007a00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	08007a00 	.word	0x08007a00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ST7920_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <ST7920_Send_command+0x68>)
 8000eb8:	f002 fdf4 	bl	8003aa4 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000ebc:	23f8      	movs	r3, #248	; 0xf8
 8000ebe:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000eca:	f003 fa97 	bl	80043fc <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ee2:	f003 fa8b 	bl	80043fc <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000eee:	f107 030f 	add.w	r3, r7, #15
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <ST7920_Send_command+0x6c>)
 8000ef8:	f003 fa80 	bl	80043fc <HAL_SPI_Transmit_IT>
	cs_reset();
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <ST7920_Send_command+0x68>)
 8000f02:	f002 fdcf 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	20000814 	.word	0x20000814

08000f18 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000f22:	2201      	movs	r2, #1
 8000f24:	2120      	movs	r1, #32
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f28:	f002 fdbc 	bl	8003aa4 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000f2c:	23fa      	movs	r3, #250	; 0xfa
 8000f2e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f30:	f107 030f 	add.w	r3, r7, #15
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f3a:	f003 fa5f 	bl	80043fc <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f48:	f107 030f 	add.w	r3, r7, #15
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f52:	f003 fa53 	bl	80043fc <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f5e:	f107 030f 	add.w	r3, r7, #15
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <ST7920_Send_data+0x6c>)
 8000f68:	f003 fa48 	bl	80043fc <HAL_SPI_Transmit_IT>
	cs_reset();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ST7920_Send_data+0x68>)
 8000f72:	f002 fd97 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000814 	.word	0x20000814

08000f88 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	481e      	ldr	r0, [pc, #120]	; (800100c <ST7920_Init+0x84>)
 8000f94:	f002 fd86 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f001 ff7b 	bl	8002e94 <HAL_Delay>
	RST_set();
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <ST7920_Init+0x84>)
 8000fa4:	f002 fd7e 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(40); //Ждем 40 мс
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f001 ff73 	bl	8002e94 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000fae:	2330      	movs	r3, #48	; 0x30
 8000fb0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff77 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 ff6a 	bl	8002e94 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff70 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 ff63 	bl	8002e94 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000fce:	230c      	movs	r3, #12
 8000fd0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff67 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 ff5a 	bl	8002e94 <HAL_Delay>
	tx_buffer = 0x01;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff5e 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(12);
 8000fec:	200c      	movs	r0, #12
 8000fee:	f001 ff51 	bl	8002e94 <HAL_Delay>
	tx_buffer = 0x06;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff55 	bl	8000ea8 <ST7920_Send_command>
	HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 ff48 	bl	8002e94 <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400

08001010 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8001020:	2034      	movs	r0, #52	; 0x34
 8001022:	f7ff ff41 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f001 ff34 	bl	8002e94 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 800102c:	2036      	movs	r0, #54	; 0x36
 800102e:	f7ff ff3b 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 ff2e 	bl	8002e94 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8001038:	e00b      	b.n	8001052 <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8001046:	2030      	movs	r0, #48	; 0x30
 8001048:	f7ff ff2e 	bl	8000ea8 <ST7920_Send_command>
		HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 ff21 	bl	8002e94 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <ST7920_Clean>:
/*----------------Функция включения/выключения графического режима----------------*/

/*---------------Функция очистки дисплея в графическом режиме--------------------*/
void ST7920_Clean() {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
/// Функция очистки дисплея в графическом режиме
	uint8_t x, y;
	for (y = 0; y < 64; y++) {
 8001060:	2300      	movs	r3, #0
 8001062:	71bb      	strb	r3, [r7, #6]
 8001064:	e02d      	b.n	80010c2 <ST7920_Clean+0x68>
		if (y < 32) {
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b1f      	cmp	r3, #31
 800106a:	d80a      	bhi.n	8001082 <ST7920_Clean+0x28>
			ST7920_Send_command(0x80 | y);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff17 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x80);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f7ff ff14 	bl	8000ea8 <ST7920_Send_command>
 8001080:	e00d      	b.n	800109e <ST7920_Clean+0x44>
		} else {
			ST7920_Send_command(0x80 | (y - 32));
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	3b20      	subs	r3, #32
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff08 	bl	8000ea8 <ST7920_Send_command>
			ST7920_Send_command(0x88);
 8001098:	2088      	movs	r0, #136	; 0x88
 800109a:	f7ff ff05 	bl	8000ea8 <ST7920_Send_command>
		}
		for (x = 0; x < 8; x++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e008      	b.n	80010b6 <ST7920_Clean+0x5c>
			ST7920_Send_data(0x00);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff37 	bl	8000f18 <ST7920_Send_data>
			ST7920_Send_data(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff34 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9f3      	bls.n	80010a4 <ST7920_Clean+0x4a>
	for (y = 0; y < 64; y++) {
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	3301      	adds	r3, #1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b3f      	cmp	r3, #63	; 0x3f
 80010c6:	d9ce      	bls.n	8001066 <ST7920_Clean+0xc>
		}
	}
	ST7920_Clean_Frame_buffer();
 80010c8:	f000 fa8a 	bl	80015e0 <ST7920_Clean_Frame_buffer>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ST7920_Draw_bitmap>:
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	e13a      	b.n	800135c <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e130      	b.n	800134e <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b1f      	cmp	r3, #31
 80010f0:	d80e      	bhi.n	8001110 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fed4 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fecd 	bl	8000ea8 <ST7920_Send_command>
 800110e:	e011      	b.n	8001134 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b20      	subs	r3, #32
 8001114:	b2db      	uxtb	r3, r3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fec1 	bl	8000ea8 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f063 0377 	orn	r3, r3, #119	; 0x77
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff feba 	bl	8000ea8 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	00da      	lsls	r2, r3, #3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	fa42 f303 	asr.w	r3, r2, r3
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	b25a      	sxtb	r2, r3
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	fa41 f303 	asr.w	r3, r1, r3
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	3302      	adds	r3, #2
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	fa41 f303 	asr.w	r3, r1, r3
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	3303      	adds	r3, #3
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	440b      	add	r3, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	fa41 f303 	asr.w	r3, r1, r3
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	fa41 f303 	asr.w	r3, r1, r3
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	3305      	adds	r3, #5
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	fa41 f303 	asr.w	r3, r1, r3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	3306      	adds	r3, #6
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	440b      	add	r3, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	fa41 f303 	asr.w	r3, r1, r3
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25a      	sxtb	r2, r3
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	3307      	adds	r3, #7
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	fa41 f303 	asr.w	r3, r1, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	b25b      	sxtb	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8001240:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe67 	bl	8000f18 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	3308      	adds	r3, #8
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	01db      	lsls	r3, r3, #7
 800125e:	b25a      	sxtb	r2, r3
 8001260:	89bb      	ldrh	r3, [r7, #12]
 8001262:	3309      	adds	r3, #9
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	fa41 f303 	asr.w	r3, r1, r3
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b25a      	sxtb	r2, r3
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	330a      	adds	r3, #10
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	fa41 f303 	asr.w	r3, r1, r3
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	b25b      	sxtb	r3, r3
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	330b      	adds	r3, #11
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	fa41 f303 	asr.w	r3, r1, r3
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	330c      	adds	r3, #12
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	fa41 f303 	asr.w	r3, r1, r3
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	330d      	adds	r3, #13
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	440b      	add	r3, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	fa41 f303 	asr.w	r3, r1, r3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	330e      	adds	r3, #14
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	fa41 f303 	asr.w	r3, r1, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	330f      	adds	r3, #15
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	fa41 f303 	asr.w	r3, r1, r3
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800133e:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fde8 	bl	8000f18 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b07      	cmp	r3, #7
 8001352:	f67f aecb 	bls.w	80010ec <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	3301      	adds	r3, #1
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	2b3f      	cmp	r3, #63	; 0x3f
 8001360:	f67f aec1 	bls.w	80010e6 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <ST7920_Update+0x10>)
 8001372:	f7ff feaf 	bl	80010d4 <ST7920_Draw_bitmap>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000400 	.word	0x20000400

08001380 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e028      	b.n	80013ea <print_symbol+0x6a>
		if (inversion) {
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <print_symbol+0x44>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <print_symbol+0x7c>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	88f9      	ldrh	r1, [r7, #6]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	440b      	add	r3, r1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	43d2      	mvns	r2, r2
 80013bc:	b2d1      	uxtb	r1, r2
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <print_symbol+0x80>)
 80013c0:	54d1      	strb	r1, [r2, r3]
 80013c2:	e00f      	b.n	80013e4 <print_symbol+0x64>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	441a      	add	r2, r3
 80013d4:	88f9      	ldrh	r1, [r7, #6]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	3b01      	subs	r3, #1
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <print_symbol+0x7c>)
 80013de:	5c89      	ldrb	r1, [r1, r2]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <print_symbol+0x80>)
 80013e2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 6; i++) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	ddd3      	ble.n	8001398 <print_symbol+0x18>
		}

	}
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	08007a54 	.word	0x08007a54
 8001400:	20000400 	.word	0x20000400

08001404 <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	460b      	mov	r3, r1
 8001412:	717b      	strb	r3, [r7, #5]
 8001414:	4613      	mov	r3, r2
 8001416:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	b29b      	uxth	r3, r3
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	b29a      	uxth	r2, r3
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e0c8      	b.n	80015c6 <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2bbf      	cmp	r3, #191	; 0xbf
 800143e:	d822      	bhi.n	8001486 <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e0b9      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	3b20      	subs	r3, #32
 8001460:	b299      	uxth	r1, r3
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	2201      	movs	r2, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff8a 	bl	8001380 <print_symbol>
 800146c:	e007      	b.n	800147e <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	3b20      	subs	r3, #32
 8001472:	b299      	uxth	r1, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	2200      	movs	r2, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff81 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	3306      	adds	r3, #6
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	e09c      	b.n	80015c0 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d820      	bhi.n	80014f0 <ST7920_Decode_UTF8+0xec>
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d91b      	bls.n	80014f0 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 80014b8:	793b      	ldrb	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00a      	beq.n	80014d4 <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014c4:	330f      	adds	r3, #15
 80014c6:	b299      	uxth	r1, r3
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff57 	bl	8001380 <print_symbol>
 80014d2:	e009      	b.n	80014e8 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014da:	330f      	adds	r3, #15
 80014dc:	b299      	uxth	r1, r3
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff4c 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	3306      	adds	r3, #6
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	e065      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d113      	bne.n	8001522 <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2201      	movs	r2, #1
 8001504:	219f      	movs	r1, #159	; 0x9f
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff3a 	bl	8001380 <print_symbol>
 800150c:	e005      	b.n	800151a <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2200      	movs	r2, #0
 8001512:	219f      	movs	r1, #159	; 0x9f
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	3306      	adds	r3, #6
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	e04c      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	f24d 1291 	movw	r2, #53649	; 0xd191
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	2201      	movs	r2, #1
 8001536:	21a0      	movs	r1, #160	; 0xa0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff21 	bl	8001380 <print_symbol>
 800153e:	e005      	b.n	800154c <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2200      	movs	r2, #0
 8001544:	21a0      	movs	r1, #160	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff1a 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	3306      	adds	r3, #6
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	e033      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2201      	movs	r2, #1
 8001568:	21a1      	movs	r1, #161	; 0xa1
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff08 	bl	8001380 <print_symbol>
 8001570:	e005      	b.n	800157e <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	2200      	movs	r2, #0
 8001576:	21a1      	movs	r1, #161	; 0xa1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff01 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	3306      	adds	r3, #6
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	e01a      	b.n	80015bc <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001592:	330f      	adds	r3, #15
 8001594:	b299      	uxth	r1, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2201      	movs	r2, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fef0 	bl	8001380 <print_symbol>
 80015a0:	e009      	b.n	80015b6 <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80015a8:	330f      	adds	r3, #15
 80015aa:	b299      	uxth	r1, r3
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fee5 	bl	8001380 <print_symbol>
				}
				x = x + 6;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	3306      	adds	r3, #6
 80015ba:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe fe02 	bl	80001d0 <strlen>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f63f af2f 	bhi.w	8001434 <ST7920_Decode_UTF8+0x30>
		}
	}
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <ST7920_Clean_Frame_buffer>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	2100      	movs	r1, #0
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ST7920_Clean_Frame_buffer+0x14>)
 80015ec:	f004 f9c2 	bl	8005974 <memset>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000400 	.word	0x20000400

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f001 fbd7 	bl	8002db0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 fb63 	bl	8001ccc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 fd03 	bl	8002010 <MX_GPIO_Init>
  GPIOD->ODR = ~0;
 800160a:	4bac      	ldr	r3, [pc, #688]	; (80018bc <main+0x2c4>)
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	615a      	str	r2, [r3, #20]
  MX_DMA_Init();
 8001612:	f000 fcdd 	bl	8001fd0 <MX_DMA_Init>
  MX_TIM7_Init();
 8001616:	f000 fca5 	bl	8001f64 <MX_TIM7_Init>
  //MX_SDIO_SD_Init();
  MX_SPI2_Init();
 800161a:	f000 fbbf 	bl	8001d9c <MX_SPI2_Init>
  MX_TIM3_Init();
 800161e:	f000 fbf3 	bl	8001e08 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001622:	f000 fc69 	bl	8001ef8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  GPIOD->ODR = ~0;
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <main+0x2c4>)
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	615a      	str	r2, [r3, #20]
  Init();
 800162e:	f000 fdeb 	bl	8002208 <Init>
  HAL_Delay(700);
 8001632:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001636:	f001 fc2d 	bl	8002e94 <HAL_Delay>
  ST7920_Clean();
 800163a:	f7ff fd0e 	bl	800105a <ST7920_Clean>
  sprintf(tx_buffer, "Count: %lu", counter);
 800163e:	4ba0      	ldr	r3, [pc, #640]	; (80018c0 <main+0x2c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	499f      	ldr	r1, [pc, #636]	; (80018c4 <main+0x2cc>)
 8001646:	48a0      	ldr	r0, [pc, #640]	; (80018c8 <main+0x2d0>)
 8001648:	f004 fdf8 	bl	800623c <siprintf>
  ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 800164c:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <main+0x2d0>)
 800164e:	2200      	movs	r2, #0
 8001650:	2104      	movs	r1, #4
 8001652:	2014      	movs	r0, #20
 8001654:	f7ff fed6 	bl	8001404 <ST7920_Decode_UTF8>
  HAL_TIM_Base_Start_IT(&htim7);
 8001658:	489c      	ldr	r0, [pc, #624]	; (80018cc <main+0x2d4>)
 800165a:	f003 f9f8 	bl	8004a4e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <main+0x2d8>)
 8001660:	f003 f9f5 	bl	8004a4e <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{

		if(!Buttons[9].B_State)
 8001664:	4b9b      	ldr	r3, [pc, #620]	; (80018d4 <main+0x2dc>)
 8001666:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 81ee 	bne.w	8001a4c <main+0x454>
		{
			tmpflg = 1;
 8001670:	4b99      	ldr	r3, [pc, #612]	; (80018d8 <main+0x2e0>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
			if(Buttons[9].B_Out == 1)
 8001676:	4b97      	ldr	r3, [pc, #604]	; (80018d4 <main+0x2dc>)
 8001678:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d115      	bne.n	80016ac <main+0xb4>
			{
				Buttons[9].B_Out = 0;
 8001680:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <main+0x2dc>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	e00b      	b.n	80016a6 <main+0xae>
				{
					Buttons[i].B_Out = 0;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a90      	ldr	r2, [pc, #576]	; (80018d4 <main+0x2dc>)
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3314      	adds	r3, #20
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	3301      	adds	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d9f0      	bls.n	800168e <main+0x96>
				};
			}
			// MANUAL MODE
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	71bb      	strb	r3, [r7, #6]
 80016b0:	e1c7      	b.n	8001a42 <main+0x44a>
			{
				if(Buttons[i].Lock == 0)
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <main+0x2dc>)
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3315      	adds	r3, #21
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 81ba 	bne.w	8001a3c <main+0x444>
				{
					if(Buttons[i].Mode == HOLD)
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	4a82      	ldr	r2, [pc, #520]	; (80018d4 <main+0x2dc>)
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3316      	adds	r3, #22
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d121      	bne.n	8001720 <main+0x128>
					{
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	4a7d      	ldr	r2, [pc, #500]	; (80018d4 <main+0x2dc>)
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	330c      	adds	r3, #12
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <main+0x2dc>)
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3310      	adds	r3, #16
 80016fa:	881c      	ldrh	r4, [r3, #0]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <main+0x2dc>)
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3313      	adds	r3, #19
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4621      	mov	r1, r4
 800171a:	f002 f9c3 	bl	8003aa4 <HAL_GPIO_WritePin>
						continue;
 800171e:	e18d      	b.n	8001a3c <main+0x444>
					}
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <main+0x2dc>)
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3316      	adds	r3, #22
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d163      	bne.n	80017fc <main+0x204>
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	4a67      	ldr	r2, [pc, #412]	; (80018d4 <main+0x2dc>)
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3324      	adds	r3, #36	; 0x24
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d159      	bne.n	80017fc <main+0x204>
					{
						if(Buttons[i].addiction != 0)
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	4a62      	ldr	r2, [pc, #392]	; (80018d4 <main+0x2dc>)
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	331c      	adds	r3, #28
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d02d      	beq.n	80017b8 <main+0x1c0>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <main+0x2dc>)
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	330c      	adds	r3, #12
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	4a59      	ldr	r2, [pc, #356]	; (80018d4 <main+0x2dc>)
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3310      	adds	r3, #16
 800177a:	881c      	ldrh	r4, [r3, #0]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <main+0x2dc>)
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3314      	adds	r3, #20
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00a      	beq.n	80017a6 <main+0x1ae>
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <main+0x2dc>)
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	331c      	adds	r3, #28
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	7d1b      	ldrb	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <main+0x1b2>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <main+0x1b4>
 80017aa:	2300      	movs	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	f002 f977 	bl	8003aa4 <HAL_GPIO_WritePin>
						else
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
						continue;
 80017b6:	e141      	b.n	8001a3c <main+0x444>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <main+0x2dc>)
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	330c      	adds	r3, #12
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	4a42      	ldr	r2, [pc, #264]	; (80018d4 <main+0x2dc>)
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3310      	adds	r3, #16
 80017d6:	881c      	ldrh	r4, [r3, #0]
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	4a3e      	ldr	r2, [pc, #248]	; (80018d4 <main+0x2dc>)
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3314      	adds	r3, #20
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f002 f955 	bl	8003aa4 <HAL_GPIO_WritePin>
						continue;
 80017fa:	e11f      	b.n	8001a3c <main+0x444>
					}
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	4a35      	ldr	r2, [pc, #212]	; (80018d4 <main+0x2dc>)
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3324      	adds	r3, #36	; 0x24
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02d      	beq.n	800186c <main+0x274>
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <main+0x2dc>)
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3316      	adds	r3, #22
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d123      	bne.n	800186c <main+0x274>
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <main+0x2dc>)
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3314      	adds	r3, #20
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d019      	beq.n	800186c <main+0x274>
					{
						Buttons[i].B_Out = 0;
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <main+0x2dc>)
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3314      	adds	r3, #20
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 800184a:	79bb      	ldrb	r3, [r7, #6]
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <main+0x2dc>)
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3324      	adds	r3, #36	; 0x24
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	79ba      	ldrb	r2, [r7, #6]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f202 	mul.w	r2, r1, r2
 8001862:	491c      	ldr	r1, [pc, #112]	; (80018d4 <main+0x2dc>)
 8001864:	440a      	add	r2, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4798      	blx	r3
						continue;
 800186a:	e0e7      	b.n	8001a3c <main+0x444>
					}
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <main+0x2dc>)
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3316      	adds	r3, #22
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d12d      	bne.n	80018dc <main+0x2e4>
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <main+0x2dc>)
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3314      	adds	r3, #20
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d023      	beq.n	80018dc <main+0x2e4>
					{
						Buttons[i].B_Out = 0;
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <main+0x2dc>)
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3314      	adds	r3, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	222c      	movs	r2, #44	; 0x2c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <main+0x2dc>)
 80018b0:	4413      	add	r3, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 ffaa 	bl	800280c <TimerMotor>
						continue;
 80018b8:	e0c0      	b.n	8001a3c <main+0x444>
 80018ba:	bf00      	nop
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	20000800 	.word	0x20000800
 80018c4:	08007a18 	.word	0x08007a18
 80018c8:	20000380 	.word	0x20000380
 80018cc:	20000c90 	.word	0x20000c90
 80018d0:	20000b6c 	.word	0x20000b6c
 80018d4:	200008ac 	.word	0x200008ac
 80018d8:	20000804 	.word	0x20000804
					}
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4aa4      	ldr	r2, [pc, #656]	; (8001b70 <main+0x578>)
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3316      	adds	r3, #22
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d152      	bne.n	8001996 <main+0x39e>
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	4a9f      	ldr	r2, [pc, #636]	; (8001b70 <main+0x578>)
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3314      	adds	r3, #20
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d048      	beq.n	8001996 <main+0x39e>
					{
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	4a9a      	ldr	r2, [pc, #616]	; (8001b70 <main+0x578>)
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	331c      	adds	r3, #28
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	7d1b      	ldrb	r3, [r3, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 808f 	beq.w	8001a3a <main+0x442>
						Buttons[i].B_Out = 0;
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <main+0x578>)
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3314      	adds	r3, #20
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	4a8f      	ldr	r2, [pc, #572]	; (8001b70 <main+0x578>)
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	330c      	adds	r3, #12
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	4a8b      	ldr	r2, [pc, #556]	; (8001b70 <main+0x578>)
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3310      	adds	r3, #16
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	f002 f8a7 	bl	8003aa4 <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	4a85      	ldr	r2, [pc, #532]	; (8001b70 <main+0x578>)
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3318      	adds	r3, #24
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fa94 	bl	8002e94 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	4a80      	ldr	r2, [pc, #512]	; (8001b70 <main+0x578>)
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	330c      	adds	r3, #12
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	4a7c      	ldr	r2, [pc, #496]	; (8001b70 <main+0x578>)
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3310      	adds	r3, #16
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	f002 f888 	bl	8003aa4 <HAL_GPIO_WritePin>
						continue;
 8001994:	e052      	b.n	8001a3c <main+0x444>
					}
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	4a75      	ldr	r2, [pc, #468]	; (8001b70 <main+0x578>)
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3316      	adds	r3, #22
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d11d      	bne.n	80019e6 <main+0x3ee>
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	4a70      	ldr	r2, [pc, #448]	; (8001b70 <main+0x578>)
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3314      	adds	r3, #20
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d013      	beq.n	80019e6 <main+0x3ee>
					{
						Buttons[i].B_Out = 0;
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <main+0x578>)
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3314      	adds	r3, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	222c      	movs	r2, #44	; 0x2c
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <main+0x578>)
 80019da:	4413      	add	r3, r2
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fe80 	bl	80026e4 <HoldMotor>
						continue;
 80019e4:	e02a      	b.n	8001a3c <main+0x444>
					}
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <main+0x578>)
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3316      	adds	r3, #22
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d120      	bne.n	8001a3c <main+0x444>
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	4a5c      	ldr	r2, [pc, #368]	; (8001b70 <main+0x578>)
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3314      	adds	r3, #20
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <main+0x444>
					{
						HoldPrepareMotorUntill(Buttons[i].addiction, 1);
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <main+0x578>)
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	331c      	adds	r3, #28
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fecd 	bl	80027c0 <HoldPrepareMotorUntill>
						Buttons[i].B_Out = 0;
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <main+0x578>)
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3314      	adds	r3, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
						continue;
 8001a38:	e000      	b.n	8001a3c <main+0x444>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001a3a:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	71bb      	strb	r3, [r7, #6]
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	f67f ae34 	bls.w	80016b2 <main+0xba>
 8001a4a:	e60b      	b.n	8001664 <main+0x6c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		else
		{
			if(tmpflg)
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <main+0x57c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <main+0x46a>
			{
				tmpflg = 0;
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <main+0x57c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
				Buttons[10].B_Out = 0;
 8001a5a:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <main+0x578>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			}
			//AUTO MODE
			if(Buttons[10].B_Out) // AUTO MODE START
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <main+0x578>)
 8001a64:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 810e 	beq.w	8001c8a <main+0x692>
				if(Buttons[13].B_State == 1) // REED SWITCH
				{
					HoldMotor(&Buttons[13], 1); // Prepare mat.
				}
				*/
				if(Buttons[15].B_State == 1)
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <main+0x578>)
 8001a70:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 8087 	bne.w	8001b88 <main+0x590>
				{
					Pullsteps = PULL_STEPS;
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <main+0x580>)
 8001a7c:	f240 424c 	movw	r2, #1100	; 0x44c
 8001a80:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <main+0x584>)
 8001a84:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8001a88:	601a      	str	r2, [r3, #0]
					TimerMotor(&Buttons[7]); // PULL mat.
 8001a8a:	483d      	ldr	r0, [pc, #244]	; (8001b80 <main+0x588>)
 8001a8c:	f000 febe 	bl	800280c <TimerMotor>
					HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0); // Push
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <main+0x578>)
 8001a92:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <main+0x578>)
 8001a98:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f002 f800 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0); // Push
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <main+0x578>)
 8001aa6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <main+0x578>)
 8001aac:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f001 fff6 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8001ab8:	20c8      	movs	r0, #200	; 0xc8
 8001aba:	f001 f9eb 	bl	8002e94 <HAL_Delay>
					HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 0); // CUT
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <main+0x578>)
 8001ac0:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <main+0x578>)
 8001ac6:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f001 ffe9 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0); // Weld
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <main+0x578>)
 8001ad4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <main+0x578>)
 8001ada:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f001 ffdf 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0); // Weld
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <main+0x578>)
 8001ae8:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <main+0x578>)
 8001aee:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	f001 ffd5 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8001afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001afe:	f001 f9c9 	bl	8002e94 <HAL_Delay>
					HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 1); /*Release*/
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <main+0x578>)
 8001b04:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <main+0x578>)
 8001b0a:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4619      	mov	r1, r3
 8001b12:	f001 ffc7 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <main+0x578>)
 8001b18:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <main+0x578>)
 8001b1e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001b22:	2201      	movs	r2, #1
 8001b24:	4619      	mov	r1, r3
 8001b26:	f001 ffbd 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <main+0x578>)
 8001b2c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <main+0x578>)
 8001b32:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001b36:	2201      	movs	r2, #1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f001 ffb3 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <main+0x578>)
 8001b40:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <main+0x578>)
 8001b46:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f001 ffa9 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <main+0x578>)
 8001b54:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <main+0x578>)
 8001b5a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4619      	mov	r1, r3
 8001b62:	f001 ff9f 	bl	8003aa4 <HAL_GPIO_WritePin>
					TimerMotor(&Buttons[2]); // Dose
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <main+0x58c>)
 8001b68:	f000 fe50 	bl	800280c <TimerMotor>
 8001b6c:	e085      	b.n	8001c7a <main+0x682>
 8001b6e:	bf00      	nop
 8001b70:	200008ac 	.word	0x200008ac
 8001b74:	20000804 	.word	0x20000804
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	200009e0 	.word	0x200009e0
 8001b84:	20000904 	.word	0x20000904
				}
				else
				{
					Pullsteps = PULL_STEPS / 2;
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <main+0x6b4>)
 8001b8a:	f240 2226 	movw	r2, #550	; 0x226
 8001b8e:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS / 2;
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <main+0x6b8>)
 8001b92:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001b96:	601a      	str	r2, [r3, #0]
					TimerMotor(&Buttons[7]); // PULL mat.
 8001b98:	4846      	ldr	r0, [pc, #280]	; (8001cb4 <main+0x6bc>)
 8001b9a:	f000 fe37 	bl	800280c <TimerMotor>
					HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0); // Push
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <main+0x6c0>)
 8001ba0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001ba4:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <main+0x6c0>)
 8001ba6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	f001 ff79 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0); // Push
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <main+0x6c0>)
 8001bb4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <main+0x6c0>)
 8001bba:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f001 ff6f 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8001bc6:	20c8      	movs	r0, #200	; 0xc8
 8001bc8:	f001 f964 	bl	8002e94 <HAL_Delay>
					HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 0); // CUT
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <main+0x6c0>)
 8001bce:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <main+0x6c0>)
 8001bd4:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f001 ff62 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0); // Weld
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <main+0x6c0>)
 8001be2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <main+0x6c0>)
 8001be8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f001 ff58 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0); // Weld
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <main+0x6c0>)
 8001bf6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <main+0x6c0>)
 8001bfc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001c00:	2200      	movs	r2, #0
 8001c02:	4619      	mov	r1, r3
 8001c04:	f001 ff4e 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8001c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c0c:	f001 f942 	bl	8002e94 <HAL_Delay>
					HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 1); /*Release*/
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <main+0x6c0>)
 8001c12:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <main+0x6c0>)
 8001c18:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f001 ff40 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <main+0x6c0>)
 8001c26:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <main+0x6c0>)
 8001c2c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001c30:	2201      	movs	r2, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f001 ff36 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <main+0x6c0>)
 8001c3a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <main+0x6c0>)
 8001c40:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c44:	2201      	movs	r2, #1
 8001c46:	4619      	mov	r1, r3
 8001c48:	f001 ff2c 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <main+0x6c0>)
 8001c4e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <main+0x6c0>)
 8001c54:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f001 ff22 	bl	8003aa4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <main+0x6c0>)
 8001c62:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <main+0x6c0>)
 8001c68:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f001 ff18 	bl	8003aa4 <HAL_GPIO_WritePin>
					TimerMotor(&Buttons[2]); // Dose
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <main+0x6c4>)
 8001c76:	f000 fdc9 	bl	800280c <TimerMotor>
				}
				HAL_Delay(200);
 8001c7a:	20c8      	movs	r0, #200	; 0xc8
 8001c7c:	f001 f90a 	bl	8002e94 <HAL_Delay>
				counter++;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <main+0x6c8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <main+0x6c8>)
 8001c88:	6013      	str	r3, [r2, #0]
			}
			sprintf(tx_buffer, "Count: %lu", counter);
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <main+0x6c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <main+0x6cc>)
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <main+0x6d0>)
 8001c94:	f004 fad2 	bl	800623c <siprintf>
			ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <main+0x6d0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	2014      	movs	r0, #20
 8001ca0:	f7ff fbb0 	bl	8001404 <ST7920_Decode_UTF8>
			ST7920_Update();
 8001ca4:	f7ff fb62 	bl	800136c <ST7920_Update>
		if(!Buttons[9].B_State)
 8001ca8:	e4dc      	b.n	8001664 <main+0x6c>
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	200009e0 	.word	0x200009e0
 8001cb8:	200008ac 	.word	0x200008ac
 8001cbc:	20000904 	.word	0x20000904
 8001cc0:	20000800 	.word	0x20000800
 8001cc4:	08007a18 	.word	0x08007a18
 8001cc8:	20000380 	.word	0x20000380

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	; 0x50
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	2230      	movs	r2, #48	; 0x30
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fe4a 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <SystemClock_Config+0xc8>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <SystemClock_Config+0xc8>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <SystemClock_Config+0xc8>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <SystemClock_Config+0xcc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <SystemClock_Config+0xcc>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <SystemClock_Config+0xcc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d32:	2302      	movs	r3, #2
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d40:	2348      	movs	r3, #72	; 0x48
 8001d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001d44:	2306      	movs	r3, #6
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fec1 	bl	8003ad8 <HAL_RCC_OscConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d5c:	f000 fe08 	bl	8002970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d60:	230f      	movs	r3, #15
 8001d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 f91b 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d88:	f000 fdf2 	bl	8002970 <Error_Handler>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3750      	adds	r7, #80	; 0x50
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000

08001d9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <MX_SPI2_Init+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_SPI2_Init+0x64>)
 8001dee:	f002 faa1 	bl	8004334 <HAL_SPI_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001df8:	f000 fdba 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000814 	.word	0x20000814
 8001e04:	40003800 	.word	0x40003800

08001e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 0320 	add.w	r3, r7, #32
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <MX_TIM3_Init+0xec>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2400-1;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e40:	f640 125f 	movw	r2, #2399	; 0x95f
 8001e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6-1;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e4e:	2205      	movs	r2, #5
 8001e50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e5e:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e60:	f002 fdca 	bl	80049f8 <HAL_TIM_Base_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e6a:	f000 fd81 	bl	8002970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e7c:	f003 f8d0 	bl	8005020 <HAL_TIM_ConfigClockSource>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e86:	f000 fd73 	bl	8002970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e8a:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001e8c:	f002 fe2e 	bl	8004aec <HAL_TIM_PWM_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e96:	f000 fd6b 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001eaa:	f003 fca9 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001eb4:	f000 fd5c 	bl	8002970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb8:	2360      	movs	r3, #96	; 0x60
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8001ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001ed2:	f002 ffdf 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001edc:	f000 fd48 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_TIM3_Init+0xe8>)
 8001ee2:	f000 fe73 	bl	8002bcc <HAL_TIM_MspPostInit>

}
 8001ee6:	bf00      	nop
 8001ee8:	3738      	adds	r7, #56	; 0x38
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000086c 	.word	0x2000086c
 8001ef4:	40000400 	.word	0x40000400

08001ef8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efe:	463b      	mov	r3, r7
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <MX_TIM6_Init+0x68>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24000-1;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f0e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001f12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f2a:	f002 fd65 	bl	80049f8 <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f34:	f000 fd1c 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_TIM6_Init+0x64>)
 8001f46:	f003 fc5b 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f50:	f000 fd0e 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000b6c 	.word	0x20000b6c
 8001f60:	40001000 	.word	0x40001000

08001f64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <MX_TIM7_Init+0x68>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f7a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001f7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f88:	2205      	movs	r2, #5
 8001f8a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001f94:	f002 fd30 	bl	80049f8 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f9e:	f000 fce7 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_TIM7_Init+0x64>)
 8001fb0:	f003 fc26 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001fba:	f000 fcd9 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000c90 	.word	0x20000c90
 8001fcc:	40001400 	.word	0x40001400

08001fd0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_DMA_Init+0x3c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <MX_DMA_Init+0x3c>)
 8001fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_DMA_Init+0x3c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f001 f85d 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ffc:	200f      	movs	r0, #15
 8001ffe:	f001 f876 	bl	80030ee <HAL_NVIC_EnableIRQ>

}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a70      	ldr	r2, [pc, #448]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a62      	ldr	r2, [pc, #392]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <MX_GPIO_Init+0x1e0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2120      	movs	r1, #32
 80020d2:	4848      	ldr	r0, [pc, #288]	; (80021f4 <MX_GPIO_Init+0x1e4>)
 80020d4:	f001 fce6 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	21c0      	movs	r1, #192	; 0xc0
 80020dc:	4846      	ldr	r0, [pc, #280]	; (80021f8 <MX_GPIO_Init+0x1e8>)
 80020de:	f001 fce1 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin|H_Push_Out_Pin 
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80020e8:	4844      	ldr	r0, [pc, #272]	; (80021fc <MX_GPIO_Init+0x1ec>)
 80020ea:	f001 fcdb 	bl	8003aa4 <HAL_GPIO_WritePin>
                          |H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	4843      	ldr	r0, [pc, #268]	; (8002200 <MX_GPIO_Init+0x1f0>)
 80020f4:	f001 fcd6 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin 
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin 
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin 
                           HOLD_Pull_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin 
 80020f8:	f64f 73da 	movw	r3, #65498	; 0xffda
 80020fc:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin 
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin 
                          |HOLD_Pull_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002102:	2301      	movs	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4839      	ldr	r0, [pc, #228]	; (80021f4 <MX_GPIO_Init+0x1e4>)
 800210e:	f001 fb17 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002112:	2320      	movs	r3, #32
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	4832      	ldr	r0, [pc, #200]	; (80021f4 <MX_GPIO_Init+0x1e4>)
 800212a:	f001 fb09 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Dose_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin;
 800212e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HOLD_Dose_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	4830      	ldr	r0, [pc, #192]	; (8002204 <MX_GPIO_Init+0x1f4>)
 8002144:	f001 fafc 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Size_Select_Pin */
  GPIO_InitStruct.Pin = Size_Select_Pin;
 8002148:	2302      	movs	r3, #2
 800214a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Size_Select_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	482a      	ldr	r0, [pc, #168]	; (8002204 <MX_GPIO_Init+0x1f4>)
 800215c:	f001 faf0 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4820      	ldr	r0, [pc, #128]	; (80021f8 <MX_GPIO_Init+0x1e8>)
 8002178:	f001 fae2 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = Mode_Pin|Auto_Start_Pin;
 800217c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002186:	2301      	movs	r3, #1
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	481b      	ldr	r0, [pc, #108]	; (8002200 <MX_GPIO_Init+0x1f0>)
 8002192:	f001 fad5 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin H_Push_Out_Pin 
                           H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin|H_Push_Out_Pin 
 8002196:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800219a:	61fb      	str	r3, [r7, #28]
                          |H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	4813      	ldr	r0, [pc, #76]	; (80021fc <MX_GPIO_Init+0x1ec>)
 80021b0:	f001 fac6 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin;
 80021b4:	2318      	movs	r3, #24
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	2301      	movs	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_GPIO_Init+0x1ec>)
 80021c8:	f001 faba 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4807      	ldr	r0, [pc, #28]	; (8002200 <MX_GPIO_Init+0x1f0>)
 80021e4:	f001 faac 	bl	8003740 <HAL_GPIO_Init>

}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800

08002208 <Init>:

/* USER CODE BEGIN 4 */
void Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	f000 fe40 	bl	8002e94 <HAL_Delay>
	  ST7920_Init();
 8002214:	f7fe feb8 	bl	8000f88 <ST7920_Init>
	  ST7920_Graphic_mode(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f7fe fef9 	bl	8001010 <ST7920_Graphic_mode>
	  sprintf(tx_buffer, "WELCOME");
 800221e:	4a7d      	ldr	r2, [pc, #500]	; (8002414 <Init+0x20c>)
 8002220:	4b7d      	ldr	r3, [pc, #500]	; (8002418 <Init+0x210>)
 8002222:	cb03      	ldmia	r3!, {r0, r1}
 8002224:	6010      	str	r0, [r2, #0]
 8002226:	6051      	str	r1, [r2, #4]
	  ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
 8002228:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <Init+0x20c>)
 800222a:	2200      	movs	r2, #0
 800222c:	2103      	movs	r1, #3
 800222e:	2032      	movs	r0, #50	; 0x32
 8002230:	f7ff f8e8 	bl	8001404 <ST7920_Decode_UTF8>
	  ST7920_Update();
 8002234:	f7ff f89a 	bl	800136c <ST7920_Update>
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	e0b0      	b.n	80023a0 <Init+0x198>
	  {
		  Buttons[i].B_Out = 0;
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4a76      	ldr	r2, [pc, #472]	; (800241c <Init+0x214>)
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3314      	adds	r3, #20
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_State = 0;
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4a72      	ldr	r2, [pc, #456]	; (800241c <Init+0x214>)
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3313      	adds	r3, #19
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_counter = 0;
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4a6d      	ldr	r2, [pc, #436]	; (800241c <Init+0x214>)
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3312      	adds	r3, #18
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Lock = 0;
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <Init+0x214>)
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3315      	adds	r3, #21
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		  Buttons[i].call_function = toggle_func;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a64      	ldr	r2, [pc, #400]	; (800241c <Init+0x214>)
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3320      	adds	r3, #32
 8002294:	4a62      	ldr	r2, [pc, #392]	; (8002420 <Init+0x218>)
 8002296:	601a      	str	r2, [r3, #0]
		  Buttons[i].alternate_function = 0;
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a60      	ldr	r2, [pc, #384]	; (800241c <Init+0x214>)
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3324      	adds	r3, #36	; 0x24
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
		  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	495d      	ldr	r1, [pc, #372]	; (8002424 <Init+0x21c>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4610      	mov	r0, r2
 80022be:	4a57      	ldr	r2, [pc, #348]	; (800241c <Init+0x214>)
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin = Defines[i][1];
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	4955      	ldr	r1, [pc, #340]	; (8002424 <Init+0x21c>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	b290      	uxth	r0, r2
 80022e2:	4a4e      	ldr	r2, [pc, #312]	; (800241c <Init+0x214>)
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3308      	adds	r3, #8
 80022ee:	4602      	mov	r2, r0
 80022f0:	801a      	strh	r2, [r3, #0]
		  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 80022f2:	79fa      	ldrb	r2, [r7, #7]
 80022f4:	494b      	ldr	r1, [pc, #300]	; (8002424 <Init+0x21c>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3308      	adds	r3, #8
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4610      	mov	r0, r2
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <Init+0x214>)
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	330c      	adds	r3, #12
 8002314:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 8002316:	79fa      	ldrb	r2, [r7, #7]
 8002318:	4942      	ldr	r1, [pc, #264]	; (8002424 <Init+0x21c>)
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	330c      	adds	r3, #12
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	b290      	uxth	r0, r2
 800232c:	4a3b      	ldr	r2, [pc, #236]	; (800241c <Init+0x214>)
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3310      	adds	r3, #16
 8002338:	4602      	mov	r2, r0
 800233a:	801a      	strh	r2, [r3, #0]
		  Buttons[i].Mode = Defines[i][4];
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	4939      	ldr	r1, [pc, #228]	; (8002424 <Init+0x21c>)
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3310      	adds	r3, #16
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	b2d0      	uxtb	r0, r2
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <Init+0x214>)
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3316      	adds	r3, #22
 800235e:	4602      	mov	r2, r0
 8002360:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Delay = Defines[i][5];
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	492f      	ldr	r1, [pc, #188]	; (8002424 <Init+0x21c>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3314      	adds	r3, #20
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	b290      	uxth	r0, r2
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <Init+0x214>)
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3318      	adds	r3, #24
 8002384:	4602      	mov	r2, r0
 8002386:	801a      	strh	r2, [r3, #0]
		  Buttons[i].addiction = 0;
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4a24      	ldr	r2, [pc, #144]	; (800241c <Init+0x214>)
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	331c      	adds	r3, #28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	3301      	adds	r3, #1
 800239e:	71fb      	strb	r3, [r7, #7]
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f af4b 	bls.w	800223e <Init+0x36>
	  }
	  Buttons[0].alternate_function = macros1;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <Init+0x214>)
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <Init+0x220>)
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
	  Buttons[1].Label = "Prepare";
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <Init+0x214>)
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <Init+0x224>)
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
	  Buttons[1].third_function = SetSteps0;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <Init+0x214>)
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <Init+0x228>)
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
	  Buttons[1].addiction = &Buttons[13];
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <Init+0x214>)
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <Init+0x22c>)
 80023be:	649a      	str	r2, [r3, #72]	; 0x48
	  Buttons[2].third_function = SetSteps2;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <Init+0x214>)
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <Init+0x230>)
 80023c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  Buttons[4].addiction = &Buttons[3];
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <Init+0x214>)
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <Init+0x234>)
 80023cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	  Buttons[6].addiction = &Buttons[5];
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <Init+0x214>)
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <Init+0x238>)
 80023d4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  Buttons[7].third_function = SetSteps1;
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <Init+0x214>)
 80023da:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <Init+0x23c>)
 80023dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Buttons[9].Label = "mode";
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <Init+0x214>)
 80023e2:	4a19      	ldr	r2, [pc, #100]	; (8002448 <Init+0x240>)
 80023e4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  Buttons[10].Label = "auto_start";
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <Init+0x214>)
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <Init+0x244>)
 80023ec:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	  Buttons[13].Label = "reed_switch";
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <Init+0x214>)
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <Init+0x248>)
 80023f4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	4815      	ldr	r0, [pc, #84]	; (8002454 <Init+0x24c>)
 80023fe:	f001 fb51 	bl	8003aa4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 8002402:	2201      	movs	r2, #1
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	4813      	ldr	r0, [pc, #76]	; (8002454 <Init+0x24c>)
 8002408:	f001 fb4c 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000380 	.word	0x20000380
 8002418:	08007a24 	.word	0x08007a24
 800241c:	200008ac 	.word	0x200008ac
 8002420:	0800259d 	.word	0x0800259d
 8002424:	20000008 	.word	0x20000008
 8002428:	08002621 	.word	0x08002621
 800242c:	08007a2c 	.word	0x08007a2c
 8002430:	08002931 	.word	0x08002931
 8002434:	20000ae8 	.word	0x20000ae8
 8002438:	08002911 	.word	0x08002911
 800243c:	20000930 	.word	0x20000930
 8002440:	20000988 	.word	0x20000988
 8002444:	080028f1 	.word	0x080028f1
 8002448:	08007a34 	.word	0x08007a34
 800244c:	08007a3c 	.word	0x08007a3c
 8002450:	08007a48 	.word	0x08007a48
 8002454:	40020000 	.word	0x40020000

08002458 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a46      	ldr	r2, [pc, #280]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d17f      	bne.n	800256a <HAL_TIM_PeriodElapsedCallback+0x112>
	{
		if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 800246a:	2110      	movs	r1, #16
 800246c:	4845      	ldr	r0, [pc, #276]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800246e:	f001 fb01 	bl	8003a74 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d12d      	bne.n	80024d4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e016      	b.n	80024ac <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	4a41      	ldr	r2, [pc, #260]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	330c      	adds	r3, #12
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	4a3d      	ldr	r2, [pc, #244]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3310      	adds	r3, #16
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4619      	mov	r1, r3
 80024a2:	f001 faff 	bl	8003aa4 <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	3301      	adds	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	d9e5      	bls.n	800247e <HAL_TIM_PeriodElapsedCallback+0x26>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 80024b2:	4836      	ldr	r0, [pc, #216]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80024b4:	f002 faef 	bl	8004a96 <HAL_TIM_Base_Stop_IT>
			Delay(4800000);
 80024b8:	4835      	ldr	r0, [pc, #212]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024ba:	f000 fa47 	bl	800294c <Delay>
			while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 80024be:	e000      	b.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 80024c0:	bf00      	nop
 80024c2:	2110      	movs	r1, #16
 80024c4:	482f      	ldr	r0, [pc, #188]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80024c6:	f001 fad5 	bl	8003a74 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f7      	beq.n	80024c0 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_NVIC_SystemReset();
 80024d0:	f000 fe1b 	bl	800310a <HAL_NVIC_SystemReset>
		}
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	73bb      	strb	r3, [r7, #14]
 80024d8:	e027      	b.n	800252a <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			if(Buttons[i].addiction->B_Out || Buttons[i].addiction == 0)
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	4a2a      	ldr	r2, [pc, #168]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	331c      	adds	r3, #28
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	7d1b      	ldrb	r3, [r3, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_TIM_PeriodElapsedCallback+0xac>
 80024f0:	7bbb      	ldrb	r3, [r7, #14]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	331c      	adds	r3, #28
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <HAL_TIM_PeriodElapsedCallback+0xcc>
				Buttons[i].call_function(&Buttons[i]);
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3320      	adds	r3, #32
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	7bba      	ldrb	r2, [r7, #14]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f202 	mul.w	r2, r1, r2
 800251c:	491a      	ldr	r1, [pc, #104]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800251e:	440a      	add	r2, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	3301      	adds	r3, #1
 8002528:	73bb      	strb	r3, [r7, #14]
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d9d4      	bls.n	80024da <HAL_TIM_PeriodElapsedCallback+0x82>
		}

		if(Buttons[14].B_Out && counter > 0)
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002532:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_TIM_PeriodElapsedCallback+0xfc>
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_TIM_PeriodElapsedCallback+0xfc>
		{
			Buttons[14].B_Out = 0;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002544:	2200      	movs	r2, #0
 8002546:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
			counter = 0;
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
			ST7920_Clean();
 8002550:	f7fe fd83 	bl	800105a <ST7920_Clean>
		}
		if(Buttons[10].B_Out)
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002556:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			HoldPrepareMotorUntill(Buttons[1].addiction, 1);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f92b 	bl	80027c0 <HoldPrepareMotorUntill>
		}
	}
	if (htim->Instance==TIM6)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		ST7920_Update();
 8002574:	f7fe fefa 	bl	800136c <ST7920_Update>
	}
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40001400 	.word	0x40001400
 8002584:	40020c00 	.word	0x40020c00
 8002588:	200008ac 	.word	0x200008ac
 800258c:	20000c90 	.word	0x20000c90
 8002590:	00493e00 	.word	0x00493e00
 8002594:	20000800 	.word	0x20000800
 8002598:	40001000 	.word	0x40001000

0800259c <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	891b      	ldrh	r3, [r3, #8]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f001 fa60 	bl	8003a74 <HAL_GPIO_ReadPin>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11d      	bne.n	80025f6 <toggle_func+0x5a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7d5b      	ldrb	r3, [r3, #21]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <toggle_func+0x5a>
		{
			if(button->B_counter < 10)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7c9b      	ldrb	r3, [r3, #18]
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	d806      	bhi.n	80025d8 <toggle_func+0x3c>
				button->B_counter++;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7c9b      	ldrb	r3, [r3, #18]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 10)
 80025d6:	e01d      	b.n	8002614 <toggle_func+0x78>
			else
				if(button->B_State == 0)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7cdb      	ldrb	r3, [r3, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d119      	bne.n	8002614 <toggle_func+0x78>
				{
					button->B_State = 1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7d1b      	ldrb	r3, [r3, #20]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 10)
 80025f4:	e00e      	b.n	8002614 <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7c9b      	ldrb	r3, [r3, #18]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <toggle_func+0x70>
				button->B_counter--;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7c9b      	ldrb	r3, [r3, #18]
 8002602:	3b01      	subs	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 800260a:	e004      	b.n	8002616 <toggle_func+0x7a>
				button->B_State = 0;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	74da      	strb	r2, [r3, #19]
}
 8002612:	e000      	b.n	8002616 <toggle_func+0x7a>
			if(button->B_counter < 10)
 8002614:	bf00      	nop
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <macros1>:
void macros1(struct Button *button)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <macros1+0xc0>)
 800262a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <macros1+0xc0>)
 8002630:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	f001 fa34 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <macros1+0xc0>)
 800263e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <macros1+0xc0>)
 8002644:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002648:	2200      	movs	r2, #0
 800264a:	4619      	mov	r1, r3
 800264c:	f001 fa2a 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002650:	20c8      	movs	r0, #200	; 0xc8
 8002652:	f000 fc1f 	bl	8002e94 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <macros1+0xc0>)
 8002658:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <macros1+0xc0>)
 800265e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002662:	2200      	movs	r2, #0
 8002664:	4619      	mov	r1, r3
 8002666:	f001 fa1d 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <macros1+0xc0>)
 800266c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <macros1+0xc0>)
 8002672:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	f001 fa13 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800267e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002682:	f000 fc07 	bl	8002e94 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <macros1+0xc0>)
 8002688:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <macros1+0xc0>)
 800268e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002692:	2201      	movs	r2, #1
 8002694:	4619      	mov	r1, r3
 8002696:	f001 fa05 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <macros1+0xc0>)
 800269c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <macros1+0xc0>)
 80026a2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80026a6:	2201      	movs	r2, #1
 80026a8:	4619      	mov	r1, r3
 80026aa:	f001 f9fb 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <macros1+0xc0>)
 80026b0:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <macros1+0xc0>)
 80026b6:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80026ba:	2201      	movs	r2, #1
 80026bc:	4619      	mov	r1, r3
 80026be:	f001 f9f1 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <macros1+0xc0>)
 80026c4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <macros1+0xc0>)
 80026ca:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80026ce:	2201      	movs	r2, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	f001 f9e7 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200008ac 	.word	0x200008ac

080026e4 <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]

	uint16_t Limitation = 10000;
 80026f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80026f4:	81fb      	strh	r3, [r7, #14]
	uint16_t temp = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	81bb      	strh	r3, [r7, #12]
	for(uint32_t j = 0; j < 10; j++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	e020      	b.n	8002742 <HoldMotor+0x5e>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68d8      	ldr	r0, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8a1b      	ldrh	r3, [r3, #16]
 8002708:	2200      	movs	r2, #0
 800270a:	4619      	mov	r1, r3
 800270c:	f001 f9ca 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8b1b      	ldrh	r3, [r3, #24]
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f917 	bl	800294c <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68d8      	ldr	r0, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8a1b      	ldrh	r3, [r3, #16]
 8002726:	2201      	movs	r2, #1
 8002728:	4619      	mov	r1, r3
 800272a:	f001 f9bb 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8b1b      	ldrh	r3, [r3, #24]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f908 	bl	800294c <Delay>
	for(uint32_t j = 0; j < 10; j++)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b09      	cmp	r3, #9
 8002746:	d9db      	bls.n	8002700 <HoldMotor+0x1c>
	}
	while(Button->B_State == mode && Limitation)
 8002748:	e02d      	b.n	80027a6 <HoldMotor+0xc2>
	{
		Limitation--;
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	3b01      	subs	r3, #1
 800274e:	81fb      	strh	r3, [r7, #14]
		if(temp < ACCEL) temp++;
 8002750:	89bb      	ldrh	r3, [r7, #12]
 8002752:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002756:	d202      	bcs.n	800275e <HoldMotor+0x7a>
 8002758:	89bb      	ldrh	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68d8      	ldr	r0, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8a1b      	ldrh	r3, [r3, #16]
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	f001 f99b 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8b1b      	ldrh	r3, [r3, #24]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	89bb      	ldrh	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f8e5 	bl	800294c <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68d8      	ldr	r0, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8a1b      	ldrh	r3, [r3, #16]
 800278a:	2201      	movs	r2, #1
 800278c:	4619      	mov	r1, r3
 800278e:	f001 f989 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8b1b      	ldrh	r3, [r3, #24]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	89bb      	ldrh	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f8d3 	bl	800294c <Delay>
	while(Button->B_State == mode && Limitation)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7cdb      	ldrb	r3, [r3, #19]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d102      	bne.n	80027b6 <HoldMotor+0xd2>
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1c9      	bne.n	800274a <HoldMotor+0x66>
	}

}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HoldPrepareMotorUntill>:

void HoldPrepareMotorUntill(struct Button *Button, uint8_t mode)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
	static bool flag = false;
	if(Button->B_State == mode)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7cdb      	ldrb	r3, [r3, #19]
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10e      	bne.n	80027f4 <HoldPrepareMotorUntill+0x34>
	{
		if(flag == false)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HoldPrepareMotorUntill+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	f083 0301 	eor.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HoldPrepareMotorUntill+0x3c>
		{
			HAL_TIM_PWM_Start(&htim3, 1);
 80027e4:	2101      	movs	r1, #1
 80027e6:	4808      	ldr	r0, [pc, #32]	; (8002808 <HoldPrepareMotorUntill+0x48>)
 80027e8:	f002 f9b6 	bl	8004b58 <HAL_TIM_PWM_Start>
			flag = true;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HoldPrepareMotorUntill+0x44>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim3, 1);
	}
}
 80027f2:	e003      	b.n	80027fc <HoldPrepareMotorUntill+0x3c>
		HAL_TIM_PWM_Stop(&htim3, 1);
 80027f4:	2101      	movs	r1, #1
 80027f6:	4804      	ldr	r0, [pc, #16]	; (8002808 <HoldPrepareMotorUntill+0x48>)
 80027f8:	f002 f9ec 	bl	8004bd4 <HAL_TIM_PWM_Stop>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000805 	.word	0x20000805
 8002808:	2000086c 	.word	0x2000086c

0800280c <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 8002818:	23c8      	movs	r3, #200	; 0xc8
 800281a:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	f107 0208 	add.w	r2, r7, #8
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e020      	b.n	8002878 <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68d8      	ldr	r0, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8a1b      	ldrh	r3, [r3, #16]
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	f001 f92f 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8b1b      	ldrh	r3, [r3, #24]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f87c 	bl	800294c <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68d8      	ldr	r0, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8a1b      	ldrh	r3, [r3, #16]
 800285c:	2201      	movs	r2, #1
 800285e:	4619      	mov	r1, r3
 8002860:	f001 f920 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8b1b      	ldrh	r3, [r3, #24]
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f86d 	bl	800294c <Delay>
	for(uint32_t j = 0; j < 20; j++)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b13      	cmp	r3, #19
 800287c:	d9db      	bls.n	8002836 <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e02d      	b.n	80028e0 <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 8002884:	8afb      	ldrh	r3, [r7, #22]
 8002886:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800288a:	d202      	bcs.n	8002892 <TimerMotor+0x86>
 800288c:	8afb      	ldrh	r3, [r7, #22]
 800288e:	3301      	adds	r3, #1
 8002890:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68d8      	ldr	r0, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8a1b      	ldrh	r3, [r3, #16]
 800289a:	2200      	movs	r2, #0
 800289c:	4619      	mov	r1, r3
 800289e:	f001 f901 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8b1b      	ldrh	r3, [r3, #24]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f84b 	bl	800294c <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68d8      	ldr	r0, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8a1b      	ldrh	r3, [r3, #16]
 80028be:	2201      	movs	r2, #1
 80028c0:	4619      	mov	r1, r3
 80028c2:	f001 f8ef 	bl	8003aa4 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8b1b      	ldrh	r3, [r3, #24]
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	8afb      	ldrh	r3, [r7, #22]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f839 	bl	800294c <Delay>
	for(uint32_t j = 0; j < steps; j++)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3cd      	bcc.n	8002884 <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 80028e8:	bf00      	nop
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	*(steps) = Pullsteps;
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <SetSteps1+0x1c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	20000000 	.word	0x20000000

08002910 <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	*(steps) = Dosesteps;
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <SetSteps2+0x1c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	20000004 	.word	0x20000004

08002930 <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <Delay>:

void Delay(uint32_t delay)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 8002954:	e000      	b.n	8002958 <Delay+0xc>
 8002956:	bf00      	nop
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <Delay+0xa>
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	4804      	ldr	r0, [pc, #16]	; (800298c <Error_Handler+0x1c>)
 800297a:	f001 f893 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	4802      	ldr	r0, [pc, #8]	; (800298c <Error_Handler+0x1c>)
 8002984:	f001 f88e 	bl	8003aa4 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a43      	ldr	r2, [pc, #268]	; (8002b0c <HAL_SPI_MspInit+0x12c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d17f      	bne.n	8002b02 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_SPI_MspInit+0x130>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a56:	2308      	movs	r3, #8
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a62:	2303      	movs	r3, #3
 8002a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a66:	2305      	movs	r3, #5
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4828      	ldr	r0, [pc, #160]	; (8002b14 <HAL_SPI_MspInit+0x134>)
 8002a72:	f000 fe65 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a88:	2305      	movs	r3, #5
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	4821      	ldr	r0, [pc, #132]	; (8002b18 <HAL_SPI_MspInit+0x138>)
 8002a94:	f000 fe54 	bl	8003740 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002a9a:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <HAL_SPI_MspInit+0x140>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ad6:	4811      	ldr	r0, [pc, #68]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002ad8:	f000 fb28 	bl	800312c <HAL_DMA_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002ae2:	f7ff ff45 	bl	8002970 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aea:	649a      	str	r2, [r3, #72]	; 0x48
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_SPI_MspInit+0x13c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2024      	movs	r0, #36	; 0x24
 8002af8:	f000 fadd 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002afc:	2024      	movs	r0, #36	; 0x24
 8002afe:	f000 faf6 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40003800 	.word	0x40003800
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	20000c30 	.word	0x20000c30
 8002b20:	40026070 	.word	0x40026070

08002b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_TIM_Base_MspInit+0x98>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b52:	e02e      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_TIM_Base_MspInit+0xa0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
}
 8002b7a:	e01a      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_TIM_Base_MspInit+0xa4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d115      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b90:	f043 0320 	orr.w	r3, r3, #32
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2037      	movs	r0, #55	; 0x37
 8002ba8:	f000 fa85 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bac:	2037      	movs	r0, #55	; 0x37
 8002bae:	f000 fa9e 	bl	80030ee <HAL_NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40001000 	.word	0x40001000
 8002bc8:	40001400 	.word	0x40001400

08002bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_TIM_MspPostInit+0x68>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d11d      	bne.n	8002c2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_TIM_MspPostInit+0x6c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_TIM_MspPostInit+0x6c>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_TIM_MspPostInit+0x6c>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = Prepare_OUT_Pin;
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Prepare_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4619      	mov	r1, r3
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <HAL_TIM_MspPostInit+0x70>)
 8002c26:	f000 fd8b 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c2a:	bf00      	nop
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020800 	.word	0x40020800

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c52:	e7fe      	b.n	8002c52 <HardFault_Handler+0x4>

08002c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <MemManage_Handler+0x4>

08002c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5e:	e7fe      	b.n	8002c5e <BusFault_Handler+0x4>

08002c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <UsageFault_Handler+0x4>

08002c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c94:	f000 f8de 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA1_Stream4_IRQHandler+0x10>)
 8002ca2:	f000 fb13 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000c30 	.word	0x20000c30

08002cb0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <SPI2_IRQHandler+0x10>)
 8002cb6:	f001 fc23 	bl	8004500 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000814 	.word	0x20000814

08002cc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <TIM7_IRQHandler+0x10>)
 8002cca:	f001 ffdb 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000c90 	.word	0x20000c90

08002cd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <_sbrk+0x50>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x16>
		heap_end = &end;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <_sbrk+0x50>)
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <_sbrk+0x54>)
 8002cec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <_sbrk+0x50>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <_sbrk+0x50>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	466a      	mov	r2, sp
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d907      	bls.n	8002d12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d02:	f002 fe0d 	bl	8005920 <__errno>
 8002d06:	4602      	mov	r2, r0
 8002d08:	230c      	movs	r3, #12
 8002d0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d10:	e006      	b.n	8002d20 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <_sbrk+0x50>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <_sbrk+0x50>)
 8002d1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000808 	.word	0x20000808
 8002d2c:	20000cd8 	.word	0x20000cd8

08002d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <SystemInit+0x28>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <SystemInit+0x28>)
 8002d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SystemInit+0x28>)
 8002d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d62:	e003      	b.n	8002d6c <LoopCopyDataInit>

08002d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d6a:	3104      	adds	r1, #4

08002d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d6c:	480b      	ldr	r0, [pc, #44]	; (8002d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d74:	d3f6      	bcc.n	8002d64 <CopyDataInit>
  ldr  r2, =_sbss
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d78:	e002      	b.n	8002d80 <LoopFillZerobss>

08002d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d7c:	f842 3b04 	str.w	r3, [r2], #4

08002d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d84:	d3f9      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d86:	f7ff ffd3 	bl	8002d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f002 fdcf 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe fc33 	bl	80015f8 <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d98:	080080a8 	.word	0x080080a8
  ldr  r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002da0:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 8002da4:	20000364 	.word	0x20000364
  ldr  r3, = _ebss
 8002da8:	20000cd8 	.word	0x20000cd8

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f961 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 f808 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7ff fdd4 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f97d 	bl	8003112 <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 f941 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000188 	.word	0x20000188
 8002e4c:	20000190 	.word	0x20000190
 8002e50:	2000018c 	.word	0x2000018c

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000190 	.word	0x20000190
 8002e78:	20000cd0 	.word	0x20000cd0

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000cd0 	.word	0x20000cd0

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_Delay+0x40>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000190 	.word	0x20000190

08002ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <__NVIC_GetPriorityGrouping+0x18>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0307 	and.w	r3, r3, #7
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db0b      	blt.n	8002f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4907      	ldr	r1, [pc, #28]	; (8002f74 <__NVIC_EnableIRQ+0x38>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003038:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <__NVIC_SystemReset+0x20>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <__NVIC_SystemReset+0x20>)
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <__NVIC_SystemReset+0x24>)
 8003048:	4313      	orrs	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <__NVIC_SystemReset+0x1c>
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0004 	.word	0x05fa0004

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff7a 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff15 	bl	8002ed8 <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c8:	f7ff ff2a 	bl	8002f20 <__NVIC_GetPriorityGrouping>
 80030cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff7a 	bl	8002fcc <NVIC_EncodePriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff49 	bl	8002f78 <__NVIC_SetPriority>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff1d 	bl	8002f3c <__NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800310e:	f7ff ff91 	bl	8003034 <__NVIC_SystemReset>

08003112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff9e 	bl	800305c <SysTick_Config>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff fea0 	bl	8002e7c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e099      	b.n	800327c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003168:	e00f      	b.n	800318a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316a:	f7ff fe87 	bl	8002e7c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b05      	cmp	r3, #5
 8003176:	d908      	bls.n	800318a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e078      	b.n	800327c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e8      	bne.n	800316a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_DMA_Init+0x158>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d107      	bne.n	80031f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	4313      	orrs	r3, r2
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0307 	bic.w	r3, r3, #7
 800320a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b04      	cmp	r3, #4
 800321c:	d117      	bne.n	800324e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fa0b 	bl	800364c <DMA_CheckFifoParam>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800324a:	2301      	movs	r3, #1
 800324c:	e016      	b.n	800327c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9c2 	bl	80035e0 <DMA_CalcBaseAndBitshift>
 800325c:	4603      	mov	r3, r0
 800325e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	223f      	movs	r2, #63	; 0x3f
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	f010803f 	.word	0xf010803f

08003288 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00c      	b.n	80032c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2205      	movs	r2, #5
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d8:	4b92      	ldr	r3, [pc, #584]	; (8003524 <HAL_DMA_IRQHandler+0x258>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a92      	ldr	r2, [pc, #584]	; (8003528 <HAL_DMA_IRQHandler+0x25c>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2201      	movs	r2, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2210      	movs	r2, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d03c      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2210      	movs	r2, #16
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e01f      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	e016      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0208 	bic.w	r2, r2, #8
 800342a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	2220      	movs	r2, #32
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 808e 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8086 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2220      	movs	r2, #32
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b05      	cmp	r3, #5
 8003474:	d136      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x1da>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	223f      	movs	r2, #63	; 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d07d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
        }
        return;
 80034e2:	e078      	b.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	2b00      	cmp	r3, #0
 8003506:	d030      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e02b      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d027      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e022      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
 8003524:	20000188 	.word	0x20000188
 8003528:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d032      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2205      	movs	r2, #5
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d307      	bcc.n	80035b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f2      	bne.n	8003596 <HAL_DMA_IRQHandler+0x2ca>
 80035b0:	e000      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3b10      	subs	r3, #16
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <DMA_CalcBaseAndBitshift+0x64>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <DMA_CalcBaseAndBitshift+0x68>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d909      	bls.n	8003622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	1d1a      	adds	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	659a      	str	r2, [r3, #88]	; 0x58
 8003620:	e007      	b.n	8003632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	aaaaaaab 	.word	0xaaaaaaab
 8003648:	08007e30 	.word	0x08007e30

0800364c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d855      	bhi.n	8003718 <DMA_CheckFifoParam+0xcc>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <DMA_CheckFifoParam+0x28>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003685 	.word	0x08003685
 8003678:	08003697 	.word	0x08003697
 800367c:	08003685 	.word	0x08003685
 8003680:	08003719 	.word	0x08003719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d045      	beq.n	800371c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e042      	b.n	800371c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800369e:	d13f      	bne.n	8003720 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e03c      	b.n	8003720 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	d121      	bne.n	80036f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d836      	bhi.n	8003724 <DMA_CheckFifoParam+0xd8>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x70>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d3 	.word	0x080036d3
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	080036e5 	.word	0x080036e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e02f      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d024      	beq.n	8003728 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e021      	b.n	8003728 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ec:	d11e      	bne.n	800372c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036f2:	e01b      	b.n	800372c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <DMA_CheckFifoParam+0xb4>
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d003      	beq.n	8003706 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036fe:	e018      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e015      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      break;
 8003716:	e00b      	b.n	8003730 <DMA_CheckFifoParam+0xe4>
      break;
 8003718:	bf00      	nop
 800371a:	e00a      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 800371c:	bf00      	nop
 800371e:	e008      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 8003720:	bf00      	nop
 8003722:	e006      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 8003724:	bf00      	nop
 8003726:	e004      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;   
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 8003730:	bf00      	nop
    }
  } 
  
  return status; 
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e16b      	b.n	8003a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 815a 	bne.w	8003a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00b      	beq.n	800379a <HAL_GPIO_Init+0x5a>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800378e:	2b11      	cmp	r3, #17
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b12      	cmp	r3, #18
 8003798:	d130      	bne.n	80037fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0xfc>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d123      	bne.n	8003884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80b4 	beq.w	8003a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_GPIO_Init+0x308>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_GPIO_Init+0x308>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_GPIO_Init+0x308>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <HAL_GPIO_Init+0x30c>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a51      	ldr	r2, [pc, #324]	; (8003a50 <HAL_GPIO_Init+0x310>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <HAL_GPIO_Init+0x226>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a50      	ldr	r2, [pc, #320]	; (8003a54 <HAL_GPIO_Init+0x314>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d025      	beq.n	8003962 <HAL_GPIO_Init+0x222>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4f      	ldr	r2, [pc, #316]	; (8003a58 <HAL_GPIO_Init+0x318>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <HAL_GPIO_Init+0x21e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4e      	ldr	r2, [pc, #312]	; (8003a5c <HAL_GPIO_Init+0x31c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x21a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4d      	ldr	r2, [pc, #308]	; (8003a60 <HAL_GPIO_Init+0x320>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x216>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4c      	ldr	r2, [pc, #304]	; (8003a64 <HAL_GPIO_Init+0x324>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x212>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4b      	ldr	r2, [pc, #300]	; (8003a68 <HAL_GPIO_Init+0x328>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x20e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4a      	ldr	r2, [pc, #296]	; (8003a6c <HAL_GPIO_Init+0x32c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x20a>
 8003946:	2307      	movs	r3, #7
 8003948:	e00e      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394a:	2308      	movs	r3, #8
 800394c:	e00c      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003978:	4934      	ldr	r1, [pc, #208]	; (8003a4c <HAL_GPIO_Init+0x30c>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039aa:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a28:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f ae90 	bls.w	800375c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3724      	adds	r7, #36	; 0x24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40021400 	.word	0x40021400
 8003a68:	40021800 	.word	0x40021800
 8003a6c:	40021c00 	.word	0x40021c00
 8003a70:	40013c00 	.word	0x40013c00

08003a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e001      	b.n	8003a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e25b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d075      	beq.n	8003be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	4ba3      	ldr	r3, [pc, #652]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d00c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b02:	4ba0      	ldr	r3, [pc, #640]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b9d      	ldr	r3, [pc, #628]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	4b99      	ldr	r3, [pc, #612]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d157      	bne.n	8003be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e236      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x74>
 8003b3e:	4b91      	ldr	r3, [pc, #580]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a90      	ldr	r2, [pc, #576]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b70:	4b84      	ldr	r3, [pc, #528]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a83      	ldr	r2, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a80      	ldr	r2, [pc, #512]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7ff f974 	bl	8002e7c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7ff f970 	bl	8002e7c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1fb      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xc0>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7ff f960 	bl	8002e7c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7ff f95c 	bl	8002e7c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1e7      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	4b6c      	ldr	r3, [pc, #432]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xe8>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfa:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d116      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1bb      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b56      	ldr	r3, [pc, #344]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4952      	ldr	r1, [pc, #328]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	e03a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCC_OscConfig+0x2b0>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7ff f915 	bl	8002e7c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c56:	f7ff f911 	bl	8002e7c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e19c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4940      	ldr	r1, [pc, #256]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x2b0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7ff f8f4 	bl	8002e7c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c98:	f7ff f8f0 	bl	8002e7c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e17b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d030      	beq.n	8003d24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <HAL_RCC_OscConfig+0x2b4>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7ff f8d4 	bl	8002e7c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7ff f8d0 	bl	8002e7c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e15b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x200>
 8003cf6:	e015      	b.n	8003d24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x2b4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7ff f8bd 	bl	8002e7c <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d06:	f7ff f8b9 	bl	8002e7c <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e144      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a0 	beq.w	8003e72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d121      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7ff f87f 	bl	8002e7c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e011      	b.n	8003da6 <HAL_RCC_OscConfig+0x2ce>
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	42470000 	.word	0x42470000
 8003d8c:	42470e80 	.word	0x42470e80
 8003d90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7ff f872 	bl	8002e7c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0fd      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x4d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCC_OscConfig+0x32a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x312>
 8003dd0:	4b77      	ldr	r3, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a76      	ldr	r2, [pc, #472]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b74      	ldr	r3, [pc, #464]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x32a>
 8003dea:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a70      	ldr	r2, [pc, #448]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	4b6e      	ldr	r3, [pc, #440]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a6d      	ldr	r2, [pc, #436]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7ff f837 	bl	8002e7c <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7ff f833 	bl	8002e7c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0bc      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCC_OscConfig+0x33a>
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7ff f821 	bl	8002e7c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7ff f81d 	bl	8002e7c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0a6      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ee      	bne.n	8003e3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8092 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d05c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d141      	bne.n	8003f14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fe fff1 	bl	8002e7c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe ffed 	bl	8002e7c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e078      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	019b      	lsls	r3, r3, #6
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	4933      	ldr	r1, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe ffc6 	bl	8002e7c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe ffc2 	bl	8002e7c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
 8003f12:	e045      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe ffaf 	bl	8002e7c <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe ffab 	bl	8002e7c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e036      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x44a>
 8003f40:	e02e      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e029      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470060 	.word	0x42470060

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fe fee8 	bl	8002e7c <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe fee4 	bl	8002e7c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4601      	mov	r1, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	fa21 f303 	lsr.w	r3, r1, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fe48 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	08007e20 	.word	0x08007e20
 800417c:	20000188 	.word	0x20000188
 8004180:	2000018c 	.word	0x2000018c

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	2300      	movs	r3, #0
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4b63      	ldr	r3, [pc, #396]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d007      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x32>
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d008      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x38>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 80b4 	bne.w	8004318 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041b2:	60bb      	str	r3, [r7, #8]
       break;
 80041b4:	e0b3      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b6:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e0b0      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041bc:	4b5a      	ldr	r3, [pc, #360]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c6:	4b58      	ldr	r3, [pc, #352]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04a      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d2:	4b55      	ldr	r3, [pc, #340]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	ea03 0501 	and.w	r5, r3, r1
 80041e8:	ea04 0602 	and.w	r6, r4, r2
 80041ec:	4629      	mov	r1, r5
 80041ee:	4632      	mov	r2, r6
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	f04f 0400 	mov.w	r4, #0
 80041f8:	0154      	lsls	r4, r2, #5
 80041fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041fe:	014b      	lsls	r3, r1, #5
 8004200:	4619      	mov	r1, r3
 8004202:	4622      	mov	r2, r4
 8004204:	1b49      	subs	r1, r1, r5
 8004206:	eb62 0206 	sbc.w	r2, r2, r6
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	f04f 0400 	mov.w	r4, #0
 8004212:	0194      	lsls	r4, r2, #6
 8004214:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004218:	018b      	lsls	r3, r1, #6
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	eb64 0402 	sbc.w	r4, r4, r2
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	00e2      	lsls	r2, r4, #3
 800422a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800422e:	00d9      	lsls	r1, r3, #3
 8004230:	460b      	mov	r3, r1
 8004232:	4614      	mov	r4, r2
 8004234:	195b      	adds	r3, r3, r5
 8004236:	eb44 0406 	adc.w	r4, r4, r6
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	0262      	lsls	r2, r4, #9
 8004244:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004248:	0259      	lsls	r1, r3, #9
 800424a:	460b      	mov	r3, r1
 800424c:	4614      	mov	r4, r2
 800424e:	4618      	mov	r0, r3
 8004250:	4621      	mov	r1, r4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	461a      	mov	r2, r3
 800425a:	4623      	mov	r3, r4
 800425c:	f7fc fca4 	bl	8000ba8 <__aeabi_uldivmod>
 8004260:	4603      	mov	r3, r0
 8004262:	460c      	mov	r4, r1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e049      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004268:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	f04f 0400 	mov.w	r4, #0
 8004272:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	ea03 0501 	and.w	r5, r3, r1
 800427e:	ea04 0602 	and.w	r6, r4, r2
 8004282:	4629      	mov	r1, r5
 8004284:	4632      	mov	r2, r6
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	0154      	lsls	r4, r2, #5
 8004290:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004294:	014b      	lsls	r3, r1, #5
 8004296:	4619      	mov	r1, r3
 8004298:	4622      	mov	r2, r4
 800429a:	1b49      	subs	r1, r1, r5
 800429c:	eb62 0206 	sbc.w	r2, r2, r6
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	0194      	lsls	r4, r2, #6
 80042aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042ae:	018b      	lsls	r3, r1, #6
 80042b0:	1a5b      	subs	r3, r3, r1
 80042b2:	eb64 0402 	sbc.w	r4, r4, r2
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	00e2      	lsls	r2, r4, #3
 80042c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c4:	00d9      	lsls	r1, r3, #3
 80042c6:	460b      	mov	r3, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	195b      	adds	r3, r3, r5
 80042cc:	eb44 0406 	adc.w	r4, r4, r6
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	02a2      	lsls	r2, r4, #10
 80042da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042de:	0299      	lsls	r1, r3, #10
 80042e0:	460b      	mov	r3, r1
 80042e2:	4614      	mov	r4, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	4621      	mov	r1, r4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	461a      	mov	r2, r3
 80042f0:	4623      	mov	r3, r4
 80042f2:	f7fc fc59 	bl	8000ba8 <__aeabi_uldivmod>
 80042f6:	4603      	mov	r3, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	60bb      	str	r3, [r7, #8]
      break;
 8004316:	e002      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800431a:	60bb      	str	r3, [r7, #8]
      break;
 800431c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431e:	68bb      	ldr	r3, [r7, #8]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e056      	b.n	80043f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fe fb3d 	bl	80029e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	ea42 0103 	orr.w	r1, r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	f003 0104 	and.w	r1, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_SPI_Transmit_IT+0x20>
 8004418:	2302      	movs	r3, #2
 800441a:	e067      	b.n	80044ec <HAL_SPI_Transmit_IT+0xf0>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit_IT+0x34>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004434:	e055      	b.n	80044e2 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004446:	e04c      	b.n	80044e2 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2203      	movs	r2, #3
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_SPI_Transmit_IT+0xfc>)
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
 800448e:	e002      	b.n	8004496 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <HAL_SPI_Transmit_IT+0x100>)
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449e:	d107      	bne.n	80044b0 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80044be:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d008      	beq.n	80044e0 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e000      	b.n	80044e2 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80044e0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	08004797 	.word	0x08004797
 80044fc:	08004751 	.word	0x08004751

08004500 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10f      	bne.n	8004544 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
    return;
 8004542:	e0d8      	b.n	80046f6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_SPI_IRQHandler+0x66>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	09db      	lsrs	r3, r3, #7
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
    return;
 8004564:	e0c7      	b.n	80046f6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_SPI_IRQHandler+0x8c>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80b5 	beq.w	80046f6 <HAL_SPI_IRQHandler+0x1f6>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80ae 	beq.w	80046f6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d023      	beq.n	80045ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d011      	beq.n	80045d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	e00b      	b.n	80045ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]
        return;
 80045ec:	e083      	b.n	80046f6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0208 	orr.w	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d050      	beq.n	80046f4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004660:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_SPI_IRQHandler+0x17e>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d034      	beq.n	80046e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0203 	bic.w	r2, r2, #3
 800468c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d011      	beq.n	80046ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_SPI_IRQHandler+0x1fc>)
 800469c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fdf0 	bl	8003288 <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_SPI_IRQHandler+0x1fc>)
 80046c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fdda 	bl	8003288 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80046e6:	e003      	b.n	80046f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f813 	bl	8004714 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046ee:	e000      	b.n	80046f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80046f0:	bf00      	nop
    return;
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
  }
}
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	08004729 	.word	0x08004729

08004700 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff ffe6 	bl	8004714 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8d3 	bl	8004934 <SPI_CloseTx_ISR>
  }
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8b1 	bl	8004934 <SPI_CloseTx_ISR>
  }
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ea:	e04c      	b.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d048      	beq.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047f4:	f7fe fb42 	bl	8002e7c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d902      	bls.n	800480a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d13d      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004818:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d111      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	d004      	beq.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d107      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d10f      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e00f      	b.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1a3      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <SPI_EndRxTxTransaction+0x7c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <SPI_EndRxTxTransaction+0x80>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	0d5b      	lsrs	r3, r3, #21
 80048c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048da:	d112      	bne.n	8004902 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff ff77 	bl	80047da <SPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e00f      	b.n	8004922 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3b01      	subs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d0f2      	beq.n	8004902 <SPI_EndRxTxTransaction+0x52>
 800491c:	e000      	b.n	8004920 <SPI_EndRxTxTransaction+0x70>
        break;
 800491e:	bf00      	nop
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000188 	.word	0x20000188
 8004930:	165e9f81 	.word	0x165e9f81

08004934 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <SPI_CloseTx_ISR+0xbc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <SPI_CloseTx_ISR+0xc0>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	2264      	movs	r2, #100	; 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004950:	f7fe fa94 	bl	8002e7c <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004968:	e009      	b.n	800497e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3b01      	subs	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0eb      	beq.n	8004956 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800498c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	2164      	movs	r1, #100	; 0x64
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff8c 	bl	80048b0 <SPI_EndRxTxTransaction>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fe9b 	bl	8004714 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80049de:	e002      	b.n	80049e6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fe8d 	bl	8004700 <HAL_SPI_TxCpltCallback>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000188 	.word	0x20000188
 80049f4:	057619f1 	.word	0x057619f1

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e01d      	b.n	8004a46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe f880 	bl	8002b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fbd2 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <HAL_TIM_Base_Stop_IT+0x48>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_Base_Stop_IT+0x48>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e01d      	b.n	8004b3a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f815 	bl	8004b42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 fb58 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fe22 	bl	80057b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <HAL_TIM_PWM_Start+0x74>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_PWM_Start+0x2c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <HAL_TIM_PWM_Start+0x78>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x30>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_TIM_PWM_Start+0x32>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fde4 	bl	80057b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <HAL_TIM_PWM_Stop+0xa8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIM_PWM_Stop+0x2c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <HAL_TIM_PWM_Stop+0xac>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_PWM_Stop+0x30>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_TIM_PWM_Stop+0x32>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a1a      	ldr	r2, [r3, #32]
 8004c10:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <HAL_TIM_PWM_Stop+0x66>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	f240 4344 	movw	r3, #1092	; 0x444
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_PWM_Stop+0x66>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1a      	ldr	r2, [r3, #32]
 8004c40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_TIM_PWM_Stop+0x96>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	f240 4344 	movw	r3, #1092	; 0x444
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_PWM_Stop+0x96>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40010400 	.word	0x40010400

08004c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0202 	mvn.w	r2, #2
 8004cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa6b 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa5d 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa6e 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0204 	mvn.w	r2, #4
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa41 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa33 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa44 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0208 	mvn.w	r2, #8
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa17 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa09 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa1a 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d122      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f9ed 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9df 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f9f0 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10e      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0201 	mvn.w	r2, #1
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fd fb28 	bl	8002458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d10e      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fd6c 	bl	800590c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9b5 	bl	80051ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0220 	mvn.w	r2, #32
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd36 	bl	80058f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0b4      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	f200 809f 	bhi.w	8005004 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	08005005 	.word	0x08005005
 8004ed4:	08005005 	.word	0x08005005
 8004ed8:	08005005 	.word	0x08005005
 8004edc:	08004f41 	.word	0x08004f41
 8004ee0:	08005005 	.word	0x08005005
 8004ee4:	08005005 	.word	0x08005005
 8004ee8:	08005005 	.word	0x08005005
 8004eec:	08004f83 	.word	0x08004f83
 8004ef0:	08005005 	.word	0x08005005
 8004ef4:	08005005 	.word	0x08005005
 8004ef8:	08005005 	.word	0x08005005
 8004efc:	08004fc3 	.word	0x08004fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa0a 	bl	8005320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	619a      	str	r2, [r3, #24]
      break;
 8004f3e:	e062      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fa5a 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]
      break;
 8004f80:	e041      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 faaf 	bl	80054ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0208 	orr.w	r2, r2, #8
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0204 	bic.w	r2, r2, #4
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
      break;
 8004fc0:	e021      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fb03 	bl	80055d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	61da      	str	r2, [r3, #28]
      break;
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005004:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIM_ConfigClockSource+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e0a6      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x166>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800505e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d067      	beq.n	8005140 <HAL_TIM_ConfigClockSource+0x120>
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d80b      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x6c>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d073      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x140>
 8005078:	2b10      	cmp	r3, #16
 800507a:	d802      	bhi.n	8005082 <HAL_TIM_ConfigClockSource+0x62>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d06f      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005080:	e078      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005082:	2b20      	cmp	r3, #32
 8005084:	d06c      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x140>
 8005086:	2b30      	cmp	r3, #48	; 0x30
 8005088:	d06a      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800508a:	e073      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800508c:	2b70      	cmp	r3, #112	; 0x70
 800508e:	d00d      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0x8c>
 8005090:	2b70      	cmp	r3, #112	; 0x70
 8005092:	d804      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x7e>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d033      	beq.n	8005100 <HAL_TIM_ConfigClockSource+0xe0>
 8005098:	2b60      	cmp	r3, #96	; 0x60
 800509a:	d041      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800509c:	e06a      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d066      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x152>
 80050a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a8:	d017      	beq.n	80050da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050aa:	e063      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6899      	ldr	r1, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f000 fb5a 	bl	8005774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
      break;
 80050d8:	e04c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6899      	ldr	r1, [r3, #8]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f000 fb43 	bl	8005774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fc:	609a      	str	r2, [r3, #8]
      break;
 80050fe:	e039      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6859      	ldr	r1, [r3, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	461a      	mov	r2, r3
 800510e:	f000 fab7 	bl	8005680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2150      	movs	r1, #80	; 0x50
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb10 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 800511e:	e029      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	461a      	mov	r2, r3
 800512e:	f000 fad6 	bl	80056de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2160      	movs	r1, #96	; 0x60
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fb00 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 800513e:	e019      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	461a      	mov	r2, r3
 800514e:	f000 fa97 	bl	8005680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2140      	movs	r1, #64	; 0x40
 8005158:	4618      	mov	r0, r3
 800515a:	f000 faf0 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 800515e:	e009      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 fae7 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a40      	ldr	r2, [pc, #256]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3d      	ldr	r2, [pc, #244]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3c      	ldr	r2, [pc, #240]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d027      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d023      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d017      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	; (8005308 <TIM_Base_SetConfig+0x128>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <TIM_Base_SetConfig+0x12c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <TIM_Base_SetConfig+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <TIM_Base_SetConfig+0x134>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a24      	ldr	r2, [pc, #144]	; (8005318 <TIM_Base_SetConfig+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a23      	ldr	r2, [pc, #140]	; (800531c <TIM_Base_SetConfig+0x13c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <TIM_Base_SetConfig+0x124>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800
 8005314:	40001800 	.word	0x40001800
 8005318:	40001c00 	.word	0x40001c00
 800531c:	40002000 	.word	0x40002000

08005320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0302 	bic.w	r3, r3, #2
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a20      	ldr	r2, [pc, #128]	; (80053f8 <TIM_OC1_SetConfig+0xd8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC1_SetConfig+0x64>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <TIM_OC1_SetConfig+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10c      	bne.n	800539e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0308 	bic.w	r3, r3, #8
 800538a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0304 	bic.w	r3, r3, #4
 800539c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC1_SetConfig+0xd8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_OC1_SetConfig+0x8e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC1_SetConfig+0xdc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d111      	bne.n	80053d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_OC2_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC2_SetConfig+0x68>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_OC2_SetConfig+0xe8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10d      	bne.n	8005484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <TIM_OC2_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x94>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d113      	bne.n	80054bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400

080054ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_OC3_SetConfig+0xe0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC3_SetConfig+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <TIM_OC3_SetConfig+0xe4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10d      	bne.n	800556e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC3_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x92>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <TIM_OC3_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d113      	bne.n	80055a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400

080055d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	; (8005678 <TIM_OC4_SetConfig+0xa4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC4_SetConfig+0x68>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a11      	ldr	r2, [pc, #68]	; (800567c <TIM_OC4_SetConfig+0xa8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d109      	bne.n	8005650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40010400 	.word	0x40010400

08005680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 030a 	bic.w	r3, r3, #10
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0210 	bic.w	r2, r3, #16
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	f043 0307 	orr.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	431a      	orrs	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e05a      	b.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a21      	ldr	r2, [pc, #132]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d022      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d01d      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10c      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40001800 	.word	0x40001800

080058f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	; (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000194 	.word	0x20000194

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4e0d      	ldr	r6, [pc, #52]	; (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	; (8005968 <__libc_init_array+0x3c>)
 8005932:	1ba4      	subs	r4, r4, r6
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2500      	movs	r5, #0
 8005938:	42a5      	cmp	r5, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4e0b      	ldr	r6, [pc, #44]	; (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	; (8005970 <__libc_init_array+0x44>)
 8005940:	f002 f85e 	bl	8007a00 <_init>
 8005944:	1ba4      	subs	r4, r4, r6
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2500      	movs	r5, #0
 800594a:	42a5      	cmp	r5, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005954:	4798      	blx	r3
 8005956:	3501      	adds	r5, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800595e:	4798      	blx	r3
 8005960:	3501      	adds	r5, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	080080a0 	.word	0x080080a0
 8005968:	080080a0 	.word	0x080080a0
 800596c:	080080a0 	.word	0x080080a0
 8005970:	080080a4 	.word	0x080080a4

08005974 <memset>:
 8005974:	4402      	add	r2, r0
 8005976:	4603      	mov	r3, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <__cvt>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	ec55 4b10 	vmov	r4, r5, d0
 800598c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800598e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005992:	2d00      	cmp	r5, #0
 8005994:	460e      	mov	r6, r1
 8005996:	4691      	mov	r9, r2
 8005998:	4619      	mov	r1, r3
 800599a:	bfb8      	it	lt
 800599c:	4622      	movlt	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	f027 0720 	bic.w	r7, r7, #32
 80059a4:	bfbb      	ittet	lt
 80059a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059aa:	461d      	movlt	r5, r3
 80059ac:	2300      	movge	r3, #0
 80059ae:	232d      	movlt	r3, #45	; 0x2d
 80059b0:	bfb8      	it	lt
 80059b2:	4614      	movlt	r4, r2
 80059b4:	2f46      	cmp	r7, #70	; 0x46
 80059b6:	700b      	strb	r3, [r1, #0]
 80059b8:	d004      	beq.n	80059c4 <__cvt+0x40>
 80059ba:	2f45      	cmp	r7, #69	; 0x45
 80059bc:	d100      	bne.n	80059c0 <__cvt+0x3c>
 80059be:	3601      	adds	r6, #1
 80059c0:	2102      	movs	r1, #2
 80059c2:	e000      	b.n	80059c6 <__cvt+0x42>
 80059c4:	2103      	movs	r1, #3
 80059c6:	ab03      	add	r3, sp, #12
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	ab02      	add	r3, sp, #8
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4632      	mov	r2, r6
 80059d0:	4653      	mov	r3, sl
 80059d2:	ec45 4b10 	vmov	d0, r4, r5
 80059d6:	f000 fcdf 	bl	8006398 <_dtoa_r>
 80059da:	2f47      	cmp	r7, #71	; 0x47
 80059dc:	4680      	mov	r8, r0
 80059de:	d102      	bne.n	80059e6 <__cvt+0x62>
 80059e0:	f019 0f01 	tst.w	r9, #1
 80059e4:	d026      	beq.n	8005a34 <__cvt+0xb0>
 80059e6:	2f46      	cmp	r7, #70	; 0x46
 80059e8:	eb08 0906 	add.w	r9, r8, r6
 80059ec:	d111      	bne.n	8005a12 <__cvt+0x8e>
 80059ee:	f898 3000 	ldrb.w	r3, [r8]
 80059f2:	2b30      	cmp	r3, #48	; 0x30
 80059f4:	d10a      	bne.n	8005a0c <__cvt+0x88>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fb f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a02:	b918      	cbnz	r0, 8005a0c <__cvt+0x88>
 8005a04:	f1c6 0601 	rsb	r6, r6, #1
 8005a08:	f8ca 6000 	str.w	r6, [sl]
 8005a0c:	f8da 3000 	ldr.w	r3, [sl]
 8005a10:	4499      	add	r9, r3
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fb f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1e:	b938      	cbnz	r0, 8005a30 <__cvt+0xac>
 8005a20:	2230      	movs	r2, #48	; 0x30
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	454b      	cmp	r3, r9
 8005a26:	d205      	bcs.n	8005a34 <__cvt+0xb0>
 8005a28:	1c59      	adds	r1, r3, #1
 8005a2a:	9103      	str	r1, [sp, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e7f8      	b.n	8005a22 <__cvt+0x9e>
 8005a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a38:	eba3 0308 	sub.w	r3, r3, r8
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	b004      	add	sp, #16
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a46 <__exponent>:
 8005a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	bfba      	itte	lt
 8005a4e:	4249      	neglt	r1, r1
 8005a50:	232d      	movlt	r3, #45	; 0x2d
 8005a52:	232b      	movge	r3, #43	; 0x2b
 8005a54:	2909      	cmp	r1, #9
 8005a56:	f804 2b02 	strb.w	r2, [r4], #2
 8005a5a:	7043      	strb	r3, [r0, #1]
 8005a5c:	dd20      	ble.n	8005aa0 <__exponent+0x5a>
 8005a5e:	f10d 0307 	add.w	r3, sp, #7
 8005a62:	461f      	mov	r7, r3
 8005a64:	260a      	movs	r6, #10
 8005a66:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a6a:	fb06 1115 	mls	r1, r6, r5, r1
 8005a6e:	3130      	adds	r1, #48	; 0x30
 8005a70:	2d09      	cmp	r5, #9
 8005a72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a76:	f103 32ff 	add.w	r2, r3, #4294967295
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	dc09      	bgt.n	8005a92 <__exponent+0x4c>
 8005a7e:	3130      	adds	r1, #48	; 0x30
 8005a80:	3b02      	subs	r3, #2
 8005a82:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a86:	42bb      	cmp	r3, r7
 8005a88:	4622      	mov	r2, r4
 8005a8a:	d304      	bcc.n	8005a96 <__exponent+0x50>
 8005a8c:	1a10      	subs	r0, r2, r0
 8005a8e:	b003      	add	sp, #12
 8005a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a92:	4613      	mov	r3, r2
 8005a94:	e7e7      	b.n	8005a66 <__exponent+0x20>
 8005a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a9a:	f804 2b01 	strb.w	r2, [r4], #1
 8005a9e:	e7f2      	b.n	8005a86 <__exponent+0x40>
 8005aa0:	2330      	movs	r3, #48	; 0x30
 8005aa2:	4419      	add	r1, r3
 8005aa4:	7083      	strb	r3, [r0, #2]
 8005aa6:	1d02      	adds	r2, r0, #4
 8005aa8:	70c1      	strb	r1, [r0, #3]
 8005aaa:	e7ef      	b.n	8005a8c <__exponent+0x46>

08005aac <_printf_float>:
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	b08d      	sub	sp, #52	; 0x34
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005ab8:	4616      	mov	r6, r2
 8005aba:	461f      	mov	r7, r3
 8005abc:	4605      	mov	r5, r0
 8005abe:	f001 fa23 	bl	8006f08 <_localeconv_r>
 8005ac2:	6803      	ldr	r3, [r0, #0]
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fa fb82 	bl	80001d0 <strlen>
 8005acc:	2300      	movs	r3, #0
 8005ace:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad4:	9005      	str	r0, [sp, #20]
 8005ad6:	3307      	adds	r3, #7
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	f103 0208 	add.w	r2, r3, #8
 8005ae0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ae4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ae8:	f8c8 2000 	str.w	r2, [r8]
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005af4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005af8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005afc:	9307      	str	r3, [sp, #28]
 8005afe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	4ba7      	ldr	r3, [pc, #668]	; (8005da4 <_printf_float+0x2f8>)
 8005b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b0c:	f7fb f80e 	bl	8000b2c <__aeabi_dcmpun>
 8005b10:	bb70      	cbnz	r0, 8005b70 <_printf_float+0xc4>
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295
 8005b16:	4ba3      	ldr	r3, [pc, #652]	; (8005da4 <_printf_float+0x2f8>)
 8005b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b1c:	f7fa ffe8 	bl	8000af0 <__aeabi_dcmple>
 8005b20:	bb30      	cbnz	r0, 8005b70 <_printf_float+0xc4>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ffd7 	bl	8000adc <__aeabi_dcmplt>
 8005b2e:	b110      	cbz	r0, 8005b36 <_printf_float+0x8a>
 8005b30:	232d      	movs	r3, #45	; 0x2d
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b36:	4a9c      	ldr	r2, [pc, #624]	; (8005da8 <_printf_float+0x2fc>)
 8005b38:	4b9c      	ldr	r3, [pc, #624]	; (8005dac <_printf_float+0x300>)
 8005b3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b3e:	bf8c      	ite	hi
 8005b40:	4690      	movhi	r8, r2
 8005b42:	4698      	movls	r8, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	f02b 0204 	bic.w	r2, fp, #4
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	9700      	str	r7, [sp, #0]
 8005b54:	4633      	mov	r3, r6
 8005b56:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f9e6 	bl	8005f2c <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f040 808d 	bne.w	8005c80 <_printf_float+0x1d4>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	b00d      	add	sp, #52	; 0x34
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8005b7c:	b110      	cbz	r0, 8005b84 <_printf_float+0xd8>
 8005b7e:	4a8c      	ldr	r2, [pc, #560]	; (8005db0 <_printf_float+0x304>)
 8005b80:	4b8c      	ldr	r3, [pc, #560]	; (8005db4 <_printf_float+0x308>)
 8005b82:	e7da      	b.n	8005b3a <_printf_float+0x8e>
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	1c4b      	adds	r3, r1, #1
 8005b88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005b8c:	a80a      	add	r0, sp, #40	; 0x28
 8005b8e:	d13e      	bne.n	8005c0e <_printf_float+0x162>
 8005b90:	2306      	movs	r3, #6
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	2300      	movs	r3, #0
 8005b96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b9a:	ab09      	add	r3, sp, #36	; 0x24
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	ec49 8b10 	vmov	d0, r8, r9
 8005ba2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	f8cd a004 	str.w	sl, [sp, #4]
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7ff fee8 	bl	8005984 <__cvt>
 8005bb4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005bb8:	2b47      	cmp	r3, #71	; 0x47
 8005bba:	4680      	mov	r8, r0
 8005bbc:	d109      	bne.n	8005bd2 <_printf_float+0x126>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	1cd8      	adds	r0, r3, #3
 8005bc2:	db02      	blt.n	8005bca <_printf_float+0x11e>
 8005bc4:	6862      	ldr	r2, [r4, #4]
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	dd47      	ble.n	8005c5a <_printf_float+0x1ae>
 8005bca:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bce:	fa5f fa8a 	uxtb.w	sl, sl
 8005bd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd8:	d824      	bhi.n	8005c24 <_printf_float+0x178>
 8005bda:	3901      	subs	r1, #1
 8005bdc:	4652      	mov	r2, sl
 8005bde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005be2:	9109      	str	r1, [sp, #36]	; 0x24
 8005be4:	f7ff ff2f 	bl	8005a46 <__exponent>
 8005be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bea:	1813      	adds	r3, r2, r0
 8005bec:	2a01      	cmp	r2, #1
 8005bee:	4681      	mov	r9, r0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	dc02      	bgt.n	8005bfa <_printf_float+0x14e>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	07d1      	lsls	r1, r2, #31
 8005bf8:	d501      	bpl.n	8005bfe <_printf_float+0x152>
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0a5      	beq.n	8005b52 <_printf_float+0xa6>
 8005c06:	232d      	movs	r3, #45	; 0x2d
 8005c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0c:	e7a1      	b.n	8005b52 <_printf_float+0xa6>
 8005c0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005c12:	f000 8177 	beq.w	8005f04 <_printf_float+0x458>
 8005c16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c1a:	d1bb      	bne.n	8005b94 <_printf_float+0xe8>
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d1b9      	bne.n	8005b94 <_printf_float+0xe8>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e7b6      	b.n	8005b92 <_printf_float+0xe6>
 8005c24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005c28:	d119      	bne.n	8005c5e <_printf_float+0x1b2>
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	dd0c      	ble.n	8005c4a <_printf_float+0x19e>
 8005c30:	6121      	str	r1, [r4, #16]
 8005c32:	b913      	cbnz	r3, 8005c3a <_printf_float+0x18e>
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	07d2      	lsls	r2, r2, #31
 8005c38:	d502      	bpl.n	8005c40 <_printf_float+0x194>
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	440b      	add	r3, r1
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c44:	f04f 0900 	mov.w	r9, #0
 8005c48:	e7d9      	b.n	8005bfe <_printf_float+0x152>
 8005c4a:	b913      	cbnz	r3, 8005c52 <_printf_float+0x1a6>
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	07d0      	lsls	r0, r2, #31
 8005c50:	d501      	bpl.n	8005c56 <_printf_float+0x1aa>
 8005c52:	3302      	adds	r3, #2
 8005c54:	e7f3      	b.n	8005c3e <_printf_float+0x192>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7f1      	b.n	8005c3e <_printf_float+0x192>
 8005c5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005c5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c62:	4293      	cmp	r3, r2
 8005c64:	db05      	blt.n	8005c72 <_printf_float+0x1c6>
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	07d1      	lsls	r1, r2, #31
 8005c6c:	d5e8      	bpl.n	8005c40 <_printf_float+0x194>
 8005c6e:	3301      	adds	r3, #1
 8005c70:	e7e5      	b.n	8005c3e <_printf_float+0x192>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfd4      	ite	le
 8005c76:	f1c3 0302 	rsble	r3, r3, #2
 8005c7a:	2301      	movgt	r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	e7de      	b.n	8005c3e <_printf_float+0x192>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	055a      	lsls	r2, r3, #21
 8005c84:	d407      	bmi.n	8005c96 <_printf_float+0x1ea>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	4642      	mov	r2, r8
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	d12b      	bne.n	8005cec <_printf_float+0x240>
 8005c94:	e767      	b.n	8005b66 <_printf_float+0xba>
 8005c96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005c9a:	f240 80dc 	bls.w	8005e56 <_printf_float+0x3aa>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca6:	f7fa ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d033      	beq.n	8005d16 <_printf_float+0x26a>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4a41      	ldr	r2, [pc, #260]	; (8005db8 <_printf_float+0x30c>)
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f af54 	beq.w	8005b66 <_printf_float+0xba>
 8005cbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	db02      	blt.n	8005ccc <_printf_float+0x220>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	07d8      	lsls	r0, r3, #31
 8005cca:	d50f      	bpl.n	8005cec <_printf_float+0x240>
 8005ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f af45 	beq.w	8005b66 <_printf_float+0xba>
 8005cdc:	f04f 0800 	mov.w	r8, #0
 8005ce0:	f104 091a 	add.w	r9, r4, #26
 8005ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4543      	cmp	r3, r8
 8005cea:	dc09      	bgt.n	8005d00 <_printf_float+0x254>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	079b      	lsls	r3, r3, #30
 8005cf0:	f100 8103 	bmi.w	8005efa <_printf_float+0x44e>
 8005cf4:	68e0      	ldr	r0, [r4, #12]
 8005cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf8:	4298      	cmp	r0, r3
 8005cfa:	bfb8      	it	lt
 8005cfc:	4618      	movlt	r0, r3
 8005cfe:	e734      	b.n	8005b6a <_printf_float+0xbe>
 8005d00:	2301      	movs	r3, #1
 8005d02:	464a      	mov	r2, r9
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af2b 	beq.w	8005b66 <_printf_float+0xba>
 8005d10:	f108 0801 	add.w	r8, r8, #1
 8005d14:	e7e6      	b.n	8005ce4 <_printf_float+0x238>
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc2b      	bgt.n	8005d74 <_printf_float+0x2c8>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <_printf_float+0x30c>)
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f af1d 	beq.w	8005b66 <_printf_float+0xba>
 8005d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2e:	b923      	cbnz	r3, 8005d3a <_printf_float+0x28e>
 8005d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d32:	b913      	cbnz	r3, 8005d3a <_printf_float+0x28e>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	07d9      	lsls	r1, r3, #31
 8005d38:	d5d8      	bpl.n	8005cec <_printf_float+0x240>
 8005d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f af0e 	beq.w	8005b66 <_printf_float+0xba>
 8005d4a:	f04f 0900 	mov.w	r9, #0
 8005d4e:	f104 0a1a 	add.w	sl, r4, #26
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	425b      	negs	r3, r3
 8005d56:	454b      	cmp	r3, r9
 8005d58:	dc01      	bgt.n	8005d5e <_printf_float+0x2b2>
 8005d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5c:	e794      	b.n	8005c88 <_printf_float+0x1dc>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f43f aefc 	beq.w	8005b66 <_printf_float+0xba>
 8005d6e:	f109 0901 	add.w	r9, r9, #1
 8005d72:	e7ee      	b.n	8005d52 <_printf_float+0x2a6>
 8005d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfa8      	it	ge
 8005d7c:	461a      	movge	r2, r3
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	4691      	mov	r9, r2
 8005d82:	dd07      	ble.n	8005d94 <_printf_float+0x2e8>
 8005d84:	4613      	mov	r3, r2
 8005d86:	4631      	mov	r1, r6
 8005d88:	4642      	mov	r2, r8
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f aee9 	beq.w	8005b66 <_printf_float+0xba>
 8005d94:	f104 031a 	add.w	r3, r4, #26
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005da0:	9306      	str	r3, [sp, #24]
 8005da2:	e015      	b.n	8005dd0 <_printf_float+0x324>
 8005da4:	7fefffff 	.word	0x7fefffff
 8005da8:	08007e3c 	.word	0x08007e3c
 8005dac:	08007e38 	.word	0x08007e38
 8005db0:	08007e44 	.word	0x08007e44
 8005db4:	08007e40 	.word	0x08007e40
 8005db8:	08007e48 	.word	0x08007e48
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	9a06      	ldr	r2, [sp, #24]
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f43f aecd 	beq.w	8005b66 <_printf_float+0xba>
 8005dcc:	f10b 0b01 	add.w	fp, fp, #1
 8005dd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005dd4:	ebaa 0309 	sub.w	r3, sl, r9
 8005dd8:	455b      	cmp	r3, fp
 8005dda:	dcef      	bgt.n	8005dbc <_printf_float+0x310>
 8005ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de0:	429a      	cmp	r2, r3
 8005de2:	44d0      	add	r8, sl
 8005de4:	db15      	blt.n	8005e12 <_printf_float+0x366>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	07da      	lsls	r2, r3, #31
 8005dea:	d412      	bmi.n	8005e12 <_printf_float+0x366>
 8005dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005df0:	eba3 020a 	sub.w	r2, r3, sl
 8005df4:	eba3 0a01 	sub.w	sl, r3, r1
 8005df8:	4592      	cmp	sl, r2
 8005dfa:	bfa8      	it	ge
 8005dfc:	4692      	movge	sl, r2
 8005dfe:	f1ba 0f00 	cmp.w	sl, #0
 8005e02:	dc0e      	bgt.n	8005e22 <_printf_float+0x376>
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e0c:	f104 091a 	add.w	r9, r4, #26
 8005e10:	e019      	b.n	8005e46 <_printf_float+0x39a>
 8005e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d1e5      	bne.n	8005dec <_printf_float+0x340>
 8005e20:	e6a1      	b.n	8005b66 <_printf_float+0xba>
 8005e22:	4653      	mov	r3, sl
 8005e24:	4642      	mov	r2, r8
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1e9      	bne.n	8005e04 <_printf_float+0x358>
 8005e30:	e699      	b.n	8005b66 <_printf_float+0xba>
 8005e32:	2301      	movs	r3, #1
 8005e34:	464a      	mov	r2, r9
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f ae92 	beq.w	8005b66 <_printf_float+0xba>
 8005e42:	f108 0801 	add.w	r8, r8, #1
 8005e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	eba3 030a 	sub.w	r3, r3, sl
 8005e50:	4543      	cmp	r3, r8
 8005e52:	dcee      	bgt.n	8005e32 <_printf_float+0x386>
 8005e54:	e74a      	b.n	8005cec <_printf_float+0x240>
 8005e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e58:	2a01      	cmp	r2, #1
 8005e5a:	dc01      	bgt.n	8005e60 <_printf_float+0x3b4>
 8005e5c:	07db      	lsls	r3, r3, #31
 8005e5e:	d53a      	bpl.n	8005ed6 <_printf_float+0x42a>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4642      	mov	r2, r8
 8005e64:	4631      	mov	r1, r6
 8005e66:	4628      	mov	r0, r5
 8005e68:	47b8      	blx	r7
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f ae7b 	beq.w	8005b66 <_printf_float+0xba>
 8005e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f108 0801 	add.w	r8, r8, #1
 8005e80:	f43f ae71 	beq.w	8005b66 <_printf_float+0xba>
 8005e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e86:	2200      	movs	r2, #0
 8005e88:	f103 3aff 	add.w	sl, r3, #4294967295
 8005e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e90:	2300      	movs	r3, #0
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	b9c8      	cbnz	r0, 8005ecc <_printf_float+0x420>
 8005e98:	4653      	mov	r3, sl
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d10e      	bne.n	8005ec4 <_printf_float+0x418>
 8005ea6:	e65e      	b.n	8005b66 <_printf_float+0xba>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4652      	mov	r2, sl
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f43f ae57 	beq.w	8005b66 <_printf_float+0xba>
 8005eb8:	f108 0801 	add.w	r8, r8, #1
 8005ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	4543      	cmp	r3, r8
 8005ec2:	dcf1      	bgt.n	8005ea8 <_printf_float+0x3fc>
 8005ec4:	464b      	mov	r3, r9
 8005ec6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005eca:	e6de      	b.n	8005c8a <_printf_float+0x1de>
 8005ecc:	f04f 0800 	mov.w	r8, #0
 8005ed0:	f104 0a1a 	add.w	sl, r4, #26
 8005ed4:	e7f2      	b.n	8005ebc <_printf_float+0x410>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e7df      	b.n	8005e9a <_printf_float+0x3ee>
 8005eda:	2301      	movs	r3, #1
 8005edc:	464a      	mov	r2, r9
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae3e 	beq.w	8005b66 <_printf_float+0xba>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dcf0      	bgt.n	8005eda <_printf_float+0x42e>
 8005ef8:	e6fc      	b.n	8005cf4 <_printf_float+0x248>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0919 	add.w	r9, r4, #25
 8005f02:	e7f4      	b.n	8005eee <_printf_float+0x442>
 8005f04:	2900      	cmp	r1, #0
 8005f06:	f43f ae8b 	beq.w	8005c20 <_printf_float+0x174>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005f10:	ab09      	add	r3, sp, #36	; 0x24
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	ec49 8b10 	vmov	d0, r8, r9
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	f8cd a004 	str.w	sl, [sp, #4]
 8005f1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7ff fd2e 	bl	8005984 <__cvt>
 8005f28:	4680      	mov	r8, r0
 8005f2a:	e648      	b.n	8005bbe <_printf_float+0x112>

08005f2c <_printf_common>:
 8005f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	4691      	mov	r9, r2
 8005f32:	461f      	mov	r7, r3
 8005f34:	688a      	ldr	r2, [r1, #8]
 8005f36:	690b      	ldr	r3, [r1, #16]
 8005f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	bfb8      	it	lt
 8005f40:	4613      	movlt	r3, r2
 8005f42:	f8c9 3000 	str.w	r3, [r9]
 8005f46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b112      	cbz	r2, 8005f56 <_printf_common+0x2a>
 8005f50:	3301      	adds	r3, #1
 8005f52:	f8c9 3000 	str.w	r3, [r9]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	0699      	lsls	r1, r3, #26
 8005f5a:	bf42      	ittt	mi
 8005f5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f60:	3302      	addmi	r3, #2
 8005f62:	f8c9 3000 	strmi.w	r3, [r9]
 8005f66:	6825      	ldr	r5, [r4, #0]
 8005f68:	f015 0506 	ands.w	r5, r5, #6
 8005f6c:	d107      	bne.n	8005f7e <_printf_common+0x52>
 8005f6e:	f104 0a19 	add.w	sl, r4, #25
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	f8d9 2000 	ldr.w	r2, [r9]
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	42ab      	cmp	r3, r5
 8005f7c:	dc28      	bgt.n	8005fd0 <_printf_common+0xa4>
 8005f7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	3300      	adds	r3, #0
 8005f86:	bf18      	it	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	0692      	lsls	r2, r2, #26
 8005f8c:	d42d      	bmi.n	8005fea <_printf_common+0xbe>
 8005f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f92:	4639      	mov	r1, r7
 8005f94:	4630      	mov	r0, r6
 8005f96:	47c0      	blx	r8
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d020      	beq.n	8005fde <_printf_common+0xb2>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	68e5      	ldr	r5, [r4, #12]
 8005fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8005fa4:	f003 0306 	and.w	r3, r3, #6
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	bf08      	it	eq
 8005fac:	1aad      	subeq	r5, r5, r2
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	6922      	ldr	r2, [r4, #16]
 8005fb2:	bf0c      	ite	eq
 8005fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb8:	2500      	movne	r5, #0
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	bfc4      	itt	gt
 8005fbe:	1a9b      	subgt	r3, r3, r2
 8005fc0:	18ed      	addgt	r5, r5, r3
 8005fc2:	f04f 0900 	mov.w	r9, #0
 8005fc6:	341a      	adds	r4, #26
 8005fc8:	454d      	cmp	r5, r9
 8005fca:	d11a      	bne.n	8006002 <_printf_common+0xd6>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e008      	b.n	8005fe2 <_printf_common+0xb6>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	47c0      	blx	r8
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d103      	bne.n	8005fe6 <_printf_common+0xba>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	e7c3      	b.n	8005f72 <_printf_common+0x46>
 8005fea:	18e1      	adds	r1, r4, r3
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	2030      	movs	r0, #48	; 0x30
 8005ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff4:	4422      	add	r2, r4
 8005ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ffa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ffe:	3302      	adds	r3, #2
 8006000:	e7c5      	b.n	8005f8e <_printf_common+0x62>
 8006002:	2301      	movs	r3, #1
 8006004:	4622      	mov	r2, r4
 8006006:	4639      	mov	r1, r7
 8006008:	4630      	mov	r0, r6
 800600a:	47c0      	blx	r8
 800600c:	3001      	adds	r0, #1
 800600e:	d0e6      	beq.n	8005fde <_printf_common+0xb2>
 8006010:	f109 0901 	add.w	r9, r9, #1
 8006014:	e7d8      	b.n	8005fc8 <_printf_common+0x9c>
	...

08006018 <_printf_i>:
 8006018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800601c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006020:	460c      	mov	r4, r1
 8006022:	7e09      	ldrb	r1, [r1, #24]
 8006024:	b085      	sub	sp, #20
 8006026:	296e      	cmp	r1, #110	; 0x6e
 8006028:	4617      	mov	r7, r2
 800602a:	4606      	mov	r6, r0
 800602c:	4698      	mov	r8, r3
 800602e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006030:	f000 80b3 	beq.w	800619a <_printf_i+0x182>
 8006034:	d822      	bhi.n	800607c <_printf_i+0x64>
 8006036:	2963      	cmp	r1, #99	; 0x63
 8006038:	d036      	beq.n	80060a8 <_printf_i+0x90>
 800603a:	d80a      	bhi.n	8006052 <_printf_i+0x3a>
 800603c:	2900      	cmp	r1, #0
 800603e:	f000 80b9 	beq.w	80061b4 <_printf_i+0x19c>
 8006042:	2958      	cmp	r1, #88	; 0x58
 8006044:	f000 8083 	beq.w	800614e <_printf_i+0x136>
 8006048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800604c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006050:	e032      	b.n	80060b8 <_printf_i+0xa0>
 8006052:	2964      	cmp	r1, #100	; 0x64
 8006054:	d001      	beq.n	800605a <_printf_i+0x42>
 8006056:	2969      	cmp	r1, #105	; 0x69
 8006058:	d1f6      	bne.n	8006048 <_printf_i+0x30>
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	0605      	lsls	r5, r0, #24
 8006060:	f103 0104 	add.w	r1, r3, #4
 8006064:	d52a      	bpl.n	80060bc <_printf_i+0xa4>
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	da03      	bge.n	8006076 <_printf_i+0x5e>
 800606e:	222d      	movs	r2, #45	; 0x2d
 8006070:	425b      	negs	r3, r3
 8006072:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006076:	486f      	ldr	r0, [pc, #444]	; (8006234 <_printf_i+0x21c>)
 8006078:	220a      	movs	r2, #10
 800607a:	e039      	b.n	80060f0 <_printf_i+0xd8>
 800607c:	2973      	cmp	r1, #115	; 0x73
 800607e:	f000 809d 	beq.w	80061bc <_printf_i+0x1a4>
 8006082:	d808      	bhi.n	8006096 <_printf_i+0x7e>
 8006084:	296f      	cmp	r1, #111	; 0x6f
 8006086:	d020      	beq.n	80060ca <_printf_i+0xb2>
 8006088:	2970      	cmp	r1, #112	; 0x70
 800608a:	d1dd      	bne.n	8006048 <_printf_i+0x30>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	f043 0320 	orr.w	r3, r3, #32
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	e003      	b.n	800609e <_printf_i+0x86>
 8006096:	2975      	cmp	r1, #117	; 0x75
 8006098:	d017      	beq.n	80060ca <_printf_i+0xb2>
 800609a:	2978      	cmp	r1, #120	; 0x78
 800609c:	d1d4      	bne.n	8006048 <_printf_i+0x30>
 800609e:	2378      	movs	r3, #120	; 0x78
 80060a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a4:	4864      	ldr	r0, [pc, #400]	; (8006238 <_printf_i+0x220>)
 80060a6:	e055      	b.n	8006154 <_printf_i+0x13c>
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	1d19      	adds	r1, r3, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6011      	str	r1, [r2, #0]
 80060b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b8:	2301      	movs	r3, #1
 80060ba:	e08c      	b.n	80061d6 <_printf_i+0x1be>
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6011      	str	r1, [r2, #0]
 80060c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060c4:	bf18      	it	ne
 80060c6:	b21b      	sxthne	r3, r3
 80060c8:	e7cf      	b.n	800606a <_printf_i+0x52>
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	1d18      	adds	r0, r3, #4
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	0628      	lsls	r0, r5, #24
 80060d4:	d501      	bpl.n	80060da <_printf_i+0xc2>
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	e002      	b.n	80060e0 <_printf_i+0xc8>
 80060da:	0668      	lsls	r0, r5, #25
 80060dc:	d5fb      	bpl.n	80060d6 <_printf_i+0xbe>
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	4854      	ldr	r0, [pc, #336]	; (8006234 <_printf_i+0x21c>)
 80060e2:	296f      	cmp	r1, #111	; 0x6f
 80060e4:	bf14      	ite	ne
 80060e6:	220a      	movne	r2, #10
 80060e8:	2208      	moveq	r2, #8
 80060ea:	2100      	movs	r1, #0
 80060ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060f0:	6865      	ldr	r5, [r4, #4]
 80060f2:	60a5      	str	r5, [r4, #8]
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	f2c0 8095 	blt.w	8006224 <_printf_i+0x20c>
 80060fa:	6821      	ldr	r1, [r4, #0]
 80060fc:	f021 0104 	bic.w	r1, r1, #4
 8006100:	6021      	str	r1, [r4, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d13d      	bne.n	8006182 <_printf_i+0x16a>
 8006106:	2d00      	cmp	r5, #0
 8006108:	f040 808e 	bne.w	8006228 <_printf_i+0x210>
 800610c:	4665      	mov	r5, ip
 800610e:	2a08      	cmp	r2, #8
 8006110:	d10b      	bne.n	800612a <_printf_i+0x112>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	07db      	lsls	r3, r3, #31
 8006116:	d508      	bpl.n	800612a <_printf_i+0x112>
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	6862      	ldr	r2, [r4, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	bfde      	ittt	le
 8006120:	2330      	movle	r3, #48	; 0x30
 8006122:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800612a:	ebac 0305 	sub.w	r3, ip, r5
 800612e:	6123      	str	r3, [r4, #16]
 8006130:	f8cd 8000 	str.w	r8, [sp]
 8006134:	463b      	mov	r3, r7
 8006136:	aa03      	add	r2, sp, #12
 8006138:	4621      	mov	r1, r4
 800613a:	4630      	mov	r0, r6
 800613c:	f7ff fef6 	bl	8005f2c <_printf_common>
 8006140:	3001      	adds	r0, #1
 8006142:	d14d      	bne.n	80061e0 <_printf_i+0x1c8>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	b005      	add	sp, #20
 800614a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614e:	4839      	ldr	r0, [pc, #228]	; (8006234 <_printf_i+0x21c>)
 8006150:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	6821      	ldr	r1, [r4, #0]
 8006158:	1d1d      	adds	r5, r3, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6015      	str	r5, [r2, #0]
 800615e:	060a      	lsls	r2, r1, #24
 8006160:	d50b      	bpl.n	800617a <_printf_i+0x162>
 8006162:	07ca      	lsls	r2, r1, #31
 8006164:	bf44      	itt	mi
 8006166:	f041 0120 	orrmi.w	r1, r1, #32
 800616a:	6021      	strmi	r1, [r4, #0]
 800616c:	b91b      	cbnz	r3, 8006176 <_printf_i+0x15e>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	f022 0220 	bic.w	r2, r2, #32
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	2210      	movs	r2, #16
 8006178:	e7b7      	b.n	80060ea <_printf_i+0xd2>
 800617a:	064d      	lsls	r5, r1, #25
 800617c:	bf48      	it	mi
 800617e:	b29b      	uxthmi	r3, r3
 8006180:	e7ef      	b.n	8006162 <_printf_i+0x14a>
 8006182:	4665      	mov	r5, ip
 8006184:	fbb3 f1f2 	udiv	r1, r3, r2
 8006188:	fb02 3311 	mls	r3, r2, r1, r3
 800618c:	5cc3      	ldrb	r3, [r0, r3]
 800618e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006192:	460b      	mov	r3, r1
 8006194:	2900      	cmp	r1, #0
 8006196:	d1f5      	bne.n	8006184 <_printf_i+0x16c>
 8006198:	e7b9      	b.n	800610e <_printf_i+0xf6>
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	6825      	ldr	r5, [r4, #0]
 800619e:	6961      	ldr	r1, [r4, #20]
 80061a0:	1d18      	adds	r0, r3, #4
 80061a2:	6010      	str	r0, [r2, #0]
 80061a4:	0628      	lsls	r0, r5, #24
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	d501      	bpl.n	80061ae <_printf_i+0x196>
 80061aa:	6019      	str	r1, [r3, #0]
 80061ac:	e002      	b.n	80061b4 <_printf_i+0x19c>
 80061ae:	066a      	lsls	r2, r5, #25
 80061b0:	d5fb      	bpl.n	80061aa <_printf_i+0x192>
 80061b2:	8019      	strh	r1, [r3, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	4665      	mov	r5, ip
 80061ba:	e7b9      	b.n	8006130 <_printf_i+0x118>
 80061bc:	6813      	ldr	r3, [r2, #0]
 80061be:	1d19      	adds	r1, r3, #4
 80061c0:	6011      	str	r1, [r2, #0]
 80061c2:	681d      	ldr	r5, [r3, #0]
 80061c4:	6862      	ldr	r2, [r4, #4]
 80061c6:	2100      	movs	r1, #0
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7fa f809 	bl	80001e0 <memchr>
 80061ce:	b108      	cbz	r0, 80061d4 <_printf_i+0x1bc>
 80061d0:	1b40      	subs	r0, r0, r5
 80061d2:	6060      	str	r0, [r4, #4]
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	2300      	movs	r3, #0
 80061da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061de:	e7a7      	b.n	8006130 <_printf_i+0x118>
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4639      	mov	r1, r7
 80061e6:	4630      	mov	r0, r6
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d0aa      	beq.n	8006144 <_printf_i+0x12c>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	079b      	lsls	r3, r3, #30
 80061f2:	d413      	bmi.n	800621c <_printf_i+0x204>
 80061f4:	68e0      	ldr	r0, [r4, #12]
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	4298      	cmp	r0, r3
 80061fa:	bfb8      	it	lt
 80061fc:	4618      	movlt	r0, r3
 80061fe:	e7a3      	b.n	8006148 <_printf_i+0x130>
 8006200:	2301      	movs	r3, #1
 8006202:	464a      	mov	r2, r9
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d09a      	beq.n	8006144 <_printf_i+0x12c>
 800620e:	3501      	adds	r5, #1
 8006210:	68e3      	ldr	r3, [r4, #12]
 8006212:	9a03      	ldr	r2, [sp, #12]
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	42ab      	cmp	r3, r5
 8006218:	dcf2      	bgt.n	8006200 <_printf_i+0x1e8>
 800621a:	e7eb      	b.n	80061f4 <_printf_i+0x1dc>
 800621c:	2500      	movs	r5, #0
 800621e:	f104 0919 	add.w	r9, r4, #25
 8006222:	e7f5      	b.n	8006210 <_printf_i+0x1f8>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ac      	bne.n	8006182 <_printf_i+0x16a>
 8006228:	7803      	ldrb	r3, [r0, #0]
 800622a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006232:	e76c      	b.n	800610e <_printf_i+0xf6>
 8006234:	08007e4a 	.word	0x08007e4a
 8006238:	08007e5b 	.word	0x08007e5b

0800623c <siprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	b500      	push	{lr}
 8006240:	b09c      	sub	sp, #112	; 0x70
 8006242:	ab1d      	add	r3, sp, #116	; 0x74
 8006244:	9002      	str	r0, [sp, #8]
 8006246:	9006      	str	r0, [sp, #24]
 8006248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800624c:	4809      	ldr	r0, [pc, #36]	; (8006274 <siprintf+0x38>)
 800624e:	9107      	str	r1, [sp, #28]
 8006250:	9104      	str	r1, [sp, #16]
 8006252:	4909      	ldr	r1, [pc, #36]	; (8006278 <siprintf+0x3c>)
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
 8006258:	9105      	str	r1, [sp, #20]
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	a902      	add	r1, sp, #8
 8006260:	f001 fa5e 	bl	8007720 <_svfiprintf_r>
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	b01c      	add	sp, #112	; 0x70
 800626c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006270:	b003      	add	sp, #12
 8006272:	4770      	bx	lr
 8006274:	20000194 	.word	0x20000194
 8006278:	ffff0208 	.word	0xffff0208

0800627c <quorem>:
 800627c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	6903      	ldr	r3, [r0, #16]
 8006282:	690c      	ldr	r4, [r1, #16]
 8006284:	42a3      	cmp	r3, r4
 8006286:	4680      	mov	r8, r0
 8006288:	f2c0 8082 	blt.w	8006390 <quorem+0x114>
 800628c:	3c01      	subs	r4, #1
 800628e:	f101 0714 	add.w	r7, r1, #20
 8006292:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006296:	f100 0614 	add.w	r6, r0, #20
 800629a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800629e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80062a2:	eb06 030c 	add.w	r3, r6, ip
 80062a6:	3501      	adds	r5, #1
 80062a8:	eb07 090c 	add.w	r9, r7, ip
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80062b2:	b395      	cbz	r5, 800631a <quorem+0x9e>
 80062b4:	f04f 0a00 	mov.w	sl, #0
 80062b8:	4638      	mov	r0, r7
 80062ba:	46b6      	mov	lr, r6
 80062bc:	46d3      	mov	fp, sl
 80062be:	f850 2b04 	ldr.w	r2, [r0], #4
 80062c2:	b293      	uxth	r3, r2
 80062c4:	fb05 a303 	mla	r3, r5, r3, sl
 80062c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ebab 0303 	sub.w	r3, fp, r3
 80062d2:	0c12      	lsrs	r2, r2, #16
 80062d4:	f8de b000 	ldr.w	fp, [lr]
 80062d8:	fb05 a202 	mla	r2, r5, r2, sl
 80062dc:	fa13 f38b 	uxtah	r3, r3, fp
 80062e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80062e4:	fa1f fb82 	uxth.w	fp, r2
 80062e8:	f8de 2000 	ldr.w	r2, [lr]
 80062ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80062f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062fa:	4581      	cmp	r9, r0
 80062fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006300:	f84e 3b04 	str.w	r3, [lr], #4
 8006304:	d2db      	bcs.n	80062be <quorem+0x42>
 8006306:	f856 300c 	ldr.w	r3, [r6, ip]
 800630a:	b933      	cbnz	r3, 800631a <quorem+0x9e>
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	3b04      	subs	r3, #4
 8006310:	429e      	cmp	r6, r3
 8006312:	461a      	mov	r2, r3
 8006314:	d330      	bcc.n	8006378 <quorem+0xfc>
 8006316:	f8c8 4010 	str.w	r4, [r8, #16]
 800631a:	4640      	mov	r0, r8
 800631c:	f001 f82a 	bl	8007374 <__mcmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	db25      	blt.n	8006370 <quorem+0xf4>
 8006324:	3501      	adds	r5, #1
 8006326:	4630      	mov	r0, r6
 8006328:	f04f 0c00 	mov.w	ip, #0
 800632c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006330:	f8d0 e000 	ldr.w	lr, [r0]
 8006334:	b293      	uxth	r3, r2
 8006336:	ebac 0303 	sub.w	r3, ip, r3
 800633a:	0c12      	lsrs	r2, r2, #16
 800633c:	fa13 f38e 	uxtah	r3, r3, lr
 8006340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634e:	45b9      	cmp	r9, r7
 8006350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006354:	f840 3b04 	str.w	r3, [r0], #4
 8006358:	d2e8      	bcs.n	800632c <quorem+0xb0>
 800635a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800635e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006362:	b92a      	cbnz	r2, 8006370 <quorem+0xf4>
 8006364:	3b04      	subs	r3, #4
 8006366:	429e      	cmp	r6, r3
 8006368:	461a      	mov	r2, r3
 800636a:	d30b      	bcc.n	8006384 <quorem+0x108>
 800636c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006370:	4628      	mov	r0, r5
 8006372:	b003      	add	sp, #12
 8006374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	3b04      	subs	r3, #4
 800637c:	2a00      	cmp	r2, #0
 800637e:	d1ca      	bne.n	8006316 <quorem+0x9a>
 8006380:	3c01      	subs	r4, #1
 8006382:	e7c5      	b.n	8006310 <quorem+0x94>
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	3b04      	subs	r3, #4
 8006388:	2a00      	cmp	r2, #0
 800638a:	d1ef      	bne.n	800636c <quorem+0xf0>
 800638c:	3c01      	subs	r4, #1
 800638e:	e7ea      	b.n	8006366 <quorem+0xea>
 8006390:	2000      	movs	r0, #0
 8006392:	e7ee      	b.n	8006372 <quorem+0xf6>
 8006394:	0000      	movs	r0, r0
	...

08006398 <_dtoa_r>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	ec57 6b10 	vmov	r6, r7, d0
 80063a0:	b097      	sub	sp, #92	; 0x5c
 80063a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063a4:	9106      	str	r1, [sp, #24]
 80063a6:	4604      	mov	r4, r0
 80063a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80063aa:	9312      	str	r3, [sp, #72]	; 0x48
 80063ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063b0:	e9cd 6700 	strd	r6, r7, [sp]
 80063b4:	b93d      	cbnz	r5, 80063c6 <_dtoa_r+0x2e>
 80063b6:	2010      	movs	r0, #16
 80063b8:	f000 fdb4 	bl	8006f24 <malloc>
 80063bc:	6260      	str	r0, [r4, #36]	; 0x24
 80063be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063c2:	6005      	str	r5, [r0, #0]
 80063c4:	60c5      	str	r5, [r0, #12]
 80063c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	b151      	cbz	r1, 80063e2 <_dtoa_r+0x4a>
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	604a      	str	r2, [r1, #4]
 80063d0:	2301      	movs	r3, #1
 80063d2:	4093      	lsls	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fdeb 	bl	8006fb2 <_Bfree>
 80063dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	1e3b      	subs	r3, r7, #0
 80063e4:	bfbb      	ittet	lt
 80063e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	9301      	strlt	r3, [sp, #4]
 80063ec:	2300      	movge	r3, #0
 80063ee:	2201      	movlt	r2, #1
 80063f0:	bfac      	ite	ge
 80063f2:	f8c8 3000 	strge.w	r3, [r8]
 80063f6:	f8c8 2000 	strlt.w	r2, [r8]
 80063fa:	4baf      	ldr	r3, [pc, #700]	; (80066b8 <_dtoa_r+0x320>)
 80063fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006400:	ea33 0308 	bics.w	r3, r3, r8
 8006404:	d114      	bne.n	8006430 <_dtoa_r+0x98>
 8006406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006408:	f242 730f 	movw	r3, #9999	; 0x270f
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	9b00      	ldr	r3, [sp, #0]
 8006410:	b923      	cbnz	r3, 800641c <_dtoa_r+0x84>
 8006412:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006416:	2800      	cmp	r0, #0
 8006418:	f000 8542 	beq.w	8006ea0 <_dtoa_r+0xb08>
 800641c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800641e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80066cc <_dtoa_r+0x334>
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8544 	beq.w	8006eb0 <_dtoa_r+0xb18>
 8006428:	f10b 0303 	add.w	r3, fp, #3
 800642c:	f000 bd3e 	b.w	8006eac <_dtoa_r+0xb14>
 8006430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006440:	4681      	mov	r9, r0
 8006442:	b168      	cbz	r0, 8006460 <_dtoa_r+0xc8>
 8006444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006446:	2301      	movs	r3, #1
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8524 	beq.w	8006e9a <_dtoa_r+0xb02>
 8006452:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <_dtoa_r+0x324>)
 8006454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006456:	f103 3bff 	add.w	fp, r3, #4294967295
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	f000 bd28 	b.w	8006eb0 <_dtoa_r+0xb18>
 8006460:	aa14      	add	r2, sp, #80	; 0x50
 8006462:	a915      	add	r1, sp, #84	; 0x54
 8006464:	ec47 6b10 	vmov	d0, r6, r7
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fffa 	bl	8007462 <__d2b>
 800646e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006472:	9004      	str	r0, [sp, #16]
 8006474:	2d00      	cmp	r5, #0
 8006476:	d07c      	beq.n	8006572 <_dtoa_r+0x1da>
 8006478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800647c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006480:	46b2      	mov	sl, r6
 8006482:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800648a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800648e:	2200      	movs	r2, #0
 8006490:	4b8b      	ldr	r3, [pc, #556]	; (80066c0 <_dtoa_r+0x328>)
 8006492:	4650      	mov	r0, sl
 8006494:	4659      	mov	r1, fp
 8006496:	f7f9 fef7 	bl	8000288 <__aeabi_dsub>
 800649a:	a381      	add	r3, pc, #516	; (adr r3, 80066a0 <_dtoa_r+0x308>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7fa f8aa 	bl	80005f8 <__aeabi_dmul>
 80064a4:	a380      	add	r3, pc, #512	; (adr r3, 80066a8 <_dtoa_r+0x310>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7f9 feef 	bl	800028c <__adddf3>
 80064ae:	4606      	mov	r6, r0
 80064b0:	4628      	mov	r0, r5
 80064b2:	460f      	mov	r7, r1
 80064b4:	f7fa f836 	bl	8000524 <__aeabi_i2d>
 80064b8:	a37d      	add	r3, pc, #500	; (adr r3, 80066b0 <_dtoa_r+0x318>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa f89b 	bl	80005f8 <__aeabi_dmul>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	f7f9 fedf 	bl	800028c <__adddf3>
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	f7fa fb41 	bl	8000b58 <__aeabi_d2iz>
 80064d6:	2200      	movs	r2, #0
 80064d8:	4682      	mov	sl, r0
 80064da:	2300      	movs	r3, #0
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa fafc 	bl	8000adc <__aeabi_dcmplt>
 80064e4:	b148      	cbz	r0, 80064fa <_dtoa_r+0x162>
 80064e6:	4650      	mov	r0, sl
 80064e8:	f7fa f81c 	bl	8000524 <__aeabi_i2d>
 80064ec:	4632      	mov	r2, r6
 80064ee:	463b      	mov	r3, r7
 80064f0:	f7fa faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f4:	b908      	cbnz	r0, 80064fa <_dtoa_r+0x162>
 80064f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064fa:	f1ba 0f16 	cmp.w	sl, #22
 80064fe:	d859      	bhi.n	80065b4 <_dtoa_r+0x21c>
 8006500:	4970      	ldr	r1, [pc, #448]	; (80066c4 <_dtoa_r+0x32c>)
 8006502:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800650a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800650e:	f7fa fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8006512:	2800      	cmp	r0, #0
 8006514:	d050      	beq.n	80065b8 <_dtoa_r+0x220>
 8006516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800651a:	2300      	movs	r3, #0
 800651c:	930f      	str	r3, [sp, #60]	; 0x3c
 800651e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006520:	1b5d      	subs	r5, r3, r5
 8006522:	f1b5 0801 	subs.w	r8, r5, #1
 8006526:	bf49      	itett	mi
 8006528:	f1c5 0301 	rsbmi	r3, r5, #1
 800652c:	2300      	movpl	r3, #0
 800652e:	9305      	strmi	r3, [sp, #20]
 8006530:	f04f 0800 	movmi.w	r8, #0
 8006534:	bf58      	it	pl
 8006536:	9305      	strpl	r3, [sp, #20]
 8006538:	f1ba 0f00 	cmp.w	sl, #0
 800653c:	db3e      	blt.n	80065bc <_dtoa_r+0x224>
 800653e:	2300      	movs	r3, #0
 8006540:	44d0      	add	r8, sl
 8006542:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	2b09      	cmp	r3, #9
 800654c:	f200 8090 	bhi.w	8006670 <_dtoa_r+0x2d8>
 8006550:	2b05      	cmp	r3, #5
 8006552:	bfc4      	itt	gt
 8006554:	3b04      	subgt	r3, #4
 8006556:	9306      	strgt	r3, [sp, #24]
 8006558:	9b06      	ldr	r3, [sp, #24]
 800655a:	f1a3 0302 	sub.w	r3, r3, #2
 800655e:	bfcc      	ite	gt
 8006560:	2500      	movgt	r5, #0
 8006562:	2501      	movle	r5, #1
 8006564:	2b03      	cmp	r3, #3
 8006566:	f200 808f 	bhi.w	8006688 <_dtoa_r+0x2f0>
 800656a:	e8df f003 	tbb	[pc, r3]
 800656e:	7f7d      	.short	0x7f7d
 8006570:	7131      	.short	0x7131
 8006572:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006576:	441d      	add	r5, r3
 8006578:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800657c:	2820      	cmp	r0, #32
 800657e:	dd13      	ble.n	80065a8 <_dtoa_r+0x210>
 8006580:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	fa08 f800 	lsl.w	r8, r8, r0
 800658a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800658e:	fa23 f000 	lsr.w	r0, r3, r0
 8006592:	ea48 0000 	orr.w	r0, r8, r0
 8006596:	f7f9 ffb5 	bl	8000504 <__aeabi_ui2d>
 800659a:	2301      	movs	r3, #1
 800659c:	4682      	mov	sl, r0
 800659e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80065a2:	3d01      	subs	r5, #1
 80065a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80065a6:	e772      	b.n	800648e <_dtoa_r+0xf6>
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	f1c0 0020 	rsb	r0, r0, #32
 80065ae:	fa03 f000 	lsl.w	r0, r3, r0
 80065b2:	e7f0      	b.n	8006596 <_dtoa_r+0x1fe>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7b1      	b.n	800651c <_dtoa_r+0x184>
 80065b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80065ba:	e7b0      	b.n	800651e <_dtoa_r+0x186>
 80065bc:	9b05      	ldr	r3, [sp, #20]
 80065be:	eba3 030a 	sub.w	r3, r3, sl
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	f1ca 0300 	rsb	r3, sl, #0
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	2300      	movs	r3, #0
 80065cc:	930e      	str	r3, [sp, #56]	; 0x38
 80065ce:	e7bb      	b.n	8006548 <_dtoa_r+0x1b0>
 80065d0:	2301      	movs	r3, #1
 80065d2:	930a      	str	r3, [sp, #40]	; 0x28
 80065d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dd59      	ble.n	800668e <_dtoa_r+0x2f6>
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	4699      	mov	r9, r3
 80065de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065e0:	2200      	movs	r2, #0
 80065e2:	6072      	str	r2, [r6, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	f102 0014 	add.w	r0, r2, #20
 80065ea:	4298      	cmp	r0, r3
 80065ec:	6871      	ldr	r1, [r6, #4]
 80065ee:	d953      	bls.n	8006698 <_dtoa_r+0x300>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fcaa 	bl	8006f4a <_Balloc>
 80065f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f8:	6030      	str	r0, [r6, #0]
 80065fa:	f1b9 0f0e 	cmp.w	r9, #14
 80065fe:	f8d3 b000 	ldr.w	fp, [r3]
 8006602:	f200 80e6 	bhi.w	80067d2 <_dtoa_r+0x43a>
 8006606:	2d00      	cmp	r5, #0
 8006608:	f000 80e3 	beq.w	80067d2 <_dtoa_r+0x43a>
 800660c:	ed9d 7b00 	vldr	d7, [sp]
 8006610:	f1ba 0f00 	cmp.w	sl, #0
 8006614:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006618:	dd74      	ble.n	8006704 <_dtoa_r+0x36c>
 800661a:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <_dtoa_r+0x32c>)
 800661c:	f00a 030f 	and.w	r3, sl, #15
 8006620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006624:	ed93 7b00 	vldr	d7, [r3]
 8006628:	ea4f 162a 	mov.w	r6, sl, asr #4
 800662c:	06f0      	lsls	r0, r6, #27
 800662e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006632:	d565      	bpl.n	8006700 <_dtoa_r+0x368>
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <_dtoa_r+0x330>)
 8006636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800663a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800663e:	f7fa f905 	bl	800084c <__aeabi_ddiv>
 8006642:	e9cd 0100 	strd	r0, r1, [sp]
 8006646:	f006 060f 	and.w	r6, r6, #15
 800664a:	2503      	movs	r5, #3
 800664c:	4f1e      	ldr	r7, [pc, #120]	; (80066c8 <_dtoa_r+0x330>)
 800664e:	e04c      	b.n	80066ea <_dtoa_r+0x352>
 8006650:	2301      	movs	r3, #1
 8006652:	930a      	str	r3, [sp, #40]	; 0x28
 8006654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006656:	4453      	add	r3, sl
 8006658:	f103 0901 	add.w	r9, r3, #1
 800665c:	9302      	str	r3, [sp, #8]
 800665e:	464b      	mov	r3, r9
 8006660:	2b01      	cmp	r3, #1
 8006662:	bfb8      	it	lt
 8006664:	2301      	movlt	r3, #1
 8006666:	e7ba      	b.n	80065de <_dtoa_r+0x246>
 8006668:	2300      	movs	r3, #0
 800666a:	e7b2      	b.n	80065d2 <_dtoa_r+0x23a>
 800666c:	2300      	movs	r3, #0
 800666e:	e7f0      	b.n	8006652 <_dtoa_r+0x2ba>
 8006670:	2501      	movs	r5, #1
 8006672:	2300      	movs	r3, #0
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	950a      	str	r5, [sp, #40]	; 0x28
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	9302      	str	r3, [sp, #8]
 800667e:	4699      	mov	r9, r3
 8006680:	2200      	movs	r2, #0
 8006682:	2312      	movs	r3, #18
 8006684:	920b      	str	r2, [sp, #44]	; 0x2c
 8006686:	e7aa      	b.n	80065de <_dtoa_r+0x246>
 8006688:	2301      	movs	r3, #1
 800668a:	930a      	str	r3, [sp, #40]	; 0x28
 800668c:	e7f4      	b.n	8006678 <_dtoa_r+0x2e0>
 800668e:	2301      	movs	r3, #1
 8006690:	9302      	str	r3, [sp, #8]
 8006692:	4699      	mov	r9, r3
 8006694:	461a      	mov	r2, r3
 8006696:	e7f5      	b.n	8006684 <_dtoa_r+0x2ec>
 8006698:	3101      	adds	r1, #1
 800669a:	6071      	str	r1, [r6, #4]
 800669c:	0052      	lsls	r2, r2, #1
 800669e:	e7a2      	b.n	80065e6 <_dtoa_r+0x24e>
 80066a0:	636f4361 	.word	0x636f4361
 80066a4:	3fd287a7 	.word	0x3fd287a7
 80066a8:	8b60c8b3 	.word	0x8b60c8b3
 80066ac:	3fc68a28 	.word	0x3fc68a28
 80066b0:	509f79fb 	.word	0x509f79fb
 80066b4:	3fd34413 	.word	0x3fd34413
 80066b8:	7ff00000 	.word	0x7ff00000
 80066bc:	08007e49 	.word	0x08007e49
 80066c0:	3ff80000 	.word	0x3ff80000
 80066c4:	08007ea8 	.word	0x08007ea8
 80066c8:	08007e80 	.word	0x08007e80
 80066cc:	08007e75 	.word	0x08007e75
 80066d0:	07f1      	lsls	r1, r6, #31
 80066d2:	d508      	bpl.n	80066e6 <_dtoa_r+0x34e>
 80066d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066e4:	3501      	adds	r5, #1
 80066e6:	1076      	asrs	r6, r6, #1
 80066e8:	3708      	adds	r7, #8
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d1f0      	bne.n	80066d0 <_dtoa_r+0x338>
 80066ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066f6:	f7fa f8a9 	bl	800084c <__aeabi_ddiv>
 80066fa:	e9cd 0100 	strd	r0, r1, [sp]
 80066fe:	e01a      	b.n	8006736 <_dtoa_r+0x39e>
 8006700:	2502      	movs	r5, #2
 8006702:	e7a3      	b.n	800664c <_dtoa_r+0x2b4>
 8006704:	f000 80a0 	beq.w	8006848 <_dtoa_r+0x4b0>
 8006708:	f1ca 0600 	rsb	r6, sl, #0
 800670c:	4b9f      	ldr	r3, [pc, #636]	; (800698c <_dtoa_r+0x5f4>)
 800670e:	4fa0      	ldr	r7, [pc, #640]	; (8006990 <_dtoa_r+0x5f8>)
 8006710:	f006 020f 	and.w	r2, r6, #15
 8006714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006720:	f7f9 ff6a 	bl	80005f8 <__aeabi_dmul>
 8006724:	e9cd 0100 	strd	r0, r1, [sp]
 8006728:	1136      	asrs	r6, r6, #4
 800672a:	2300      	movs	r3, #0
 800672c:	2502      	movs	r5, #2
 800672e:	2e00      	cmp	r6, #0
 8006730:	d17f      	bne.n	8006832 <_dtoa_r+0x49a>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e1      	bne.n	80066fa <_dtoa_r+0x362>
 8006736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8087 	beq.w	800684c <_dtoa_r+0x4b4>
 800673e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006742:	2200      	movs	r2, #0
 8006744:	4b93      	ldr	r3, [pc, #588]	; (8006994 <_dtoa_r+0x5fc>)
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7fa f9c7 	bl	8000adc <__aeabi_dcmplt>
 800674e:	2800      	cmp	r0, #0
 8006750:	d07c      	beq.n	800684c <_dtoa_r+0x4b4>
 8006752:	f1b9 0f00 	cmp.w	r9, #0
 8006756:	d079      	beq.n	800684c <_dtoa_r+0x4b4>
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	dd35      	ble.n	80067ca <_dtoa_r+0x432>
 800675e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006762:	9308      	str	r3, [sp, #32]
 8006764:	4639      	mov	r1, r7
 8006766:	2200      	movs	r2, #0
 8006768:	4b8b      	ldr	r3, [pc, #556]	; (8006998 <_dtoa_r+0x600>)
 800676a:	4630      	mov	r0, r6
 800676c:	f7f9 ff44 	bl	80005f8 <__aeabi_dmul>
 8006770:	e9cd 0100 	strd	r0, r1, [sp]
 8006774:	9f02      	ldr	r7, [sp, #8]
 8006776:	3501      	adds	r5, #1
 8006778:	4628      	mov	r0, r5
 800677a:	f7f9 fed3 	bl	8000524 <__aeabi_i2d>
 800677e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006782:	f7f9 ff39 	bl	80005f8 <__aeabi_dmul>
 8006786:	2200      	movs	r2, #0
 8006788:	4b84      	ldr	r3, [pc, #528]	; (800699c <_dtoa_r+0x604>)
 800678a:	f7f9 fd7f 	bl	800028c <__adddf3>
 800678e:	4605      	mov	r5, r0
 8006790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006794:	2f00      	cmp	r7, #0
 8006796:	d15d      	bne.n	8006854 <_dtoa_r+0x4bc>
 8006798:	2200      	movs	r2, #0
 800679a:	4b81      	ldr	r3, [pc, #516]	; (80069a0 <_dtoa_r+0x608>)
 800679c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067a0:	f7f9 fd72 	bl	8000288 <__aeabi_dsub>
 80067a4:	462a      	mov	r2, r5
 80067a6:	4633      	mov	r3, r6
 80067a8:	e9cd 0100 	strd	r0, r1, [sp]
 80067ac:	f7fa f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f040 8288 	bne.w	8006cc6 <_dtoa_r+0x92e>
 80067b6:	462a      	mov	r2, r5
 80067b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067c0:	f7fa f98c 	bl	8000adc <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 827c 	bne.w	8006cc2 <_dtoa_r+0x92a>
 80067ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067ce:	e9cd 2300 	strd	r2, r3, [sp]
 80067d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f2c0 8150 	blt.w	8006a7a <_dtoa_r+0x6e2>
 80067da:	f1ba 0f0e 	cmp.w	sl, #14
 80067de:	f300 814c 	bgt.w	8006a7a <_dtoa_r+0x6e2>
 80067e2:	4b6a      	ldr	r3, [pc, #424]	; (800698c <_dtoa_r+0x5f4>)
 80067e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067e8:	ed93 7b00 	vldr	d7, [r3]
 80067ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067f4:	f280 80d8 	bge.w	80069a8 <_dtoa_r+0x610>
 80067f8:	f1b9 0f00 	cmp.w	r9, #0
 80067fc:	f300 80d4 	bgt.w	80069a8 <_dtoa_r+0x610>
 8006800:	f040 825e 	bne.w	8006cc0 <_dtoa_r+0x928>
 8006804:	2200      	movs	r2, #0
 8006806:	4b66      	ldr	r3, [pc, #408]	; (80069a0 <_dtoa_r+0x608>)
 8006808:	ec51 0b17 	vmov	r0, r1, d7
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006814:	f7fa f976 	bl	8000b04 <__aeabi_dcmpge>
 8006818:	464f      	mov	r7, r9
 800681a:	464e      	mov	r6, r9
 800681c:	2800      	cmp	r0, #0
 800681e:	f040 8234 	bne.w	8006c8a <_dtoa_r+0x8f2>
 8006822:	2331      	movs	r3, #49	; 0x31
 8006824:	f10b 0501 	add.w	r5, fp, #1
 8006828:	f88b 3000 	strb.w	r3, [fp]
 800682c:	f10a 0a01 	add.w	sl, sl, #1
 8006830:	e22f      	b.n	8006c92 <_dtoa_r+0x8fa>
 8006832:	07f2      	lsls	r2, r6, #31
 8006834:	d505      	bpl.n	8006842 <_dtoa_r+0x4aa>
 8006836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	3501      	adds	r5, #1
 8006840:	2301      	movs	r3, #1
 8006842:	1076      	asrs	r6, r6, #1
 8006844:	3708      	adds	r7, #8
 8006846:	e772      	b.n	800672e <_dtoa_r+0x396>
 8006848:	2502      	movs	r5, #2
 800684a:	e774      	b.n	8006736 <_dtoa_r+0x39e>
 800684c:	f8cd a020 	str.w	sl, [sp, #32]
 8006850:	464f      	mov	r7, r9
 8006852:	e791      	b.n	8006778 <_dtoa_r+0x3e0>
 8006854:	4b4d      	ldr	r3, [pc, #308]	; (800698c <_dtoa_r+0x5f4>)
 8006856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800685a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d047      	beq.n	80068f4 <_dtoa_r+0x55c>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	2000      	movs	r0, #0
 800686a:	494e      	ldr	r1, [pc, #312]	; (80069a4 <_dtoa_r+0x60c>)
 800686c:	f7f9 ffee 	bl	800084c <__aeabi_ddiv>
 8006870:	462a      	mov	r2, r5
 8006872:	4633      	mov	r3, r6
 8006874:	f7f9 fd08 	bl	8000288 <__aeabi_dsub>
 8006878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800687c:	465d      	mov	r5, fp
 800687e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006882:	f7fa f969 	bl	8000b58 <__aeabi_d2iz>
 8006886:	4606      	mov	r6, r0
 8006888:	f7f9 fe4c 	bl	8000524 <__aeabi_i2d>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006894:	f7f9 fcf8 	bl	8000288 <__aeabi_dsub>
 8006898:	3630      	adds	r6, #48	; 0x30
 800689a:	f805 6b01 	strb.w	r6, [r5], #1
 800689e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068a2:	e9cd 0100 	strd	r0, r1, [sp]
 80068a6:	f7fa f919 	bl	8000adc <__aeabi_dcmplt>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d163      	bne.n	8006976 <_dtoa_r+0x5de>
 80068ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068b2:	2000      	movs	r0, #0
 80068b4:	4937      	ldr	r1, [pc, #220]	; (8006994 <_dtoa_r+0x5fc>)
 80068b6:	f7f9 fce7 	bl	8000288 <__aeabi_dsub>
 80068ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068be:	f7fa f90d 	bl	8000adc <__aeabi_dcmplt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 80b7 	bne.w	8006a36 <_dtoa_r+0x69e>
 80068c8:	eba5 030b 	sub.w	r3, r5, fp
 80068cc:	429f      	cmp	r7, r3
 80068ce:	f77f af7c 	ble.w	80067ca <_dtoa_r+0x432>
 80068d2:	2200      	movs	r2, #0
 80068d4:	4b30      	ldr	r3, [pc, #192]	; (8006998 <_dtoa_r+0x600>)
 80068d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068da:	f7f9 fe8d 	bl	80005f8 <__aeabi_dmul>
 80068de:	2200      	movs	r2, #0
 80068e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <_dtoa_r+0x600>)
 80068e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068ea:	f7f9 fe85 	bl	80005f8 <__aeabi_dmul>
 80068ee:	e9cd 0100 	strd	r0, r1, [sp]
 80068f2:	e7c4      	b.n	800687e <_dtoa_r+0x4e6>
 80068f4:	462a      	mov	r2, r5
 80068f6:	4633      	mov	r3, r6
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006900:	eb0b 0507 	add.w	r5, fp, r7
 8006904:	465e      	mov	r6, fp
 8006906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800690a:	f7fa f925 	bl	8000b58 <__aeabi_d2iz>
 800690e:	4607      	mov	r7, r0
 8006910:	f7f9 fe08 	bl	8000524 <__aeabi_i2d>
 8006914:	3730      	adds	r7, #48	; 0x30
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	f806 7b01 	strb.w	r7, [r6], #1
 8006926:	42ae      	cmp	r6, r5
 8006928:	e9cd 0100 	strd	r0, r1, [sp]
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	d126      	bne.n	8006980 <_dtoa_r+0x5e8>
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <_dtoa_r+0x60c>)
 8006934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006938:	f7f9 fca8 	bl	800028c <__adddf3>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006944:	f7fa f8e8 	bl	8000b18 <__aeabi_dcmpgt>
 8006948:	2800      	cmp	r0, #0
 800694a:	d174      	bne.n	8006a36 <_dtoa_r+0x69e>
 800694c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006950:	2000      	movs	r0, #0
 8006952:	4914      	ldr	r1, [pc, #80]	; (80069a4 <_dtoa_r+0x60c>)
 8006954:	f7f9 fc98 	bl	8000288 <__aeabi_dsub>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006960:	f7fa f8bc 	bl	8000adc <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	f43f af30 	beq.w	80067ca <_dtoa_r+0x432>
 800696a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800696e:	2b30      	cmp	r3, #48	; 0x30
 8006970:	f105 32ff 	add.w	r2, r5, #4294967295
 8006974:	d002      	beq.n	800697c <_dtoa_r+0x5e4>
 8006976:	f8dd a020 	ldr.w	sl, [sp, #32]
 800697a:	e04a      	b.n	8006a12 <_dtoa_r+0x67a>
 800697c:	4615      	mov	r5, r2
 800697e:	e7f4      	b.n	800696a <_dtoa_r+0x5d2>
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <_dtoa_r+0x600>)
 8006982:	f7f9 fe39 	bl	80005f8 <__aeabi_dmul>
 8006986:	e9cd 0100 	strd	r0, r1, [sp]
 800698a:	e7bc      	b.n	8006906 <_dtoa_r+0x56e>
 800698c:	08007ea8 	.word	0x08007ea8
 8006990:	08007e80 	.word	0x08007e80
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	40240000 	.word	0x40240000
 800699c:	401c0000 	.word	0x401c0000
 80069a0:	40140000 	.word	0x40140000
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069ac:	465d      	mov	r5, fp
 80069ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7f9 ff49 	bl	800084c <__aeabi_ddiv>
 80069ba:	f7fa f8cd 	bl	8000b58 <__aeabi_d2iz>
 80069be:	4680      	mov	r8, r0
 80069c0:	f7f9 fdb0 	bl	8000524 <__aeabi_i2d>
 80069c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c8:	f7f9 fe16 	bl	80005f8 <__aeabi_dmul>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80069d8:	f7f9 fc56 	bl	8000288 <__aeabi_dsub>
 80069dc:	f805 6b01 	strb.w	r6, [r5], #1
 80069e0:	eba5 060b 	sub.w	r6, r5, fp
 80069e4:	45b1      	cmp	r9, r6
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	d139      	bne.n	8006a60 <_dtoa_r+0x6c8>
 80069ec:	f7f9 fc4e 	bl	800028c <__adddf3>
 80069f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f4:	4606      	mov	r6, r0
 80069f6:	460f      	mov	r7, r1
 80069f8:	f7fa f88e 	bl	8000b18 <__aeabi_dcmpgt>
 80069fc:	b9c8      	cbnz	r0, 8006a32 <_dtoa_r+0x69a>
 80069fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7fa f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0a:	b110      	cbz	r0, 8006a12 <_dtoa_r+0x67a>
 8006a0c:	f018 0f01 	tst.w	r8, #1
 8006a10:	d10f      	bne.n	8006a32 <_dtoa_r+0x69a>
 8006a12:	9904      	ldr	r1, [sp, #16]
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 facc 	bl	8006fb2 <_Bfree>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1e:	702b      	strb	r3, [r5, #0]
 8006a20:	f10a 0301 	add.w	r3, sl, #1
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8241 	beq.w	8006eb0 <_dtoa_r+0xb18>
 8006a2e:	601d      	str	r5, [r3, #0]
 8006a30:	e23e      	b.n	8006eb0 <_dtoa_r+0xb18>
 8006a32:	f8cd a020 	str.w	sl, [sp, #32]
 8006a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a3a:	2a39      	cmp	r2, #57	; 0x39
 8006a3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006a40:	d108      	bne.n	8006a54 <_dtoa_r+0x6bc>
 8006a42:	459b      	cmp	fp, r3
 8006a44:	d10a      	bne.n	8006a5c <_dtoa_r+0x6c4>
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9308      	str	r3, [sp, #32]
 8006a4c:	2330      	movs	r3, #48	; 0x30
 8006a4e:	f88b 3000 	strb.w	r3, [fp]
 8006a52:	465b      	mov	r3, fp
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	3201      	adds	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e78c      	b.n	8006976 <_dtoa_r+0x5de>
 8006a5c:	461d      	mov	r5, r3
 8006a5e:	e7ea      	b.n	8006a36 <_dtoa_r+0x69e>
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b9b      	ldr	r3, [pc, #620]	; (8006cd0 <_dtoa_r+0x938>)
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	f7fa f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d09a      	beq.n	80069ae <_dtoa_r+0x616>
 8006a78:	e7cb      	b.n	8006a12 <_dtoa_r+0x67a>
 8006a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	f000 808b 	beq.w	8006b98 <_dtoa_r+0x800>
 8006a82:	9a06      	ldr	r2, [sp, #24]
 8006a84:	2a01      	cmp	r2, #1
 8006a86:	dc6e      	bgt.n	8006b66 <_dtoa_r+0x7ce>
 8006a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	d067      	beq.n	8006b5e <_dtoa_r+0x7c6>
 8006a8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a92:	9f07      	ldr	r7, [sp, #28]
 8006a94:	9d05      	ldr	r5, [sp, #20]
 8006a96:	9a05      	ldr	r2, [sp, #20]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	441a      	add	r2, r3
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	9205      	str	r2, [sp, #20]
 8006aa0:	4498      	add	r8, r3
 8006aa2:	f000 fb26 	bl	80070f2 <__i2b>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	dd0c      	ble.n	8006ac6 <_dtoa_r+0x72e>
 8006aac:	f1b8 0f00 	cmp.w	r8, #0
 8006ab0:	dd09      	ble.n	8006ac6 <_dtoa_r+0x72e>
 8006ab2:	4545      	cmp	r5, r8
 8006ab4:	9a05      	ldr	r2, [sp, #20]
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	bfa8      	it	ge
 8006aba:	4643      	movge	r3, r8
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	9205      	str	r2, [sp, #20]
 8006ac0:	1aed      	subs	r5, r5, r3
 8006ac2:	eba8 0803 	sub.w	r8, r8, r3
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	b1eb      	cbz	r3, 8006b06 <_dtoa_r+0x76e>
 8006aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d067      	beq.n	8006ba0 <_dtoa_r+0x808>
 8006ad0:	b18f      	cbz	r7, 8006af6 <_dtoa_r+0x75e>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fbaa 	bl	8007230 <__pow5mult>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	4601      	mov	r1, r0
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fb0e 	bl	8007104 <__multiply>
 8006ae8:	9904      	ldr	r1, [sp, #16]
 8006aea:	9008      	str	r0, [sp, #32]
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 fa60 	bl	8006fb2 <_Bfree>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	9b07      	ldr	r3, [sp, #28]
 8006af8:	1bda      	subs	r2, r3, r7
 8006afa:	d004      	beq.n	8006b06 <_dtoa_r+0x76e>
 8006afc:	9904      	ldr	r1, [sp, #16]
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fb96 	bl	8007230 <__pow5mult>
 8006b04:	9004      	str	r0, [sp, #16]
 8006b06:	2101      	movs	r1, #1
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 faf2 	bl	80070f2 <__i2b>
 8006b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b10:	4607      	mov	r7, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 81d0 	beq.w	8006eb8 <_dtoa_r+0xb20>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 fb87 	bl	8007230 <__pow5mult>
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	4607      	mov	r7, r0
 8006b28:	dc40      	bgt.n	8006bac <_dtoa_r+0x814>
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d139      	bne.n	8006ba4 <_dtoa_r+0x80c>
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d136      	bne.n	8006ba8 <_dtoa_r+0x810>
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b40:	0d1b      	lsrs	r3, r3, #20
 8006b42:	051b      	lsls	r3, r3, #20
 8006b44:	b12b      	cbz	r3, 8006b52 <_dtoa_r+0x7ba>
 8006b46:	9b05      	ldr	r3, [sp, #20]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	f108 0801 	add.w	r8, r8, #1
 8006b50:	2301      	movs	r3, #1
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12a      	bne.n	8006bb0 <_dtoa_r+0x818>
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	e030      	b.n	8006bc0 <_dtoa_r+0x828>
 8006b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b64:	e795      	b.n	8006a92 <_dtoa_r+0x6fa>
 8006b66:	9b07      	ldr	r3, [sp, #28]
 8006b68:	f109 37ff 	add.w	r7, r9, #4294967295
 8006b6c:	42bb      	cmp	r3, r7
 8006b6e:	bfbf      	itttt	lt
 8006b70:	9b07      	ldrlt	r3, [sp, #28]
 8006b72:	9707      	strlt	r7, [sp, #28]
 8006b74:	1afa      	sublt	r2, r7, r3
 8006b76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b78:	bfbb      	ittet	lt
 8006b7a:	189b      	addlt	r3, r3, r2
 8006b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b7e:	1bdf      	subge	r7, r3, r7
 8006b80:	2700      	movlt	r7, #0
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	bfb5      	itete	lt
 8006b88:	9b05      	ldrlt	r3, [sp, #20]
 8006b8a:	9d05      	ldrge	r5, [sp, #20]
 8006b8c:	eba3 0509 	sublt.w	r5, r3, r9
 8006b90:	464b      	movge	r3, r9
 8006b92:	bfb8      	it	lt
 8006b94:	2300      	movlt	r3, #0
 8006b96:	e77e      	b.n	8006a96 <_dtoa_r+0x6fe>
 8006b98:	9f07      	ldr	r7, [sp, #28]
 8006b9a:	9d05      	ldr	r5, [sp, #20]
 8006b9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006b9e:	e783      	b.n	8006aa8 <_dtoa_r+0x710>
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	e7ab      	b.n	8006afc <_dtoa_r+0x764>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e7d4      	b.n	8006b52 <_dtoa_r+0x7ba>
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	e7d2      	b.n	8006b52 <_dtoa_r+0x7ba>
 8006bac:	2300      	movs	r3, #0
 8006bae:	9307      	str	r3, [sp, #28]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006bb6:	6918      	ldr	r0, [r3, #16]
 8006bb8:	f000 fa4d 	bl	8007056 <__hi0bits>
 8006bbc:	f1c0 0020 	rsb	r0, r0, #32
 8006bc0:	4440      	add	r0, r8
 8006bc2:	f010 001f 	ands.w	r0, r0, #31
 8006bc6:	d047      	beq.n	8006c58 <_dtoa_r+0x8c0>
 8006bc8:	f1c0 0320 	rsb	r3, r0, #32
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	dd3b      	ble.n	8006c48 <_dtoa_r+0x8b0>
 8006bd0:	9b05      	ldr	r3, [sp, #20]
 8006bd2:	f1c0 001c 	rsb	r0, r0, #28
 8006bd6:	4403      	add	r3, r0
 8006bd8:	9305      	str	r3, [sp, #20]
 8006bda:	4405      	add	r5, r0
 8006bdc:	4480      	add	r8, r0
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd05      	ble.n	8006bf0 <_dtoa_r+0x858>
 8006be4:	461a      	mov	r2, r3
 8006be6:	9904      	ldr	r1, [sp, #16]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fb6f 	bl	80072cc <__lshift>
 8006bee:	9004      	str	r0, [sp, #16]
 8006bf0:	f1b8 0f00 	cmp.w	r8, #0
 8006bf4:	dd05      	ble.n	8006c02 <_dtoa_r+0x86a>
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fb66 	bl	80072cc <__lshift>
 8006c00:	4607      	mov	r7, r0
 8006c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c04:	b353      	cbz	r3, 8006c5c <_dtoa_r+0x8c4>
 8006c06:	4639      	mov	r1, r7
 8006c08:	9804      	ldr	r0, [sp, #16]
 8006c0a:	f000 fbb3 	bl	8007374 <__mcmp>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	da24      	bge.n	8006c5c <_dtoa_r+0x8c4>
 8006c12:	2300      	movs	r3, #0
 8006c14:	220a      	movs	r2, #10
 8006c16:	9904      	ldr	r1, [sp, #16]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 f9e1 	bl	8006fe0 <__multadd>
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	9004      	str	r0, [sp, #16]
 8006c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 814d 	beq.w	8006ec6 <_dtoa_r+0xb2e>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4631      	mov	r1, r6
 8006c30:	220a      	movs	r2, #10
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f9d4 	bl	8006fe0 <__multadd>
 8006c38:	9b02      	ldr	r3, [sp, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	dc4f      	bgt.n	8006ce0 <_dtoa_r+0x948>
 8006c40:	9b06      	ldr	r3, [sp, #24]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	dd4c      	ble.n	8006ce0 <_dtoa_r+0x948>
 8006c46:	e011      	b.n	8006c6c <_dtoa_r+0x8d4>
 8006c48:	d0c9      	beq.n	8006bde <_dtoa_r+0x846>
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	331c      	adds	r3, #28
 8006c4e:	441a      	add	r2, r3
 8006c50:	9205      	str	r2, [sp, #20]
 8006c52:	441d      	add	r5, r3
 8006c54:	4498      	add	r8, r3
 8006c56:	e7c2      	b.n	8006bde <_dtoa_r+0x846>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	e7f6      	b.n	8006c4a <_dtoa_r+0x8b2>
 8006c5c:	f1b9 0f00 	cmp.w	r9, #0
 8006c60:	dc38      	bgt.n	8006cd4 <_dtoa_r+0x93c>
 8006c62:	9b06      	ldr	r3, [sp, #24]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	dd35      	ble.n	8006cd4 <_dtoa_r+0x93c>
 8006c68:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	b963      	cbnz	r3, 8006c8a <_dtoa_r+0x8f2>
 8006c70:	4639      	mov	r1, r7
 8006c72:	2205      	movs	r2, #5
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f9b3 	bl	8006fe0 <__multadd>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	9804      	ldr	r0, [sp, #16]
 8006c80:	f000 fb78 	bl	8007374 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f73f adcc 	bgt.w	8006822 <_dtoa_r+0x48a>
 8006c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8c:	465d      	mov	r5, fp
 8006c8e:	ea6f 0a03 	mvn.w	sl, r3
 8006c92:	f04f 0900 	mov.w	r9, #0
 8006c96:	4639      	mov	r1, r7
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f98a 	bl	8006fb2 <_Bfree>
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	f43f aeb7 	beq.w	8006a12 <_dtoa_r+0x67a>
 8006ca4:	f1b9 0f00 	cmp.w	r9, #0
 8006ca8:	d005      	beq.n	8006cb6 <_dtoa_r+0x91e>
 8006caa:	45b1      	cmp	r9, r6
 8006cac:	d003      	beq.n	8006cb6 <_dtoa_r+0x91e>
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 f97e 	bl	8006fb2 <_Bfree>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f97a 	bl	8006fb2 <_Bfree>
 8006cbe:	e6a8      	b.n	8006a12 <_dtoa_r+0x67a>
 8006cc0:	2700      	movs	r7, #0
 8006cc2:	463e      	mov	r6, r7
 8006cc4:	e7e1      	b.n	8006c8a <_dtoa_r+0x8f2>
 8006cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006cca:	463e      	mov	r6, r7
 8006ccc:	e5a9      	b.n	8006822 <_dtoa_r+0x48a>
 8006cce:	bf00      	nop
 8006cd0:	40240000 	.word	0x40240000
 8006cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 80fa 	beq.w	8006ed4 <_dtoa_r+0xb3c>
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	dd05      	ble.n	8006cf0 <_dtoa_r+0x958>
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 faef 	bl	80072cc <__lshift>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	9b07      	ldr	r3, [sp, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d04c      	beq.n	8006d90 <_dtoa_r+0x9f8>
 8006cf6:	6871      	ldr	r1, [r6, #4]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f926 	bl	8006f4a <_Balloc>
 8006cfe:	6932      	ldr	r2, [r6, #16]
 8006d00:	3202      	adds	r2, #2
 8006d02:	4605      	mov	r5, r0
 8006d04:	0092      	lsls	r2, r2, #2
 8006d06:	f106 010c 	add.w	r1, r6, #12
 8006d0a:	300c      	adds	r0, #12
 8006d0c:	f000 f912 	bl	8006f34 <memcpy>
 8006d10:	2201      	movs	r2, #1
 8006d12:	4629      	mov	r1, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fad9 	bl	80072cc <__lshift>
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	f8cd b014 	str.w	fp, [sp, #20]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	46b1      	mov	r9, r6
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	9804      	ldr	r0, [sp, #16]
 8006d2e:	f7ff faa5 	bl	800627c <quorem>
 8006d32:	4649      	mov	r1, r9
 8006d34:	4605      	mov	r5, r0
 8006d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d3a:	9804      	ldr	r0, [sp, #16]
 8006d3c:	f000 fb1a 	bl	8007374 <__mcmp>
 8006d40:	4632      	mov	r2, r6
 8006d42:	9000      	str	r0, [sp, #0]
 8006d44:	4639      	mov	r1, r7
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 fb2e 	bl	80073a8 <__mdiff>
 8006d4c:	68c3      	ldr	r3, [r0, #12]
 8006d4e:	4602      	mov	r2, r0
 8006d50:	bb03      	cbnz	r3, 8006d94 <_dtoa_r+0x9fc>
 8006d52:	4601      	mov	r1, r0
 8006d54:	9008      	str	r0, [sp, #32]
 8006d56:	9804      	ldr	r0, [sp, #16]
 8006d58:	f000 fb0c 	bl	8007374 <__mcmp>
 8006d5c:	9a08      	ldr	r2, [sp, #32]
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4611      	mov	r1, r2
 8006d62:	4620      	mov	r0, r4
 8006d64:	9308      	str	r3, [sp, #32]
 8006d66:	f000 f924 	bl	8006fb2 <_Bfree>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	b9a3      	cbnz	r3, 8006d98 <_dtoa_r+0xa00>
 8006d6e:	9a06      	ldr	r2, [sp, #24]
 8006d70:	b992      	cbnz	r2, 8006d98 <_dtoa_r+0xa00>
 8006d72:	9a07      	ldr	r2, [sp, #28]
 8006d74:	b982      	cbnz	r2, 8006d98 <_dtoa_r+0xa00>
 8006d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d7a:	d029      	beq.n	8006dd0 <_dtoa_r+0xa38>
 8006d7c:	9b00      	ldr	r3, [sp, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dd01      	ble.n	8006d86 <_dtoa_r+0x9ee>
 8006d82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006d86:	9b05      	ldr	r3, [sp, #20]
 8006d88:	1c5d      	adds	r5, r3, #1
 8006d8a:	f883 8000 	strb.w	r8, [r3]
 8006d8e:	e782      	b.n	8006c96 <_dtoa_r+0x8fe>
 8006d90:	4630      	mov	r0, r6
 8006d92:	e7c2      	b.n	8006d1a <_dtoa_r+0x982>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e7e3      	b.n	8006d60 <_dtoa_r+0x9c8>
 8006d98:	9a00      	ldr	r2, [sp, #0]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	db04      	blt.n	8006da8 <_dtoa_r+0xa10>
 8006d9e:	d125      	bne.n	8006dec <_dtoa_r+0xa54>
 8006da0:	9a06      	ldr	r2, [sp, #24]
 8006da2:	bb1a      	cbnz	r2, 8006dec <_dtoa_r+0xa54>
 8006da4:	9a07      	ldr	r2, [sp, #28]
 8006da6:	bb0a      	cbnz	r2, 8006dec <_dtoa_r+0xa54>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	ddec      	ble.n	8006d86 <_dtoa_r+0x9ee>
 8006dac:	2201      	movs	r2, #1
 8006dae:	9904      	ldr	r1, [sp, #16]
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fa8b 	bl	80072cc <__lshift>
 8006db6:	4639      	mov	r1, r7
 8006db8:	9004      	str	r0, [sp, #16]
 8006dba:	f000 fadb 	bl	8007374 <__mcmp>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	dc03      	bgt.n	8006dca <_dtoa_r+0xa32>
 8006dc2:	d1e0      	bne.n	8006d86 <_dtoa_r+0x9ee>
 8006dc4:	f018 0f01 	tst.w	r8, #1
 8006dc8:	d0dd      	beq.n	8006d86 <_dtoa_r+0x9ee>
 8006dca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dce:	d1d8      	bne.n	8006d82 <_dtoa_r+0x9ea>
 8006dd0:	9b05      	ldr	r3, [sp, #20]
 8006dd2:	9a05      	ldr	r2, [sp, #20]
 8006dd4:	1c5d      	adds	r5, r3, #1
 8006dd6:	2339      	movs	r3, #57	; 0x39
 8006dd8:	7013      	strb	r3, [r2, #0]
 8006dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dde:	2b39      	cmp	r3, #57	; 0x39
 8006de0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006de4:	d04f      	beq.n	8006e86 <_dtoa_r+0xaee>
 8006de6:	3301      	adds	r3, #1
 8006de8:	7013      	strb	r3, [r2, #0]
 8006dea:	e754      	b.n	8006c96 <_dtoa_r+0x8fe>
 8006dec:	9a05      	ldr	r2, [sp, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f102 0501 	add.w	r5, r2, #1
 8006df4:	dd06      	ble.n	8006e04 <_dtoa_r+0xa6c>
 8006df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dfa:	d0e9      	beq.n	8006dd0 <_dtoa_r+0xa38>
 8006dfc:	f108 0801 	add.w	r8, r8, #1
 8006e00:	9b05      	ldr	r3, [sp, #20]
 8006e02:	e7c2      	b.n	8006d8a <_dtoa_r+0x9f2>
 8006e04:	9a02      	ldr	r2, [sp, #8]
 8006e06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006e0a:	eba5 030b 	sub.w	r3, r5, fp
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d021      	beq.n	8006e56 <_dtoa_r+0xabe>
 8006e12:	2300      	movs	r3, #0
 8006e14:	220a      	movs	r2, #10
 8006e16:	9904      	ldr	r1, [sp, #16]
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f8e1 	bl	8006fe0 <__multadd>
 8006e1e:	45b1      	cmp	r9, r6
 8006e20:	9004      	str	r0, [sp, #16]
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f04f 020a 	mov.w	r2, #10
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	d105      	bne.n	8006e3c <_dtoa_r+0xaa4>
 8006e30:	f000 f8d6 	bl	8006fe0 <__multadd>
 8006e34:	4681      	mov	r9, r0
 8006e36:	4606      	mov	r6, r0
 8006e38:	9505      	str	r5, [sp, #20]
 8006e3a:	e776      	b.n	8006d2a <_dtoa_r+0x992>
 8006e3c:	f000 f8d0 	bl	8006fe0 <__multadd>
 8006e40:	4631      	mov	r1, r6
 8006e42:	4681      	mov	r9, r0
 8006e44:	2300      	movs	r3, #0
 8006e46:	220a      	movs	r2, #10
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 f8c9 	bl	8006fe0 <__multadd>
 8006e4e:	4606      	mov	r6, r0
 8006e50:	e7f2      	b.n	8006e38 <_dtoa_r+0xaa0>
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	2201      	movs	r2, #1
 8006e58:	9904      	ldr	r1, [sp, #16]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fa36 	bl	80072cc <__lshift>
 8006e60:	4639      	mov	r1, r7
 8006e62:	9004      	str	r0, [sp, #16]
 8006e64:	f000 fa86 	bl	8007374 <__mcmp>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	dcb6      	bgt.n	8006dda <_dtoa_r+0xa42>
 8006e6c:	d102      	bne.n	8006e74 <_dtoa_r+0xadc>
 8006e6e:	f018 0f01 	tst.w	r8, #1
 8006e72:	d1b2      	bne.n	8006dda <_dtoa_r+0xa42>
 8006e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e78:	2b30      	cmp	r3, #48	; 0x30
 8006e7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006e7e:	f47f af0a 	bne.w	8006c96 <_dtoa_r+0x8fe>
 8006e82:	4615      	mov	r5, r2
 8006e84:	e7f6      	b.n	8006e74 <_dtoa_r+0xadc>
 8006e86:	4593      	cmp	fp, r2
 8006e88:	d105      	bne.n	8006e96 <_dtoa_r+0xafe>
 8006e8a:	2331      	movs	r3, #49	; 0x31
 8006e8c:	f10a 0a01 	add.w	sl, sl, #1
 8006e90:	f88b 3000 	strb.w	r3, [fp]
 8006e94:	e6ff      	b.n	8006c96 <_dtoa_r+0x8fe>
 8006e96:	4615      	mov	r5, r2
 8006e98:	e79f      	b.n	8006dda <_dtoa_r+0xa42>
 8006e9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006f00 <_dtoa_r+0xb68>
 8006e9e:	e007      	b.n	8006eb0 <_dtoa_r+0xb18>
 8006ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006f04 <_dtoa_r+0xb6c>
 8006ea6:	b11b      	cbz	r3, 8006eb0 <_dtoa_r+0xb18>
 8006ea8:	f10b 0308 	add.w	r3, fp, #8
 8006eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	4658      	mov	r0, fp
 8006eb2:	b017      	add	sp, #92	; 0x5c
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f77f ae35 	ble.w	8006b2a <_dtoa_r+0x792>
 8006ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	e649      	b.n	8006b5a <_dtoa_r+0x7c2>
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc03      	bgt.n	8006ed4 <_dtoa_r+0xb3c>
 8006ecc:	9b06      	ldr	r3, [sp, #24]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	f73f aecc 	bgt.w	8006c6c <_dtoa_r+0x8d4>
 8006ed4:	465d      	mov	r5, fp
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	9804      	ldr	r0, [sp, #16]
 8006eda:	f7ff f9cf 	bl	800627c <quorem>
 8006ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ee2:	f805 8b01 	strb.w	r8, [r5], #1
 8006ee6:	9a02      	ldr	r2, [sp, #8]
 8006ee8:	eba5 030b 	sub.w	r3, r5, fp
 8006eec:	429a      	cmp	r2, r3
 8006eee:	ddb0      	ble.n	8006e52 <_dtoa_r+0xaba>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	9904      	ldr	r1, [sp, #16]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 f872 	bl	8006fe0 <__multadd>
 8006efc:	9004      	str	r0, [sp, #16]
 8006efe:	e7ea      	b.n	8006ed6 <_dtoa_r+0xb3e>
 8006f00:	08007e48 	.word	0x08007e48
 8006f04:	08007e6c 	.word	0x08007e6c

08006f08 <_localeconv_r>:
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <_localeconv_r+0x14>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a18      	ldr	r0, [r3, #32]
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <_localeconv_r+0x18>)
 8006f10:	2800      	cmp	r0, #0
 8006f12:	bf08      	it	eq
 8006f14:	4618      	moveq	r0, r3
 8006f16:	30f0      	adds	r0, #240	; 0xf0
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000194 	.word	0x20000194
 8006f20:	200001f8 	.word	0x200001f8

08006f24 <malloc>:
 8006f24:	4b02      	ldr	r3, [pc, #8]	; (8006f30 <malloc+0xc>)
 8006f26:	4601      	mov	r1, r0
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	f000 bb45 	b.w	80075b8 <_malloc_r>
 8006f2e:	bf00      	nop
 8006f30:	20000194 	.word	0x20000194

08006f34 <memcpy>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	1e43      	subs	r3, r0, #1
 8006f38:	440a      	add	r2, r1
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	d100      	bne.n	8006f40 <memcpy+0xc>
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f48:	e7f7      	b.n	8006f3a <memcpy+0x6>

08006f4a <_Balloc>:
 8006f4a:	b570      	push	{r4, r5, r6, lr}
 8006f4c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460e      	mov	r6, r1
 8006f52:	b93d      	cbnz	r5, 8006f64 <_Balloc+0x1a>
 8006f54:	2010      	movs	r0, #16
 8006f56:	f7ff ffe5 	bl	8006f24 <malloc>
 8006f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8006f5c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f60:	6005      	str	r5, [r0, #0]
 8006f62:	60c5      	str	r5, [r0, #12]
 8006f64:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f66:	68eb      	ldr	r3, [r5, #12]
 8006f68:	b183      	cbz	r3, 8006f8c <_Balloc+0x42>
 8006f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f72:	b9b8      	cbnz	r0, 8006fa4 <_Balloc+0x5a>
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f506 	lsl.w	r5, r1, r6
 8006f7a:	1d6a      	adds	r2, r5, #5
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fabe 	bl	8007500 <_calloc_r>
 8006f84:	b160      	cbz	r0, 8006fa0 <_Balloc+0x56>
 8006f86:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006f8a:	e00e      	b.n	8006faa <_Balloc+0x60>
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	2104      	movs	r1, #4
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fab5 	bl	8007500 <_calloc_r>
 8006f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f98:	60e8      	str	r0, [r5, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e4      	bne.n	8006f6a <_Balloc+0x20>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	6802      	ldr	r2, [r0, #0]
 8006fa6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006faa:	2300      	movs	r3, #0
 8006fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fb0:	e7f7      	b.n	8006fa2 <_Balloc+0x58>

08006fb2 <_Bfree>:
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	b93c      	cbnz	r4, 8006fcc <_Bfree+0x1a>
 8006fbc:	2010      	movs	r0, #16
 8006fbe:	f7ff ffb1 	bl	8006f24 <malloc>
 8006fc2:	6270      	str	r0, [r6, #36]	; 0x24
 8006fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fc8:	6004      	str	r4, [r0, #0]
 8006fca:	60c4      	str	r4, [r0, #12]
 8006fcc:	b13d      	cbz	r5, 8006fde <_Bfree+0x2c>
 8006fce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006fd0:	686a      	ldr	r2, [r5, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fd8:	6029      	str	r1, [r5, #0]
 8006fda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006fde:	bd70      	pop	{r4, r5, r6, pc}

08006fe0 <__multadd>:
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	690d      	ldr	r5, [r1, #16]
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	4606      	mov	r6, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	f101 0c14 	add.w	ip, r1, #20
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8dc 0000 	ldr.w	r0, [ip]
 8006ff6:	b281      	uxth	r1, r0
 8006ff8:	fb02 7101 	mla	r1, r2, r1, r7
 8006ffc:	0c0f      	lsrs	r7, r1, #16
 8006ffe:	0c00      	lsrs	r0, r0, #16
 8007000:	fb02 7000 	mla	r0, r2, r0, r7
 8007004:	b289      	uxth	r1, r1
 8007006:	3301      	adds	r3, #1
 8007008:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800700c:	429d      	cmp	r5, r3
 800700e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007012:	f84c 1b04 	str.w	r1, [ip], #4
 8007016:	dcec      	bgt.n	8006ff2 <__multadd+0x12>
 8007018:	b1d7      	cbz	r7, 8007050 <__multadd+0x70>
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	42ab      	cmp	r3, r5
 800701e:	dc12      	bgt.n	8007046 <__multadd+0x66>
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	4630      	mov	r0, r6
 8007024:	3101      	adds	r1, #1
 8007026:	f7ff ff90 	bl	8006f4a <_Balloc>
 800702a:	6922      	ldr	r2, [r4, #16]
 800702c:	3202      	adds	r2, #2
 800702e:	f104 010c 	add.w	r1, r4, #12
 8007032:	4680      	mov	r8, r0
 8007034:	0092      	lsls	r2, r2, #2
 8007036:	300c      	adds	r0, #12
 8007038:	f7ff ff7c 	bl	8006f34 <memcpy>
 800703c:	4621      	mov	r1, r4
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ffb7 	bl	8006fb2 <_Bfree>
 8007044:	4644      	mov	r4, r8
 8007046:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800704a:	3501      	adds	r5, #1
 800704c:	615f      	str	r7, [r3, #20]
 800704e:	6125      	str	r5, [r4, #16]
 8007050:	4620      	mov	r0, r4
 8007052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007056 <__hi0bits>:
 8007056:	0c02      	lsrs	r2, r0, #16
 8007058:	0412      	lsls	r2, r2, #16
 800705a:	4603      	mov	r3, r0
 800705c:	b9b2      	cbnz	r2, 800708c <__hi0bits+0x36>
 800705e:	0403      	lsls	r3, r0, #16
 8007060:	2010      	movs	r0, #16
 8007062:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007066:	bf04      	itt	eq
 8007068:	021b      	lsleq	r3, r3, #8
 800706a:	3008      	addeq	r0, #8
 800706c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007070:	bf04      	itt	eq
 8007072:	011b      	lsleq	r3, r3, #4
 8007074:	3004      	addeq	r0, #4
 8007076:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800707a:	bf04      	itt	eq
 800707c:	009b      	lsleq	r3, r3, #2
 800707e:	3002      	addeq	r0, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	db06      	blt.n	8007092 <__hi0bits+0x3c>
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	d503      	bpl.n	8007090 <__hi0bits+0x3a>
 8007088:	3001      	adds	r0, #1
 800708a:	4770      	bx	lr
 800708c:	2000      	movs	r0, #0
 800708e:	e7e8      	b.n	8007062 <__hi0bits+0xc>
 8007090:	2020      	movs	r0, #32
 8007092:	4770      	bx	lr

08007094 <__lo0bits>:
 8007094:	6803      	ldr	r3, [r0, #0]
 8007096:	f013 0207 	ands.w	r2, r3, #7
 800709a:	4601      	mov	r1, r0
 800709c:	d00b      	beq.n	80070b6 <__lo0bits+0x22>
 800709e:	07da      	lsls	r2, r3, #31
 80070a0:	d423      	bmi.n	80070ea <__lo0bits+0x56>
 80070a2:	0798      	lsls	r0, r3, #30
 80070a4:	bf49      	itett	mi
 80070a6:	085b      	lsrmi	r3, r3, #1
 80070a8:	089b      	lsrpl	r3, r3, #2
 80070aa:	2001      	movmi	r0, #1
 80070ac:	600b      	strmi	r3, [r1, #0]
 80070ae:	bf5c      	itt	pl
 80070b0:	600b      	strpl	r3, [r1, #0]
 80070b2:	2002      	movpl	r0, #2
 80070b4:	4770      	bx	lr
 80070b6:	b298      	uxth	r0, r3
 80070b8:	b9a8      	cbnz	r0, 80070e6 <__lo0bits+0x52>
 80070ba:	0c1b      	lsrs	r3, r3, #16
 80070bc:	2010      	movs	r0, #16
 80070be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070c2:	bf04      	itt	eq
 80070c4:	0a1b      	lsreq	r3, r3, #8
 80070c6:	3008      	addeq	r0, #8
 80070c8:	071a      	lsls	r2, r3, #28
 80070ca:	bf04      	itt	eq
 80070cc:	091b      	lsreq	r3, r3, #4
 80070ce:	3004      	addeq	r0, #4
 80070d0:	079a      	lsls	r2, r3, #30
 80070d2:	bf04      	itt	eq
 80070d4:	089b      	lsreq	r3, r3, #2
 80070d6:	3002      	addeq	r0, #2
 80070d8:	07da      	lsls	r2, r3, #31
 80070da:	d402      	bmi.n	80070e2 <__lo0bits+0x4e>
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	d006      	beq.n	80070ee <__lo0bits+0x5a>
 80070e0:	3001      	adds	r0, #1
 80070e2:	600b      	str	r3, [r1, #0]
 80070e4:	4770      	bx	lr
 80070e6:	4610      	mov	r0, r2
 80070e8:	e7e9      	b.n	80070be <__lo0bits+0x2a>
 80070ea:	2000      	movs	r0, #0
 80070ec:	4770      	bx	lr
 80070ee:	2020      	movs	r0, #32
 80070f0:	4770      	bx	lr

080070f2 <__i2b>:
 80070f2:	b510      	push	{r4, lr}
 80070f4:	460c      	mov	r4, r1
 80070f6:	2101      	movs	r1, #1
 80070f8:	f7ff ff27 	bl	8006f4a <_Balloc>
 80070fc:	2201      	movs	r2, #1
 80070fe:	6144      	str	r4, [r0, #20]
 8007100:	6102      	str	r2, [r0, #16]
 8007102:	bd10      	pop	{r4, pc}

08007104 <__multiply>:
 8007104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	4614      	mov	r4, r2
 800710a:	690a      	ldr	r2, [r1, #16]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	bfb8      	it	lt
 8007112:	460b      	movlt	r3, r1
 8007114:	4688      	mov	r8, r1
 8007116:	bfbc      	itt	lt
 8007118:	46a0      	movlt	r8, r4
 800711a:	461c      	movlt	r4, r3
 800711c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007120:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007124:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007128:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800712c:	eb07 0609 	add.w	r6, r7, r9
 8007130:	42b3      	cmp	r3, r6
 8007132:	bfb8      	it	lt
 8007134:	3101      	addlt	r1, #1
 8007136:	f7ff ff08 	bl	8006f4a <_Balloc>
 800713a:	f100 0514 	add.w	r5, r0, #20
 800713e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007142:	462b      	mov	r3, r5
 8007144:	2200      	movs	r2, #0
 8007146:	4573      	cmp	r3, lr
 8007148:	d316      	bcc.n	8007178 <__multiply+0x74>
 800714a:	f104 0214 	add.w	r2, r4, #20
 800714e:	f108 0114 	add.w	r1, r8, #20
 8007152:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007156:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	9201      	str	r2, [sp, #4]
 8007160:	4293      	cmp	r3, r2
 8007162:	d80c      	bhi.n	800717e <__multiply+0x7a>
 8007164:	2e00      	cmp	r6, #0
 8007166:	dd03      	ble.n	8007170 <__multiply+0x6c>
 8007168:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800716c:	2b00      	cmp	r3, #0
 800716e:	d05d      	beq.n	800722c <__multiply+0x128>
 8007170:	6106      	str	r6, [r0, #16]
 8007172:	b003      	add	sp, #12
 8007174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007178:	f843 2b04 	str.w	r2, [r3], #4
 800717c:	e7e3      	b.n	8007146 <__multiply+0x42>
 800717e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007182:	f1bb 0f00 	cmp.w	fp, #0
 8007186:	d023      	beq.n	80071d0 <__multiply+0xcc>
 8007188:	4689      	mov	r9, r1
 800718a:	46ac      	mov	ip, r5
 800718c:	f04f 0800 	mov.w	r8, #0
 8007190:	f859 4b04 	ldr.w	r4, [r9], #4
 8007194:	f8dc a000 	ldr.w	sl, [ip]
 8007198:	b2a3      	uxth	r3, r4
 800719a:	fa1f fa8a 	uxth.w	sl, sl
 800719e:	fb0b a303 	mla	r3, fp, r3, sl
 80071a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071a6:	f8dc 4000 	ldr.w	r4, [ip]
 80071aa:	4443      	add	r3, r8
 80071ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071b0:	fb0b 840a 	mla	r4, fp, sl, r8
 80071b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071b8:	46e2      	mov	sl, ip
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071c0:	454f      	cmp	r7, r9
 80071c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071c6:	f84a 3b04 	str.w	r3, [sl], #4
 80071ca:	d82b      	bhi.n	8007224 <__multiply+0x120>
 80071cc:	f8cc 8004 	str.w	r8, [ip, #4]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80071d6:	3204      	adds	r2, #4
 80071d8:	f1ba 0f00 	cmp.w	sl, #0
 80071dc:	d020      	beq.n	8007220 <__multiply+0x11c>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	4689      	mov	r9, r1
 80071e2:	46a8      	mov	r8, r5
 80071e4:	f04f 0b00 	mov.w	fp, #0
 80071e8:	f8b9 c000 	ldrh.w	ip, [r9]
 80071ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80071f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80071f4:	445c      	add	r4, fp
 80071f6:	46c4      	mov	ip, r8
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007202:	f859 3b04 	ldr.w	r3, [r9], #4
 8007206:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	fb0a b303 	mla	r3, sl, r3, fp
 8007210:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007214:	454f      	cmp	r7, r9
 8007216:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800721a:	d805      	bhi.n	8007228 <__multiply+0x124>
 800721c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007220:	3504      	adds	r5, #4
 8007222:	e79b      	b.n	800715c <__multiply+0x58>
 8007224:	46d4      	mov	ip, sl
 8007226:	e7b3      	b.n	8007190 <__multiply+0x8c>
 8007228:	46e0      	mov	r8, ip
 800722a:	e7dd      	b.n	80071e8 <__multiply+0xe4>
 800722c:	3e01      	subs	r6, #1
 800722e:	e799      	b.n	8007164 <__multiply+0x60>

08007230 <__pow5mult>:
 8007230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007234:	4615      	mov	r5, r2
 8007236:	f012 0203 	ands.w	r2, r2, #3
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	d007      	beq.n	8007250 <__pow5mult+0x20>
 8007240:	3a01      	subs	r2, #1
 8007242:	4c21      	ldr	r4, [pc, #132]	; (80072c8 <__pow5mult+0x98>)
 8007244:	2300      	movs	r3, #0
 8007246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800724a:	f7ff fec9 	bl	8006fe0 <__multadd>
 800724e:	4607      	mov	r7, r0
 8007250:	10ad      	asrs	r5, r5, #2
 8007252:	d035      	beq.n	80072c0 <__pow5mult+0x90>
 8007254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007256:	b93c      	cbnz	r4, 8007268 <__pow5mult+0x38>
 8007258:	2010      	movs	r0, #16
 800725a:	f7ff fe63 	bl	8006f24 <malloc>
 800725e:	6270      	str	r0, [r6, #36]	; 0x24
 8007260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007264:	6004      	str	r4, [r0, #0]
 8007266:	60c4      	str	r4, [r0, #12]
 8007268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800726c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007270:	b94c      	cbnz	r4, 8007286 <__pow5mult+0x56>
 8007272:	f240 2171 	movw	r1, #625	; 0x271
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ff3b 	bl	80070f2 <__i2b>
 800727c:	2300      	movs	r3, #0
 800727e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007282:	4604      	mov	r4, r0
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	f04f 0800 	mov.w	r8, #0
 800728a:	07eb      	lsls	r3, r5, #31
 800728c:	d50a      	bpl.n	80072a4 <__pow5mult+0x74>
 800728e:	4639      	mov	r1, r7
 8007290:	4622      	mov	r2, r4
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ff36 	bl	8007104 <__multiply>
 8007298:	4639      	mov	r1, r7
 800729a:	4681      	mov	r9, r0
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff fe88 	bl	8006fb2 <_Bfree>
 80072a2:	464f      	mov	r7, r9
 80072a4:	106d      	asrs	r5, r5, #1
 80072a6:	d00b      	beq.n	80072c0 <__pow5mult+0x90>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	b938      	cbnz	r0, 80072bc <__pow5mult+0x8c>
 80072ac:	4622      	mov	r2, r4
 80072ae:	4621      	mov	r1, r4
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7ff ff27 	bl	8007104 <__multiply>
 80072b6:	6020      	str	r0, [r4, #0]
 80072b8:	f8c0 8000 	str.w	r8, [r0]
 80072bc:	4604      	mov	r4, r0
 80072be:	e7e4      	b.n	800728a <__pow5mult+0x5a>
 80072c0:	4638      	mov	r0, r7
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	bf00      	nop
 80072c8:	08007f70 	.word	0x08007f70

080072cc <__lshift>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	460c      	mov	r4, r1
 80072d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6849      	ldr	r1, [r1, #4]
 80072da:	eb0a 0903 	add.w	r9, sl, r3
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	4607      	mov	r7, r0
 80072e2:	4616      	mov	r6, r2
 80072e4:	f109 0501 	add.w	r5, r9, #1
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	db32      	blt.n	8007352 <__lshift+0x86>
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff fe2c 	bl	8006f4a <_Balloc>
 80072f2:	2300      	movs	r3, #0
 80072f4:	4680      	mov	r8, r0
 80072f6:	f100 0114 	add.w	r1, r0, #20
 80072fa:	461a      	mov	r2, r3
 80072fc:	4553      	cmp	r3, sl
 80072fe:	db2b      	blt.n	8007358 <__lshift+0x8c>
 8007300:	6920      	ldr	r0, [r4, #16]
 8007302:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007306:	f104 0314 	add.w	r3, r4, #20
 800730a:	f016 021f 	ands.w	r2, r6, #31
 800730e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007312:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007316:	d025      	beq.n	8007364 <__lshift+0x98>
 8007318:	f1c2 0e20 	rsb	lr, r2, #32
 800731c:	2000      	movs	r0, #0
 800731e:	681e      	ldr	r6, [r3, #0]
 8007320:	468a      	mov	sl, r1
 8007322:	4096      	lsls	r6, r2
 8007324:	4330      	orrs	r0, r6
 8007326:	f84a 0b04 	str.w	r0, [sl], #4
 800732a:	f853 0b04 	ldr.w	r0, [r3], #4
 800732e:	459c      	cmp	ip, r3
 8007330:	fa20 f00e 	lsr.w	r0, r0, lr
 8007334:	d814      	bhi.n	8007360 <__lshift+0x94>
 8007336:	6048      	str	r0, [r1, #4]
 8007338:	b108      	cbz	r0, 800733e <__lshift+0x72>
 800733a:	f109 0502 	add.w	r5, r9, #2
 800733e:	3d01      	subs	r5, #1
 8007340:	4638      	mov	r0, r7
 8007342:	f8c8 5010 	str.w	r5, [r8, #16]
 8007346:	4621      	mov	r1, r4
 8007348:	f7ff fe33 	bl	8006fb2 <_Bfree>
 800734c:	4640      	mov	r0, r8
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	3101      	adds	r1, #1
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	e7c7      	b.n	80072e8 <__lshift+0x1c>
 8007358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800735c:	3301      	adds	r3, #1
 800735e:	e7cd      	b.n	80072fc <__lshift+0x30>
 8007360:	4651      	mov	r1, sl
 8007362:	e7dc      	b.n	800731e <__lshift+0x52>
 8007364:	3904      	subs	r1, #4
 8007366:	f853 2b04 	ldr.w	r2, [r3], #4
 800736a:	f841 2f04 	str.w	r2, [r1, #4]!
 800736e:	459c      	cmp	ip, r3
 8007370:	d8f9      	bhi.n	8007366 <__lshift+0x9a>
 8007372:	e7e4      	b.n	800733e <__lshift+0x72>

08007374 <__mcmp>:
 8007374:	6903      	ldr	r3, [r0, #16]
 8007376:	690a      	ldr	r2, [r1, #16]
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	b530      	push	{r4, r5, lr}
 800737c:	d10c      	bne.n	8007398 <__mcmp+0x24>
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	3014      	adds	r0, #20
 8007382:	3114      	adds	r1, #20
 8007384:	1884      	adds	r4, r0, r2
 8007386:	4411      	add	r1, r2
 8007388:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800738c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007390:	4295      	cmp	r5, r2
 8007392:	d003      	beq.n	800739c <__mcmp+0x28>
 8007394:	d305      	bcc.n	80073a2 <__mcmp+0x2e>
 8007396:	2301      	movs	r3, #1
 8007398:	4618      	mov	r0, r3
 800739a:	bd30      	pop	{r4, r5, pc}
 800739c:	42a0      	cmp	r0, r4
 800739e:	d3f3      	bcc.n	8007388 <__mcmp+0x14>
 80073a0:	e7fa      	b.n	8007398 <__mcmp+0x24>
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	e7f7      	b.n	8007398 <__mcmp+0x24>

080073a8 <__mdiff>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	460d      	mov	r5, r1
 80073ae:	4607      	mov	r7, r0
 80073b0:	4611      	mov	r1, r2
 80073b2:	4628      	mov	r0, r5
 80073b4:	4614      	mov	r4, r2
 80073b6:	f7ff ffdd 	bl	8007374 <__mcmp>
 80073ba:	1e06      	subs	r6, r0, #0
 80073bc:	d108      	bne.n	80073d0 <__mdiff+0x28>
 80073be:	4631      	mov	r1, r6
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fdc2 	bl	8006f4a <_Balloc>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	bfa4      	itt	ge
 80073d2:	4623      	movge	r3, r4
 80073d4:	462c      	movge	r4, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	bfa6      	itte	ge
 80073dc:	461d      	movge	r5, r3
 80073de:	2600      	movge	r6, #0
 80073e0:	2601      	movlt	r6, #1
 80073e2:	f7ff fdb2 	bl	8006f4a <_Balloc>
 80073e6:	692b      	ldr	r3, [r5, #16]
 80073e8:	60c6      	str	r6, [r0, #12]
 80073ea:	6926      	ldr	r6, [r4, #16]
 80073ec:	f105 0914 	add.w	r9, r5, #20
 80073f0:	f104 0214 	add.w	r2, r4, #20
 80073f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80073f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80073fc:	f100 0514 	add.w	r5, r0, #20
 8007400:	f04f 0e00 	mov.w	lr, #0
 8007404:	f852 ab04 	ldr.w	sl, [r2], #4
 8007408:	f859 4b04 	ldr.w	r4, [r9], #4
 800740c:	fa1e f18a 	uxtah	r1, lr, sl
 8007410:	b2a3      	uxth	r3, r4
 8007412:	1ac9      	subs	r1, r1, r3
 8007414:	0c23      	lsrs	r3, r4, #16
 8007416:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800741a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800741e:	b289      	uxth	r1, r1
 8007420:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007424:	45c8      	cmp	r8, r9
 8007426:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800742a:	4694      	mov	ip, r2
 800742c:	f845 3b04 	str.w	r3, [r5], #4
 8007430:	d8e8      	bhi.n	8007404 <__mdiff+0x5c>
 8007432:	45bc      	cmp	ip, r7
 8007434:	d304      	bcc.n	8007440 <__mdiff+0x98>
 8007436:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800743a:	b183      	cbz	r3, 800745e <__mdiff+0xb6>
 800743c:	6106      	str	r6, [r0, #16]
 800743e:	e7c5      	b.n	80073cc <__mdiff+0x24>
 8007440:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007444:	fa1e f381 	uxtah	r3, lr, r1
 8007448:	141a      	asrs	r2, r3, #16
 800744a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800744e:	b29b      	uxth	r3, r3
 8007450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007454:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007458:	f845 3b04 	str.w	r3, [r5], #4
 800745c:	e7e9      	b.n	8007432 <__mdiff+0x8a>
 800745e:	3e01      	subs	r6, #1
 8007460:	e7e9      	b.n	8007436 <__mdiff+0x8e>

08007462 <__d2b>:
 8007462:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007466:	460e      	mov	r6, r1
 8007468:	2101      	movs	r1, #1
 800746a:	ec59 8b10 	vmov	r8, r9, d0
 800746e:	4615      	mov	r5, r2
 8007470:	f7ff fd6b 	bl	8006f4a <_Balloc>
 8007474:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007478:	4607      	mov	r7, r0
 800747a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800747e:	bb34      	cbnz	r4, 80074ce <__d2b+0x6c>
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	f1b8 0300 	subs.w	r3, r8, #0
 8007486:	d027      	beq.n	80074d8 <__d2b+0x76>
 8007488:	a802      	add	r0, sp, #8
 800748a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800748e:	f7ff fe01 	bl	8007094 <__lo0bits>
 8007492:	9900      	ldr	r1, [sp, #0]
 8007494:	b1f0      	cbz	r0, 80074d4 <__d2b+0x72>
 8007496:	9a01      	ldr	r2, [sp, #4]
 8007498:	f1c0 0320 	rsb	r3, r0, #32
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	430b      	orrs	r3, r1
 80074a2:	40c2      	lsrs	r2, r0
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	9201      	str	r2, [sp, #4]
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf14      	ite	ne
 80074b0:	2102      	movne	r1, #2
 80074b2:	2101      	moveq	r1, #1
 80074b4:	6139      	str	r1, [r7, #16]
 80074b6:	b1c4      	cbz	r4, 80074ea <__d2b+0x88>
 80074b8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80074bc:	4404      	add	r4, r0
 80074be:	6034      	str	r4, [r6, #0]
 80074c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074c4:	6028      	str	r0, [r5, #0]
 80074c6:	4638      	mov	r0, r7
 80074c8:	b003      	add	sp, #12
 80074ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d2:	e7d5      	b.n	8007480 <__d2b+0x1e>
 80074d4:	6179      	str	r1, [r7, #20]
 80074d6:	e7e7      	b.n	80074a8 <__d2b+0x46>
 80074d8:	a801      	add	r0, sp, #4
 80074da:	f7ff fddb 	bl	8007094 <__lo0bits>
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	2101      	movs	r1, #1
 80074e4:	6139      	str	r1, [r7, #16]
 80074e6:	3020      	adds	r0, #32
 80074e8:	e7e5      	b.n	80074b6 <__d2b+0x54>
 80074ea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80074ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074f2:	6030      	str	r0, [r6, #0]
 80074f4:	6918      	ldr	r0, [r3, #16]
 80074f6:	f7ff fdae 	bl	8007056 <__hi0bits>
 80074fa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80074fe:	e7e1      	b.n	80074c4 <__d2b+0x62>

08007500 <_calloc_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	fb02 f401 	mul.w	r4, r2, r1
 8007506:	4621      	mov	r1, r4
 8007508:	f000 f856 	bl	80075b8 <_malloc_r>
 800750c:	4605      	mov	r5, r0
 800750e:	b118      	cbz	r0, 8007518 <_calloc_r+0x18>
 8007510:	4622      	mov	r2, r4
 8007512:	2100      	movs	r1, #0
 8007514:	f7fe fa2e 	bl	8005974 <memset>
 8007518:	4628      	mov	r0, r5
 800751a:	bd38      	pop	{r3, r4, r5, pc}

0800751c <_free_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4605      	mov	r5, r0
 8007520:	2900      	cmp	r1, #0
 8007522:	d045      	beq.n	80075b0 <_free_r+0x94>
 8007524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007528:	1f0c      	subs	r4, r1, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	bfb8      	it	lt
 800752e:	18e4      	addlt	r4, r4, r3
 8007530:	f000 fa29 	bl	8007986 <__malloc_lock>
 8007534:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <_free_r+0x98>)
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	4610      	mov	r0, r2
 800753a:	b933      	cbnz	r3, 800754a <_free_r+0x2e>
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	6014      	str	r4, [r2, #0]
 8007540:	4628      	mov	r0, r5
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f000 ba1f 	b.w	8007988 <__malloc_unlock>
 800754a:	42a3      	cmp	r3, r4
 800754c:	d90c      	bls.n	8007568 <_free_r+0x4c>
 800754e:	6821      	ldr	r1, [r4, #0]
 8007550:	1862      	adds	r2, r4, r1
 8007552:	4293      	cmp	r3, r2
 8007554:	bf04      	itt	eq
 8007556:	681a      	ldreq	r2, [r3, #0]
 8007558:	685b      	ldreq	r3, [r3, #4]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	bf04      	itt	eq
 800755e:	1852      	addeq	r2, r2, r1
 8007560:	6022      	streq	r2, [r4, #0]
 8007562:	6004      	str	r4, [r0, #0]
 8007564:	e7ec      	b.n	8007540 <_free_r+0x24>
 8007566:	4613      	mov	r3, r2
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	b10a      	cbz	r2, 8007570 <_free_r+0x54>
 800756c:	42a2      	cmp	r2, r4
 800756e:	d9fa      	bls.n	8007566 <_free_r+0x4a>
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	1858      	adds	r0, r3, r1
 8007574:	42a0      	cmp	r0, r4
 8007576:	d10b      	bne.n	8007590 <_free_r+0x74>
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	4401      	add	r1, r0
 800757c:	1858      	adds	r0, r3, r1
 800757e:	4282      	cmp	r2, r0
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	d1dd      	bne.n	8007540 <_free_r+0x24>
 8007584:	6810      	ldr	r0, [r2, #0]
 8007586:	6852      	ldr	r2, [r2, #4]
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	4401      	add	r1, r0
 800758c:	6019      	str	r1, [r3, #0]
 800758e:	e7d7      	b.n	8007540 <_free_r+0x24>
 8007590:	d902      	bls.n	8007598 <_free_r+0x7c>
 8007592:	230c      	movs	r3, #12
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	e7d3      	b.n	8007540 <_free_r+0x24>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	1821      	adds	r1, r4, r0
 800759c:	428a      	cmp	r2, r1
 800759e:	bf04      	itt	eq
 80075a0:	6811      	ldreq	r1, [r2, #0]
 80075a2:	6852      	ldreq	r2, [r2, #4]
 80075a4:	6062      	str	r2, [r4, #4]
 80075a6:	bf04      	itt	eq
 80075a8:	1809      	addeq	r1, r1, r0
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	605c      	str	r4, [r3, #4]
 80075ae:	e7c7      	b.n	8007540 <_free_r+0x24>
 80075b0:	bd38      	pop	{r3, r4, r5, pc}
 80075b2:	bf00      	nop
 80075b4:	2000080c 	.word	0x2000080c

080075b8 <_malloc_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	1ccd      	adds	r5, r1, #3
 80075bc:	f025 0503 	bic.w	r5, r5, #3
 80075c0:	3508      	adds	r5, #8
 80075c2:	2d0c      	cmp	r5, #12
 80075c4:	bf38      	it	cc
 80075c6:	250c      	movcc	r5, #12
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	4606      	mov	r6, r0
 80075cc:	db01      	blt.n	80075d2 <_malloc_r+0x1a>
 80075ce:	42a9      	cmp	r1, r5
 80075d0:	d903      	bls.n	80075da <_malloc_r+0x22>
 80075d2:	230c      	movs	r3, #12
 80075d4:	6033      	str	r3, [r6, #0]
 80075d6:	2000      	movs	r0, #0
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	f000 f9d4 	bl	8007986 <__malloc_lock>
 80075de:	4a21      	ldr	r2, [pc, #132]	; (8007664 <_malloc_r+0xac>)
 80075e0:	6814      	ldr	r4, [r2, #0]
 80075e2:	4621      	mov	r1, r4
 80075e4:	b991      	cbnz	r1, 800760c <_malloc_r+0x54>
 80075e6:	4c20      	ldr	r4, [pc, #128]	; (8007668 <_malloc_r+0xb0>)
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	b91b      	cbnz	r3, 80075f4 <_malloc_r+0x3c>
 80075ec:	4630      	mov	r0, r6
 80075ee:	f000 f98f 	bl	8007910 <_sbrk_r>
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	4629      	mov	r1, r5
 80075f6:	4630      	mov	r0, r6
 80075f8:	f000 f98a 	bl	8007910 <_sbrk_r>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d124      	bne.n	800764a <_malloc_r+0x92>
 8007600:	230c      	movs	r3, #12
 8007602:	6033      	str	r3, [r6, #0]
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f9bf 	bl	8007988 <__malloc_unlock>
 800760a:	e7e4      	b.n	80075d6 <_malloc_r+0x1e>
 800760c:	680b      	ldr	r3, [r1, #0]
 800760e:	1b5b      	subs	r3, r3, r5
 8007610:	d418      	bmi.n	8007644 <_malloc_r+0x8c>
 8007612:	2b0b      	cmp	r3, #11
 8007614:	d90f      	bls.n	8007636 <_malloc_r+0x7e>
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	50cd      	str	r5, [r1, r3]
 800761a:	18cc      	adds	r4, r1, r3
 800761c:	4630      	mov	r0, r6
 800761e:	f000 f9b3 	bl	8007988 <__malloc_unlock>
 8007622:	f104 000b 	add.w	r0, r4, #11
 8007626:	1d23      	adds	r3, r4, #4
 8007628:	f020 0007 	bic.w	r0, r0, #7
 800762c:	1ac3      	subs	r3, r0, r3
 800762e:	d0d3      	beq.n	80075d8 <_malloc_r+0x20>
 8007630:	425a      	negs	r2, r3
 8007632:	50e2      	str	r2, [r4, r3]
 8007634:	e7d0      	b.n	80075d8 <_malloc_r+0x20>
 8007636:	428c      	cmp	r4, r1
 8007638:	684b      	ldr	r3, [r1, #4]
 800763a:	bf16      	itet	ne
 800763c:	6063      	strne	r3, [r4, #4]
 800763e:	6013      	streq	r3, [r2, #0]
 8007640:	460c      	movne	r4, r1
 8007642:	e7eb      	b.n	800761c <_malloc_r+0x64>
 8007644:	460c      	mov	r4, r1
 8007646:	6849      	ldr	r1, [r1, #4]
 8007648:	e7cc      	b.n	80075e4 <_malloc_r+0x2c>
 800764a:	1cc4      	adds	r4, r0, #3
 800764c:	f024 0403 	bic.w	r4, r4, #3
 8007650:	42a0      	cmp	r0, r4
 8007652:	d005      	beq.n	8007660 <_malloc_r+0xa8>
 8007654:	1a21      	subs	r1, r4, r0
 8007656:	4630      	mov	r0, r6
 8007658:	f000 f95a 	bl	8007910 <_sbrk_r>
 800765c:	3001      	adds	r0, #1
 800765e:	d0cf      	beq.n	8007600 <_malloc_r+0x48>
 8007660:	6025      	str	r5, [r4, #0]
 8007662:	e7db      	b.n	800761c <_malloc_r+0x64>
 8007664:	2000080c 	.word	0x2000080c
 8007668:	20000810 	.word	0x20000810

0800766c <__ssputs_r>:
 800766c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	688e      	ldr	r6, [r1, #8]
 8007672:	429e      	cmp	r6, r3
 8007674:	4682      	mov	sl, r0
 8007676:	460c      	mov	r4, r1
 8007678:	4690      	mov	r8, r2
 800767a:	4699      	mov	r9, r3
 800767c:	d837      	bhi.n	80076ee <__ssputs_r+0x82>
 800767e:	898a      	ldrh	r2, [r1, #12]
 8007680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007684:	d031      	beq.n	80076ea <__ssputs_r+0x7e>
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	6909      	ldr	r1, [r1, #16]
 800768a:	1a6f      	subs	r7, r5, r1
 800768c:	6965      	ldr	r5, [r4, #20]
 800768e:	2302      	movs	r3, #2
 8007690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007694:	fb95 f5f3 	sdiv	r5, r5, r3
 8007698:	f109 0301 	add.w	r3, r9, #1
 800769c:	443b      	add	r3, r7
 800769e:	429d      	cmp	r5, r3
 80076a0:	bf38      	it	cc
 80076a2:	461d      	movcc	r5, r3
 80076a4:	0553      	lsls	r3, r2, #21
 80076a6:	d530      	bpl.n	800770a <__ssputs_r+0x9e>
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7ff ff85 	bl	80075b8 <_malloc_r>
 80076ae:	4606      	mov	r6, r0
 80076b0:	b950      	cbnz	r0, 80076c8 <__ssputs_r+0x5c>
 80076b2:	230c      	movs	r3, #12
 80076b4:	f8ca 3000 	str.w	r3, [sl]
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c8:	463a      	mov	r2, r7
 80076ca:	6921      	ldr	r1, [r4, #16]
 80076cc:	f7ff fc32 	bl	8006f34 <memcpy>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	6126      	str	r6, [r4, #16]
 80076de:	6165      	str	r5, [r4, #20]
 80076e0:	443e      	add	r6, r7
 80076e2:	1bed      	subs	r5, r5, r7
 80076e4:	6026      	str	r6, [r4, #0]
 80076e6:	60a5      	str	r5, [r4, #8]
 80076e8:	464e      	mov	r6, r9
 80076ea:	454e      	cmp	r6, r9
 80076ec:	d900      	bls.n	80076f0 <__ssputs_r+0x84>
 80076ee:	464e      	mov	r6, r9
 80076f0:	4632      	mov	r2, r6
 80076f2:	4641      	mov	r1, r8
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	f000 f92d 	bl	8007954 <memmove>
 80076fa:	68a3      	ldr	r3, [r4, #8]
 80076fc:	1b9b      	subs	r3, r3, r6
 80076fe:	60a3      	str	r3, [r4, #8]
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	441e      	add	r6, r3
 8007704:	6026      	str	r6, [r4, #0]
 8007706:	2000      	movs	r0, #0
 8007708:	e7dc      	b.n	80076c4 <__ssputs_r+0x58>
 800770a:	462a      	mov	r2, r5
 800770c:	f000 f93d 	bl	800798a <_realloc_r>
 8007710:	4606      	mov	r6, r0
 8007712:	2800      	cmp	r0, #0
 8007714:	d1e2      	bne.n	80076dc <__ssputs_r+0x70>
 8007716:	6921      	ldr	r1, [r4, #16]
 8007718:	4650      	mov	r0, sl
 800771a:	f7ff feff 	bl	800751c <_free_r>
 800771e:	e7c8      	b.n	80076b2 <__ssputs_r+0x46>

08007720 <_svfiprintf_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	461d      	mov	r5, r3
 8007726:	898b      	ldrh	r3, [r1, #12]
 8007728:	061f      	lsls	r7, r3, #24
 800772a:	b09d      	sub	sp, #116	; 0x74
 800772c:	4680      	mov	r8, r0
 800772e:	460c      	mov	r4, r1
 8007730:	4616      	mov	r6, r2
 8007732:	d50f      	bpl.n	8007754 <_svfiprintf_r+0x34>
 8007734:	690b      	ldr	r3, [r1, #16]
 8007736:	b96b      	cbnz	r3, 8007754 <_svfiprintf_r+0x34>
 8007738:	2140      	movs	r1, #64	; 0x40
 800773a:	f7ff ff3d 	bl	80075b8 <_malloc_r>
 800773e:	6020      	str	r0, [r4, #0]
 8007740:	6120      	str	r0, [r4, #16]
 8007742:	b928      	cbnz	r0, 8007750 <_svfiprintf_r+0x30>
 8007744:	230c      	movs	r3, #12
 8007746:	f8c8 3000 	str.w	r3, [r8]
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	e0c8      	b.n	80078e2 <_svfiprintf_r+0x1c2>
 8007750:	2340      	movs	r3, #64	; 0x40
 8007752:	6163      	str	r3, [r4, #20]
 8007754:	2300      	movs	r3, #0
 8007756:	9309      	str	r3, [sp, #36]	; 0x24
 8007758:	2320      	movs	r3, #32
 800775a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800775e:	2330      	movs	r3, #48	; 0x30
 8007760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007764:	9503      	str	r5, [sp, #12]
 8007766:	f04f 0b01 	mov.w	fp, #1
 800776a:	4637      	mov	r7, r6
 800776c:	463d      	mov	r5, r7
 800776e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007772:	b10b      	cbz	r3, 8007778 <_svfiprintf_r+0x58>
 8007774:	2b25      	cmp	r3, #37	; 0x25
 8007776:	d13e      	bne.n	80077f6 <_svfiprintf_r+0xd6>
 8007778:	ebb7 0a06 	subs.w	sl, r7, r6
 800777c:	d00b      	beq.n	8007796 <_svfiprintf_r+0x76>
 800777e:	4653      	mov	r3, sl
 8007780:	4632      	mov	r2, r6
 8007782:	4621      	mov	r1, r4
 8007784:	4640      	mov	r0, r8
 8007786:	f7ff ff71 	bl	800766c <__ssputs_r>
 800778a:	3001      	adds	r0, #1
 800778c:	f000 80a4 	beq.w	80078d8 <_svfiprintf_r+0x1b8>
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	4453      	add	r3, sl
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	783b      	ldrb	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 809d 	beq.w	80078d8 <_svfiprintf_r+0x1b8>
 800779e:	2300      	movs	r3, #0
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077b0:	931a      	str	r3, [sp, #104]	; 0x68
 80077b2:	462f      	mov	r7, r5
 80077b4:	2205      	movs	r2, #5
 80077b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80077ba:	4850      	ldr	r0, [pc, #320]	; (80078fc <_svfiprintf_r+0x1dc>)
 80077bc:	f7f8 fd10 	bl	80001e0 <memchr>
 80077c0:	9b04      	ldr	r3, [sp, #16]
 80077c2:	b9d0      	cbnz	r0, 80077fa <_svfiprintf_r+0xda>
 80077c4:	06d9      	lsls	r1, r3, #27
 80077c6:	bf44      	itt	mi
 80077c8:	2220      	movmi	r2, #32
 80077ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077ce:	071a      	lsls	r2, r3, #28
 80077d0:	bf44      	itt	mi
 80077d2:	222b      	movmi	r2, #43	; 0x2b
 80077d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077d8:	782a      	ldrb	r2, [r5, #0]
 80077da:	2a2a      	cmp	r2, #42	; 0x2a
 80077dc:	d015      	beq.n	800780a <_svfiprintf_r+0xea>
 80077de:	9a07      	ldr	r2, [sp, #28]
 80077e0:	462f      	mov	r7, r5
 80077e2:	2000      	movs	r0, #0
 80077e4:	250a      	movs	r5, #10
 80077e6:	4639      	mov	r1, r7
 80077e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ec:	3b30      	subs	r3, #48	; 0x30
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d94d      	bls.n	800788e <_svfiprintf_r+0x16e>
 80077f2:	b1b8      	cbz	r0, 8007824 <_svfiprintf_r+0x104>
 80077f4:	e00f      	b.n	8007816 <_svfiprintf_r+0xf6>
 80077f6:	462f      	mov	r7, r5
 80077f8:	e7b8      	b.n	800776c <_svfiprintf_r+0x4c>
 80077fa:	4a40      	ldr	r2, [pc, #256]	; (80078fc <_svfiprintf_r+0x1dc>)
 80077fc:	1a80      	subs	r0, r0, r2
 80077fe:	fa0b f000 	lsl.w	r0, fp, r0
 8007802:	4318      	orrs	r0, r3
 8007804:	9004      	str	r0, [sp, #16]
 8007806:	463d      	mov	r5, r7
 8007808:	e7d3      	b.n	80077b2 <_svfiprintf_r+0x92>
 800780a:	9a03      	ldr	r2, [sp, #12]
 800780c:	1d11      	adds	r1, r2, #4
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	2a00      	cmp	r2, #0
 8007814:	db01      	blt.n	800781a <_svfiprintf_r+0xfa>
 8007816:	9207      	str	r2, [sp, #28]
 8007818:	e004      	b.n	8007824 <_svfiprintf_r+0x104>
 800781a:	4252      	negs	r2, r2
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	9207      	str	r2, [sp, #28]
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	783b      	ldrb	r3, [r7, #0]
 8007826:	2b2e      	cmp	r3, #46	; 0x2e
 8007828:	d10c      	bne.n	8007844 <_svfiprintf_r+0x124>
 800782a:	787b      	ldrb	r3, [r7, #1]
 800782c:	2b2a      	cmp	r3, #42	; 0x2a
 800782e:	d133      	bne.n	8007898 <_svfiprintf_r+0x178>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	9203      	str	r2, [sp, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfb8      	it	lt
 800783c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007840:	3702      	adds	r7, #2
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	4d2e      	ldr	r5, [pc, #184]	; (8007900 <_svfiprintf_r+0x1e0>)
 8007846:	7839      	ldrb	r1, [r7, #0]
 8007848:	2203      	movs	r2, #3
 800784a:	4628      	mov	r0, r5
 800784c:	f7f8 fcc8 	bl	80001e0 <memchr>
 8007850:	b138      	cbz	r0, 8007862 <_svfiprintf_r+0x142>
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	1b40      	subs	r0, r0, r5
 8007856:	fa03 f000 	lsl.w	r0, r3, r0
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	4303      	orrs	r3, r0
 800785e:	3701      	adds	r7, #1
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	7839      	ldrb	r1, [r7, #0]
 8007864:	4827      	ldr	r0, [pc, #156]	; (8007904 <_svfiprintf_r+0x1e4>)
 8007866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800786a:	2206      	movs	r2, #6
 800786c:	1c7e      	adds	r6, r7, #1
 800786e:	f7f8 fcb7 	bl	80001e0 <memchr>
 8007872:	2800      	cmp	r0, #0
 8007874:	d038      	beq.n	80078e8 <_svfiprintf_r+0x1c8>
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <_svfiprintf_r+0x1e8>)
 8007878:	bb13      	cbnz	r3, 80078c0 <_svfiprintf_r+0x1a0>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	3307      	adds	r3, #7
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	3308      	adds	r3, #8
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	444b      	add	r3, r9
 800788a:	9309      	str	r3, [sp, #36]	; 0x24
 800788c:	e76d      	b.n	800776a <_svfiprintf_r+0x4a>
 800788e:	fb05 3202 	mla	r2, r5, r2, r3
 8007892:	2001      	movs	r0, #1
 8007894:	460f      	mov	r7, r1
 8007896:	e7a6      	b.n	80077e6 <_svfiprintf_r+0xc6>
 8007898:	2300      	movs	r3, #0
 800789a:	3701      	adds	r7, #1
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	4619      	mov	r1, r3
 80078a0:	250a      	movs	r5, #10
 80078a2:	4638      	mov	r0, r7
 80078a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a8:	3a30      	subs	r2, #48	; 0x30
 80078aa:	2a09      	cmp	r2, #9
 80078ac:	d903      	bls.n	80078b6 <_svfiprintf_r+0x196>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0c8      	beq.n	8007844 <_svfiprintf_r+0x124>
 80078b2:	9105      	str	r1, [sp, #20]
 80078b4:	e7c6      	b.n	8007844 <_svfiprintf_r+0x124>
 80078b6:	fb05 2101 	mla	r1, r5, r1, r2
 80078ba:	2301      	movs	r3, #1
 80078bc:	4607      	mov	r7, r0
 80078be:	e7f0      	b.n	80078a2 <_svfiprintf_r+0x182>
 80078c0:	ab03      	add	r3, sp, #12
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4622      	mov	r2, r4
 80078c6:	4b11      	ldr	r3, [pc, #68]	; (800790c <_svfiprintf_r+0x1ec>)
 80078c8:	a904      	add	r1, sp, #16
 80078ca:	4640      	mov	r0, r8
 80078cc:	f7fe f8ee 	bl	8005aac <_printf_float>
 80078d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078d4:	4681      	mov	r9, r0
 80078d6:	d1d6      	bne.n	8007886 <_svfiprintf_r+0x166>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	065b      	lsls	r3, r3, #25
 80078dc:	f53f af35 	bmi.w	800774a <_svfiprintf_r+0x2a>
 80078e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e2:	b01d      	add	sp, #116	; 0x74
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	ab03      	add	r3, sp, #12
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4622      	mov	r2, r4
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <_svfiprintf_r+0x1ec>)
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	4640      	mov	r0, r8
 80078f4:	f7fe fb90 	bl	8006018 <_printf_i>
 80078f8:	e7ea      	b.n	80078d0 <_svfiprintf_r+0x1b0>
 80078fa:	bf00      	nop
 80078fc:	08007f7c 	.word	0x08007f7c
 8007900:	08007f82 	.word	0x08007f82
 8007904:	08007f86 	.word	0x08007f86
 8007908:	08005aad 	.word	0x08005aad
 800790c:	0800766d 	.word	0x0800766d

08007910 <_sbrk_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4c06      	ldr	r4, [pc, #24]	; (800792c <_sbrk_r+0x1c>)
 8007914:	2300      	movs	r3, #0
 8007916:	4605      	mov	r5, r0
 8007918:	4608      	mov	r0, r1
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	f7fb f9dc 	bl	8002cd8 <_sbrk>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_sbrk_r+0x1a>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	b103      	cbz	r3, 800792a <_sbrk_r+0x1a>
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20000cd4 	.word	0x20000cd4

08007930 <__ascii_mbtowc>:
 8007930:	b082      	sub	sp, #8
 8007932:	b901      	cbnz	r1, 8007936 <__ascii_mbtowc+0x6>
 8007934:	a901      	add	r1, sp, #4
 8007936:	b142      	cbz	r2, 800794a <__ascii_mbtowc+0x1a>
 8007938:	b14b      	cbz	r3, 800794e <__ascii_mbtowc+0x1e>
 800793a:	7813      	ldrb	r3, [r2, #0]
 800793c:	600b      	str	r3, [r1, #0]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	1c10      	adds	r0, r2, #0
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
 8007946:	b002      	add	sp, #8
 8007948:	4770      	bx	lr
 800794a:	4610      	mov	r0, r2
 800794c:	e7fb      	b.n	8007946 <__ascii_mbtowc+0x16>
 800794e:	f06f 0001 	mvn.w	r0, #1
 8007952:	e7f8      	b.n	8007946 <__ascii_mbtowc+0x16>

08007954 <memmove>:
 8007954:	4288      	cmp	r0, r1
 8007956:	b510      	push	{r4, lr}
 8007958:	eb01 0302 	add.w	r3, r1, r2
 800795c:	d807      	bhi.n	800796e <memmove+0x1a>
 800795e:	1e42      	subs	r2, r0, #1
 8007960:	4299      	cmp	r1, r3
 8007962:	d00a      	beq.n	800797a <memmove+0x26>
 8007964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007968:	f802 4f01 	strb.w	r4, [r2, #1]!
 800796c:	e7f8      	b.n	8007960 <memmove+0xc>
 800796e:	4283      	cmp	r3, r0
 8007970:	d9f5      	bls.n	800795e <memmove+0xa>
 8007972:	1881      	adds	r1, r0, r2
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	42d3      	cmn	r3, r2
 8007978:	d100      	bne.n	800797c <memmove+0x28>
 800797a:	bd10      	pop	{r4, pc}
 800797c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007980:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007984:	e7f7      	b.n	8007976 <memmove+0x22>

08007986 <__malloc_lock>:
 8007986:	4770      	bx	lr

08007988 <__malloc_unlock>:
 8007988:	4770      	bx	lr

0800798a <_realloc_r>:
 800798a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798c:	4607      	mov	r7, r0
 800798e:	4614      	mov	r4, r2
 8007990:	460e      	mov	r6, r1
 8007992:	b921      	cbnz	r1, 800799e <_realloc_r+0x14>
 8007994:	4611      	mov	r1, r2
 8007996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800799a:	f7ff be0d 	b.w	80075b8 <_malloc_r>
 800799e:	b922      	cbnz	r2, 80079aa <_realloc_r+0x20>
 80079a0:	f7ff fdbc 	bl	800751c <_free_r>
 80079a4:	4625      	mov	r5, r4
 80079a6:	4628      	mov	r0, r5
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079aa:	f000 f821 	bl	80079f0 <_malloc_usable_size_r>
 80079ae:	42a0      	cmp	r0, r4
 80079b0:	d20f      	bcs.n	80079d2 <_realloc_r+0x48>
 80079b2:	4621      	mov	r1, r4
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff fdff 	bl	80075b8 <_malloc_r>
 80079ba:	4605      	mov	r5, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0f2      	beq.n	80079a6 <_realloc_r+0x1c>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4622      	mov	r2, r4
 80079c4:	f7ff fab6 	bl	8006f34 <memcpy>
 80079c8:	4631      	mov	r1, r6
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff fda6 	bl	800751c <_free_r>
 80079d0:	e7e9      	b.n	80079a6 <_realloc_r+0x1c>
 80079d2:	4635      	mov	r5, r6
 80079d4:	e7e7      	b.n	80079a6 <_realloc_r+0x1c>

080079d6 <__ascii_wctomb>:
 80079d6:	b149      	cbz	r1, 80079ec <__ascii_wctomb+0x16>
 80079d8:	2aff      	cmp	r2, #255	; 0xff
 80079da:	bf85      	ittet	hi
 80079dc:	238a      	movhi	r3, #138	; 0x8a
 80079de:	6003      	strhi	r3, [r0, #0]
 80079e0:	700a      	strbls	r2, [r1, #0]
 80079e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80079e6:	bf98      	it	ls
 80079e8:	2001      	movls	r0, #1
 80079ea:	4770      	bx	lr
 80079ec:	4608      	mov	r0, r1
 80079ee:	4770      	bx	lr

080079f0 <_malloc_usable_size_r>:
 80079f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f4:	1f18      	subs	r0, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bfbc      	itt	lt
 80079fa:	580b      	ldrlt	r3, [r1, r0]
 80079fc:	18c0      	addlt	r0, r0, r3
 80079fe:	4770      	bx	lr

08007a00 <_init>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr

08007a0c <_fini>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr
