
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005fd0  08005fd0  00015fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006230  08006230  000203dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006238  08006238  000203dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  08006240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200003dc  0800661c  000203dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800661c  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a63  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015d7  00000000  00000000  00029e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b26  00000000  00000000  0002c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073e5  00000000  00000000  0004d206  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7f3e  00000000  00000000  000545eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003044  00000000  00000000  0011c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003dc 	.word	0x200003dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fb4 	.word	0x08005fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003e0 	.word	0x200003e0
 80001c4:	08005fb4 	.word	0x08005fb4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <WaitDoseReady.9223>:
			#define DOSE TimerMotor(&Buttons[2]); // Dose
			#define CYCLE_DELAY HAL_Delay(100);
			#define WELD_TIME HAL_Delay(600);
			#define WAITING 450
			void WaitDoseReady(void)
			{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	f8c7 c004 	str.w	ip, [r7, #4]
				while(Buttons[17].B_Out)
 8000e0a:	e00a      	b.n	8000e22 <WaitDoseReady.9223+0x22>
				{
					asm("NOP");
 8000e0c:	bf00      	nop
					if(!Buttons[10].B_Out || !Buttons[9].B_State)
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <WaitDoseReady.9223+0x40>)
 8000e10:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <WaitDoseReady.9223+0x2c>
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <WaitDoseReady.9223+0x40>)
 8000e1a:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <WaitDoseReady.9223+0x2c>
				while(Buttons[17].B_Out)
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <WaitDoseReady.9223+0x40>)
 8000e24:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1ef      	bne.n	8000e0c <WaitDoseReady.9223+0xc>
					{
						break;
					}
					*/
				};
				Buttons[17].B_Out = 1;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <WaitDoseReady.9223+0x40>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			};
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	2000044c 	.word	0x2000044c

08000e44 <main>:
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
int main(void)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000e50:	f001 fc0e 	bl	8002670 <HAL_Init>
  SystemClock_Config();
 8000e54:	f000 fca8 	bl	80017a8 <SystemClock_Config>
  MX_GPIO_Init();
 8000e58:	f000 fdba 	bl	80019d0 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000e5c:	f000 fd82 	bl	8001964 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000e60:	f000 fd0a 	bl	8001878 <MX_TIM3_Init>
  GPIOD->ODR = ~0;
 8000e64:	4ba2      	ldr	r3, [pc, #648]	; (80010f0 <main+0x2ac>)
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	615a      	str	r2, [r3, #20]
  Init();
 8000e6c:	f000 fece 	bl	8001c0c <Init>
  HAL_Delay(2300);
 8000e70:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8000e74:	f001 fc6e 	bl	8002754 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e78:	489e      	ldr	r0, [pc, #632]	; (80010f4 <main+0x2b0>)
 8000e7a:	f002 fbdc 	bl	8003636 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OUT_A_GPIO_Port, OUT_A_Pin, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2101      	movs	r1, #1
 8000e82:	489d      	ldr	r0, [pc, #628]	; (80010f8 <main+0x2b4>)
 8000e84:	f001 ff64 	bl	8002d50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_B_GPIO_Port, OUT_B_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	489a      	ldr	r0, [pc, #616]	; (80010f8 <main+0x2b4>)
 8000e8e:	f001 ff5f 	bl	8002d50 <HAL_GPIO_WritePin>
		if(!Buttons[9].B_State)// Mode select
 8000e92:	4b9a      	ldr	r3, [pc, #616]	; (80010fc <main+0x2b8>)
 8000e94:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f040 81f8 	bne.w	800128e <main+0x44a>
			tmpflg = 1;
 8000e9e:	4b98      	ldr	r3, [pc, #608]	; (8001100 <main+0x2bc>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
			if(Buttons[9].B_Out == 1) // Reset buttons and timers
 8000ea4:	4b95      	ldr	r3, [pc, #596]	; (80010fc <main+0x2b8>)
 8000ea6:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d119      	bne.n	8000ee2 <main+0x9e>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4894      	ldr	r0, [pc, #592]	; (8001104 <main+0x2c0>)
 8000eb2:	f002 fc83 	bl	80037bc <HAL_TIM_PWM_Stop>
				Buttons[9].B_Out = 0;
 8000eb6:	4b91      	ldr	r3, [pc, #580]	; (80010fc <main+0x2b8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e00b      	b.n	8000edc <main+0x98>
					Buttons[i].B_Out = 0;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a8d      	ldr	r2, [pc, #564]	; (80010fc <main+0x2b8>)
 8000ec8:	212c      	movs	r1, #44	; 0x2c
 8000eca:	fb01 f303 	mul.w	r3, r1, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	3314      	adds	r3, #20
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b14      	cmp	r3, #20
 8000ee0:	d9f0      	bls.n	8000ec4 <main+0x80>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	e1cd      	b.n	8001284 <main+0x440>
				if(Buttons[i].Lock == 0)
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	4a84      	ldr	r2, [pc, #528]	; (80010fc <main+0x2b8>)
 8000eec:	212c      	movs	r1, #44	; 0x2c
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3315      	adds	r3, #21
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 81ab 	bne.w	8001254 <main+0x410>
					if(Buttons[i].Mode == HOLD)
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	4a7e      	ldr	r2, [pc, #504]	; (80010fc <main+0x2b8>)
 8000f02:	212c      	movs	r1, #44	; 0x2c
 8000f04:	fb01 f303 	mul.w	r3, r1, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	3316      	adds	r3, #22
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d121      	bne.n	8000f56 <main+0x112>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	4a79      	ldr	r2, [pc, #484]	; (80010fc <main+0x2b8>)
 8000f16:	212c      	movs	r1, #44	; 0x2c
 8000f18:	fb01 f303 	mul.w	r3, r1, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	330c      	adds	r3, #12
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	4a75      	ldr	r2, [pc, #468]	; (80010fc <main+0x2b8>)
 8000f26:	212c      	movs	r1, #44	; 0x2c
 8000f28:	fb01 f303 	mul.w	r3, r1, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3310      	adds	r3, #16
 8000f30:	881c      	ldrh	r4, [r3, #0]
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	4a71      	ldr	r2, [pc, #452]	; (80010fc <main+0x2b8>)
 8000f36:	212c      	movs	r1, #44	; 0x2c
 8000f38:	fb01 f303 	mul.w	r3, r1, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3313      	adds	r3, #19
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f001 fefe 	bl	8002d50 <HAL_GPIO_WritePin>
						continue;
 8000f54:	e193      	b.n	800127e <main+0x43a>
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	4a68      	ldr	r2, [pc, #416]	; (80010fc <main+0x2b8>)
 8000f5a:	212c      	movs	r1, #44	; 0x2c
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	3316      	adds	r3, #22
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d163      	bne.n	8001032 <main+0x1ee>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	4a63      	ldr	r2, [pc, #396]	; (80010fc <main+0x2b8>)
 8000f6e:	212c      	movs	r1, #44	; 0x2c
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	3324      	adds	r3, #36	; 0x24
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d159      	bne.n	8001032 <main+0x1ee>
						if(Buttons[i].addiction != 0)
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4a5e      	ldr	r2, [pc, #376]	; (80010fc <main+0x2b8>)
 8000f82:	212c      	movs	r1, #44	; 0x2c
 8000f84:	fb01 f303 	mul.w	r3, r1, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	331c      	adds	r3, #28
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d02d      	beq.n	8000fee <main+0x1aa>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4a59      	ldr	r2, [pc, #356]	; (80010fc <main+0x2b8>)
 8000f96:	212c      	movs	r1, #44	; 0x2c
 8000f98:	fb01 f303 	mul.w	r3, r1, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <main+0x2b8>)
 8000fa6:	212c      	movs	r1, #44	; 0x2c
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	3310      	adds	r3, #16
 8000fb0:	881c      	ldrh	r4, [r3, #0]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	4a51      	ldr	r2, [pc, #324]	; (80010fc <main+0x2b8>)
 8000fb6:	212c      	movs	r1, #44	; 0x2c
 8000fb8:	fb01 f303 	mul.w	r3, r1, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3314      	adds	r3, #20
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00a      	beq.n	8000fdc <main+0x198>
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <main+0x2b8>)
 8000fca:	212c      	movs	r1, #44	; 0x2c
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	331c      	adds	r3, #28
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	7d1b      	ldrb	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <main+0x19c>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <main+0x19e>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f001 feb2 	bl	8002d50 <HAL_GPIO_WritePin>
						continue;
 8000fec:	e147      	b.n	800127e <main+0x43a>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <main+0x2b8>)
 8000ff2:	212c      	movs	r1, #44	; 0x2c
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <main+0x2b8>)
 8001002:	212c      	movs	r1, #44	; 0x2c
 8001004:	fb01 f303 	mul.w	r3, r1, r3
 8001008:	4413      	add	r3, r2
 800100a:	3310      	adds	r3, #16
 800100c:	881c      	ldrh	r4, [r3, #0]
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	4a3a      	ldr	r2, [pc, #232]	; (80010fc <main+0x2b8>)
 8001012:	212c      	movs	r1, #44	; 0x2c
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4413      	add	r3, r2
 800101a:	3314      	adds	r3, #20
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	4621      	mov	r1, r4
 800102c:	f001 fe90 	bl	8002d50 <HAL_GPIO_WritePin>
						continue;
 8001030:	e125      	b.n	800127e <main+0x43a>
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	4a31      	ldr	r2, [pc, #196]	; (80010fc <main+0x2b8>)
 8001036:	212c      	movs	r1, #44	; 0x2c
 8001038:	fb01 f303 	mul.w	r3, r1, r3
 800103c:	4413      	add	r3, r2
 800103e:	3324      	adds	r3, #36	; 0x24
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d02d      	beq.n	80010a2 <main+0x25e>
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <main+0x2b8>)
 800104a:	212c      	movs	r1, #44	; 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3316      	adds	r3, #22
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d123      	bne.n	80010a2 <main+0x25e>
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <main+0x2b8>)
 800105e:	212c      	movs	r1, #44	; 0x2c
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	4413      	add	r3, r2
 8001066:	3314      	adds	r3, #20
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <main+0x25e>
						Buttons[i].B_Out = 0;
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <main+0x2b8>)
 8001072:	212c      	movs	r1, #44	; 0x2c
 8001074:	fb01 f303 	mul.w	r3, r1, r3
 8001078:	4413      	add	r3, r2
 800107a:	3314      	adds	r3, #20
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <main+0x2b8>)
 8001084:	212c      	movs	r1, #44	; 0x2c
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	4413      	add	r3, r2
 800108c:	3324      	adds	r3, #36	; 0x24
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	212c      	movs	r1, #44	; 0x2c
 8001094:	fb01 f202 	mul.w	r2, r1, r2
 8001098:	4918      	ldr	r1, [pc, #96]	; (80010fc <main+0x2b8>)
 800109a:	440a      	add	r2, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4798      	blx	r3
						continue;
 80010a0:	e0ed      	b.n	800127e <main+0x43a>
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4a15      	ldr	r2, [pc, #84]	; (80010fc <main+0x2b8>)
 80010a6:	212c      	movs	r1, #44	; 0x2c
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	3316      	adds	r3, #22
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d128      	bne.n	8001108 <main+0x2c4>
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <main+0x2b8>)
 80010ba:	212c      	movs	r1, #44	; 0x2c
 80010bc:	fb01 f303 	mul.w	r3, r1, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	3314      	adds	r3, #20
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01e      	beq.n	8001108 <main+0x2c4>
						Buttons[i].B_Out = 0;
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <main+0x2b8>)
 80010ce:	212c      	movs	r1, #44	; 0x2c
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	3314      	adds	r3, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	222c      	movs	r2, #44	; 0x2c
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <main+0x2b8>)
 80010e6:	4413      	add	r3, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f8bb 	bl	8002264 <TimerMotor>
						continue;
 80010ee:	e0c6      	b.n	800127e <main+0x43a>
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	200007e8 	.word	0x200007e8
 80010f8:	40021000 	.word	0x40021000
 80010fc:	2000044c 	.word	0x2000044c
 8001100:	200003fc 	.word	0x200003fc
 8001104:	2000040c 	.word	0x2000040c
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	4ac0      	ldr	r2, [pc, #768]	; (800140c <main+0x5c8>)
 800110c:	212c      	movs	r1, #44	; 0x2c
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4413      	add	r3, r2
 8001114:	3316      	adds	r3, #22
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d152      	bne.n	80011c2 <main+0x37e>
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	4abb      	ldr	r2, [pc, #748]	; (800140c <main+0x5c8>)
 8001120:	212c      	movs	r1, #44	; 0x2c
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	3314      	adds	r3, #20
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d048      	beq.n	80011c2 <main+0x37e>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	4ab6      	ldr	r2, [pc, #728]	; (800140c <main+0x5c8>)
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	4413      	add	r3, r2
 800113c:	331c      	adds	r3, #28
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	7d1b      	ldrb	r3, [r3, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 809a 	beq.w	800127c <main+0x438>
						Buttons[i].B_Out = 0;
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	4ab0      	ldr	r2, [pc, #704]	; (800140c <main+0x5c8>)
 800114c:	212c      	movs	r1, #44	; 0x2c
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	4413      	add	r3, r2
 8001154:	3314      	adds	r3, #20
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	4aab      	ldr	r2, [pc, #684]	; (800140c <main+0x5c8>)
 800115e:	212c      	movs	r1, #44	; 0x2c
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	330c      	adds	r3, #12
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	4aa7      	ldr	r2, [pc, #668]	; (800140c <main+0x5c8>)
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	3310      	adds	r3, #16
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	f001 fde7 	bl	8002d50 <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	4aa1      	ldr	r2, [pc, #644]	; (800140c <main+0x5c8>)
 8001186:	212c      	movs	r1, #44	; 0x2c
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	4413      	add	r3, r2
 800118e:	3318      	adds	r3, #24
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fade 	bl	8002754 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	4a9c      	ldr	r2, [pc, #624]	; (800140c <main+0x5c8>)
 800119c:	212c      	movs	r1, #44	; 0x2c
 800119e:	fb01 f303 	mul.w	r3, r1, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	330c      	adds	r3, #12
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	4a98      	ldr	r2, [pc, #608]	; (800140c <main+0x5c8>)
 80011ac:	212c      	movs	r1, #44	; 0x2c
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	3310      	adds	r3, #16
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f001 fdc8 	bl	8002d50 <HAL_GPIO_WritePin>
						continue;
 80011c0:	e05d      	b.n	800127e <main+0x43a>
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	4a91      	ldr	r2, [pc, #580]	; (800140c <main+0x5c8>)
 80011c6:	212c      	movs	r1, #44	; 0x2c
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	3316      	adds	r3, #22
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d11d      	bne.n	8001212 <main+0x3ce>
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	4a8c      	ldr	r2, [pc, #560]	; (800140c <main+0x5c8>)
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3314      	adds	r3, #20
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d013      	beq.n	8001212 <main+0x3ce>
						Buttons[i].B_Out = 0;
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	4a87      	ldr	r2, [pc, #540]	; (800140c <main+0x5c8>)
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	3314      	adds	r3, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	222c      	movs	r2, #44	; 0x2c
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a81      	ldr	r2, [pc, #516]	; (800140c <main+0x5c8>)
 8001206:	4413      	add	r3, r2
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f000 ff8c 	bl	8002128 <HoldMotor>
						continue;
 8001210:	e035      	b.n	800127e <main+0x43a>
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	4a7d      	ldr	r2, [pc, #500]	; (800140c <main+0x5c8>)
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	3316      	adds	r3, #22
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b06      	cmp	r3, #6
 8001224:	d116      	bne.n	8001254 <main+0x410>
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	4a78      	ldr	r2, [pc, #480]	; (800140c <main+0x5c8>)
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3314      	adds	r3, #20
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00c      	beq.n	8001254 <main+0x410>
						HoldPrepareMotorUntill(Buttons[i].addiction, 1);
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	4a73      	ldr	r2, [pc, #460]	; (800140c <main+0x5c8>)
 800123e:	212c      	movs	r1, #44	; 0x2c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	331c      	adds	r3, #28
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f000 ffd9 	bl	8002204 <HoldPrepareMotorUntill>
						continue;
 8001252:	e014      	b.n	800127e <main+0x43a>
				if(Buttons[i].Mode == 200) {Buttons[i].B_Out = 0;}
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	4a6d      	ldr	r2, [pc, #436]	; (800140c <main+0x5c8>)
 8001258:	212c      	movs	r1, #44	; 0x2c
 800125a:	fb01 f303 	mul.w	r3, r1, r3
 800125e:	4413      	add	r3, r2
 8001260:	3316      	adds	r3, #22
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2bc8      	cmp	r3, #200	; 0xc8
 8001266:	d10a      	bne.n	800127e <main+0x43a>
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	4a68      	ldr	r2, [pc, #416]	; (800140c <main+0x5c8>)
 800126c:	212c      	movs	r1, #44	; 0x2c
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	3314      	adds	r3, #20
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e000      	b.n	800127e <main+0x43a>
						if(Buttons[i].addiction->B_Out == 0) continue;
 800127c:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b14      	cmp	r3, #20
 8001288:	f67f ae2e 	bls.w	8000ee8 <main+0xa4>
 800128c:	e601      	b.n	8000e92 <main+0x4e>
			if(tmpflg)
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <main+0x5cc>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00a      	beq.n	80012ac <main+0x468>
				tmpflg = 0;
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <main+0x5cc>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
				Buttons[10].B_Out = 0;
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <main+0x5c8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				Buttons[17].B_Out = 0;
 80012a4:	4b59      	ldr	r3, [pc, #356]	; (800140c <main+0x5c8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
				};

			}
			#define WELD_CHECK Welder_Check();

			if(Buttons[10].B_Out) // AUTO MODE START
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <main+0x5c8>)
 80012ae:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 81e2 	beq.w	800167c <main+0x838>
			{
				if(Buttons[15].B_State == 1)
 80012b8:	4b54      	ldr	r3, [pc, #336]	; (800140c <main+0x5c8>)
 80012ba:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80012be:	2b01      	cmp	r3, #1
 80012c0:	f040 80ae 	bne.w	8001420 <main+0x5dc>
				{
					Pullsteps = PULL_STEPS / 2;
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <main+0x5d0>)
 80012c6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80012ca:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 80012cc:	4b52      	ldr	r3, [pc, #328]	; (8001418 <main+0x5d4>)
 80012ce:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80012d2:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 80012d4:	4851      	ldr	r0, [pc, #324]	; (800141c <main+0x5d8>)
 80012d6:	f000 ffc5 	bl	8002264 <TimerMotor>
					CYCLE_DELAY
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f001 fa3a 	bl	8002754 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 80012e0:	4b4a      	ldr	r3, [pc, #296]	; (800140c <main+0x5c8>)
 80012e2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80012e6:	4b49      	ldr	r3, [pc, #292]	; (800140c <main+0x5c8>)
 80012e8:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	f001 fd2e 	bl	8002d50 <HAL_GPIO_WritePin>
					PUSH_V
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <main+0x5c8>)
 80012f6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <main+0x5c8>)
 80012fc:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	f001 fd24 	bl	8002d50 <HAL_GPIO_WritePin>
					CUT_START
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <main+0x5c8>)
 800130a:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <main+0x5c8>)
 8001310:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	f001 fd1a 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f001 fa19 	bl	8002754 <HAL_Delay>
					CUT_RELEASE
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <main+0x5c8>)
 8001324:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <main+0x5c8>)
 800132a:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	f001 fd0d 	bl	8002d50 <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <main+0x5c8>)
 8001338:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <main+0x5c8>)
 800133e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f001 fd03 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_V_START
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <main+0x5c8>)
 800134c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <main+0x5c8>)
 8001352:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	f001 fcf9 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_CHECK
 800135e:	463b      	mov	r3, r7
 8001360:	469c      	mov	ip, r3
 8001362:	f000 f9a7 	bl	80016b4 <Welder_Check.9229>
					WELD_TIME
 8001366:	f44f 7016 	mov.w	r0, #600	; 0x258
 800136a:	f001 f9f3 	bl	8002754 <HAL_Delay>
					WELD_H_STOP
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <main+0x5c8>)
 8001370:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <main+0x5c8>)
 8001376:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800137a:	2201      	movs	r2, #1
 800137c:	4619      	mov	r1, r3
 800137e:	f001 fce7 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_V_STOP
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <main+0x5c8>)
 8001384:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <main+0x5c8>)
 800138a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f001 fcdd 	bl	8002d50 <HAL_GPIO_WritePin>
					//Release
					RELEASE_H
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <main+0x5c8>)
 8001398:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <main+0x5c8>)
 800139e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	f001 fcd3 	bl	8002d50 <HAL_GPIO_WritePin>
					RELEASE_V
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <main+0x5c8>)
 80013ac:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <main+0x5c8>)
 80013b2:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80013b6:	2201      	movs	r2, #1
 80013b8:	4619      	mov	r1, r3
 80013ba:	f001 fcc9 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f001 f9c8 	bl	8002754 <HAL_Delay>
					//Fill, release
					WAIT_DOSE_READY
 80013c4:	463b      	mov	r3, r7
 80013c6:	469c      	mov	ip, r3
 80013c8:	f7ff fd1a 	bl	8000e00 <WaitDoseReady.9223>
					DOSE_PULSE_START
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <main+0x5c8>)
 80013ce:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <main+0x5c8>)
 80013d4:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 80013d8:	2200      	movs	r2, #0
 80013da:	4619      	mov	r1, r3
 80013dc:	f001 fcb8 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f001 f9b7 	bl	8002754 <HAL_Delay>
					DOSE_PULSE_STOP
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <main+0x5c8>)
 80013e8:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <main+0x5c8>)
 80013ee:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	f001 fcab 	bl	8002d50 <HAL_GPIO_WritePin>
					HAL_Delay(WAITING); // Delay. Mixture fall time
 80013fa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80013fe:	f001 f9a9 	bl	8002754 <HAL_Delay>
					CYCLE_DELAY
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f001 f9a6 	bl	8002754 <HAL_Delay>
 8001408:	e132      	b.n	8001670 <main+0x82c>
 800140a:	bf00      	nop
 800140c:	2000044c 	.word	0x2000044c
 8001410:	200003fc 	.word	0x200003fc
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004
 800141c:	20000580 	.word	0x20000580
				}
				else
				{
					Pullsteps = PULL_STEPS / 2;
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <main+0x854>)
 8001422:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8001426:	601a      	str	r2, [r3, #0]
					Dosesteps = STEPS;
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <main+0x858>)
 800142a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800142e:	601a      	str	r2, [r3, #0]
					//Pull new material
					PULL
 8001430:	489b      	ldr	r0, [pc, #620]	; (80016a0 <main+0x85c>)
 8001432:	f000 ff17 	bl	8002264 <TimerMotor>
					CYCLE_DELAY
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f001 f98c 	bl	8002754 <HAL_Delay>
					//Clamp material 1, cut pocket
					PUSH_H
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <main+0x860>)
 800143e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001442:	4b98      	ldr	r3, [pc, #608]	; (80016a4 <main+0x860>)
 8001444:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f001 fc80 	bl	8002d50 <HAL_GPIO_WritePin>
					PUSH_V
 8001450:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <main+0x860>)
 8001452:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001456:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <main+0x860>)
 8001458:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	f001 fc76 	bl	8002d50 <HAL_GPIO_WritePin>
					CUT_START
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <main+0x860>)
 8001466:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800146a:	4b8e      	ldr	r3, [pc, #568]	; (80016a4 <main+0x860>)
 800146c:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	f001 fc6c 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001478:	2064      	movs	r0, #100	; 0x64
 800147a:	f001 f96b 	bl	8002754 <HAL_Delay>
					CUT_RELEASE
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <main+0x860>)
 8001480:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <main+0x860>)
 8001486:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	f001 fc5f 	bl	8002d50 <HAL_GPIO_WritePin>
					//Welding stage 1
					WELD_H_START
 8001492:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <main+0x860>)
 8001494:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001498:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <main+0x860>)
 800149a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	f001 fc55 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_V_START
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <main+0x860>)
 80014a8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80014ac:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <main+0x860>)
 80014ae:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	f001 fc4b 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_CHECK
 80014ba:	463b      	mov	r3, r7
 80014bc:	469c      	mov	ip, r3
 80014be:	f000 f8f9 	bl	80016b4 <Welder_Check.9229>
					WELD_TIME
 80014c2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80014c6:	f001 f945 	bl	8002754 <HAL_Delay>
					WELD_H_STOP
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <main+0x860>)
 80014cc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <main+0x860>)
 80014d2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 fc39 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_V_STOP
 80014de:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <main+0x860>)
 80014e0:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80014e4:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <main+0x860>)
 80014e6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80014ea:	2201      	movs	r2, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	f001 fc2f 	bl	8002d50 <HAL_GPIO_WritePin>
					//Release, fill 1
					RELEASE_H
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <main+0x860>)
 80014f4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <main+0x860>)
 80014fa:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80014fe:	2201      	movs	r2, #1
 8001500:	4619      	mov	r1, r3
 8001502:	f001 fc25 	bl	8002d50 <HAL_GPIO_WritePin>
					RELEASE_V
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <main+0x860>)
 8001508:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800150c:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <main+0x860>)
 800150e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f001 fc1b 	bl	8002d50 <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 800151a:	463b      	mov	r3, r7
 800151c:	469c      	mov	ip, r3
 800151e:	f7ff fc6f 	bl	8000e00 <WaitDoseReady.9223>
					DOSE_PULSE_START
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <main+0x860>)
 8001524:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <main+0x860>)
 800152a:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	f001 fc0d 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f001 f90c 	bl	8002754 <HAL_Delay>
					DOSE_PULSE_STOP
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <main+0x860>)
 800153e:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <main+0x860>)
 8001544:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	f001 fc00 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001550:	2064      	movs	r0, #100	; 0x64
 8001552:	f001 f8ff 	bl	8002754 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 8001556:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800155a:	f001 f8fb 	bl	8002754 <HAL_Delay>
					CYCLE_DELAY
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f001 f8f8 	bl	8002754 <HAL_Delay>
					//DOSE
					//Pull stage 2
					PULL
 8001564:	484e      	ldr	r0, [pc, #312]	; (80016a0 <main+0x85c>)
 8001566:	f000 fe7d 	bl	8002264 <TimerMotor>
					CYCLE_DELAY
 800156a:	2064      	movs	r0, #100	; 0x64
 800156c:	f001 f8f2 	bl	8002754 <HAL_Delay>
					//Clamp material 2
					PUSH_V
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <main+0x860>)
 8001572:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001576:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <main+0x860>)
 8001578:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	f001 fbe6 	bl	8002d50 <HAL_GPIO_WritePin>
					PUSH_H
 8001584:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <main+0x860>)
 8001586:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <main+0x860>)
 800158c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	f001 fbdc 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f001 f8db 	bl	8002754 <HAL_Delay>
					//Welding stage 2
					WELD_V_START
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <main+0x860>)
 80015a0:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <main+0x860>)
 80015a6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	f001 fbcf 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_H_START
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <main+0x860>)
 80015b4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <main+0x860>)
 80015ba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	f001 fbc5 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_CHECK
 80015c6:	463b      	mov	r3, r7
 80015c8:	469c      	mov	ip, r3
 80015ca:	f000 f873 	bl	80016b4 <Welder_Check.9229>
					WELD_TIME
 80015ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015d2:	f001 f8bf 	bl	8002754 <HAL_Delay>
					WELD_V_STOP
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <main+0x860>)
 80015d8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <main+0x860>)
 80015de:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80015e2:	2201      	movs	r2, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	f001 fbb3 	bl	8002d50 <HAL_GPIO_WritePin>
					WELD_H_STOP
 80015ea:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <main+0x860>)
 80015ec:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <main+0x860>)
 80015f2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f001 fba9 	bl	8002d50 <HAL_GPIO_WritePin>
					//Release, fill 2
					RELEASE_V
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <main+0x860>)
 8001600:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <main+0x860>)
 8001606:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f001 fb9f 	bl	8002d50 <HAL_GPIO_WritePin>
					RELEASE_H
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <main+0x860>)
 8001614:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <main+0x860>)
 800161a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	f001 fb95 	bl	8002d50 <HAL_GPIO_WritePin>
					WAIT_DOSE_READY
 8001626:	463b      	mov	r3, r7
 8001628:	469c      	mov	ip, r3
 800162a:	f7ff fbe9 	bl	8000e00 <WaitDoseReady.9223>
					DOSE_PULSE_START
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <main+0x860>)
 8001630:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <main+0x860>)
 8001636:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	f001 fb87 	bl	8002d50 <HAL_GPIO_WritePin>
					CYCLE_DELAY
 8001642:	2064      	movs	r0, #100	; 0x64
 8001644:	f001 f886 	bl	8002754 <HAL_Delay>
					DOSE_PULSE_STOP
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <main+0x860>)
 800164a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <main+0x860>)
 8001650:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 8001654:	2201      	movs	r2, #1
 8001656:	4619      	mov	r1, r3
 8001658:	f001 fb7a 	bl	8002d50 <HAL_GPIO_WritePin>
					//DOSE
					CYCLE_DELAY
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	f001 f879 	bl	8002754 <HAL_Delay>
					HAL_Delay(WAITING); // TEST
 8001662:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001666:	f001 f875 	bl	8002754 <HAL_Delay>
					CYCLE_DELAY
 800166a:	2064      	movs	r0, #100	; 0x64
 800166c:	f001 f872 	bl	8002754 <HAL_Delay>
				HAL_GPIO_WritePin(OUT_A_GPIO_Port, OUT_A_Pin, !pOutSig[0]);
				HAL_GPIO_WritePin(OUT_B_GPIO_Port, OUT_B_Pin, !pOutSig[1]);
				*/
				//End

				counter++; // Ammount of packages done
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <main+0x864>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <main+0x864>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e40a      	b.n	8000e92 <main+0x4e>
			}
			else if(flag == true)
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <main+0x868>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f43f ac06 	beq.w	8000e92 <main+0x4e>
			{
				flag = false;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <main+0x868>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <main+0x86c>)
 8001690:	f002 f894 	bl	80037bc <HAL_TIM_PWM_Stop>
		if(!Buttons[9].B_State)// Mode select
 8001694:	f7ff bbfd 	b.w	8000e92 <main+0x4e>
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000580 	.word	0x20000580
 80016a4:	2000044c 	.word	0x2000044c
 80016a8:	200003f8 	.word	0x200003f8
 80016ac:	200003fd 	.word	0x200003fd
 80016b0:	2000040c 	.word	0x2000040c

080016b4 <Welder_Check.9229>:
			{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	f8c7 c004 	str.w	ip, [r7, #4]
				uint32_t timer = 12000000;
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <Welder_Check.9229+0xec>)
 80016c0:	60fb      	str	r3, [r7, #12]
				while(!Buttons[18].B_State && !Buttons[20].B_State)
 80016c2:	e05f      	b.n	8001784 <Welder_Check.9229+0xd0>
					timer--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
					if(!timer)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d159      	bne.n	8001784 <Welder_Check.9229+0xd0>
						WELD_H_STOP
 80016d0:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <Welder_Check.9229+0xf0>)
 80016d2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <Welder_Check.9229+0xf0>)
 80016d8:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	f001 fb36 	bl	8002d50 <HAL_GPIO_WritePin>
						WELD_V_STOP
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <Welder_Check.9229+0xf0>)
 80016e6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <Welder_Check.9229+0xf0>)
 80016ec:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80016f0:	2201      	movs	r2, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	f001 fb2c 	bl	8002d50 <HAL_GPIO_WritePin>
						Buttons[10].B_Out = 0;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <Welder_Check.9229+0xf0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
						uint32_t delay = 200;
 8001700:	23c8      	movs	r3, #200	; 0xc8
 8001702:	60bb      	str	r3, [r7, #8]
						while(!Buttons[10].B_Out && (!Buttons[18].B_State || !Buttons[20].B_State))
 8001704:	e019      	b.n	800173a <Welder_Check.9229+0x86>
							HAL_GPIO_WritePin(Buttons[19].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001708:	f8d3 0350 	ldr.w	r0, [r3, #848]	; 0x350
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <Welder_Check.9229+0xf0>)
 800170e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	f001 fb1b 	bl	8002d50 <HAL_GPIO_WritePin>
							HAL_Delay(delay);
 800171a:	68b8      	ldr	r0, [r7, #8]
 800171c:	f001 f81a 	bl	8002754 <HAL_Delay>
							HAL_GPIO_WritePin(Buttons[19].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001722:	f8d3 0350 	ldr.w	r0, [r3, #848]	; 0x350
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001728:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800172c:	2201      	movs	r2, #1
 800172e:	4619      	mov	r1, r3
 8001730:	f001 fb0e 	bl	8002d50 <HAL_GPIO_WritePin>
							HAL_Delay(delay);
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f001 f80d 	bl	8002754 <HAL_Delay>
						while(!Buttons[10].B_Out && (!Buttons[18].B_State || !Buttons[20].B_State))
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <Welder_Check.9229+0xf0>)
 800173c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <Welder_Check.9229+0xa4>
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001746:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0db      	beq.n	8001706 <Welder_Check.9229+0x52>
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001750:	f893 3383 	ldrb.w	r3, [r3, #899]	; 0x383
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0d6      	beq.n	8001706 <Welder_Check.9229+0x52>
						WELD_H_START
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <Welder_Check.9229+0xf0>)
 800175a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001760:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	f001 faf2 	bl	8002d50 <HAL_GPIO_WritePin>
						WELD_V_START
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <Welder_Check.9229+0xf0>)
 800176e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001774:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	f001 fae8 	bl	8002d50 <HAL_GPIO_WritePin>
						break;
 8001780:	bf00      	nop
			}
 8001782:	e009      	b.n	8001798 <Welder_Check.9229+0xe4>
				while(!Buttons[18].B_State && !Buttons[20].B_State)
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001786:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <Welder_Check.9229+0xe4>
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <Welder_Check.9229+0xf0>)
 8001790:	f893 3383 	ldrb.w	r3, [r3, #899]	; 0x383
 8001794:	2b00      	cmp	r3, #0
 8001796:	d095      	beq.n	80016c4 <Welder_Check.9229+0x10>
			}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	00b71b00 	.word	0x00b71b00
 80017a4:	2000044c 	.word	0x2000044c

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fed0 	bl	800455c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <SystemClock_Config+0xc8>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a26      	ldr	r2, [pc, #152]	; (8001870 <SystemClock_Config+0xc8>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <SystemClock_Config+0xc8>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <SystemClock_Config+0xcc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a20      	ldr	r2, [pc, #128]	; (8001874 <SystemClock_Config+0xcc>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <SystemClock_Config+0xcc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001818:	2304      	movs	r3, #4
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800181c:	2348      	movs	r3, #72	; 0x48
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001820:	2306      	movs	r3, #6
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f001 faa9 	bl	8002d84 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fdc6 	bl	80023c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fd03 	bl	8003264 <HAL_RCC_ClockConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001864:	f000 fdb0 	bl	80023c8 <Error_Handler>
  }
}
 8001868:	bf00      	nop
 800186a:	3750      	adds	r7, #80	; 0x50
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40007000 	.word	0x40007000

08001878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]
 80018a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_TIM3_Init+0xe4>)
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <MX_TIM3_Init+0xe8>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_TIM3_Init+0xe4>)
 80018b0:	2296      	movs	r2, #150	; 0x96
 80018b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_TIM3_Init+0xe4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 116;
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_TIM3_Init+0xe4>)
 80018bc:	2274      	movs	r2, #116	; 0x74
 80018be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_TIM3_Init+0xe4>)
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_TIM3_Init+0xe4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ce:	4823      	ldr	r0, [pc, #140]	; (800195c <MX_TIM3_Init+0xe4>)
 80018d0:	f001 fe86 	bl	80035e0 <HAL_TIM_Base_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018da:	f000 fd75 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e8:	4619      	mov	r1, r3
 80018ea:	481c      	ldr	r0, [pc, #112]	; (800195c <MX_TIM3_Init+0xe4>)
 80018ec:	f002 f98c 	bl	8003c08 <HAL_TIM_ConfigClockSource>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018f6:	f000 fd67 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018fa:	4818      	ldr	r0, [pc, #96]	; (800195c <MX_TIM3_Init+0xe4>)
 80018fc:	f001 feea 	bl	80036d4 <HAL_TIM_PWM_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001906:	f000 fd5f 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <MX_TIM3_Init+0xe4>)
 800191a:	f002 fd65 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001924:	f000 fd50 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001928:	2360      	movs	r3, #96	; 0x60
 800192a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 58;
 800192c:	233a      	movs	r3, #58	; 0x3a
 800192e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <MX_TIM3_Init+0xe4>)
 8001940:	f002 f89c 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800194a:	f000 fd3d 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <MX_TIM3_Init+0xe4>)
 8001950:	f000 fdb0 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001954:	bf00      	nop
 8001956:	3738      	adds	r7, #56	; 0x38
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000040c 	.word	0x2000040c
 8001960:	40000400 	.word	0x40000400

08001964 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_TIM7_Init+0x64>)
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_TIM7_Init+0x68>)
 8001976:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_TIM7_Init+0x64>)
 800197a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800197e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_TIM7_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_TIM7_Init+0x64>)
 8001988:	2205      	movs	r2, #5
 800198a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_TIM7_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_TIM7_Init+0x64>)
 8001994:	f001 fe24 	bl	80035e0 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800199e:	f000 fd13 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_TIM7_Init+0x64>)
 80019b0:	f002 fd1a 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80019ba:	f000 fd05 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200007e8 	.word	0x200007e8
 80019cc:	40001400 	.word	0x40001400

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <MX_GPIO_Init+0x224>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a81      	ldr	r2, [pc, #516]	; (8001bf4 <MX_GPIO_Init+0x224>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <MX_GPIO_Init+0x224>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <MX_GPIO_Init+0x224>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT_B_Pin|CS_Pin|OUT_A_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2125      	movs	r1, #37	; 0x25
 8001a92:	4859      	ldr	r0, [pc, #356]	; (8001bf8 <MX_GPIO_Init+0x228>)
 8001a94:	f001 f95c 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	21c0      	movs	r1, #192	; 0xc0
 8001a9c:	4857      	ldr	r0, [pc, #348]	; (8001bfc <MX_GPIO_Init+0x22c>)
 8001a9e:	f001 f957 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4856      	ldr	r0, [pc, #344]	; (8001c00 <MX_GPIO_Init+0x230>)
 8001aa8:	f001 f952 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001ab2:	4854      	ldr	r0, [pc, #336]	; (8001c04 <MX_GPIO_Init+0x234>)
 8001ab4:	f001 f94c 	bl	8002d50 <HAL_GPIO_WritePin>
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	4852      	ldr	r0, [pc, #328]	; (8001c08 <MX_GPIO_Init+0x238>)
 8001abe:	f001 f947 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_B_Pin OUT_A_Pin */
  GPIO_InitStruct.Pin = OUT_B_Pin|OUT_A_Pin;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ac6:	2311      	movs	r3, #17
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <MX_GPIO_Init+0x228>)
 8001ada:	f000 ff87 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin 
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin 
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin 
                           HOLD_Pull_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin 
 8001ade:	f64f 73da 	movw	r3, #65498	; 0xffda
 8001ae2:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin 
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin 
                          |HOLD_Pull_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4841      	ldr	r0, [pc, #260]	; (8001bf8 <MX_GPIO_Init+0x228>)
 8001af4:	f000 ff7a 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001af8:	2320      	movs	r3, #32
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b00:	2302      	movs	r3, #2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	483a      	ldr	r0, [pc, #232]	; (8001bf8 <MX_GPIO_Init+0x228>)
 8001b10:	f000 ff6c 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HOLD_Dose_Pin Weld_Feedback_Pin Size_Select_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin|Weld_Feedback_Pin|Size_Select_Pin;
 8001b14:	f242 0303 	movw	r3, #8195	; 0x2003
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4835      	ldr	r0, [pc, #212]	; (8001c00 <MX_GPIO_Init+0x230>)
 8001b2a:	f000 ff5f 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8001b2e:	23c0      	movs	r3, #192	; 0xc0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	482d      	ldr	r0, [pc, #180]	; (8001bfc <MX_GPIO_Init+0x22c>)
 8001b46:	f000 ff51 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Dose_Ready_Pin */
  GPIO_InitStruct.Pin = Dose_Ready_Pin;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b52:	2302      	movs	r3, #2
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Dose_Ready_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <MX_GPIO_Init+0x230>)
 8001b5e:	f000 ff45 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001b62:	2320      	movs	r3, #32
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4821      	ldr	r0, [pc, #132]	; (8001c00 <MX_GPIO_Init+0x230>)
 8001b7a:	f000 ff37 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Weld_Feedback2_Pin Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = Weld_Feedback2_Pin|Mode_Pin|Auto_Start_Pin;
 8001b7e:	f640 4304 	movw	r3, #3076	; 0xc04
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	481d      	ldr	r0, [pc, #116]	; (8001c08 <MX_GPIO_Init+0x238>)
 8001b94:	f000 ff2a 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Dose_Pulse_Out_Pin Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin 
                           H_Push_Out_Pin H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Dose_Pulse_Out_Pin|Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin 
 8001b98:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b9c:	61fb      	str	r3, [r7, #28]
                          |H_Push_Out_Pin|H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4814      	ldr	r0, [pc, #80]	; (8001c04 <MX_GPIO_Init+0x234>)
 8001bb2:	f000 ff1b 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin;
 8001bb6:	2318      	movs	r3, #24
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480e      	ldr	r0, [pc, #56]	; (8001c04 <MX_GPIO_Init+0x234>)
 8001bca:	f000 ff0f 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4808      	ldr	r0, [pc, #32]	; (8001c08 <MX_GPIO_Init+0x238>)
 8001be6:	f000 ff01 	bl	80029ec <HAL_GPIO_Init>

}
 8001bea:	bf00      	nop
 8001bec:	3730      	adds	r7, #48	; 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40020400 	.word	0x40020400

08001c0c <Init>:

/* USER CODE BEGIN 4 */
void Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 8001c12:	2064      	movs	r0, #100	; 0x64
 8001c14:	f000 fd9e 	bl	8002754 <HAL_Delay>
	  //ST7920_Init();
	  //ST7920_Graphic_mode(1);
	  //sprintf(tx_buffer, "WELCOME");
	  //ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
	  //ST7920_Update();
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	e0b0      	b.n	8001d80 <Init+0x174>
	  {
		  Buttons[i].B_Out = 0;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4a74      	ldr	r2, [pc, #464]	; (8001df4 <Init+0x1e8>)
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_State = 0;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4a70      	ldr	r2, [pc, #448]	; (8001df4 <Init+0x1e8>)
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3313      	adds	r3, #19
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_counter = 0;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a6b      	ldr	r2, [pc, #428]	; (8001df4 <Init+0x1e8>)
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3312      	adds	r3, #18
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Lock = 0;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4a67      	ldr	r2, [pc, #412]	; (8001df4 <Init+0x1e8>)
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3315      	adds	r3, #21
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		  Buttons[i].call_function = toggle_func;
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a62      	ldr	r2, [pc, #392]	; (8001df4 <Init+0x1e8>)
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3320      	adds	r3, #32
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <Init+0x1ec>)
 8001c76:	601a      	str	r2, [r3, #0]
		  Buttons[i].alternate_function = 0;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a5e      	ldr	r2, [pc, #376]	; (8001df4 <Init+0x1e8>)
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3324      	adds	r3, #36	; 0x24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
		  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	495b      	ldr	r1, [pc, #364]	; (8001dfc <Init+0x1f0>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4a55      	ldr	r2, [pc, #340]	; (8001df4 <Init+0x1e8>)
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin = Defines[i][1];
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	4953      	ldr	r1, [pc, #332]	; (8001dfc <Init+0x1f0>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3304      	adds	r3, #4
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	b290      	uxth	r0, r2
 8001cc2:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <Init+0x1e8>)
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3308      	adds	r3, #8
 8001cce:	4602      	mov	r2, r0
 8001cd0:	801a      	strh	r2, [r3, #0]
		  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	4949      	ldr	r1, [pc, #292]	; (8001dfc <Init+0x1f0>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <Init+0x1e8>)
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 8001cf6:	79fa      	ldrb	r2, [r7, #7]
 8001cf8:	4940      	ldr	r1, [pc, #256]	; (8001dfc <Init+0x1f0>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	330c      	adds	r3, #12
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	b290      	uxth	r0, r2
 8001d0c:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <Init+0x1e8>)
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3310      	adds	r3, #16
 8001d18:	4602      	mov	r2, r0
 8001d1a:	801a      	strh	r2, [r3, #0]
		  Buttons[i].Mode = Defines[i][4];
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	4937      	ldr	r1, [pc, #220]	; (8001dfc <Init+0x1f0>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	b2d0      	uxtb	r0, r2
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <Init+0x1e8>)
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3316      	adds	r3, #22
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Delay = Defines[i][5];
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	492d      	ldr	r1, [pc, #180]	; (8001dfc <Init+0x1f0>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3314      	adds	r3, #20
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	b290      	uxth	r0, r2
 8001d58:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <Init+0x1e8>)
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3318      	adds	r3, #24
 8001d64:	4602      	mov	r2, r0
 8001d66:	801a      	strh	r2, [r3, #0]
		  Buttons[i].addiction = 0;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <Init+0x1e8>)
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	331c      	adds	r3, #28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b14      	cmp	r3, #20
 8001d84:	f67f af4b 	bls.w	8001c1e <Init+0x12>
	  }
	  Buttons[0].alternate_function = macros1;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <Init+0x1e8>)
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <Init+0x1f4>)
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
	  Buttons[1].Label = "Prepare";
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <Init+0x1e8>)
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <Init+0x1f8>)
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
	  Buttons[1].third_function = SetSteps0;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <Init+0x1e8>)
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <Init+0x1fc>)
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
	  Buttons[1].addiction = &Buttons[13];
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <Init+0x1e8>)
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <Init+0x200>)
 8001d9e:	649a      	str	r2, [r3, #72]	; 0x48
	  Buttons[2].third_function = SetSteps2;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <Init+0x1e8>)
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <Init+0x204>)
 8001da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  Buttons[4].addiction = &Buttons[3];
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <Init+0x1e8>)
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <Init+0x208>)
 8001dac:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	  Buttons[6].addiction = &Buttons[5];
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <Init+0x1e8>)
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <Init+0x20c>)
 8001db4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  Buttons[7].third_function = SetSteps1;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <Init+0x1e8>)
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <Init+0x210>)
 8001dbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Buttons[9].Label = "mode";
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <Init+0x1e8>)
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <Init+0x214>)
 8001dc4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  Buttons[10].Label = "auto_start";
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <Init+0x1e8>)
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <Init+0x218>)
 8001dcc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	  Buttons[13].Label = "reed_switch";
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <Init+0x1e8>)
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <Init+0x21c>)
 8001dd4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	4813      	ldr	r0, [pc, #76]	; (8001e2c <Init+0x220>)
 8001dde:	f000 ffb7 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	4811      	ldr	r0, [pc, #68]	; (8001e2c <Init+0x220>)
 8001de8:	f000 ffb2 	bl	8002d50 <HAL_GPIO_WritePin>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000044c 	.word	0x2000044c
 8001df8:	08001fe1 	.word	0x08001fe1
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	08002065 	.word	0x08002065
 8001e04:	08005fd0 	.word	0x08005fd0
 8001e08:	08002389 	.word	0x08002389
 8001e0c:	20000688 	.word	0x20000688
 8001e10:	08002369 	.word	0x08002369
 8001e14:	200004d0 	.word	0x200004d0
 8001e18:	20000528 	.word	0x20000528
 8001e1c:	08002349 	.word	0x08002349
 8001e20:	08005fd8 	.word	0x08005fd8
 8001e24:	08005fe0 	.word	0x08005fe0
 8001e28:	08005fec 	.word	0x08005fec
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a60      	ldr	r2, [pc, #384]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f040 80b9 	bne.w	8001fb6 <HAL_TIM_PeriodElapsedCallback+0x186>
	{
		if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 8001e44:	2110      	movs	r1, #16
 8001e46:	485f      	ldr	r0, [pc, #380]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e48:	f000 ff6a 	bl	8002d20 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d131      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e016      	b.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	330c      	adds	r3, #12
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3310      	adds	r3, #16
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f000 ff68 	bl	8002d50 <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b14      	cmp	r3, #20
 8001e8a:	d9e5      	bls.n	8001e58 <HAL_TIM_PeriodElapsedCallback+0x28>
			}
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	484f      	ldr	r0, [pc, #316]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e90:	f001 fc94 	bl	80037bc <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim7);
 8001e94:	484e      	ldr	r0, [pc, #312]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e96:	f001 fbf2 	bl	800367e <HAL_TIM_Base_Stop_IT>
			Delay(4800000);
 8001e9a:	484e      	ldr	r0, [pc, #312]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e9c:	f000 fa82 	bl	80023a4 <Delay>
			while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 8001ea0:	e000      	b.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001ea2:	bf00      	nop
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4847      	ldr	r0, [pc, #284]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001ea8:	f000 ff3a 	bl	8002d20 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f7      	beq.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_NVIC_SystemReset();
 8001eb2:	f000 fd8a 	bl	80029ca <HAL_NVIC_SystemReset>
		}

		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73bb      	strb	r3, [r7, #14]
 8001eba:	e045      	b.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			if((Buttons[i].addiction->B_Out == 1 && Buttons[i].Mode == __DELAY && Buttons[i].addiction != 0) || Buttons[i].addiction == 0 || Buttons[i].Mode != __DELAY)
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	331c      	adds	r3, #28
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	7d1b      	ldrb	r3, [r3, #20]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d113      	bne.n	8001efa <HAL_TIM_PeriodElapsedCallback+0xca>
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3316      	adds	r3, #22
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d109      	bne.n	8001efa <HAL_TIM_PeriodElapsedCallback+0xca>
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	4a37      	ldr	r2, [pc, #220]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	331c      	adds	r3, #28
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d113      	bne.n	8001f22 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8001efa:	7bbb      	ldrb	r3, [r7, #14]
 8001efc:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	331c      	adds	r3, #28
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3316      	adds	r3, #22
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00f      	beq.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x112>
				Buttons[i].call_function(&Buttons[i]);
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3320      	adds	r3, #32
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	7bba      	ldrb	r2, [r7, #14]
 8001f34:	212c      	movs	r1, #44	; 0x2c
 8001f36:	fb01 f202 	mul.w	r2, r1, r2
 8001f3a:	4923      	ldr	r1, [pc, #140]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f3c:	440a      	add	r2, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	3301      	adds	r3, #1
 8001f46:	73bb      	strb	r3, [r7, #14]
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	2b14      	cmp	r3, #20
 8001f4c:	d9b6      	bls.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		if(flag == true || Buttons[10].B_Out == 1)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f58:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x13c>
		{
			HoldPrepareMotorUntill(Buttons[1].addiction, 1);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f94c 	bl	8002204 <HoldPrepareMotorUntill>
		}
		if((flag == true && Buttons[10].B_Out == 0) || Buttons[9].B_State == 0)
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_TIM_PeriodElapsedCallback+0x14e>
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f76:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x158>
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f80:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x166>
		{
			flag = false;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	480e      	ldr	r0, [pc, #56]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001f92:	f001 fc13 	bl	80037bc <HAL_TIM_PWM_Stop>
		}
		if(Buttons[14].B_Out && counter > 0)
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f98:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0x186>
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			Buttons[14].B_Out = 0;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
			counter = 0;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
	}
	if (htim->Instance==TIM6)
	{
		//ST7920_Update();
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40001400 	.word	0x40001400
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	2000044c 	.word	0x2000044c
 8001fcc:	2000040c 	.word	0x2000040c
 8001fd0:	200007e8 	.word	0x200007e8
 8001fd4:	00493e00 	.word	0x00493e00
 8001fd8:	200003fd 	.word	0x200003fd
 8001fdc:	200003f8 	.word	0x200003f8

08001fe0 <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	891b      	ldrh	r3, [r3, #8]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 fe94 	bl	8002d20 <HAL_GPIO_ReadPin>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d11d      	bne.n	800203a <toggle_func+0x5a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7d5b      	ldrb	r3, [r3, #21]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d119      	bne.n	800203a <toggle_func+0x5a>
		{
			if(button->B_counter < 10)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7c9b      	ldrb	r3, [r3, #18]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d806      	bhi.n	800201c <toggle_func+0x3c>
				button->B_counter++;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7c9b      	ldrb	r3, [r3, #18]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 10)
 800201a:	e01d      	b.n	8002058 <toggle_func+0x78>
			else
				if(button->B_State == 0)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7cdb      	ldrb	r3, [r3, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d119      	bne.n	8002058 <toggle_func+0x78>
				{
					button->B_State = 1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7d1b      	ldrb	r3, [r3, #20]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 10)
 8002038:	e00e      	b.n	8002058 <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7c9b      	ldrb	r3, [r3, #18]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <toggle_func+0x70>
				button->B_counter--;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7c9b      	ldrb	r3, [r3, #18]
 8002046:	3b01      	subs	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 800204e:	e004      	b.n	800205a <toggle_func+0x7a>
				button->B_State = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	74da      	strb	r2, [r3, #19]
}
 8002056:	e000      	b.n	800205a <toggle_func+0x7a>
			if(button->B_counter < 10)
 8002058:	bf00      	nop
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <macros1>:
void macros1(struct Button *button)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <macros1+0xc0>)
 800206e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <macros1+0xc0>)
 8002074:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	f000 fe68 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <macros1+0xc0>)
 8002082:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <macros1+0xc0>)
 8002088:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800208c:	2200      	movs	r2, #0
 800208e:	4619      	mov	r1, r3
 8002090:	f000 fe5e 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002094:	20c8      	movs	r0, #200	; 0xc8
 8002096:	f000 fb5d 	bl	8002754 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <macros1+0xc0>)
 800209c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <macros1+0xc0>)
 80020a2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80020a6:	2200      	movs	r2, #0
 80020a8:	4619      	mov	r1, r3
 80020aa:	f000 fe51 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <macros1+0xc0>)
 80020b0:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <macros1+0xc0>)
 80020b6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	f000 fe47 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80020c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020c6:	f000 fb45 	bl	8002754 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <macros1+0xc0>)
 80020cc:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <macros1+0xc0>)
 80020d2:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80020d6:	2201      	movs	r2, #1
 80020d8:	4619      	mov	r1, r3
 80020da:	f000 fe39 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <macros1+0xc0>)
 80020e0:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <macros1+0xc0>)
 80020e6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80020ea:	2201      	movs	r2, #1
 80020ec:	4619      	mov	r1, r3
 80020ee:	f000 fe2f 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <macros1+0xc0>)
 80020f4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <macros1+0xc0>)
 80020fa:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f000 fe25 	bl	8002d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <macros1+0xc0>)
 8002108:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <macros1+0xc0>)
 800210e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f000 fe1b 	bl	8002d50 <HAL_GPIO_WritePin>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000044c 	.word	0x2000044c

08002128 <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]

	uint32_t Limitation = 100000;
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HoldMotor+0xd8>)
 8002136:	617b      	str	r3, [r7, #20]
	uint16_t temp = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	827b      	strh	r3, [r7, #18]
	for(uint32_t j = 0; j < 10; j++)
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e020      	b.n	8002184 <HoldMotor+0x5c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68d8      	ldr	r0, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8a1b      	ldrh	r3, [r3, #16]
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	f000 fdff 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8b1b      	ldrh	r3, [r3, #24]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f922 	bl	80023a4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68d8      	ldr	r0, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8a1b      	ldrh	r3, [r3, #16]
 8002168:	2201      	movs	r2, #1
 800216a:	4619      	mov	r1, r3
 800216c:	f000 fdf0 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	8b1b      	ldrh	r3, [r3, #24]
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f913 	bl	80023a4 <Delay>
	for(uint32_t j = 0; j < 10; j++)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d9db      	bls.n	8002142 <HoldMotor+0x1a>
	}
	while(Button->B_State == mode && Limitation)
 800218a:	e02d      	b.n	80021e8 <HoldMotor+0xc0>
	{
		Limitation--;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3b01      	subs	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
		if(temp < ACCEL) temp++;
 8002192:	8a7b      	ldrh	r3, [r7, #18]
 8002194:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002198:	d202      	bcs.n	80021a0 <HoldMotor+0x78>
 800219a:	8a7b      	ldrh	r3, [r7, #18]
 800219c:	3301      	adds	r3, #1
 800219e:	827b      	strh	r3, [r7, #18]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68d8      	ldr	r0, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8a1b      	ldrh	r3, [r3, #16]
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	f000 fdd0 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	8b1b      	ldrh	r3, [r3, #24]
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	8a7b      	ldrh	r3, [r7, #18]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8f0 	bl	80023a4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8a1b      	ldrh	r3, [r3, #16]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4619      	mov	r1, r3
 80021d0:	f000 fdbe 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8b1b      	ldrh	r3, [r3, #24]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	8a7b      	ldrh	r3, [r7, #18]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f8de 	bl	80023a4 <Delay>
	while(Button->B_State == mode && Limitation)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7cdb      	ldrb	r3, [r3, #19]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d102      	bne.n	80021f8 <HoldMotor+0xd0>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1c9      	bne.n	800218c <HoldMotor+0x64>
	}

}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	000186a0 	.word	0x000186a0

08002204 <HoldPrepareMotorUntill>:

void HoldPrepareMotorUntill(struct Button *Button, uint8_t mode)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
	if(Button->B_State == mode)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7cdb      	ldrb	r3, [r3, #19]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	429a      	cmp	r2, r3
 8002218:	d10e      	bne.n	8002238 <HoldPrepareMotorUntill+0x34>
	{
		if(flag == false)
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HoldPrepareMotorUntill+0x54>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d012      	beq.n	800224e <HoldPrepareMotorUntill+0x4a>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002228:	2100      	movs	r1, #0
 800222a:	480c      	ldr	r0, [pc, #48]	; (800225c <HoldPrepareMotorUntill+0x58>)
 800222c:	f001 fa88 	bl	8003740 <HAL_TIM_PWM_Start>
			flag = true;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HoldPrepareMotorUntill+0x54>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		flag = false;
		Buttons[1].B_Out = 0;
	}
}
 8002236:	e00a      	b.n	800224e <HoldPrepareMotorUntill+0x4a>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002238:	2100      	movs	r1, #0
 800223a:	4808      	ldr	r0, [pc, #32]	; (800225c <HoldPrepareMotorUntill+0x58>)
 800223c:	f001 fabe 	bl	80037bc <HAL_TIM_PWM_Stop>
		flag = false;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HoldPrepareMotorUntill+0x54>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
		Buttons[1].B_Out = 0;
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HoldPrepareMotorUntill+0x5c>)
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200003fd 	.word	0x200003fd
 800225c:	2000040c 	.word	0x2000040c
 8002260:	2000044c 	.word	0x2000044c

08002264 <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 8002270:	23c8      	movs	r3, #200	; 0xc8
 8002272:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f107 0208 	add.w	r2, r7, #8
 8002284:	4610      	mov	r0, r2
 8002286:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	e020      	b.n	80022d0 <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68d8      	ldr	r0, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8a1b      	ldrh	r3, [r3, #16]
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	f000 fd59 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8b1b      	ldrh	r3, [r3, #24]
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f87c 	bl	80023a4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8a1b      	ldrh	r3, [r3, #16]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4619      	mov	r1, r3
 80022b8:	f000 fd4a 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8b1b      	ldrh	r3, [r3, #24]
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f86d 	bl	80023a4 <Delay>
	for(uint32_t j = 0; j < 20; j++)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	3301      	adds	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b13      	cmp	r3, #19
 80022d4:	d9db      	bls.n	800228e <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e02d      	b.n	8002338 <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 80022dc:	8afb      	ldrh	r3, [r7, #22]
 80022de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80022e2:	d202      	bcs.n	80022ea <TimerMotor+0x86>
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	3301      	adds	r3, #1
 80022e8:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68d8      	ldr	r0, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8a1b      	ldrh	r3, [r3, #16]
 80022f2:	2200      	movs	r2, #0
 80022f4:	4619      	mov	r1, r3
 80022f6:	f000 fd2b 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8b1b      	ldrh	r3, [r3, #24]
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	8afb      	ldrh	r3, [r7, #22]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f84b 	bl	80023a4 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68d8      	ldr	r0, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8a1b      	ldrh	r3, [r3, #16]
 8002316:	2201      	movs	r2, #1
 8002318:	4619      	mov	r1, r3
 800231a:	f000 fd19 	bl	8002d50 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8b1b      	ldrh	r3, [r3, #24]
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f839 	bl	80023a4 <Delay>
	for(uint32_t j = 0; j < steps; j++)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3cd      	bcc.n	80022dc <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 8002340:	bf00      	nop
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	*(steps) = Pullsteps;
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SetSteps1+0x1c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000

08002368 <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	*(steps) = Dosesteps;
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SetSteps2+0x1c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000004 	.word	0x20000004

08002388 <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <Delay>:

void Delay(uint32_t delay)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 80023ac:	e000      	b.n	80023b0 <Delay+0xc>
 80023ae:	bf00      	nop
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <Delay+0xa>
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <Error_Handler+0x1c>)
 80023d2:	f000 fcbd 	bl	8002d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	4802      	ldr	r0, [pc, #8]	; (80023e4 <Error_Handler+0x1c>)
 80023dc:	f000 fcb8 	bl	8002d50 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020000 	.word	0x40020000

080023e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_MspInit+0x4c>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_MspInit+0x4c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_TIM_Base_MspInit+0x70>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002466:	e01a      	b.n	800249e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_Base_MspInit+0x78>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d115      	bne.n	800249e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2037      	movs	r0, #55	; 0x37
 8002494:	f000 fa6f 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002498:	2037      	movs	r0, #55	; 0x37
 800249a:	f000 fa88 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40001400 	.word	0x40001400

080024b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_TIM_MspPostInit+0x68>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11d      	bne.n	8002512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_TIM_MspPostInit+0x6c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <HAL_TIM_MspPostInit+0x6c>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_TIM_MspPostInit+0x6c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = Prepare_OUT_Pin;
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002502:	2302      	movs	r3, #2
 8002504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Prepare_OUT_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <HAL_TIM_MspPostInit+0x70>)
 800250e:	f000 fa6d 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40000400 	.word	0x40000400
 8002520:	40023800 	.word	0x40023800
 8002524:	40020800 	.word	0x40020800

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <MemManage_Handler+0x4>

08002542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler+0x4>

0800254e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 f8ca 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM7_IRQHandler+0x10>)
 800258a:	f001 f96f 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200007e8 	.word	0x200007e8

08002598 <_sbrk>:
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x50>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x16>
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <_sbrk+0x50>)
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <_sbrk+0x54>)
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <_sbrk+0x50>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <_sbrk+0x50>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	466a      	mov	r2, sp
 80025be:	4293      	cmp	r3, r2
 80025c0:	d907      	bls.n	80025d2 <_sbrk+0x3a>
 80025c2:	f001 ffa1 	bl	8004508 <__errno>
 80025c6:	4602      	mov	r2, r0
 80025c8:	230c      	movs	r3, #12
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e006      	b.n	80025e0 <_sbrk+0x48>
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <_sbrk+0x50>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <_sbrk+0x50>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000400 	.word	0x20000400
 80025ec:	20000830 	.word	0x20000830

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <SystemInit+0x28>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <SystemInit+0x28>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SystemInit+0x28>)
 8002606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800260a:	609a      	str	r2, [r3, #8]
#endif
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0x14>
 8002620:	2100      	movs	r1, #0
 8002622:	e003      	b.n	800262c <LoopCopyDataInit>

08002624 <CopyDataInit>:
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <LoopFillZerobss+0x18>)
 8002626:	585b      	ldr	r3, [r3, r1]
 8002628:	5043      	str	r3, [r0, r1]
 800262a:	3104      	adds	r1, #4

0800262c <LoopCopyDataInit>:
 800262c:	480b      	ldr	r0, [pc, #44]	; (800265c <LoopFillZerobss+0x1c>)
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <LoopFillZerobss+0x20>)
 8002630:	1842      	adds	r2, r0, r1
 8002632:	429a      	cmp	r2, r3
 8002634:	d3f6      	bcc.n	8002624 <CopyDataInit>
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopFillZerobss+0x24>)
 8002638:	e002      	b.n	8002640 <LoopFillZerobss>

0800263a <FillZerobss>:
 800263a:	2300      	movs	r3, #0
 800263c:	f842 3b04 	str.w	r3, [r2], #4

08002640 <LoopFillZerobss>:
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <LoopFillZerobss+0x28>)
 8002642:	429a      	cmp	r2, r3
 8002644:	d3f9      	bcc.n	800263a <FillZerobss>
 8002646:	f7ff ffd3 	bl	80025f0 <SystemInit>
 800264a:	f001 ff63 	bl	8004514 <__libc_init_array>
 800264e:	f7fe fbf9 	bl	8000e44 <main>
 8002652:	4770      	bx	lr
 8002654:	20020000 	.word	0x20020000
 8002658:	08006240 	.word	0x08006240
 800265c:	20000000 	.word	0x20000000
 8002660:	200003dc 	.word	0x200003dc
 8002664:	200003dc 	.word	0x200003dc
 8002668:	20000830 	.word	0x20000830

0800266c <ADC_IRQHandler>:
 800266c:	e7fe      	b.n	800266c <ADC_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f961 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fea0 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f97d 	bl	80029d2 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 f941 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000200 	.word	0x20000200
 800270c:	20000208 	.word	0x20000208
 8002710:	20000204 	.word	0x20000204

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000208 	.word	0x20000208
 8002738:	20000828 	.word	0x20000828

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000828 	.word	0x20000828

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_Delay+0x40>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000208 	.word	0x20000208

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028f8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <__NVIC_SystemReset+0x20>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <__NVIC_SystemReset+0x20>)
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_SystemReset+0x24>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
 800290c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <__NVIC_SystemReset+0x1c>
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	05fa0004 	.word	0x05fa0004

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff7a 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff15 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff2a 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff7a 	bl	800288c <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff49 	bl	8002838 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff1d 	bl	80027fc <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80029ce:	f7ff ff91 	bl	80028f4 <__NVIC_SystemReset>

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff9e 	bl	800291c <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e16b      	b.n	8002ce0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 815a 	bne.w	8002cda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d00b      	beq.n	8002a46 <HAL_GPIO_Init+0x5a>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3a:	2b11      	cmp	r3, #17
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b12      	cmp	r3, #18
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0xfc>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b12      	cmp	r3, #18
 8002ae6:	d123      	bne.n	8002b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80b4 	beq.w	8002cda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_GPIO_Init+0x308>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a5e      	ldr	r2, [pc, #376]	; (8002cf4 <HAL_GPIO_Init+0x308>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <HAL_GPIO_Init+0x308>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <HAL_GPIO_Init+0x310>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_Init+0x226>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_GPIO_Init+0x314>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x222>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	; (8002d04 <HAL_GPIO_Init+0x318>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x21e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4e      	ldr	r2, [pc, #312]	; (8002d08 <HAL_GPIO_Init+0x31c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x21a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	; (8002d0c <HAL_GPIO_Init+0x320>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x216>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4c      	ldr	r2, [pc, #304]	; (8002d10 <HAL_GPIO_Init+0x324>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x212>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <HAL_GPIO_Init+0x328>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_GPIO_Init+0x32c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x20a>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00e      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	e00c      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	e00a      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c12:	2300      	movs	r3, #0
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c24:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c56:	4a31      	ldr	r2, [pc, #196]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c86:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd4:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	f67f ae90 	bls.w	8002a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3724      	adds	r7, #36	; 0x24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e001      	b.n	8002d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e25b      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d075      	beq.n	8002e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	4ba3      	ldr	r3, [pc, #652]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d00c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4ba0      	ldr	r3, [pc, #640]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d112      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b9d      	ldr	r3, [pc, #628]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4b99      	ldr	r3, [pc, #612]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05b      	beq.n	8002e8c <HAL_RCC_OscConfig+0x108>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d157      	bne.n	8002e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e236      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x74>
 8002dea:	4b91      	ldr	r3, [pc, #580]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a90      	ldr	r2, [pc, #576]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x98>
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a8a      	ldr	r2, [pc, #552]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b88      	ldr	r3, [pc, #544]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a87      	ldr	r2, [pc, #540]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	4b84      	ldr	r3, [pc, #528]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a83      	ldr	r2, [pc, #524]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a80      	ldr	r2, [pc, #512]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fc7e 	bl	800273c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7ff fc7a 	bl	800273c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1fb      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xc0>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fc6a 	bl	800273c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fc66 	bl	800273c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1e7      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0xe8>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	4b65      	ldr	r3, [pc, #404]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1bb      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4952      	ldr	r1, [pc, #328]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e03a      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCC_OscConfig+0x2b0>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7ff fc1f 	bl	800273c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f02:	f7ff fc1b 	bl	800273c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e19c      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4940      	ldr	r1, [pc, #256]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x2b0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff fbfe 	bl	800273c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f44:	f7ff fbfa 	bl	800273c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e17b      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d030      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b30      	ldr	r3, [pc, #192]	; (8003038 <HAL_RCC_OscConfig+0x2b4>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7ff fbde 	bl	800273c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f84:	f7ff fbda 	bl	800273c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e15b      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x200>
 8002fa2:	e015      	b.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x2b4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7ff fbc7 	bl	800273c <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7ff fbc3 	bl	800273c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e144      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a0 	beq.w	800311e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x2b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d121      	bne.n	800305e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_OscConfig+0x2b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_OscConfig+0x2b8>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7ff fb89 	bl	800273c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e011      	b.n	8003052 <HAL_RCC_OscConfig+0x2ce>
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	42470000 	.word	0x42470000
 8003038:	42470e80 	.word	0x42470e80
 800303c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003040:	f7ff fb7c 	bl	800273c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0fd      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x4d4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x2f0>
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a7c      	ldr	r2, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	e01c      	b.n	80030ae <HAL_RCC_OscConfig+0x32a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x312>
 800307c:	4b77      	ldr	r3, [pc, #476]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a76      	ldr	r2, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b74      	ldr	r3, [pc, #464]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a73      	ldr	r2, [pc, #460]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	e00b      	b.n	80030ae <HAL_RCC_OscConfig+0x32a>
 8003096:	4b71      	ldr	r3, [pc, #452]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a70      	ldr	r2, [pc, #448]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
 80030a2:	4b6e      	ldr	r3, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a6d      	ldr	r2, [pc, #436]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d015      	beq.n	80030e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7ff fb41 	bl	800273c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7ff fb3d 	bl	800273c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0bc      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ee      	beq.n	80030be <HAL_RCC_OscConfig+0x33a>
 80030e0:	e014      	b.n	800310c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7ff fb2b 	bl	800273c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7ff fb27 	bl	800273c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0a6      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4b52      	ldr	r3, [pc, #328]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a51      	ldr	r2, [pc, #324]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8092 	beq.w	800324c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d05c      	beq.n	80031ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d141      	bne.n	80031c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b48      	ldr	r3, [pc, #288]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7ff fafb 	bl	800273c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7ff faf7 	bl	800273c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e078      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	019b      	lsls	r3, r3, #6
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	4933      	ldr	r1, [pc, #204]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff fad0 	bl	800273c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7ff facc 	bl	800273c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04d      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x41c>
 80031be:	e045      	b.n	800324c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7ff fab9 	bl	800273c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7ff fab5 	bl	800273c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x44a>
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e029      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_RCC_OscConfig+0x4d8>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d115      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003222:	4013      	ands	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003228:	4293      	cmp	r3, r2
 800322a:	d10d      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000
 800325c:	40023800 	.word	0x40023800
 8003260:	42470060 	.word	0x42470060

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0cc      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d90c      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b8      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	494d      	ldr	r1, [pc, #308]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d044      	beq.n	8003384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d119      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	2b03      	cmp	r3, #3
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e067      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4934      	ldr	r1, [pc, #208]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7ff f9f2 	bl	800273c <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7ff f9ee 	bl	800273c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20c      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490e      	ldr	r1, [pc, #56]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ea:	f000 f821 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f952 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00
 8003420:	40023800 	.word	0x40023800
 8003424:	08005ff8 	.word	0x08005ff8
 8003428:	20000200 	.word	0x20000200
 800342c:	20000204 	.word	0x20000204

08003430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d007      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x32>
 8003452:	2b08      	cmp	r3, #8
 8003454:	d008      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x38>
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 80b4 	bne.w	80035c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800345e:	60bb      	str	r3, [r7, #8]
       break;
 8003460:	e0b3      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e0b0      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04a      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	f240 11ff 	movw	r1, #511	; 0x1ff
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	ea03 0501 	and.w	r5, r3, r1
 8003494:	ea04 0602 	and.w	r6, r4, r2
 8003498:	4629      	mov	r1, r5
 800349a:	4632      	mov	r2, r6
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	f04f 0400 	mov.w	r4, #0
 80034a4:	0154      	lsls	r4, r2, #5
 80034a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034aa:	014b      	lsls	r3, r1, #5
 80034ac:	4619      	mov	r1, r3
 80034ae:	4622      	mov	r2, r4
 80034b0:	1b49      	subs	r1, r1, r5
 80034b2:	eb62 0206 	sbc.w	r2, r2, r6
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f04f 0400 	mov.w	r4, #0
 80034be:	0194      	lsls	r4, r2, #6
 80034c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034c4:	018b      	lsls	r3, r1, #6
 80034c6:	1a5b      	subs	r3, r3, r1
 80034c8:	eb64 0402 	sbc.w	r4, r4, r2
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	00e2      	lsls	r2, r4, #3
 80034d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034da:	00d9      	lsls	r1, r3, #3
 80034dc:	460b      	mov	r3, r1
 80034de:	4614      	mov	r4, r2
 80034e0:	195b      	adds	r3, r3, r5
 80034e2:	eb44 0406 	adc.w	r4, r4, r6
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	0262      	lsls	r2, r4, #9
 80034f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034f4:	0259      	lsls	r1, r3, #9
 80034f6:	460b      	mov	r3, r1
 80034f8:	4614      	mov	r4, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	4621      	mov	r1, r4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	461a      	mov	r2, r3
 8003506:	4623      	mov	r3, r4
 8003508:	f7fd fafa 	bl	8000b00 <__aeabi_uldivmod>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e049      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	f04f 0400 	mov.w	r4, #0
 800351e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	ea03 0501 	and.w	r5, r3, r1
 800352a:	ea04 0602 	and.w	r6, r4, r2
 800352e:	4629      	mov	r1, r5
 8003530:	4632      	mov	r2, r6
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	0154      	lsls	r4, r2, #5
 800353c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003540:	014b      	lsls	r3, r1, #5
 8003542:	4619      	mov	r1, r3
 8003544:	4622      	mov	r2, r4
 8003546:	1b49      	subs	r1, r1, r5
 8003548:	eb62 0206 	sbc.w	r2, r2, r6
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	f04f 0400 	mov.w	r4, #0
 8003554:	0194      	lsls	r4, r2, #6
 8003556:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800355a:	018b      	lsls	r3, r1, #6
 800355c:	1a5b      	subs	r3, r3, r1
 800355e:	eb64 0402 	sbc.w	r4, r4, r2
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	00e2      	lsls	r2, r4, #3
 800356c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003570:	00d9      	lsls	r1, r3, #3
 8003572:	460b      	mov	r3, r1
 8003574:	4614      	mov	r4, r2
 8003576:	195b      	adds	r3, r3, r5
 8003578:	eb44 0406 	adc.w	r4, r4, r6
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	02a2      	lsls	r2, r4, #10
 8003586:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800358a:	0299      	lsls	r1, r3, #10
 800358c:	460b      	mov	r3, r1
 800358e:	4614      	mov	r4, r2
 8003590:	4618      	mov	r0, r3
 8003592:	4621      	mov	r1, r4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	f7fd faaf 	bl	8000b00 <__aeabi_uldivmod>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	60bb      	str	r3, [r7, #8]
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035c6:	60bb      	str	r3, [r7, #8]
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	68bb      	ldr	r3, [r7, #8]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400
 80035dc:	007a1200 	.word	0x007a1200

080035e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e01d      	b.n	800362e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe ff16 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 fbd2 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d007      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	f241 1311 	movw	r3, #4369	; 0x1111
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_TIM_Base_Stop_IT+0x48>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	f240 4344 	movw	r3, #1092	; 0x444
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_Base_Stop_IT+0x48>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01d      	b.n	8003722 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f815 	bl	800372a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fb58 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fe22 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_TIM_PWM_Start+0x74>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_TIM_PWM_Start+0x2c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_TIM_PWM_Start+0x78>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_TIM_PWM_Start+0x30>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_TIM_PWM_Start+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b06      	cmp	r3, #6
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fde4 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_TIM_PWM_Stop+0xa8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_PWM_Stop+0x2c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_TIM_PWM_Stop+0xac>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_PWM_Stop+0x30>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_TIM_PWM_Stop+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_TIM_PWM_Stop+0x66>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f240 4344 	movw	r3, #1092	; 0x444
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_TIM_PWM_Stop+0x66>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	f241 1311 	movw	r3, #4369	; 0x1111
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_TIM_PWM_Stop+0x96>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f240 4344 	movw	r3, #1092	; 0x444
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_TIM_PWM_Stop+0x96>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40010000 	.word	0x40010000
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa6b 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa5d 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fa6e 	bl	8003d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0204 	mvn.w	r2, #4
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa41 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa33 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fa44 	bl	8003d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa17 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa09 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa1a 	bl	8003d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0210 	mvn.w	r2, #16
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2208      	movs	r2, #8
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9ed 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9df 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f9f0 	bl	8003d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0201 	mvn.w	r2, #1
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fe fa20 	bl	8001e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fd6c 	bl	80044f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9b5 	bl	8003db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d10e      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0220 	mvn.w	r2, #32
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fd36 	bl	80044e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0b4      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	f200 809f 	bhi.w	8003bec <HAL_TIM_PWM_ConfigChannel+0x170>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003bed 	.word	0x08003bed
 8003abc:	08003bed 	.word	0x08003bed
 8003ac0:	08003bed 	.word	0x08003bed
 8003ac4:	08003b29 	.word	0x08003b29
 8003ac8:	08003bed 	.word	0x08003bed
 8003acc:	08003bed 	.word	0x08003bed
 8003ad0:	08003bed 	.word	0x08003bed
 8003ad4:	08003b6b 	.word	0x08003b6b
 8003ad8:	08003bed 	.word	0x08003bed
 8003adc:	08003bed 	.word	0x08003bed
 8003ae0:	08003bed 	.word	0x08003bed
 8003ae4:	08003bab 	.word	0x08003bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fa0a 	bl	8003f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6999      	ldr	r1, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	619a      	str	r2, [r3, #24]
      break;
 8003b26:	e062      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa5a 	bl	8003fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6999      	ldr	r1, [r3, #24]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
      break;
 8003b68:	e041      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 faaf 	bl	80040d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0208 	orr.w	r2, r2, #8
 8003b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0204 	bic.w	r2, r2, #4
 8003b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	61da      	str	r2, [r3, #28]
      break;
 8003ba8:	e021      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fb03 	bl	80041bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69d9      	ldr	r1, [r3, #28]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	61da      	str	r2, [r3, #28]
      break;
 8003bea:	e000      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003bec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_ConfigClockSource+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e0a6      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x166>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d067      	beq.n	8003d28 <HAL_TIM_ConfigClockSource+0x120>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d80b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x6c>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d073      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x140>
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d802      	bhi.n	8003c6a <HAL_TIM_ConfigClockSource+0x62>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06f      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c68:	e078      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d06c      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x140>
 8003c6e:	2b30      	cmp	r3, #48	; 0x30
 8003c70:	d06a      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c72:	e073      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c74:	2b70      	cmp	r3, #112	; 0x70
 8003c76:	d00d      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x8c>
 8003c78:	2b70      	cmp	r3, #112	; 0x70
 8003c7a:	d804      	bhi.n	8003c86 <HAL_TIM_ConfigClockSource+0x7e>
 8003c7c:	2b50      	cmp	r3, #80	; 0x50
 8003c7e:	d033      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xe0>
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d041      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c84:	e06a      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8a:	d066      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x152>
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d017      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c92:	e063      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6899      	ldr	r1, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f000 fb5a 	bl	800435c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
      break;
 8003cc0:	e04c      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fb43 	bl	800435c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce4:	609a      	str	r2, [r3, #8]
      break;
 8003ce6:	e039      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f000 fab7 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2150      	movs	r1, #80	; 0x50
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb10 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003d06:	e029      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f000 fad6 	bl	80042c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2160      	movs	r1, #96	; 0x60
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fb00 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003d26:	e019      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f000 fa97 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 faf0 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003d46:	e009      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 fae7 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a40      	ldr	r2, [pc, #256]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de6:	d00f      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3d      	ldr	r2, [pc, #244]	; (8003ee0 <TIM_Base_SetConfig+0x118>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <TIM_Base_SetConfig+0x11c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <TIM_Base_SetConfig+0x120>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d027      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ee0 <TIM_Base_SetConfig+0x118>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d023      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <TIM_Base_SetConfig+0x11c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <TIM_Base_SetConfig+0x120>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d017      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <TIM_Base_SetConfig+0x128>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <TIM_Base_SetConfig+0x12c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <TIM_Base_SetConfig+0x130>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a25      	ldr	r2, [pc, #148]	; (8003efc <TIM_Base_SetConfig+0x134>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <TIM_Base_SetConfig+0x138>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <TIM_Base_SetConfig+0x13c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0xf8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d103      	bne.n	8003ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	40001800 	.word	0x40001800
 8003f00:	40001c00 	.word	0x40001c00
 8003f04:	40002000 	.word	0x40002000

08003f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0302 	bic.w	r3, r3, #2
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <TIM_OC1_SetConfig+0xd8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC1_SetConfig+0x64>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <TIM_OC1_SetConfig+0xdc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10c      	bne.n	8003f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0308 	bic.w	r3, r3, #8
 8003f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <TIM_OC1_SetConfig+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC1_SetConfig+0x8e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <TIM_OC1_SetConfig+0xdc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d111      	bne.n	8003fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0210 	bic.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0320 	bic.w	r3, r3, #32
 8004032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a22      	ldr	r2, [pc, #136]	; (80040cc <TIM_OC2_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC2_SetConfig+0x68>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10d      	bne.n	800406c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a17      	ldr	r2, [pc, #92]	; (80040cc <TIM_OC2_SetConfig+0xe4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_OC2_SetConfig+0x94>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <TIM_OC2_SetConfig+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d113      	bne.n	80040a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800411c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <TIM_OC3_SetConfig+0xe0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC3_SetConfig+0x66>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <TIM_OC3_SetConfig+0xe4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <TIM_OC3_SetConfig+0xe0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC3_SetConfig+0x92>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC3_SetConfig+0xe4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d113      	bne.n	800418e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40010400 	.word	0x40010400

080041bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <TIM_OC4_SetConfig+0xa4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC4_SetConfig+0x68>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <TIM_OC4_SetConfig+0xa8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d109      	bne.n	8004238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40010400 	.word	0x40010400

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0210 	bic.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	f043 0307 	orr.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	021a      	lsls	r2, r3, #8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	431a      	orrs	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e05a      	b.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d01d      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10c      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40010400 	.word	0x40010400
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40001800 	.word	0x40001800

080044e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <__errno>:
 8004508:	4b01      	ldr	r3, [pc, #4]	; (8004510 <__errno+0x8>)
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000020c 	.word	0x2000020c

08004514 <__libc_init_array>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4e0d      	ldr	r6, [pc, #52]	; (800454c <__libc_init_array+0x38>)
 8004518:	4c0d      	ldr	r4, [pc, #52]	; (8004550 <__libc_init_array+0x3c>)
 800451a:	1ba4      	subs	r4, r4, r6
 800451c:	10a4      	asrs	r4, r4, #2
 800451e:	2500      	movs	r5, #0
 8004520:	42a5      	cmp	r5, r4
 8004522:	d109      	bne.n	8004538 <__libc_init_array+0x24>
 8004524:	4e0b      	ldr	r6, [pc, #44]	; (8004554 <__libc_init_array+0x40>)
 8004526:	4c0c      	ldr	r4, [pc, #48]	; (8004558 <__libc_init_array+0x44>)
 8004528:	f001 fd44 	bl	8005fb4 <_init>
 800452c:	1ba4      	subs	r4, r4, r6
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	2500      	movs	r5, #0
 8004532:	42a5      	cmp	r5, r4
 8004534:	d105      	bne.n	8004542 <__libc_init_array+0x2e>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800453c:	4798      	blx	r3
 800453e:	3501      	adds	r5, #1
 8004540:	e7ee      	b.n	8004520 <__libc_init_array+0xc>
 8004542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004546:	4798      	blx	r3
 8004548:	3501      	adds	r5, #1
 800454a:	e7f2      	b.n	8004532 <__libc_init_array+0x1e>
 800454c:	08006238 	.word	0x08006238
 8004550:	08006238 	.word	0x08006238
 8004554:	08006238 	.word	0x08006238
 8004558:	0800623c 	.word	0x0800623c

0800455c <memset>:
 800455c:	4402      	add	r2, r0
 800455e:	4603      	mov	r3, r0
 8004560:	4293      	cmp	r3, r2
 8004562:	d100      	bne.n	8004566 <memset+0xa>
 8004564:	4770      	bx	lr
 8004566:	f803 1b01 	strb.w	r1, [r3], #1
 800456a:	e7f9      	b.n	8004560 <memset+0x4>

0800456c <__cvt>:
 800456c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	ec55 4b10 	vmov	r4, r5, d0
 8004574:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004576:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800457a:	2d00      	cmp	r5, #0
 800457c:	460e      	mov	r6, r1
 800457e:	4691      	mov	r9, r2
 8004580:	4619      	mov	r1, r3
 8004582:	bfb8      	it	lt
 8004584:	4622      	movlt	r2, r4
 8004586:	462b      	mov	r3, r5
 8004588:	f027 0720 	bic.w	r7, r7, #32
 800458c:	bfbb      	ittet	lt
 800458e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004592:	461d      	movlt	r5, r3
 8004594:	2300      	movge	r3, #0
 8004596:	232d      	movlt	r3, #45	; 0x2d
 8004598:	bfb8      	it	lt
 800459a:	4614      	movlt	r4, r2
 800459c:	2f46      	cmp	r7, #70	; 0x46
 800459e:	700b      	strb	r3, [r1, #0]
 80045a0:	d004      	beq.n	80045ac <__cvt+0x40>
 80045a2:	2f45      	cmp	r7, #69	; 0x45
 80045a4:	d100      	bne.n	80045a8 <__cvt+0x3c>
 80045a6:	3601      	adds	r6, #1
 80045a8:	2102      	movs	r1, #2
 80045aa:	e000      	b.n	80045ae <__cvt+0x42>
 80045ac:	2103      	movs	r1, #3
 80045ae:	ab03      	add	r3, sp, #12
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	ab02      	add	r3, sp, #8
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4632      	mov	r2, r6
 80045b8:	4653      	mov	r3, sl
 80045ba:	ec45 4b10 	vmov	d0, r4, r5
 80045be:	f000 fbab 	bl	8004d18 <_dtoa_r>
 80045c2:	2f47      	cmp	r7, #71	; 0x47
 80045c4:	4680      	mov	r8, r0
 80045c6:	d102      	bne.n	80045ce <__cvt+0x62>
 80045c8:	f019 0f01 	tst.w	r9, #1
 80045cc:	d026      	beq.n	800461c <__cvt+0xb0>
 80045ce:	2f46      	cmp	r7, #70	; 0x46
 80045d0:	eb08 0906 	add.w	r9, r8, r6
 80045d4:	d111      	bne.n	80045fa <__cvt+0x8e>
 80045d6:	f898 3000 	ldrb.w	r3, [r8]
 80045da:	2b30      	cmp	r3, #48	; 0x30
 80045dc:	d10a      	bne.n	80045f4 <__cvt+0x88>
 80045de:	2200      	movs	r2, #0
 80045e0:	2300      	movs	r3, #0
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fc fa1b 	bl	8000a20 <__aeabi_dcmpeq>
 80045ea:	b918      	cbnz	r0, 80045f4 <__cvt+0x88>
 80045ec:	f1c6 0601 	rsb	r6, r6, #1
 80045f0:	f8ca 6000 	str.w	r6, [sl]
 80045f4:	f8da 3000 	ldr.w	r3, [sl]
 80045f8:	4499      	add	r9, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	4629      	mov	r1, r5
 8004602:	f7fc fa0d 	bl	8000a20 <__aeabi_dcmpeq>
 8004606:	b938      	cbnz	r0, 8004618 <__cvt+0xac>
 8004608:	2230      	movs	r2, #48	; 0x30
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	454b      	cmp	r3, r9
 800460e:	d205      	bcs.n	800461c <__cvt+0xb0>
 8004610:	1c59      	adds	r1, r3, #1
 8004612:	9103      	str	r1, [sp, #12]
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e7f8      	b.n	800460a <__cvt+0x9e>
 8004618:	f8cd 900c 	str.w	r9, [sp, #12]
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004620:	eba3 0308 	sub.w	r3, r3, r8
 8004624:	4640      	mov	r0, r8
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	b004      	add	sp, #16
 800462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800462e <__exponent>:
 800462e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004630:	2900      	cmp	r1, #0
 8004632:	4604      	mov	r4, r0
 8004634:	bfba      	itte	lt
 8004636:	4249      	neglt	r1, r1
 8004638:	232d      	movlt	r3, #45	; 0x2d
 800463a:	232b      	movge	r3, #43	; 0x2b
 800463c:	2909      	cmp	r1, #9
 800463e:	f804 2b02 	strb.w	r2, [r4], #2
 8004642:	7043      	strb	r3, [r0, #1]
 8004644:	dd20      	ble.n	8004688 <__exponent+0x5a>
 8004646:	f10d 0307 	add.w	r3, sp, #7
 800464a:	461f      	mov	r7, r3
 800464c:	260a      	movs	r6, #10
 800464e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004652:	fb06 1115 	mls	r1, r6, r5, r1
 8004656:	3130      	adds	r1, #48	; 0x30
 8004658:	2d09      	cmp	r5, #9
 800465a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800465e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004662:	4629      	mov	r1, r5
 8004664:	dc09      	bgt.n	800467a <__exponent+0x4c>
 8004666:	3130      	adds	r1, #48	; 0x30
 8004668:	3b02      	subs	r3, #2
 800466a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800466e:	42bb      	cmp	r3, r7
 8004670:	4622      	mov	r2, r4
 8004672:	d304      	bcc.n	800467e <__exponent+0x50>
 8004674:	1a10      	subs	r0, r2, r0
 8004676:	b003      	add	sp, #12
 8004678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467a:	4613      	mov	r3, r2
 800467c:	e7e7      	b.n	800464e <__exponent+0x20>
 800467e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004682:	f804 2b01 	strb.w	r2, [r4], #1
 8004686:	e7f2      	b.n	800466e <__exponent+0x40>
 8004688:	2330      	movs	r3, #48	; 0x30
 800468a:	4419      	add	r1, r3
 800468c:	7083      	strb	r3, [r0, #2]
 800468e:	1d02      	adds	r2, r0, #4
 8004690:	70c1      	strb	r1, [r0, #3]
 8004692:	e7ef      	b.n	8004674 <__exponent+0x46>

08004694 <_printf_float>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	b08d      	sub	sp, #52	; 0x34
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80046a0:	4616      	mov	r6, r2
 80046a2:	461f      	mov	r7, r3
 80046a4:	4605      	mov	r5, r0
 80046a6:	f001 f8ef 	bl	8005888 <_localeconv_r>
 80046aa:	6803      	ldr	r3, [r0, #0]
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fd8a 	bl	80001c8 <strlen>
 80046b4:	2300      	movs	r3, #0
 80046b6:	930a      	str	r3, [sp, #40]	; 0x28
 80046b8:	f8d8 3000 	ldr.w	r3, [r8]
 80046bc:	9005      	str	r0, [sp, #20]
 80046be:	3307      	adds	r3, #7
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	f103 0208 	add.w	r2, r3, #8
 80046c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046cc:	f8d4 b000 	ldr.w	fp, [r4]
 80046d0:	f8c8 2000 	str.w	r2, [r8]
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	4ba7      	ldr	r3, [pc, #668]	; (800498c <_printf_float+0x2f8>)
 80046f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046f4:	f7fc f9c6 	bl	8000a84 <__aeabi_dcmpun>
 80046f8:	bb70      	cbnz	r0, 8004758 <_printf_float+0xc4>
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	4ba3      	ldr	r3, [pc, #652]	; (800498c <_printf_float+0x2f8>)
 8004700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004704:	f7fc f9a0 	bl	8000a48 <__aeabi_dcmple>
 8004708:	bb30      	cbnz	r0, 8004758 <_printf_float+0xc4>
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fc f98f 	bl	8000a34 <__aeabi_dcmplt>
 8004716:	b110      	cbz	r0, 800471e <_printf_float+0x8a>
 8004718:	232d      	movs	r3, #45	; 0x2d
 800471a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471e:	4a9c      	ldr	r2, [pc, #624]	; (8004990 <_printf_float+0x2fc>)
 8004720:	4b9c      	ldr	r3, [pc, #624]	; (8004994 <_printf_float+0x300>)
 8004722:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004726:	bf8c      	ite	hi
 8004728:	4690      	movhi	r8, r2
 800472a:	4698      	movls	r8, r3
 800472c:	2303      	movs	r3, #3
 800472e:	f02b 0204 	bic.w	r2, fp, #4
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	f04f 0900 	mov.w	r9, #0
 800473a:	9700      	str	r7, [sp, #0]
 800473c:	4633      	mov	r3, r6
 800473e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f9e6 	bl	8004b14 <_printf_common>
 8004748:	3001      	adds	r0, #1
 800474a:	f040 808d 	bne.w	8004868 <_printf_float+0x1d4>
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	b00d      	add	sp, #52	; 0x34
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	4640      	mov	r0, r8
 800475e:	4649      	mov	r1, r9
 8004760:	f7fc f990 	bl	8000a84 <__aeabi_dcmpun>
 8004764:	b110      	cbz	r0, 800476c <_printf_float+0xd8>
 8004766:	4a8c      	ldr	r2, [pc, #560]	; (8004998 <_printf_float+0x304>)
 8004768:	4b8c      	ldr	r3, [pc, #560]	; (800499c <_printf_float+0x308>)
 800476a:	e7da      	b.n	8004722 <_printf_float+0x8e>
 800476c:	6861      	ldr	r1, [r4, #4]
 800476e:	1c4b      	adds	r3, r1, #1
 8004770:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004774:	a80a      	add	r0, sp, #40	; 0x28
 8004776:	d13e      	bne.n	80047f6 <_printf_float+0x162>
 8004778:	2306      	movs	r3, #6
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	2300      	movs	r3, #0
 800477e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004782:	ab09      	add	r3, sp, #36	; 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	ec49 8b10 	vmov	d0, r8, r9
 800478a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	f8cd a004 	str.w	sl, [sp, #4]
 8004794:	6861      	ldr	r1, [r4, #4]
 8004796:	4628      	mov	r0, r5
 8004798:	f7ff fee8 	bl	800456c <__cvt>
 800479c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80047a0:	2b47      	cmp	r3, #71	; 0x47
 80047a2:	4680      	mov	r8, r0
 80047a4:	d109      	bne.n	80047ba <_printf_float+0x126>
 80047a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a8:	1cd8      	adds	r0, r3, #3
 80047aa:	db02      	blt.n	80047b2 <_printf_float+0x11e>
 80047ac:	6862      	ldr	r2, [r4, #4]
 80047ae:	4293      	cmp	r3, r2
 80047b0:	dd47      	ble.n	8004842 <_printf_float+0x1ae>
 80047b2:	f1aa 0a02 	sub.w	sl, sl, #2
 80047b6:	fa5f fa8a 	uxtb.w	sl, sl
 80047ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047c0:	d824      	bhi.n	800480c <_printf_float+0x178>
 80047c2:	3901      	subs	r1, #1
 80047c4:	4652      	mov	r2, sl
 80047c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047ca:	9109      	str	r1, [sp, #36]	; 0x24
 80047cc:	f7ff ff2f 	bl	800462e <__exponent>
 80047d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047d2:	1813      	adds	r3, r2, r0
 80047d4:	2a01      	cmp	r2, #1
 80047d6:	4681      	mov	r9, r0
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	dc02      	bgt.n	80047e2 <_printf_float+0x14e>
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	07d1      	lsls	r1, r2, #31
 80047e0:	d501      	bpl.n	80047e6 <_printf_float+0x152>
 80047e2:	3301      	adds	r3, #1
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0a5      	beq.n	800473a <_printf_float+0xa6>
 80047ee:	232d      	movs	r3, #45	; 0x2d
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	e7a1      	b.n	800473a <_printf_float+0xa6>
 80047f6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047fa:	f000 8177 	beq.w	8004aec <_printf_float+0x458>
 80047fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004802:	d1bb      	bne.n	800477c <_printf_float+0xe8>
 8004804:	2900      	cmp	r1, #0
 8004806:	d1b9      	bne.n	800477c <_printf_float+0xe8>
 8004808:	2301      	movs	r3, #1
 800480a:	e7b6      	b.n	800477a <_printf_float+0xe6>
 800480c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004810:	d119      	bne.n	8004846 <_printf_float+0x1b2>
 8004812:	2900      	cmp	r1, #0
 8004814:	6863      	ldr	r3, [r4, #4]
 8004816:	dd0c      	ble.n	8004832 <_printf_float+0x19e>
 8004818:	6121      	str	r1, [r4, #16]
 800481a:	b913      	cbnz	r3, 8004822 <_printf_float+0x18e>
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	07d2      	lsls	r2, r2, #31
 8004820:	d502      	bpl.n	8004828 <_printf_float+0x194>
 8004822:	3301      	adds	r3, #1
 8004824:	440b      	add	r3, r1
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482a:	65a3      	str	r3, [r4, #88]	; 0x58
 800482c:	f04f 0900 	mov.w	r9, #0
 8004830:	e7d9      	b.n	80047e6 <_printf_float+0x152>
 8004832:	b913      	cbnz	r3, 800483a <_printf_float+0x1a6>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	07d0      	lsls	r0, r2, #31
 8004838:	d501      	bpl.n	800483e <_printf_float+0x1aa>
 800483a:	3302      	adds	r3, #2
 800483c:	e7f3      	b.n	8004826 <_printf_float+0x192>
 800483e:	2301      	movs	r3, #1
 8004840:	e7f1      	b.n	8004826 <_printf_float+0x192>
 8004842:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004846:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800484a:	4293      	cmp	r3, r2
 800484c:	db05      	blt.n	800485a <_printf_float+0x1c6>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	07d1      	lsls	r1, r2, #31
 8004854:	d5e8      	bpl.n	8004828 <_printf_float+0x194>
 8004856:	3301      	adds	r3, #1
 8004858:	e7e5      	b.n	8004826 <_printf_float+0x192>
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfd4      	ite	le
 800485e:	f1c3 0302 	rsble	r3, r3, #2
 8004862:	2301      	movgt	r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	e7de      	b.n	8004826 <_printf_float+0x192>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	055a      	lsls	r2, r3, #21
 800486c:	d407      	bmi.n	800487e <_printf_float+0x1ea>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4642      	mov	r2, r8
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d12b      	bne.n	80048d4 <_printf_float+0x240>
 800487c:	e767      	b.n	800474e <_printf_float+0xba>
 800487e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004882:	f240 80dc 	bls.w	8004a3e <_printf_float+0x3aa>
 8004886:	2200      	movs	r2, #0
 8004888:	2300      	movs	r3, #0
 800488a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800488e:	f7fc f8c7 	bl	8000a20 <__aeabi_dcmpeq>
 8004892:	2800      	cmp	r0, #0
 8004894:	d033      	beq.n	80048fe <_printf_float+0x26a>
 8004896:	2301      	movs	r3, #1
 8004898:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <_printf_float+0x30c>)
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f af54 	beq.w	800474e <_printf_float+0xba>
 80048a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048aa:	429a      	cmp	r2, r3
 80048ac:	db02      	blt.n	80048b4 <_printf_float+0x220>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07d8      	lsls	r0, r3, #31
 80048b2:	d50f      	bpl.n	80048d4 <_printf_float+0x240>
 80048b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af45 	beq.w	800474e <_printf_float+0xba>
 80048c4:	f04f 0800 	mov.w	r8, #0
 80048c8:	f104 091a 	add.w	r9, r4, #26
 80048cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	4543      	cmp	r3, r8
 80048d2:	dc09      	bgt.n	80048e8 <_printf_float+0x254>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	f100 8103 	bmi.w	8004ae2 <_printf_float+0x44e>
 80048dc:	68e0      	ldr	r0, [r4, #12]
 80048de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048e0:	4298      	cmp	r0, r3
 80048e2:	bfb8      	it	lt
 80048e4:	4618      	movlt	r0, r3
 80048e6:	e734      	b.n	8004752 <_printf_float+0xbe>
 80048e8:	2301      	movs	r3, #1
 80048ea:	464a      	mov	r2, r9
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f af2b 	beq.w	800474e <_printf_float+0xba>
 80048f8:	f108 0801 	add.w	r8, r8, #1
 80048fc:	e7e6      	b.n	80048cc <_printf_float+0x238>
 80048fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	dc2b      	bgt.n	800495c <_printf_float+0x2c8>
 8004904:	2301      	movs	r3, #1
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <_printf_float+0x30c>)
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af1d 	beq.w	800474e <_printf_float+0xba>
 8004914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004916:	b923      	cbnz	r3, 8004922 <_printf_float+0x28e>
 8004918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491a:	b913      	cbnz	r3, 8004922 <_printf_float+0x28e>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	07d9      	lsls	r1, r3, #31
 8004920:	d5d8      	bpl.n	80048d4 <_printf_float+0x240>
 8004922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f af0e 	beq.w	800474e <_printf_float+0xba>
 8004932:	f04f 0900 	mov.w	r9, #0
 8004936:	f104 0a1a 	add.w	sl, r4, #26
 800493a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493c:	425b      	negs	r3, r3
 800493e:	454b      	cmp	r3, r9
 8004940:	dc01      	bgt.n	8004946 <_printf_float+0x2b2>
 8004942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004944:	e794      	b.n	8004870 <_printf_float+0x1dc>
 8004946:	2301      	movs	r3, #1
 8004948:	4652      	mov	r2, sl
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	f43f aefc 	beq.w	800474e <_printf_float+0xba>
 8004956:	f109 0901 	add.w	r9, r9, #1
 800495a:	e7ee      	b.n	800493a <_printf_float+0x2a6>
 800495c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800495e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004960:	429a      	cmp	r2, r3
 8004962:	bfa8      	it	ge
 8004964:	461a      	movge	r2, r3
 8004966:	2a00      	cmp	r2, #0
 8004968:	4691      	mov	r9, r2
 800496a:	dd07      	ble.n	800497c <_printf_float+0x2e8>
 800496c:	4613      	mov	r3, r2
 800496e:	4631      	mov	r1, r6
 8004970:	4642      	mov	r2, r8
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f aee9 	beq.w	800474e <_printf_float+0xba>
 800497c:	f104 031a 	add.w	r3, r4, #26
 8004980:	f04f 0b00 	mov.w	fp, #0
 8004984:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004988:	9306      	str	r3, [sp, #24]
 800498a:	e015      	b.n	80049b8 <_printf_float+0x324>
 800498c:	7fefffff 	.word	0x7fefffff
 8004990:	0800600c 	.word	0x0800600c
 8004994:	08006008 	.word	0x08006008
 8004998:	08006014 	.word	0x08006014
 800499c:	08006010 	.word	0x08006010
 80049a0:	08006018 	.word	0x08006018
 80049a4:	2301      	movs	r3, #1
 80049a6:	9a06      	ldr	r2, [sp, #24]
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	f43f aecd 	beq.w	800474e <_printf_float+0xba>
 80049b4:	f10b 0b01 	add.w	fp, fp, #1
 80049b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049bc:	ebaa 0309 	sub.w	r3, sl, r9
 80049c0:	455b      	cmp	r3, fp
 80049c2:	dcef      	bgt.n	80049a4 <_printf_float+0x310>
 80049c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	44d0      	add	r8, sl
 80049cc:	db15      	blt.n	80049fa <_printf_float+0x366>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	07da      	lsls	r2, r3, #31
 80049d2:	d412      	bmi.n	80049fa <_printf_float+0x366>
 80049d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049d8:	eba3 020a 	sub.w	r2, r3, sl
 80049dc:	eba3 0a01 	sub.w	sl, r3, r1
 80049e0:	4592      	cmp	sl, r2
 80049e2:	bfa8      	it	ge
 80049e4:	4692      	movge	sl, r2
 80049e6:	f1ba 0f00 	cmp.w	sl, #0
 80049ea:	dc0e      	bgt.n	8004a0a <_printf_float+0x376>
 80049ec:	f04f 0800 	mov.w	r8, #0
 80049f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049f4:	f104 091a 	add.w	r9, r4, #26
 80049f8:	e019      	b.n	8004a2e <_printf_float+0x39a>
 80049fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	d1e5      	bne.n	80049d4 <_printf_float+0x340>
 8004a08:	e6a1      	b.n	800474e <_printf_float+0xba>
 8004a0a:	4653      	mov	r3, sl
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1e9      	bne.n	80049ec <_printf_float+0x358>
 8004a18:	e699      	b.n	800474e <_printf_float+0xba>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	464a      	mov	r2, r9
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f ae92 	beq.w	800474e <_printf_float+0xba>
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	eba3 030a 	sub.w	r3, r3, sl
 8004a38:	4543      	cmp	r3, r8
 8004a3a:	dcee      	bgt.n	8004a1a <_printf_float+0x386>
 8004a3c:	e74a      	b.n	80048d4 <_printf_float+0x240>
 8004a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a40:	2a01      	cmp	r2, #1
 8004a42:	dc01      	bgt.n	8004a48 <_printf_float+0x3b4>
 8004a44:	07db      	lsls	r3, r3, #31
 8004a46:	d53a      	bpl.n	8004abe <_printf_float+0x42a>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4642      	mov	r2, r8
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f ae7b 	beq.w	800474e <_printf_float+0xba>
 8004a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	f108 0801 	add.w	r8, r8, #1
 8004a68:	f43f ae71 	beq.w	800474e <_printf_float+0xba>
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f7fb ffd1 	bl	8000a20 <__aeabi_dcmpeq>
 8004a7e:	b9c8      	cbnz	r0, 8004ab4 <_printf_float+0x420>
 8004a80:	4653      	mov	r3, sl
 8004a82:	4642      	mov	r2, r8
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d10e      	bne.n	8004aac <_printf_float+0x418>
 8004a8e:	e65e      	b.n	800474e <_printf_float+0xba>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f ae57 	beq.w	800474e <_printf_float+0xba>
 8004aa0:	f108 0801 	add.w	r8, r8, #1
 8004aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	4543      	cmp	r3, r8
 8004aaa:	dcf1      	bgt.n	8004a90 <_printf_float+0x3fc>
 8004aac:	464b      	mov	r3, r9
 8004aae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ab2:	e6de      	b.n	8004872 <_printf_float+0x1de>
 8004ab4:	f04f 0800 	mov.w	r8, #0
 8004ab8:	f104 0a1a 	add.w	sl, r4, #26
 8004abc:	e7f2      	b.n	8004aa4 <_printf_float+0x410>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e7df      	b.n	8004a82 <_printf_float+0x3ee>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	464a      	mov	r2, r9
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f ae3e 	beq.w	800474e <_printf_float+0xba>
 8004ad2:	f108 0801 	add.w	r8, r8, #1
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dcf0      	bgt.n	8004ac2 <_printf_float+0x42e>
 8004ae0:	e6fc      	b.n	80048dc <_printf_float+0x248>
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	f104 0919 	add.w	r9, r4, #25
 8004aea:	e7f4      	b.n	8004ad6 <_printf_float+0x442>
 8004aec:	2900      	cmp	r1, #0
 8004aee:	f43f ae8b 	beq.w	8004808 <_printf_float+0x174>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004af8:	ab09      	add	r3, sp, #36	; 0x24
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	ec49 8b10 	vmov	d0, r8, r9
 8004b00:	6022      	str	r2, [r4, #0]
 8004b02:	f8cd a004 	str.w	sl, [sp, #4]
 8004b06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff fd2e 	bl	800456c <__cvt>
 8004b10:	4680      	mov	r8, r0
 8004b12:	e648      	b.n	80047a6 <_printf_float+0x112>

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4691      	mov	r9, r2
 8004b1a:	461f      	mov	r7, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfb8      	it	lt
 8004b28:	4613      	movlt	r3, r2
 8004b2a:	f8c9 3000 	str.w	r3, [r9]
 8004b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b32:	4606      	mov	r6, r0
 8004b34:	460c      	mov	r4, r1
 8004b36:	b112      	cbz	r2, 8004b3e <_printf_common+0x2a>
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f8c9 3000 	str.w	r3, [r9]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b48:	3302      	addmi	r3, #2
 8004b4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004b4e:	6825      	ldr	r5, [r4, #0]
 8004b50:	f015 0506 	ands.w	r5, r5, #6
 8004b54:	d107      	bne.n	8004b66 <_printf_common+0x52>
 8004b56:	f104 0a19 	add.w	sl, r4, #25
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	dc28      	bgt.n	8004bb8 <_printf_common+0xa4>
 8004b66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	3300      	adds	r3, #0
 8004b6e:	bf18      	it	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	0692      	lsls	r2, r2, #26
 8004b74:	d42d      	bmi.n	8004bd2 <_printf_common+0xbe>
 8004b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	47c0      	blx	r8
 8004b80:	3001      	adds	r0, #1
 8004b82:	d020      	beq.n	8004bc6 <_printf_common+0xb2>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	68e5      	ldr	r5, [r4, #12]
 8004b88:	f8d9 2000 	ldr.w	r2, [r9]
 8004b8c:	f003 0306 	and.w	r3, r3, #6
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	bf08      	it	eq
 8004b94:	1aad      	subeq	r5, r5, r2
 8004b96:	68a3      	ldr	r3, [r4, #8]
 8004b98:	6922      	ldr	r2, [r4, #16]
 8004b9a:	bf0c      	ite	eq
 8004b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba0:	2500      	movne	r5, #0
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	bfc4      	itt	gt
 8004ba6:	1a9b      	subgt	r3, r3, r2
 8004ba8:	18ed      	addgt	r5, r5, r3
 8004baa:	f04f 0900 	mov.w	r9, #0
 8004bae:	341a      	adds	r4, #26
 8004bb0:	454d      	cmp	r5, r9
 8004bb2:	d11a      	bne.n	8004bea <_printf_common+0xd6>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e008      	b.n	8004bca <_printf_common+0xb6>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4652      	mov	r2, sl
 8004bbc:	4639      	mov	r1, r7
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	47c0      	blx	r8
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d103      	bne.n	8004bce <_printf_common+0xba>
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	3501      	adds	r5, #1
 8004bd0:	e7c3      	b.n	8004b5a <_printf_common+0x46>
 8004bd2:	18e1      	adds	r1, r4, r3
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	2030      	movs	r0, #48	; 0x30
 8004bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bdc:	4422      	add	r2, r4
 8004bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004be6:	3302      	adds	r3, #2
 8004be8:	e7c5      	b.n	8004b76 <_printf_common+0x62>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4622      	mov	r2, r4
 8004bee:	4639      	mov	r1, r7
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	47c0      	blx	r8
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d0e6      	beq.n	8004bc6 <_printf_common+0xb2>
 8004bf8:	f109 0901 	add.w	r9, r9, #1
 8004bfc:	e7d8      	b.n	8004bb0 <_printf_common+0x9c>

08004bfe <quorem>:
 8004bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c02:	6903      	ldr	r3, [r0, #16]
 8004c04:	690c      	ldr	r4, [r1, #16]
 8004c06:	42a3      	cmp	r3, r4
 8004c08:	4680      	mov	r8, r0
 8004c0a:	f2c0 8082 	blt.w	8004d12 <quorem+0x114>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	f101 0714 	add.w	r7, r1, #20
 8004c14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c18:	f100 0614 	add.w	r6, r0, #20
 8004c1c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c20:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c24:	eb06 030c 	add.w	r3, r6, ip
 8004c28:	3501      	adds	r5, #1
 8004c2a:	eb07 090c 	add.w	r9, r7, ip
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c34:	b395      	cbz	r5, 8004c9c <quorem+0x9e>
 8004c36:	f04f 0a00 	mov.w	sl, #0
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	46b6      	mov	lr, r6
 8004c3e:	46d3      	mov	fp, sl
 8004c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c44:	b293      	uxth	r3, r2
 8004c46:	fb05 a303 	mla	r3, r5, r3, sl
 8004c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	ebab 0303 	sub.w	r3, fp, r3
 8004c54:	0c12      	lsrs	r2, r2, #16
 8004c56:	f8de b000 	ldr.w	fp, [lr]
 8004c5a:	fb05 a202 	mla	r2, r5, r2, sl
 8004c5e:	fa13 f38b 	uxtah	r3, r3, fp
 8004c62:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c66:	fa1f fb82 	uxth.w	fp, r2
 8004c6a:	f8de 2000 	ldr.w	r2, [lr]
 8004c6e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c7c:	4581      	cmp	r9, r0
 8004c7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c82:	f84e 3b04 	str.w	r3, [lr], #4
 8004c86:	d2db      	bcs.n	8004c40 <quorem+0x42>
 8004c88:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c8c:	b933      	cbnz	r3, 8004c9c <quorem+0x9e>
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	3b04      	subs	r3, #4
 8004c92:	429e      	cmp	r6, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	d330      	bcc.n	8004cfa <quorem+0xfc>
 8004c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	f001 f829 	bl	8005cf4 <__mcmp>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	db25      	blt.n	8004cf2 <quorem+0xf4>
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f04f 0c00 	mov.w	ip, #0
 8004cae:	f857 2b04 	ldr.w	r2, [r7], #4
 8004cb2:	f8d0 e000 	ldr.w	lr, [r0]
 8004cb6:	b293      	uxth	r3, r2
 8004cb8:	ebac 0303 	sub.w	r3, ip, r3
 8004cbc:	0c12      	lsrs	r2, r2, #16
 8004cbe:	fa13 f38e 	uxtah	r3, r3, lr
 8004cc2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cd0:	45b9      	cmp	r9, r7
 8004cd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cd6:	f840 3b04 	str.w	r3, [r0], #4
 8004cda:	d2e8      	bcs.n	8004cae <quorem+0xb0>
 8004cdc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ce0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ce4:	b92a      	cbnz	r2, 8004cf2 <quorem+0xf4>
 8004ce6:	3b04      	subs	r3, #4
 8004ce8:	429e      	cmp	r6, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	d30b      	bcc.n	8004d06 <quorem+0x108>
 8004cee:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	b003      	add	sp, #12
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d1ca      	bne.n	8004c98 <quorem+0x9a>
 8004d02:	3c01      	subs	r4, #1
 8004d04:	e7c5      	b.n	8004c92 <quorem+0x94>
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d1ef      	bne.n	8004cee <quorem+0xf0>
 8004d0e:	3c01      	subs	r4, #1
 8004d10:	e7ea      	b.n	8004ce8 <quorem+0xea>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e7ee      	b.n	8004cf4 <quorem+0xf6>
	...

08004d18 <_dtoa_r>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ec57 6b10 	vmov	r6, r7, d0
 8004d20:	b097      	sub	sp, #92	; 0x5c
 8004d22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d24:	9106      	str	r1, [sp, #24]
 8004d26:	4604      	mov	r4, r0
 8004d28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d30:	e9cd 6700 	strd	r6, r7, [sp]
 8004d34:	b93d      	cbnz	r5, 8004d46 <_dtoa_r+0x2e>
 8004d36:	2010      	movs	r0, #16
 8004d38:	f000 fdb4 	bl	80058a4 <malloc>
 8004d3c:	6260      	str	r0, [r4, #36]	; 0x24
 8004d3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d42:	6005      	str	r5, [r0, #0]
 8004d44:	60c5      	str	r5, [r0, #12]
 8004d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	b151      	cbz	r1, 8004d62 <_dtoa_r+0x4a>
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	604a      	str	r2, [r1, #4]
 8004d50:	2301      	movs	r3, #1
 8004d52:	4093      	lsls	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 fdeb 	bl	8005932 <_Bfree>
 8004d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	1e3b      	subs	r3, r7, #0
 8004d64:	bfbb      	ittet	lt
 8004d66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	9301      	strlt	r3, [sp, #4]
 8004d6c:	2300      	movge	r3, #0
 8004d6e:	2201      	movlt	r2, #1
 8004d70:	bfac      	ite	ge
 8004d72:	f8c8 3000 	strge.w	r3, [r8]
 8004d76:	f8c8 2000 	strlt.w	r2, [r8]
 8004d7a:	4baf      	ldr	r3, [pc, #700]	; (8005038 <_dtoa_r+0x320>)
 8004d7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d80:	ea33 0308 	bics.w	r3, r3, r8
 8004d84:	d114      	bne.n	8004db0 <_dtoa_r+0x98>
 8004d86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	b923      	cbnz	r3, 8004d9c <_dtoa_r+0x84>
 8004d92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f000 8542 	beq.w	8005820 <_dtoa_r+0xb08>
 8004d9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800504c <_dtoa_r+0x334>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8544 	beq.w	8005830 <_dtoa_r+0xb18>
 8004da8:	f10b 0303 	add.w	r3, fp, #3
 8004dac:	f000 bd3e 	b.w	800582c <_dtoa_r+0xb14>
 8004db0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2300      	movs	r3, #0
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fe30 	bl	8000a20 <__aeabi_dcmpeq>
 8004dc0:	4681      	mov	r9, r0
 8004dc2:	b168      	cbz	r0, 8004de0 <_dtoa_r+0xc8>
 8004dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8524 	beq.w	800581a <_dtoa_r+0xb02>
 8004dd2:	4b9a      	ldr	r3, [pc, #616]	; (800503c <_dtoa_r+0x324>)
 8004dd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dd6:	f103 3bff 	add.w	fp, r3, #4294967295
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	f000 bd28 	b.w	8005830 <_dtoa_r+0xb18>
 8004de0:	aa14      	add	r2, sp, #80	; 0x50
 8004de2:	a915      	add	r1, sp, #84	; 0x54
 8004de4:	ec47 6b10 	vmov	d0, r6, r7
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 fffa 	bl	8005de2 <__d2b>
 8004dee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004df2:	9004      	str	r0, [sp, #16]
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	d07c      	beq.n	8004ef2 <_dtoa_r+0x1da>
 8004df8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004e00:	46b2      	mov	sl, r6
 8004e02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4b8b      	ldr	r3, [pc, #556]	; (8005040 <_dtoa_r+0x328>)
 8004e12:	4650      	mov	r0, sl
 8004e14:	4659      	mov	r1, fp
 8004e16:	f7fb f9e3 	bl	80001e0 <__aeabi_dsub>
 8004e1a:	a381      	add	r3, pc, #516	; (adr r3, 8005020 <_dtoa_r+0x308>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb fb96 	bl	8000550 <__aeabi_dmul>
 8004e24:	a380      	add	r3, pc, #512	; (adr r3, 8005028 <_dtoa_r+0x310>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb f9db 	bl	80001e4 <__adddf3>
 8004e2e:	4606      	mov	r6, r0
 8004e30:	4628      	mov	r0, r5
 8004e32:	460f      	mov	r7, r1
 8004e34:	f7fb fb22 	bl	800047c <__aeabi_i2d>
 8004e38:	a37d      	add	r3, pc, #500	; (adr r3, 8005030 <_dtoa_r+0x318>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fb87 	bl	8000550 <__aeabi_dmul>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4630      	mov	r0, r6
 8004e48:	4639      	mov	r1, r7
 8004e4a:	f7fb f9cb 	bl	80001e4 <__adddf3>
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460f      	mov	r7, r1
 8004e52:	f7fb fe2d 	bl	8000ab0 <__aeabi_d2iz>
 8004e56:	2200      	movs	r2, #0
 8004e58:	4682      	mov	sl, r0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fde8 	bl	8000a34 <__aeabi_dcmplt>
 8004e64:	b148      	cbz	r0, 8004e7a <_dtoa_r+0x162>
 8004e66:	4650      	mov	r0, sl
 8004e68:	f7fb fb08 	bl	800047c <__aeabi_i2d>
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	463b      	mov	r3, r7
 8004e70:	f7fb fdd6 	bl	8000a20 <__aeabi_dcmpeq>
 8004e74:	b908      	cbnz	r0, 8004e7a <_dtoa_r+0x162>
 8004e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e7a:	f1ba 0f16 	cmp.w	sl, #22
 8004e7e:	d859      	bhi.n	8004f34 <_dtoa_r+0x21c>
 8004e80:	4970      	ldr	r1, [pc, #448]	; (8005044 <_dtoa_r+0x32c>)
 8004e82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e8e:	f7fb fdef 	bl	8000a70 <__aeabi_dcmpgt>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d050      	beq.n	8004f38 <_dtoa_r+0x220>
 8004e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ea0:	1b5d      	subs	r5, r3, r5
 8004ea2:	f1b5 0801 	subs.w	r8, r5, #1
 8004ea6:	bf49      	itett	mi
 8004ea8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004eac:	2300      	movpl	r3, #0
 8004eae:	9305      	strmi	r3, [sp, #20]
 8004eb0:	f04f 0800 	movmi.w	r8, #0
 8004eb4:	bf58      	it	pl
 8004eb6:	9305      	strpl	r3, [sp, #20]
 8004eb8:	f1ba 0f00 	cmp.w	sl, #0
 8004ebc:	db3e      	blt.n	8004f3c <_dtoa_r+0x224>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	44d0      	add	r8, sl
 8004ec2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ec6:	9307      	str	r3, [sp, #28]
 8004ec8:	9b06      	ldr	r3, [sp, #24]
 8004eca:	2b09      	cmp	r3, #9
 8004ecc:	f200 8090 	bhi.w	8004ff0 <_dtoa_r+0x2d8>
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	bfc4      	itt	gt
 8004ed4:	3b04      	subgt	r3, #4
 8004ed6:	9306      	strgt	r3, [sp, #24]
 8004ed8:	9b06      	ldr	r3, [sp, #24]
 8004eda:	f1a3 0302 	sub.w	r3, r3, #2
 8004ede:	bfcc      	ite	gt
 8004ee0:	2500      	movgt	r5, #0
 8004ee2:	2501      	movle	r5, #1
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	f200 808f 	bhi.w	8005008 <_dtoa_r+0x2f0>
 8004eea:	e8df f003 	tbb	[pc, r3]
 8004eee:	7f7d      	.short	0x7f7d
 8004ef0:	7131      	.short	0x7131
 8004ef2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004ef6:	441d      	add	r5, r3
 8004ef8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004efc:	2820      	cmp	r0, #32
 8004efe:	dd13      	ble.n	8004f28 <_dtoa_r+0x210>
 8004f00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f04:	9b00      	ldr	r3, [sp, #0]
 8004f06:	fa08 f800 	lsl.w	r8, r8, r0
 8004f0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f0e:	fa23 f000 	lsr.w	r0, r3, r0
 8004f12:	ea48 0000 	orr.w	r0, r8, r0
 8004f16:	f7fb faa1 	bl	800045c <__aeabi_ui2d>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4682      	mov	sl, r0
 8004f1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004f22:	3d01      	subs	r5, #1
 8004f24:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f26:	e772      	b.n	8004e0e <_dtoa_r+0xf6>
 8004f28:	9b00      	ldr	r3, [sp, #0]
 8004f2a:	f1c0 0020 	rsb	r0, r0, #32
 8004f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f32:	e7f0      	b.n	8004f16 <_dtoa_r+0x1fe>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e7b1      	b.n	8004e9c <_dtoa_r+0x184>
 8004f38:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f3a:	e7b0      	b.n	8004e9e <_dtoa_r+0x186>
 8004f3c:	9b05      	ldr	r3, [sp, #20]
 8004f3e:	eba3 030a 	sub.w	r3, r3, sl
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f1ca 0300 	rsb	r3, sl, #0
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004f4e:	e7bb      	b.n	8004ec8 <_dtoa_r+0x1b0>
 8004f50:	2301      	movs	r3, #1
 8004f52:	930a      	str	r3, [sp, #40]	; 0x28
 8004f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd59      	ble.n	800500e <_dtoa_r+0x2f6>
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	4699      	mov	r9, r3
 8004f5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f60:	2200      	movs	r2, #0
 8004f62:	6072      	str	r2, [r6, #4]
 8004f64:	2204      	movs	r2, #4
 8004f66:	f102 0014 	add.w	r0, r2, #20
 8004f6a:	4298      	cmp	r0, r3
 8004f6c:	6871      	ldr	r1, [r6, #4]
 8004f6e:	d953      	bls.n	8005018 <_dtoa_r+0x300>
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fcaa 	bl	80058ca <_Balloc>
 8004f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f78:	6030      	str	r0, [r6, #0]
 8004f7a:	f1b9 0f0e 	cmp.w	r9, #14
 8004f7e:	f8d3 b000 	ldr.w	fp, [r3]
 8004f82:	f200 80e6 	bhi.w	8005152 <_dtoa_r+0x43a>
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	f000 80e3 	beq.w	8005152 <_dtoa_r+0x43a>
 8004f8c:	ed9d 7b00 	vldr	d7, [sp]
 8004f90:	f1ba 0f00 	cmp.w	sl, #0
 8004f94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f98:	dd74      	ble.n	8005084 <_dtoa_r+0x36c>
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <_dtoa_r+0x32c>)
 8004f9c:	f00a 030f 	and.w	r3, sl, #15
 8004fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fa4:	ed93 7b00 	vldr	d7, [r3]
 8004fa8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004fac:	06f0      	lsls	r0, r6, #27
 8004fae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004fb2:	d565      	bpl.n	8005080 <_dtoa_r+0x368>
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <_dtoa_r+0x330>)
 8004fb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fbe:	f7fb fbf1 	bl	80007a4 <__aeabi_ddiv>
 8004fc2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fc6:	f006 060f 	and.w	r6, r6, #15
 8004fca:	2503      	movs	r5, #3
 8004fcc:	4f1e      	ldr	r7, [pc, #120]	; (8005048 <_dtoa_r+0x330>)
 8004fce:	e04c      	b.n	800506a <_dtoa_r+0x352>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd6:	4453      	add	r3, sl
 8004fd8:	f103 0901 	add.w	r9, r3, #1
 8004fdc:	9302      	str	r3, [sp, #8]
 8004fde:	464b      	mov	r3, r9
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	bfb8      	it	lt
 8004fe4:	2301      	movlt	r3, #1
 8004fe6:	e7ba      	b.n	8004f5e <_dtoa_r+0x246>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e7b2      	b.n	8004f52 <_dtoa_r+0x23a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e7f0      	b.n	8004fd2 <_dtoa_r+0x2ba>
 8004ff0:	2501      	movs	r5, #1
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9306      	str	r3, [sp, #24]
 8004ff6:	950a      	str	r5, [sp, #40]	; 0x28
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	9302      	str	r3, [sp, #8]
 8004ffe:	4699      	mov	r9, r3
 8005000:	2200      	movs	r2, #0
 8005002:	2312      	movs	r3, #18
 8005004:	920b      	str	r2, [sp, #44]	; 0x2c
 8005006:	e7aa      	b.n	8004f5e <_dtoa_r+0x246>
 8005008:	2301      	movs	r3, #1
 800500a:	930a      	str	r3, [sp, #40]	; 0x28
 800500c:	e7f4      	b.n	8004ff8 <_dtoa_r+0x2e0>
 800500e:	2301      	movs	r3, #1
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	4699      	mov	r9, r3
 8005014:	461a      	mov	r2, r3
 8005016:	e7f5      	b.n	8005004 <_dtoa_r+0x2ec>
 8005018:	3101      	adds	r1, #1
 800501a:	6071      	str	r1, [r6, #4]
 800501c:	0052      	lsls	r2, r2, #1
 800501e:	e7a2      	b.n	8004f66 <_dtoa_r+0x24e>
 8005020:	636f4361 	.word	0x636f4361
 8005024:	3fd287a7 	.word	0x3fd287a7
 8005028:	8b60c8b3 	.word	0x8b60c8b3
 800502c:	3fc68a28 	.word	0x3fc68a28
 8005030:	509f79fb 	.word	0x509f79fb
 8005034:	3fd34413 	.word	0x3fd34413
 8005038:	7ff00000 	.word	0x7ff00000
 800503c:	08006019 	.word	0x08006019
 8005040:	3ff80000 	.word	0x3ff80000
 8005044:	08006050 	.word	0x08006050
 8005048:	08006028 	.word	0x08006028
 800504c:	08006023 	.word	0x08006023
 8005050:	07f1      	lsls	r1, r6, #31
 8005052:	d508      	bpl.n	8005066 <_dtoa_r+0x34e>
 8005054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	f7fb fa78 	bl	8000550 <__aeabi_dmul>
 8005060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005064:	3501      	adds	r5, #1
 8005066:	1076      	asrs	r6, r6, #1
 8005068:	3708      	adds	r7, #8
 800506a:	2e00      	cmp	r6, #0
 800506c:	d1f0      	bne.n	8005050 <_dtoa_r+0x338>
 800506e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005076:	f7fb fb95 	bl	80007a4 <__aeabi_ddiv>
 800507a:	e9cd 0100 	strd	r0, r1, [sp]
 800507e:	e01a      	b.n	80050b6 <_dtoa_r+0x39e>
 8005080:	2502      	movs	r5, #2
 8005082:	e7a3      	b.n	8004fcc <_dtoa_r+0x2b4>
 8005084:	f000 80a0 	beq.w	80051c8 <_dtoa_r+0x4b0>
 8005088:	f1ca 0600 	rsb	r6, sl, #0
 800508c:	4b9f      	ldr	r3, [pc, #636]	; (800530c <_dtoa_r+0x5f4>)
 800508e:	4fa0      	ldr	r7, [pc, #640]	; (8005310 <_dtoa_r+0x5f8>)
 8005090:	f006 020f 	and.w	r2, r6, #15
 8005094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050a0:	f7fb fa56 	bl	8000550 <__aeabi_dmul>
 80050a4:	e9cd 0100 	strd	r0, r1, [sp]
 80050a8:	1136      	asrs	r6, r6, #4
 80050aa:	2300      	movs	r3, #0
 80050ac:	2502      	movs	r5, #2
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d17f      	bne.n	80051b2 <_dtoa_r+0x49a>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e1      	bne.n	800507a <_dtoa_r+0x362>
 80050b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8087 	beq.w	80051cc <_dtoa_r+0x4b4>
 80050be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050c2:	2200      	movs	r2, #0
 80050c4:	4b93      	ldr	r3, [pc, #588]	; (8005314 <_dtoa_r+0x5fc>)
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fcb3 	bl	8000a34 <__aeabi_dcmplt>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d07c      	beq.n	80051cc <_dtoa_r+0x4b4>
 80050d2:	f1b9 0f00 	cmp.w	r9, #0
 80050d6:	d079      	beq.n	80051cc <_dtoa_r+0x4b4>
 80050d8:	9b02      	ldr	r3, [sp, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dd35      	ble.n	800514a <_dtoa_r+0x432>
 80050de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80050e2:	9308      	str	r3, [sp, #32]
 80050e4:	4639      	mov	r1, r7
 80050e6:	2200      	movs	r2, #0
 80050e8:	4b8b      	ldr	r3, [pc, #556]	; (8005318 <_dtoa_r+0x600>)
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7fb fa30 	bl	8000550 <__aeabi_dmul>
 80050f0:	e9cd 0100 	strd	r0, r1, [sp]
 80050f4:	9f02      	ldr	r7, [sp, #8]
 80050f6:	3501      	adds	r5, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	f7fb f9bf 	bl	800047c <__aeabi_i2d>
 80050fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005102:	f7fb fa25 	bl	8000550 <__aeabi_dmul>
 8005106:	2200      	movs	r2, #0
 8005108:	4b84      	ldr	r3, [pc, #528]	; (800531c <_dtoa_r+0x604>)
 800510a:	f7fb f86b 	bl	80001e4 <__adddf3>
 800510e:	4605      	mov	r5, r0
 8005110:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005114:	2f00      	cmp	r7, #0
 8005116:	d15d      	bne.n	80051d4 <_dtoa_r+0x4bc>
 8005118:	2200      	movs	r2, #0
 800511a:	4b81      	ldr	r3, [pc, #516]	; (8005320 <_dtoa_r+0x608>)
 800511c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005120:	f7fb f85e 	bl	80001e0 <__aeabi_dsub>
 8005124:	462a      	mov	r2, r5
 8005126:	4633      	mov	r3, r6
 8005128:	e9cd 0100 	strd	r0, r1, [sp]
 800512c:	f7fb fca0 	bl	8000a70 <__aeabi_dcmpgt>
 8005130:	2800      	cmp	r0, #0
 8005132:	f040 8288 	bne.w	8005646 <_dtoa_r+0x92e>
 8005136:	462a      	mov	r2, r5
 8005138:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800513c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005140:	f7fb fc78 	bl	8000a34 <__aeabi_dcmplt>
 8005144:	2800      	cmp	r0, #0
 8005146:	f040 827c 	bne.w	8005642 <_dtoa_r+0x92a>
 800514a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800514e:	e9cd 2300 	strd	r2, r3, [sp]
 8005152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	f2c0 8150 	blt.w	80053fa <_dtoa_r+0x6e2>
 800515a:	f1ba 0f0e 	cmp.w	sl, #14
 800515e:	f300 814c 	bgt.w	80053fa <_dtoa_r+0x6e2>
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <_dtoa_r+0x5f4>)
 8005164:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005168:	ed93 7b00 	vldr	d7, [r3]
 800516c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800516e:	2b00      	cmp	r3, #0
 8005170:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005174:	f280 80d8 	bge.w	8005328 <_dtoa_r+0x610>
 8005178:	f1b9 0f00 	cmp.w	r9, #0
 800517c:	f300 80d4 	bgt.w	8005328 <_dtoa_r+0x610>
 8005180:	f040 825e 	bne.w	8005640 <_dtoa_r+0x928>
 8005184:	2200      	movs	r2, #0
 8005186:	4b66      	ldr	r3, [pc, #408]	; (8005320 <_dtoa_r+0x608>)
 8005188:	ec51 0b17 	vmov	r0, r1, d7
 800518c:	f7fb f9e0 	bl	8000550 <__aeabi_dmul>
 8005190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005194:	f7fb fc62 	bl	8000a5c <__aeabi_dcmpge>
 8005198:	464f      	mov	r7, r9
 800519a:	464e      	mov	r6, r9
 800519c:	2800      	cmp	r0, #0
 800519e:	f040 8234 	bne.w	800560a <_dtoa_r+0x8f2>
 80051a2:	2331      	movs	r3, #49	; 0x31
 80051a4:	f10b 0501 	add.w	r5, fp, #1
 80051a8:	f88b 3000 	strb.w	r3, [fp]
 80051ac:	f10a 0a01 	add.w	sl, sl, #1
 80051b0:	e22f      	b.n	8005612 <_dtoa_r+0x8fa>
 80051b2:	07f2      	lsls	r2, r6, #31
 80051b4:	d505      	bpl.n	80051c2 <_dtoa_r+0x4aa>
 80051b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ba:	f7fb f9c9 	bl	8000550 <__aeabi_dmul>
 80051be:	3501      	adds	r5, #1
 80051c0:	2301      	movs	r3, #1
 80051c2:	1076      	asrs	r6, r6, #1
 80051c4:	3708      	adds	r7, #8
 80051c6:	e772      	b.n	80050ae <_dtoa_r+0x396>
 80051c8:	2502      	movs	r5, #2
 80051ca:	e774      	b.n	80050b6 <_dtoa_r+0x39e>
 80051cc:	f8cd a020 	str.w	sl, [sp, #32]
 80051d0:	464f      	mov	r7, r9
 80051d2:	e791      	b.n	80050f8 <_dtoa_r+0x3e0>
 80051d4:	4b4d      	ldr	r3, [pc, #308]	; (800530c <_dtoa_r+0x5f4>)
 80051d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80051de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d047      	beq.n	8005274 <_dtoa_r+0x55c>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	2000      	movs	r0, #0
 80051ea:	494e      	ldr	r1, [pc, #312]	; (8005324 <_dtoa_r+0x60c>)
 80051ec:	f7fb fada 	bl	80007a4 <__aeabi_ddiv>
 80051f0:	462a      	mov	r2, r5
 80051f2:	4633      	mov	r3, r6
 80051f4:	f7fa fff4 	bl	80001e0 <__aeabi_dsub>
 80051f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051fc:	465d      	mov	r5, fp
 80051fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005202:	f7fb fc55 	bl	8000ab0 <__aeabi_d2iz>
 8005206:	4606      	mov	r6, r0
 8005208:	f7fb f938 	bl	800047c <__aeabi_i2d>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005214:	f7fa ffe4 	bl	80001e0 <__aeabi_dsub>
 8005218:	3630      	adds	r6, #48	; 0x30
 800521a:	f805 6b01 	strb.w	r6, [r5], #1
 800521e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005222:	e9cd 0100 	strd	r0, r1, [sp]
 8005226:	f7fb fc05 	bl	8000a34 <__aeabi_dcmplt>
 800522a:	2800      	cmp	r0, #0
 800522c:	d163      	bne.n	80052f6 <_dtoa_r+0x5de>
 800522e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005232:	2000      	movs	r0, #0
 8005234:	4937      	ldr	r1, [pc, #220]	; (8005314 <_dtoa_r+0x5fc>)
 8005236:	f7fa ffd3 	bl	80001e0 <__aeabi_dsub>
 800523a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800523e:	f7fb fbf9 	bl	8000a34 <__aeabi_dcmplt>
 8005242:	2800      	cmp	r0, #0
 8005244:	f040 80b7 	bne.w	80053b6 <_dtoa_r+0x69e>
 8005248:	eba5 030b 	sub.w	r3, r5, fp
 800524c:	429f      	cmp	r7, r3
 800524e:	f77f af7c 	ble.w	800514a <_dtoa_r+0x432>
 8005252:	2200      	movs	r2, #0
 8005254:	4b30      	ldr	r3, [pc, #192]	; (8005318 <_dtoa_r+0x600>)
 8005256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800525a:	f7fb f979 	bl	8000550 <__aeabi_dmul>
 800525e:	2200      	movs	r2, #0
 8005260:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <_dtoa_r+0x600>)
 8005266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800526a:	f7fb f971 	bl	8000550 <__aeabi_dmul>
 800526e:	e9cd 0100 	strd	r0, r1, [sp]
 8005272:	e7c4      	b.n	80051fe <_dtoa_r+0x4e6>
 8005274:	462a      	mov	r2, r5
 8005276:	4633      	mov	r3, r6
 8005278:	f7fb f96a 	bl	8000550 <__aeabi_dmul>
 800527c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005280:	eb0b 0507 	add.w	r5, fp, r7
 8005284:	465e      	mov	r6, fp
 8005286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800528a:	f7fb fc11 	bl	8000ab0 <__aeabi_d2iz>
 800528e:	4607      	mov	r7, r0
 8005290:	f7fb f8f4 	bl	800047c <__aeabi_i2d>
 8005294:	3730      	adds	r7, #48	; 0x30
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800529e:	f7fa ff9f 	bl	80001e0 <__aeabi_dsub>
 80052a2:	f806 7b01 	strb.w	r7, [r6], #1
 80052a6:	42ae      	cmp	r6, r5
 80052a8:	e9cd 0100 	strd	r0, r1, [sp]
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	d126      	bne.n	8005300 <_dtoa_r+0x5e8>
 80052b2:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <_dtoa_r+0x60c>)
 80052b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052b8:	f7fa ff94 	bl	80001e4 <__adddf3>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052c4:	f7fb fbd4 	bl	8000a70 <__aeabi_dcmpgt>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d174      	bne.n	80053b6 <_dtoa_r+0x69e>
 80052cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052d0:	2000      	movs	r0, #0
 80052d2:	4914      	ldr	r1, [pc, #80]	; (8005324 <_dtoa_r+0x60c>)
 80052d4:	f7fa ff84 	bl	80001e0 <__aeabi_dsub>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052e0:	f7fb fba8 	bl	8000a34 <__aeabi_dcmplt>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	f43f af30 	beq.w	800514a <_dtoa_r+0x432>
 80052ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80052f4:	d002      	beq.n	80052fc <_dtoa_r+0x5e4>
 80052f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052fa:	e04a      	b.n	8005392 <_dtoa_r+0x67a>
 80052fc:	4615      	mov	r5, r2
 80052fe:	e7f4      	b.n	80052ea <_dtoa_r+0x5d2>
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_dtoa_r+0x600>)
 8005302:	f7fb f925 	bl	8000550 <__aeabi_dmul>
 8005306:	e9cd 0100 	strd	r0, r1, [sp]
 800530a:	e7bc      	b.n	8005286 <_dtoa_r+0x56e>
 800530c:	08006050 	.word	0x08006050
 8005310:	08006028 	.word	0x08006028
 8005314:	3ff00000 	.word	0x3ff00000
 8005318:	40240000 	.word	0x40240000
 800531c:	401c0000 	.word	0x401c0000
 8005320:	40140000 	.word	0x40140000
 8005324:	3fe00000 	.word	0x3fe00000
 8005328:	e9dd 6700 	ldrd	r6, r7, [sp]
 800532c:	465d      	mov	r5, fp
 800532e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005332:	4630      	mov	r0, r6
 8005334:	4639      	mov	r1, r7
 8005336:	f7fb fa35 	bl	80007a4 <__aeabi_ddiv>
 800533a:	f7fb fbb9 	bl	8000ab0 <__aeabi_d2iz>
 800533e:	4680      	mov	r8, r0
 8005340:	f7fb f89c 	bl	800047c <__aeabi_i2d>
 8005344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005348:	f7fb f902 	bl	8000550 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005358:	f7fa ff42 	bl	80001e0 <__aeabi_dsub>
 800535c:	f805 6b01 	strb.w	r6, [r5], #1
 8005360:	eba5 060b 	sub.w	r6, r5, fp
 8005364:	45b1      	cmp	r9, r6
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	d139      	bne.n	80053e0 <_dtoa_r+0x6c8>
 800536c:	f7fa ff3a 	bl	80001e4 <__adddf3>
 8005370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	f7fb fb7a 	bl	8000a70 <__aeabi_dcmpgt>
 800537c:	b9c8      	cbnz	r0, 80053b2 <_dtoa_r+0x69a>
 800537e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fb fb4b 	bl	8000a20 <__aeabi_dcmpeq>
 800538a:	b110      	cbz	r0, 8005392 <_dtoa_r+0x67a>
 800538c:	f018 0f01 	tst.w	r8, #1
 8005390:	d10f      	bne.n	80053b2 <_dtoa_r+0x69a>
 8005392:	9904      	ldr	r1, [sp, #16]
 8005394:	4620      	mov	r0, r4
 8005396:	f000 facc 	bl	8005932 <_Bfree>
 800539a:	2300      	movs	r3, #0
 800539c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800539e:	702b      	strb	r3, [r5, #0]
 80053a0:	f10a 0301 	add.w	r3, sl, #1
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8241 	beq.w	8005830 <_dtoa_r+0xb18>
 80053ae:	601d      	str	r5, [r3, #0]
 80053b0:	e23e      	b.n	8005830 <_dtoa_r+0xb18>
 80053b2:	f8cd a020 	str.w	sl, [sp, #32]
 80053b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053ba:	2a39      	cmp	r2, #57	; 0x39
 80053bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80053c0:	d108      	bne.n	80053d4 <_dtoa_r+0x6bc>
 80053c2:	459b      	cmp	fp, r3
 80053c4:	d10a      	bne.n	80053dc <_dtoa_r+0x6c4>
 80053c6:	9b08      	ldr	r3, [sp, #32]
 80053c8:	3301      	adds	r3, #1
 80053ca:	9308      	str	r3, [sp, #32]
 80053cc:	2330      	movs	r3, #48	; 0x30
 80053ce:	f88b 3000 	strb.w	r3, [fp]
 80053d2:	465b      	mov	r3, fp
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	3201      	adds	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e78c      	b.n	80052f6 <_dtoa_r+0x5de>
 80053dc:	461d      	mov	r5, r3
 80053de:	e7ea      	b.n	80053b6 <_dtoa_r+0x69e>
 80053e0:	2200      	movs	r2, #0
 80053e2:	4b9b      	ldr	r3, [pc, #620]	; (8005650 <_dtoa_r+0x938>)
 80053e4:	f7fb f8b4 	bl	8000550 <__aeabi_dmul>
 80053e8:	2200      	movs	r2, #0
 80053ea:	2300      	movs	r3, #0
 80053ec:	4606      	mov	r6, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	f7fb fb16 	bl	8000a20 <__aeabi_dcmpeq>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d09a      	beq.n	800532e <_dtoa_r+0x616>
 80053f8:	e7cb      	b.n	8005392 <_dtoa_r+0x67a>
 80053fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	f000 808b 	beq.w	8005518 <_dtoa_r+0x800>
 8005402:	9a06      	ldr	r2, [sp, #24]
 8005404:	2a01      	cmp	r2, #1
 8005406:	dc6e      	bgt.n	80054e6 <_dtoa_r+0x7ce>
 8005408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800540a:	2a00      	cmp	r2, #0
 800540c:	d067      	beq.n	80054de <_dtoa_r+0x7c6>
 800540e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005412:	9f07      	ldr	r7, [sp, #28]
 8005414:	9d05      	ldr	r5, [sp, #20]
 8005416:	9a05      	ldr	r2, [sp, #20]
 8005418:	2101      	movs	r1, #1
 800541a:	441a      	add	r2, r3
 800541c:	4620      	mov	r0, r4
 800541e:	9205      	str	r2, [sp, #20]
 8005420:	4498      	add	r8, r3
 8005422:	f000 fb26 	bl	8005a72 <__i2b>
 8005426:	4606      	mov	r6, r0
 8005428:	2d00      	cmp	r5, #0
 800542a:	dd0c      	ble.n	8005446 <_dtoa_r+0x72e>
 800542c:	f1b8 0f00 	cmp.w	r8, #0
 8005430:	dd09      	ble.n	8005446 <_dtoa_r+0x72e>
 8005432:	4545      	cmp	r5, r8
 8005434:	9a05      	ldr	r2, [sp, #20]
 8005436:	462b      	mov	r3, r5
 8005438:	bfa8      	it	ge
 800543a:	4643      	movge	r3, r8
 800543c:	1ad2      	subs	r2, r2, r3
 800543e:	9205      	str	r2, [sp, #20]
 8005440:	1aed      	subs	r5, r5, r3
 8005442:	eba8 0803 	sub.w	r8, r8, r3
 8005446:	9b07      	ldr	r3, [sp, #28]
 8005448:	b1eb      	cbz	r3, 8005486 <_dtoa_r+0x76e>
 800544a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d067      	beq.n	8005520 <_dtoa_r+0x808>
 8005450:	b18f      	cbz	r7, 8005476 <_dtoa_r+0x75e>
 8005452:	4631      	mov	r1, r6
 8005454:	463a      	mov	r2, r7
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fbaa 	bl	8005bb0 <__pow5mult>
 800545c:	9a04      	ldr	r2, [sp, #16]
 800545e:	4601      	mov	r1, r0
 8005460:	4606      	mov	r6, r0
 8005462:	4620      	mov	r0, r4
 8005464:	f000 fb0e 	bl	8005a84 <__multiply>
 8005468:	9904      	ldr	r1, [sp, #16]
 800546a:	9008      	str	r0, [sp, #32]
 800546c:	4620      	mov	r0, r4
 800546e:	f000 fa60 	bl	8005932 <_Bfree>
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	9304      	str	r3, [sp, #16]
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	1bda      	subs	r2, r3, r7
 800547a:	d004      	beq.n	8005486 <_dtoa_r+0x76e>
 800547c:	9904      	ldr	r1, [sp, #16]
 800547e:	4620      	mov	r0, r4
 8005480:	f000 fb96 	bl	8005bb0 <__pow5mult>
 8005484:	9004      	str	r0, [sp, #16]
 8005486:	2101      	movs	r1, #1
 8005488:	4620      	mov	r0, r4
 800548a:	f000 faf2 	bl	8005a72 <__i2b>
 800548e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005490:	4607      	mov	r7, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 81d0 	beq.w	8005838 <_dtoa_r+0xb20>
 8005498:	461a      	mov	r2, r3
 800549a:	4601      	mov	r1, r0
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fb87 	bl	8005bb0 <__pow5mult>
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	4607      	mov	r7, r0
 80054a8:	dc40      	bgt.n	800552c <_dtoa_r+0x814>
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d139      	bne.n	8005524 <_dtoa_r+0x80c>
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d136      	bne.n	8005528 <_dtoa_r+0x810>
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	0d1b      	lsrs	r3, r3, #20
 80054c2:	051b      	lsls	r3, r3, #20
 80054c4:	b12b      	cbz	r3, 80054d2 <_dtoa_r+0x7ba>
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	3301      	adds	r3, #1
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	f108 0801 	add.w	r8, r8, #1
 80054d0:	2301      	movs	r3, #1
 80054d2:	9307      	str	r3, [sp, #28]
 80054d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d12a      	bne.n	8005530 <_dtoa_r+0x818>
 80054da:	2001      	movs	r0, #1
 80054dc:	e030      	b.n	8005540 <_dtoa_r+0x828>
 80054de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054e4:	e795      	b.n	8005412 <_dtoa_r+0x6fa>
 80054e6:	9b07      	ldr	r3, [sp, #28]
 80054e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80054ec:	42bb      	cmp	r3, r7
 80054ee:	bfbf      	itttt	lt
 80054f0:	9b07      	ldrlt	r3, [sp, #28]
 80054f2:	9707      	strlt	r7, [sp, #28]
 80054f4:	1afa      	sublt	r2, r7, r3
 80054f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054f8:	bfbb      	ittet	lt
 80054fa:	189b      	addlt	r3, r3, r2
 80054fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054fe:	1bdf      	subge	r7, r3, r7
 8005500:	2700      	movlt	r7, #0
 8005502:	f1b9 0f00 	cmp.w	r9, #0
 8005506:	bfb5      	itete	lt
 8005508:	9b05      	ldrlt	r3, [sp, #20]
 800550a:	9d05      	ldrge	r5, [sp, #20]
 800550c:	eba3 0509 	sublt.w	r5, r3, r9
 8005510:	464b      	movge	r3, r9
 8005512:	bfb8      	it	lt
 8005514:	2300      	movlt	r3, #0
 8005516:	e77e      	b.n	8005416 <_dtoa_r+0x6fe>
 8005518:	9f07      	ldr	r7, [sp, #28]
 800551a:	9d05      	ldr	r5, [sp, #20]
 800551c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800551e:	e783      	b.n	8005428 <_dtoa_r+0x710>
 8005520:	9a07      	ldr	r2, [sp, #28]
 8005522:	e7ab      	b.n	800547c <_dtoa_r+0x764>
 8005524:	2300      	movs	r3, #0
 8005526:	e7d4      	b.n	80054d2 <_dtoa_r+0x7ba>
 8005528:	9b00      	ldr	r3, [sp, #0]
 800552a:	e7d2      	b.n	80054d2 <_dtoa_r+0x7ba>
 800552c:	2300      	movs	r3, #0
 800552e:	9307      	str	r3, [sp, #28]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005536:	6918      	ldr	r0, [r3, #16]
 8005538:	f000 fa4d 	bl	80059d6 <__hi0bits>
 800553c:	f1c0 0020 	rsb	r0, r0, #32
 8005540:	4440      	add	r0, r8
 8005542:	f010 001f 	ands.w	r0, r0, #31
 8005546:	d047      	beq.n	80055d8 <_dtoa_r+0x8c0>
 8005548:	f1c0 0320 	rsb	r3, r0, #32
 800554c:	2b04      	cmp	r3, #4
 800554e:	dd3b      	ble.n	80055c8 <_dtoa_r+0x8b0>
 8005550:	9b05      	ldr	r3, [sp, #20]
 8005552:	f1c0 001c 	rsb	r0, r0, #28
 8005556:	4403      	add	r3, r0
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	4405      	add	r5, r0
 800555c:	4480      	add	r8, r0
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x858>
 8005564:	461a      	mov	r2, r3
 8005566:	9904      	ldr	r1, [sp, #16]
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fb6f 	bl	8005c4c <__lshift>
 800556e:	9004      	str	r0, [sp, #16]
 8005570:	f1b8 0f00 	cmp.w	r8, #0
 8005574:	dd05      	ble.n	8005582 <_dtoa_r+0x86a>
 8005576:	4639      	mov	r1, r7
 8005578:	4642      	mov	r2, r8
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fb66 	bl	8005c4c <__lshift>
 8005580:	4607      	mov	r7, r0
 8005582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005584:	b353      	cbz	r3, 80055dc <_dtoa_r+0x8c4>
 8005586:	4639      	mov	r1, r7
 8005588:	9804      	ldr	r0, [sp, #16]
 800558a:	f000 fbb3 	bl	8005cf4 <__mcmp>
 800558e:	2800      	cmp	r0, #0
 8005590:	da24      	bge.n	80055dc <_dtoa_r+0x8c4>
 8005592:	2300      	movs	r3, #0
 8005594:	220a      	movs	r2, #10
 8005596:	9904      	ldr	r1, [sp, #16]
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f9e1 	bl	8005960 <__multadd>
 800559e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a0:	9004      	str	r0, [sp, #16]
 80055a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 814d 	beq.w	8005846 <_dtoa_r+0xb2e>
 80055ac:	2300      	movs	r3, #0
 80055ae:	4631      	mov	r1, r6
 80055b0:	220a      	movs	r2, #10
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f9d4 	bl	8005960 <__multadd>
 80055b8:	9b02      	ldr	r3, [sp, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	4606      	mov	r6, r0
 80055be:	dc4f      	bgt.n	8005660 <_dtoa_r+0x948>
 80055c0:	9b06      	ldr	r3, [sp, #24]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	dd4c      	ble.n	8005660 <_dtoa_r+0x948>
 80055c6:	e011      	b.n	80055ec <_dtoa_r+0x8d4>
 80055c8:	d0c9      	beq.n	800555e <_dtoa_r+0x846>
 80055ca:	9a05      	ldr	r2, [sp, #20]
 80055cc:	331c      	adds	r3, #28
 80055ce:	441a      	add	r2, r3
 80055d0:	9205      	str	r2, [sp, #20]
 80055d2:	441d      	add	r5, r3
 80055d4:	4498      	add	r8, r3
 80055d6:	e7c2      	b.n	800555e <_dtoa_r+0x846>
 80055d8:	4603      	mov	r3, r0
 80055da:	e7f6      	b.n	80055ca <_dtoa_r+0x8b2>
 80055dc:	f1b9 0f00 	cmp.w	r9, #0
 80055e0:	dc38      	bgt.n	8005654 <_dtoa_r+0x93c>
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	dd35      	ble.n	8005654 <_dtoa_r+0x93c>
 80055e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ec:	9b02      	ldr	r3, [sp, #8]
 80055ee:	b963      	cbnz	r3, 800560a <_dtoa_r+0x8f2>
 80055f0:	4639      	mov	r1, r7
 80055f2:	2205      	movs	r2, #5
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 f9b3 	bl	8005960 <__multadd>
 80055fa:	4601      	mov	r1, r0
 80055fc:	4607      	mov	r7, r0
 80055fe:	9804      	ldr	r0, [sp, #16]
 8005600:	f000 fb78 	bl	8005cf4 <__mcmp>
 8005604:	2800      	cmp	r0, #0
 8005606:	f73f adcc 	bgt.w	80051a2 <_dtoa_r+0x48a>
 800560a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560c:	465d      	mov	r5, fp
 800560e:	ea6f 0a03 	mvn.w	sl, r3
 8005612:	f04f 0900 	mov.w	r9, #0
 8005616:	4639      	mov	r1, r7
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f98a 	bl	8005932 <_Bfree>
 800561e:	2e00      	cmp	r6, #0
 8005620:	f43f aeb7 	beq.w	8005392 <_dtoa_r+0x67a>
 8005624:	f1b9 0f00 	cmp.w	r9, #0
 8005628:	d005      	beq.n	8005636 <_dtoa_r+0x91e>
 800562a:	45b1      	cmp	r9, r6
 800562c:	d003      	beq.n	8005636 <_dtoa_r+0x91e>
 800562e:	4649      	mov	r1, r9
 8005630:	4620      	mov	r0, r4
 8005632:	f000 f97e 	bl	8005932 <_Bfree>
 8005636:	4631      	mov	r1, r6
 8005638:	4620      	mov	r0, r4
 800563a:	f000 f97a 	bl	8005932 <_Bfree>
 800563e:	e6a8      	b.n	8005392 <_dtoa_r+0x67a>
 8005640:	2700      	movs	r7, #0
 8005642:	463e      	mov	r6, r7
 8005644:	e7e1      	b.n	800560a <_dtoa_r+0x8f2>
 8005646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800564a:	463e      	mov	r6, r7
 800564c:	e5a9      	b.n	80051a2 <_dtoa_r+0x48a>
 800564e:	bf00      	nop
 8005650:	40240000 	.word	0x40240000
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	f8cd 9008 	str.w	r9, [sp, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80fa 	beq.w	8005854 <_dtoa_r+0xb3c>
 8005660:	2d00      	cmp	r5, #0
 8005662:	dd05      	ble.n	8005670 <_dtoa_r+0x958>
 8005664:	4631      	mov	r1, r6
 8005666:	462a      	mov	r2, r5
 8005668:	4620      	mov	r0, r4
 800566a:	f000 faef 	bl	8005c4c <__lshift>
 800566e:	4606      	mov	r6, r0
 8005670:	9b07      	ldr	r3, [sp, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d04c      	beq.n	8005710 <_dtoa_r+0x9f8>
 8005676:	6871      	ldr	r1, [r6, #4]
 8005678:	4620      	mov	r0, r4
 800567a:	f000 f926 	bl	80058ca <_Balloc>
 800567e:	6932      	ldr	r2, [r6, #16]
 8005680:	3202      	adds	r2, #2
 8005682:	4605      	mov	r5, r0
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	f106 010c 	add.w	r1, r6, #12
 800568a:	300c      	adds	r0, #12
 800568c:	f000 f912 	bl	80058b4 <memcpy>
 8005690:	2201      	movs	r2, #1
 8005692:	4629      	mov	r1, r5
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fad9 	bl	8005c4c <__lshift>
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	f8cd b014 	str.w	fp, [sp, #20]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	46b1      	mov	r9, r6
 80056a6:	9307      	str	r3, [sp, #28]
 80056a8:	4606      	mov	r6, r0
 80056aa:	4639      	mov	r1, r7
 80056ac:	9804      	ldr	r0, [sp, #16]
 80056ae:	f7ff faa6 	bl	8004bfe <quorem>
 80056b2:	4649      	mov	r1, r9
 80056b4:	4605      	mov	r5, r0
 80056b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056ba:	9804      	ldr	r0, [sp, #16]
 80056bc:	f000 fb1a 	bl	8005cf4 <__mcmp>
 80056c0:	4632      	mov	r2, r6
 80056c2:	9000      	str	r0, [sp, #0]
 80056c4:	4639      	mov	r1, r7
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fb2e 	bl	8005d28 <__mdiff>
 80056cc:	68c3      	ldr	r3, [r0, #12]
 80056ce:	4602      	mov	r2, r0
 80056d0:	bb03      	cbnz	r3, 8005714 <_dtoa_r+0x9fc>
 80056d2:	4601      	mov	r1, r0
 80056d4:	9008      	str	r0, [sp, #32]
 80056d6:	9804      	ldr	r0, [sp, #16]
 80056d8:	f000 fb0c 	bl	8005cf4 <__mcmp>
 80056dc:	9a08      	ldr	r2, [sp, #32]
 80056de:	4603      	mov	r3, r0
 80056e0:	4611      	mov	r1, r2
 80056e2:	4620      	mov	r0, r4
 80056e4:	9308      	str	r3, [sp, #32]
 80056e6:	f000 f924 	bl	8005932 <_Bfree>
 80056ea:	9b08      	ldr	r3, [sp, #32]
 80056ec:	b9a3      	cbnz	r3, 8005718 <_dtoa_r+0xa00>
 80056ee:	9a06      	ldr	r2, [sp, #24]
 80056f0:	b992      	cbnz	r2, 8005718 <_dtoa_r+0xa00>
 80056f2:	9a07      	ldr	r2, [sp, #28]
 80056f4:	b982      	cbnz	r2, 8005718 <_dtoa_r+0xa00>
 80056f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056fa:	d029      	beq.n	8005750 <_dtoa_r+0xa38>
 80056fc:	9b00      	ldr	r3, [sp, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd01      	ble.n	8005706 <_dtoa_r+0x9ee>
 8005702:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005706:	9b05      	ldr	r3, [sp, #20]
 8005708:	1c5d      	adds	r5, r3, #1
 800570a:	f883 8000 	strb.w	r8, [r3]
 800570e:	e782      	b.n	8005616 <_dtoa_r+0x8fe>
 8005710:	4630      	mov	r0, r6
 8005712:	e7c2      	b.n	800569a <_dtoa_r+0x982>
 8005714:	2301      	movs	r3, #1
 8005716:	e7e3      	b.n	80056e0 <_dtoa_r+0x9c8>
 8005718:	9a00      	ldr	r2, [sp, #0]
 800571a:	2a00      	cmp	r2, #0
 800571c:	db04      	blt.n	8005728 <_dtoa_r+0xa10>
 800571e:	d125      	bne.n	800576c <_dtoa_r+0xa54>
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	bb1a      	cbnz	r2, 800576c <_dtoa_r+0xa54>
 8005724:	9a07      	ldr	r2, [sp, #28]
 8005726:	bb0a      	cbnz	r2, 800576c <_dtoa_r+0xa54>
 8005728:	2b00      	cmp	r3, #0
 800572a:	ddec      	ble.n	8005706 <_dtoa_r+0x9ee>
 800572c:	2201      	movs	r2, #1
 800572e:	9904      	ldr	r1, [sp, #16]
 8005730:	4620      	mov	r0, r4
 8005732:	f000 fa8b 	bl	8005c4c <__lshift>
 8005736:	4639      	mov	r1, r7
 8005738:	9004      	str	r0, [sp, #16]
 800573a:	f000 fadb 	bl	8005cf4 <__mcmp>
 800573e:	2800      	cmp	r0, #0
 8005740:	dc03      	bgt.n	800574a <_dtoa_r+0xa32>
 8005742:	d1e0      	bne.n	8005706 <_dtoa_r+0x9ee>
 8005744:	f018 0f01 	tst.w	r8, #1
 8005748:	d0dd      	beq.n	8005706 <_dtoa_r+0x9ee>
 800574a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800574e:	d1d8      	bne.n	8005702 <_dtoa_r+0x9ea>
 8005750:	9b05      	ldr	r3, [sp, #20]
 8005752:	9a05      	ldr	r2, [sp, #20]
 8005754:	1c5d      	adds	r5, r3, #1
 8005756:	2339      	movs	r3, #57	; 0x39
 8005758:	7013      	strb	r3, [r2, #0]
 800575a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800575e:	2b39      	cmp	r3, #57	; 0x39
 8005760:	f105 32ff 	add.w	r2, r5, #4294967295
 8005764:	d04f      	beq.n	8005806 <_dtoa_r+0xaee>
 8005766:	3301      	adds	r3, #1
 8005768:	7013      	strb	r3, [r2, #0]
 800576a:	e754      	b.n	8005616 <_dtoa_r+0x8fe>
 800576c:	9a05      	ldr	r2, [sp, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f102 0501 	add.w	r5, r2, #1
 8005774:	dd06      	ble.n	8005784 <_dtoa_r+0xa6c>
 8005776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800577a:	d0e9      	beq.n	8005750 <_dtoa_r+0xa38>
 800577c:	f108 0801 	add.w	r8, r8, #1
 8005780:	9b05      	ldr	r3, [sp, #20]
 8005782:	e7c2      	b.n	800570a <_dtoa_r+0x9f2>
 8005784:	9a02      	ldr	r2, [sp, #8]
 8005786:	f805 8c01 	strb.w	r8, [r5, #-1]
 800578a:	eba5 030b 	sub.w	r3, r5, fp
 800578e:	4293      	cmp	r3, r2
 8005790:	d021      	beq.n	80057d6 <_dtoa_r+0xabe>
 8005792:	2300      	movs	r3, #0
 8005794:	220a      	movs	r2, #10
 8005796:	9904      	ldr	r1, [sp, #16]
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f8e1 	bl	8005960 <__multadd>
 800579e:	45b1      	cmp	r9, r6
 80057a0:	9004      	str	r0, [sp, #16]
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	f04f 020a 	mov.w	r2, #10
 80057aa:	4649      	mov	r1, r9
 80057ac:	4620      	mov	r0, r4
 80057ae:	d105      	bne.n	80057bc <_dtoa_r+0xaa4>
 80057b0:	f000 f8d6 	bl	8005960 <__multadd>
 80057b4:	4681      	mov	r9, r0
 80057b6:	4606      	mov	r6, r0
 80057b8:	9505      	str	r5, [sp, #20]
 80057ba:	e776      	b.n	80056aa <_dtoa_r+0x992>
 80057bc:	f000 f8d0 	bl	8005960 <__multadd>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4681      	mov	r9, r0
 80057c4:	2300      	movs	r3, #0
 80057c6:	220a      	movs	r2, #10
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f8c9 	bl	8005960 <__multadd>
 80057ce:	4606      	mov	r6, r0
 80057d0:	e7f2      	b.n	80057b8 <_dtoa_r+0xaa0>
 80057d2:	f04f 0900 	mov.w	r9, #0
 80057d6:	2201      	movs	r2, #1
 80057d8:	9904      	ldr	r1, [sp, #16]
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fa36 	bl	8005c4c <__lshift>
 80057e0:	4639      	mov	r1, r7
 80057e2:	9004      	str	r0, [sp, #16]
 80057e4:	f000 fa86 	bl	8005cf4 <__mcmp>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	dcb6      	bgt.n	800575a <_dtoa_r+0xa42>
 80057ec:	d102      	bne.n	80057f4 <_dtoa_r+0xadc>
 80057ee:	f018 0f01 	tst.w	r8, #1
 80057f2:	d1b2      	bne.n	800575a <_dtoa_r+0xa42>
 80057f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057f8:	2b30      	cmp	r3, #48	; 0x30
 80057fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80057fe:	f47f af0a 	bne.w	8005616 <_dtoa_r+0x8fe>
 8005802:	4615      	mov	r5, r2
 8005804:	e7f6      	b.n	80057f4 <_dtoa_r+0xadc>
 8005806:	4593      	cmp	fp, r2
 8005808:	d105      	bne.n	8005816 <_dtoa_r+0xafe>
 800580a:	2331      	movs	r3, #49	; 0x31
 800580c:	f10a 0a01 	add.w	sl, sl, #1
 8005810:	f88b 3000 	strb.w	r3, [fp]
 8005814:	e6ff      	b.n	8005616 <_dtoa_r+0x8fe>
 8005816:	4615      	mov	r5, r2
 8005818:	e79f      	b.n	800575a <_dtoa_r+0xa42>
 800581a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005880 <_dtoa_r+0xb68>
 800581e:	e007      	b.n	8005830 <_dtoa_r+0xb18>
 8005820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005822:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005884 <_dtoa_r+0xb6c>
 8005826:	b11b      	cbz	r3, 8005830 <_dtoa_r+0xb18>
 8005828:	f10b 0308 	add.w	r3, fp, #8
 800582c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	4658      	mov	r0, fp
 8005832:	b017      	add	sp, #92	; 0x5c
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	9b06      	ldr	r3, [sp, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	f77f ae35 	ble.w	80054aa <_dtoa_r+0x792>
 8005840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005842:	9307      	str	r3, [sp, #28]
 8005844:	e649      	b.n	80054da <_dtoa_r+0x7c2>
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc03      	bgt.n	8005854 <_dtoa_r+0xb3c>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	2b02      	cmp	r3, #2
 8005850:	f73f aecc 	bgt.w	80055ec <_dtoa_r+0x8d4>
 8005854:	465d      	mov	r5, fp
 8005856:	4639      	mov	r1, r7
 8005858:	9804      	ldr	r0, [sp, #16]
 800585a:	f7ff f9d0 	bl	8004bfe <quorem>
 800585e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005862:	f805 8b01 	strb.w	r8, [r5], #1
 8005866:	9a02      	ldr	r2, [sp, #8]
 8005868:	eba5 030b 	sub.w	r3, r5, fp
 800586c:	429a      	cmp	r2, r3
 800586e:	ddb0      	ble.n	80057d2 <_dtoa_r+0xaba>
 8005870:	2300      	movs	r3, #0
 8005872:	220a      	movs	r2, #10
 8005874:	9904      	ldr	r1, [sp, #16]
 8005876:	4620      	mov	r0, r4
 8005878:	f000 f872 	bl	8005960 <__multadd>
 800587c:	9004      	str	r0, [sp, #16]
 800587e:	e7ea      	b.n	8005856 <_dtoa_r+0xb3e>
 8005880:	08006018 	.word	0x08006018
 8005884:	0800601a 	.word	0x0800601a

08005888 <_localeconv_r>:
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <_localeconv_r+0x14>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6a18      	ldr	r0, [r3, #32]
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <_localeconv_r+0x18>)
 8005890:	2800      	cmp	r0, #0
 8005892:	bf08      	it	eq
 8005894:	4618      	moveq	r0, r3
 8005896:	30f0      	adds	r0, #240	; 0xf0
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000020c 	.word	0x2000020c
 80058a0:	20000270 	.word	0x20000270

080058a4 <malloc>:
 80058a4:	4b02      	ldr	r3, [pc, #8]	; (80058b0 <malloc+0xc>)
 80058a6:	4601      	mov	r1, r0
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	f000 baf7 	b.w	8005e9c <_malloc_r>
 80058ae:	bf00      	nop
 80058b0:	2000020c 	.word	0x2000020c

080058b4 <memcpy>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	1e43      	subs	r3, r0, #1
 80058b8:	440a      	add	r2, r1
 80058ba:	4291      	cmp	r1, r2
 80058bc:	d100      	bne.n	80058c0 <memcpy+0xc>
 80058be:	bd10      	pop	{r4, pc}
 80058c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058c8:	e7f7      	b.n	80058ba <memcpy+0x6>

080058ca <_Balloc>:
 80058ca:	b570      	push	{r4, r5, r6, lr}
 80058cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058ce:	4604      	mov	r4, r0
 80058d0:	460e      	mov	r6, r1
 80058d2:	b93d      	cbnz	r5, 80058e4 <_Balloc+0x1a>
 80058d4:	2010      	movs	r0, #16
 80058d6:	f7ff ffe5 	bl	80058a4 <malloc>
 80058da:	6260      	str	r0, [r4, #36]	; 0x24
 80058dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058e0:	6005      	str	r5, [r0, #0]
 80058e2:	60c5      	str	r5, [r0, #12]
 80058e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058e6:	68eb      	ldr	r3, [r5, #12]
 80058e8:	b183      	cbz	r3, 800590c <_Balloc+0x42>
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058f2:	b9b8      	cbnz	r0, 8005924 <_Balloc+0x5a>
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f506 	lsl.w	r5, r1, r6
 80058fa:	1d6a      	adds	r2, r5, #5
 80058fc:	0092      	lsls	r2, r2, #2
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fabe 	bl	8005e80 <_calloc_r>
 8005904:	b160      	cbz	r0, 8005920 <_Balloc+0x56>
 8005906:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800590a:	e00e      	b.n	800592a <_Balloc+0x60>
 800590c:	2221      	movs	r2, #33	; 0x21
 800590e:	2104      	movs	r1, #4
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fab5 	bl	8005e80 <_calloc_r>
 8005916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005918:	60e8      	str	r0, [r5, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e4      	bne.n	80058ea <_Balloc+0x20>
 8005920:	2000      	movs	r0, #0
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	6802      	ldr	r2, [r0, #0]
 8005926:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800592a:	2300      	movs	r3, #0
 800592c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005930:	e7f7      	b.n	8005922 <_Balloc+0x58>

08005932 <_Bfree>:
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005936:	4606      	mov	r6, r0
 8005938:	460d      	mov	r5, r1
 800593a:	b93c      	cbnz	r4, 800594c <_Bfree+0x1a>
 800593c:	2010      	movs	r0, #16
 800593e:	f7ff ffb1 	bl	80058a4 <malloc>
 8005942:	6270      	str	r0, [r6, #36]	; 0x24
 8005944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005948:	6004      	str	r4, [r0, #0]
 800594a:	60c4      	str	r4, [r0, #12]
 800594c:	b13d      	cbz	r5, 800595e <_Bfree+0x2c>
 800594e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005950:	686a      	ldr	r2, [r5, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005958:	6029      	str	r1, [r5, #0]
 800595a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800595e:	bd70      	pop	{r4, r5, r6, pc}

08005960 <__multadd>:
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	690d      	ldr	r5, [r1, #16]
 8005966:	461f      	mov	r7, r3
 8005968:	4606      	mov	r6, r0
 800596a:	460c      	mov	r4, r1
 800596c:	f101 0c14 	add.w	ip, r1, #20
 8005970:	2300      	movs	r3, #0
 8005972:	f8dc 0000 	ldr.w	r0, [ip]
 8005976:	b281      	uxth	r1, r0
 8005978:	fb02 7101 	mla	r1, r2, r1, r7
 800597c:	0c0f      	lsrs	r7, r1, #16
 800597e:	0c00      	lsrs	r0, r0, #16
 8005980:	fb02 7000 	mla	r0, r2, r0, r7
 8005984:	b289      	uxth	r1, r1
 8005986:	3301      	adds	r3, #1
 8005988:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800598c:	429d      	cmp	r5, r3
 800598e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005992:	f84c 1b04 	str.w	r1, [ip], #4
 8005996:	dcec      	bgt.n	8005972 <__multadd+0x12>
 8005998:	b1d7      	cbz	r7, 80059d0 <__multadd+0x70>
 800599a:	68a3      	ldr	r3, [r4, #8]
 800599c:	42ab      	cmp	r3, r5
 800599e:	dc12      	bgt.n	80059c6 <__multadd+0x66>
 80059a0:	6861      	ldr	r1, [r4, #4]
 80059a2:	4630      	mov	r0, r6
 80059a4:	3101      	adds	r1, #1
 80059a6:	f7ff ff90 	bl	80058ca <_Balloc>
 80059aa:	6922      	ldr	r2, [r4, #16]
 80059ac:	3202      	adds	r2, #2
 80059ae:	f104 010c 	add.w	r1, r4, #12
 80059b2:	4680      	mov	r8, r0
 80059b4:	0092      	lsls	r2, r2, #2
 80059b6:	300c      	adds	r0, #12
 80059b8:	f7ff ff7c 	bl	80058b4 <memcpy>
 80059bc:	4621      	mov	r1, r4
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff ffb7 	bl	8005932 <_Bfree>
 80059c4:	4644      	mov	r4, r8
 80059c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059ca:	3501      	adds	r5, #1
 80059cc:	615f      	str	r7, [r3, #20]
 80059ce:	6125      	str	r5, [r4, #16]
 80059d0:	4620      	mov	r0, r4
 80059d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059d6 <__hi0bits>:
 80059d6:	0c02      	lsrs	r2, r0, #16
 80059d8:	0412      	lsls	r2, r2, #16
 80059da:	4603      	mov	r3, r0
 80059dc:	b9b2      	cbnz	r2, 8005a0c <__hi0bits+0x36>
 80059de:	0403      	lsls	r3, r0, #16
 80059e0:	2010      	movs	r0, #16
 80059e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059e6:	bf04      	itt	eq
 80059e8:	021b      	lsleq	r3, r3, #8
 80059ea:	3008      	addeq	r0, #8
 80059ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059f0:	bf04      	itt	eq
 80059f2:	011b      	lsleq	r3, r3, #4
 80059f4:	3004      	addeq	r0, #4
 80059f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059fa:	bf04      	itt	eq
 80059fc:	009b      	lsleq	r3, r3, #2
 80059fe:	3002      	addeq	r0, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db06      	blt.n	8005a12 <__hi0bits+0x3c>
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	d503      	bpl.n	8005a10 <__hi0bits+0x3a>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	4770      	bx	lr
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e7e8      	b.n	80059e2 <__hi0bits+0xc>
 8005a10:	2020      	movs	r0, #32
 8005a12:	4770      	bx	lr

08005a14 <__lo0bits>:
 8005a14:	6803      	ldr	r3, [r0, #0]
 8005a16:	f013 0207 	ands.w	r2, r3, #7
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	d00b      	beq.n	8005a36 <__lo0bits+0x22>
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d423      	bmi.n	8005a6a <__lo0bits+0x56>
 8005a22:	0798      	lsls	r0, r3, #30
 8005a24:	bf49      	itett	mi
 8005a26:	085b      	lsrmi	r3, r3, #1
 8005a28:	089b      	lsrpl	r3, r3, #2
 8005a2a:	2001      	movmi	r0, #1
 8005a2c:	600b      	strmi	r3, [r1, #0]
 8005a2e:	bf5c      	itt	pl
 8005a30:	600b      	strpl	r3, [r1, #0]
 8005a32:	2002      	movpl	r0, #2
 8005a34:	4770      	bx	lr
 8005a36:	b298      	uxth	r0, r3
 8005a38:	b9a8      	cbnz	r0, 8005a66 <__lo0bits+0x52>
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a42:	bf04      	itt	eq
 8005a44:	0a1b      	lsreq	r3, r3, #8
 8005a46:	3008      	addeq	r0, #8
 8005a48:	071a      	lsls	r2, r3, #28
 8005a4a:	bf04      	itt	eq
 8005a4c:	091b      	lsreq	r3, r3, #4
 8005a4e:	3004      	addeq	r0, #4
 8005a50:	079a      	lsls	r2, r3, #30
 8005a52:	bf04      	itt	eq
 8005a54:	089b      	lsreq	r3, r3, #2
 8005a56:	3002      	addeq	r0, #2
 8005a58:	07da      	lsls	r2, r3, #31
 8005a5a:	d402      	bmi.n	8005a62 <__lo0bits+0x4e>
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	d006      	beq.n	8005a6e <__lo0bits+0x5a>
 8005a60:	3001      	adds	r0, #1
 8005a62:	600b      	str	r3, [r1, #0]
 8005a64:	4770      	bx	lr
 8005a66:	4610      	mov	r0, r2
 8005a68:	e7e9      	b.n	8005a3e <__lo0bits+0x2a>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	4770      	bx	lr
 8005a6e:	2020      	movs	r0, #32
 8005a70:	4770      	bx	lr

08005a72 <__i2b>:
 8005a72:	b510      	push	{r4, lr}
 8005a74:	460c      	mov	r4, r1
 8005a76:	2101      	movs	r1, #1
 8005a78:	f7ff ff27 	bl	80058ca <_Balloc>
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	6144      	str	r4, [r0, #20]
 8005a80:	6102      	str	r2, [r0, #16]
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <__multiply>:
 8005a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	4614      	mov	r4, r2
 8005a8a:	690a      	ldr	r2, [r1, #16]
 8005a8c:	6923      	ldr	r3, [r4, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bfb8      	it	lt
 8005a92:	460b      	movlt	r3, r1
 8005a94:	4688      	mov	r8, r1
 8005a96:	bfbc      	itt	lt
 8005a98:	46a0      	movlt	r8, r4
 8005a9a:	461c      	movlt	r4, r3
 8005a9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005aa0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005aa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005aa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005aac:	eb07 0609 	add.w	r6, r7, r9
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	bfb8      	it	lt
 8005ab4:	3101      	addlt	r1, #1
 8005ab6:	f7ff ff08 	bl	80058ca <_Balloc>
 8005aba:	f100 0514 	add.w	r5, r0, #20
 8005abe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4573      	cmp	r3, lr
 8005ac8:	d316      	bcc.n	8005af8 <__multiply+0x74>
 8005aca:	f104 0214 	add.w	r2, r4, #20
 8005ace:	f108 0114 	add.w	r1, r8, #20
 8005ad2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ad6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	9b00      	ldr	r3, [sp, #0]
 8005ade:	9201      	str	r2, [sp, #4]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d80c      	bhi.n	8005afe <__multiply+0x7a>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	dd03      	ble.n	8005af0 <__multiply+0x6c>
 8005ae8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05d      	beq.n	8005bac <__multiply+0x128>
 8005af0:	6106      	str	r6, [r0, #16]
 8005af2:	b003      	add	sp, #12
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	f843 2b04 	str.w	r2, [r3], #4
 8005afc:	e7e3      	b.n	8005ac6 <__multiply+0x42>
 8005afe:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b02:	f1bb 0f00 	cmp.w	fp, #0
 8005b06:	d023      	beq.n	8005b50 <__multiply+0xcc>
 8005b08:	4689      	mov	r9, r1
 8005b0a:	46ac      	mov	ip, r5
 8005b0c:	f04f 0800 	mov.w	r8, #0
 8005b10:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b14:	f8dc a000 	ldr.w	sl, [ip]
 8005b18:	b2a3      	uxth	r3, r4
 8005b1a:	fa1f fa8a 	uxth.w	sl, sl
 8005b1e:	fb0b a303 	mla	r3, fp, r3, sl
 8005b22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b26:	f8dc 4000 	ldr.w	r4, [ip]
 8005b2a:	4443      	add	r3, r8
 8005b2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b30:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b38:	46e2      	mov	sl, ip
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b40:	454f      	cmp	r7, r9
 8005b42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b46:	f84a 3b04 	str.w	r3, [sl], #4
 8005b4a:	d82b      	bhi.n	8005ba4 <__multiply+0x120>
 8005b4c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b50:	9b01      	ldr	r3, [sp, #4]
 8005b52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b56:	3204      	adds	r2, #4
 8005b58:	f1ba 0f00 	cmp.w	sl, #0
 8005b5c:	d020      	beq.n	8005ba0 <__multiply+0x11c>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	4689      	mov	r9, r1
 8005b62:	46a8      	mov	r8, r5
 8005b64:	f04f 0b00 	mov.w	fp, #0
 8005b68:	f8b9 c000 	ldrh.w	ip, [r9]
 8005b6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005b70:	fb0a 440c 	mla	r4, sl, ip, r4
 8005b74:	445c      	add	r4, fp
 8005b76:	46c4      	mov	ip, r8
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005b82:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b86:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	fb0a b303 	mla	r3, sl, r3, fp
 8005b90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b94:	454f      	cmp	r7, r9
 8005b96:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005b9a:	d805      	bhi.n	8005ba8 <__multiply+0x124>
 8005b9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ba0:	3504      	adds	r5, #4
 8005ba2:	e79b      	b.n	8005adc <__multiply+0x58>
 8005ba4:	46d4      	mov	ip, sl
 8005ba6:	e7b3      	b.n	8005b10 <__multiply+0x8c>
 8005ba8:	46e0      	mov	r8, ip
 8005baa:	e7dd      	b.n	8005b68 <__multiply+0xe4>
 8005bac:	3e01      	subs	r6, #1
 8005bae:	e799      	b.n	8005ae4 <__multiply+0x60>

08005bb0 <__pow5mult>:
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	4615      	mov	r5, r2
 8005bb6:	f012 0203 	ands.w	r2, r2, #3
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	d007      	beq.n	8005bd0 <__pow5mult+0x20>
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	4c21      	ldr	r4, [pc, #132]	; (8005c48 <__pow5mult+0x98>)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bca:	f7ff fec9 	bl	8005960 <__multadd>
 8005bce:	4607      	mov	r7, r0
 8005bd0:	10ad      	asrs	r5, r5, #2
 8005bd2:	d035      	beq.n	8005c40 <__pow5mult+0x90>
 8005bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bd6:	b93c      	cbnz	r4, 8005be8 <__pow5mult+0x38>
 8005bd8:	2010      	movs	r0, #16
 8005bda:	f7ff fe63 	bl	80058a4 <malloc>
 8005bde:	6270      	str	r0, [r6, #36]	; 0x24
 8005be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005be4:	6004      	str	r4, [r0, #0]
 8005be6:	60c4      	str	r4, [r0, #12]
 8005be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bf0:	b94c      	cbnz	r4, 8005c06 <__pow5mult+0x56>
 8005bf2:	f240 2171 	movw	r1, #625	; 0x271
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f7ff ff3b 	bl	8005a72 <__i2b>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c02:	4604      	mov	r4, r0
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	f04f 0800 	mov.w	r8, #0
 8005c0a:	07eb      	lsls	r3, r5, #31
 8005c0c:	d50a      	bpl.n	8005c24 <__pow5mult+0x74>
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4622      	mov	r2, r4
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff ff36 	bl	8005a84 <__multiply>
 8005c18:	4639      	mov	r1, r7
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff fe88 	bl	8005932 <_Bfree>
 8005c22:	464f      	mov	r7, r9
 8005c24:	106d      	asrs	r5, r5, #1
 8005c26:	d00b      	beq.n	8005c40 <__pow5mult+0x90>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	b938      	cbnz	r0, 8005c3c <__pow5mult+0x8c>
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff ff27 	bl	8005a84 <__multiply>
 8005c36:	6020      	str	r0, [r4, #0]
 8005c38:	f8c0 8000 	str.w	r8, [r0]
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	e7e4      	b.n	8005c0a <__pow5mult+0x5a>
 8005c40:	4638      	mov	r0, r7
 8005c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c46:	bf00      	nop
 8005c48:	08006118 	.word	0x08006118

08005c4c <__lshift>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	460c      	mov	r4, r1
 8005c52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	6849      	ldr	r1, [r1, #4]
 8005c5a:	eb0a 0903 	add.w	r9, sl, r3
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	4607      	mov	r7, r0
 8005c62:	4616      	mov	r6, r2
 8005c64:	f109 0501 	add.w	r5, r9, #1
 8005c68:	42ab      	cmp	r3, r5
 8005c6a:	db32      	blt.n	8005cd2 <__lshift+0x86>
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff fe2c 	bl	80058ca <_Balloc>
 8005c72:	2300      	movs	r3, #0
 8005c74:	4680      	mov	r8, r0
 8005c76:	f100 0114 	add.w	r1, r0, #20
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4553      	cmp	r3, sl
 8005c7e:	db2b      	blt.n	8005cd8 <__lshift+0x8c>
 8005c80:	6920      	ldr	r0, [r4, #16]
 8005c82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c86:	f104 0314 	add.w	r3, r4, #20
 8005c8a:	f016 021f 	ands.w	r2, r6, #31
 8005c8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c96:	d025      	beq.n	8005ce4 <__lshift+0x98>
 8005c98:	f1c2 0e20 	rsb	lr, r2, #32
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	681e      	ldr	r6, [r3, #0]
 8005ca0:	468a      	mov	sl, r1
 8005ca2:	4096      	lsls	r6, r2
 8005ca4:	4330      	orrs	r0, r6
 8005ca6:	f84a 0b04 	str.w	r0, [sl], #4
 8005caa:	f853 0b04 	ldr.w	r0, [r3], #4
 8005cae:	459c      	cmp	ip, r3
 8005cb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005cb4:	d814      	bhi.n	8005ce0 <__lshift+0x94>
 8005cb6:	6048      	str	r0, [r1, #4]
 8005cb8:	b108      	cbz	r0, 8005cbe <__lshift+0x72>
 8005cba:	f109 0502 	add.w	r5, r9, #2
 8005cbe:	3d01      	subs	r5, #1
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	f7ff fe33 	bl	8005932 <_Bfree>
 8005ccc:	4640      	mov	r0, r8
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	3101      	adds	r1, #1
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	e7c7      	b.n	8005c68 <__lshift+0x1c>
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	e7cd      	b.n	8005c7c <__lshift+0x30>
 8005ce0:	4651      	mov	r1, sl
 8005ce2:	e7dc      	b.n	8005c9e <__lshift+0x52>
 8005ce4:	3904      	subs	r1, #4
 8005ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cea:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cee:	459c      	cmp	ip, r3
 8005cf0:	d8f9      	bhi.n	8005ce6 <__lshift+0x9a>
 8005cf2:	e7e4      	b.n	8005cbe <__lshift+0x72>

08005cf4 <__mcmp>:
 8005cf4:	6903      	ldr	r3, [r0, #16]
 8005cf6:	690a      	ldr	r2, [r1, #16]
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	b530      	push	{r4, r5, lr}
 8005cfc:	d10c      	bne.n	8005d18 <__mcmp+0x24>
 8005cfe:	0092      	lsls	r2, r2, #2
 8005d00:	3014      	adds	r0, #20
 8005d02:	3114      	adds	r1, #20
 8005d04:	1884      	adds	r4, r0, r2
 8005d06:	4411      	add	r1, r2
 8005d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d10:	4295      	cmp	r5, r2
 8005d12:	d003      	beq.n	8005d1c <__mcmp+0x28>
 8005d14:	d305      	bcc.n	8005d22 <__mcmp+0x2e>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd30      	pop	{r4, r5, pc}
 8005d1c:	42a0      	cmp	r0, r4
 8005d1e:	d3f3      	bcc.n	8005d08 <__mcmp+0x14>
 8005d20:	e7fa      	b.n	8005d18 <__mcmp+0x24>
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	e7f7      	b.n	8005d18 <__mcmp+0x24>

08005d28 <__mdiff>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	4607      	mov	r7, r0
 8005d30:	4611      	mov	r1, r2
 8005d32:	4628      	mov	r0, r5
 8005d34:	4614      	mov	r4, r2
 8005d36:	f7ff ffdd 	bl	8005cf4 <__mcmp>
 8005d3a:	1e06      	subs	r6, r0, #0
 8005d3c:	d108      	bne.n	8005d50 <__mdiff+0x28>
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7ff fdc2 	bl	80058ca <_Balloc>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d50:	bfa4      	itt	ge
 8005d52:	4623      	movge	r3, r4
 8005d54:	462c      	movge	r4, r5
 8005d56:	4638      	mov	r0, r7
 8005d58:	6861      	ldr	r1, [r4, #4]
 8005d5a:	bfa6      	itte	ge
 8005d5c:	461d      	movge	r5, r3
 8005d5e:	2600      	movge	r6, #0
 8005d60:	2601      	movlt	r6, #1
 8005d62:	f7ff fdb2 	bl	80058ca <_Balloc>
 8005d66:	692b      	ldr	r3, [r5, #16]
 8005d68:	60c6      	str	r6, [r0, #12]
 8005d6a:	6926      	ldr	r6, [r4, #16]
 8005d6c:	f105 0914 	add.w	r9, r5, #20
 8005d70:	f104 0214 	add.w	r2, r4, #20
 8005d74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d7c:	f100 0514 	add.w	r5, r0, #20
 8005d80:	f04f 0e00 	mov.w	lr, #0
 8005d84:	f852 ab04 	ldr.w	sl, [r2], #4
 8005d88:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d8c:	fa1e f18a 	uxtah	r1, lr, sl
 8005d90:	b2a3      	uxth	r3, r4
 8005d92:	1ac9      	subs	r1, r1, r3
 8005d94:	0c23      	lsrs	r3, r4, #16
 8005d96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d9e:	b289      	uxth	r1, r1
 8005da0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005da4:	45c8      	cmp	r8, r9
 8005da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005daa:	4694      	mov	ip, r2
 8005dac:	f845 3b04 	str.w	r3, [r5], #4
 8005db0:	d8e8      	bhi.n	8005d84 <__mdiff+0x5c>
 8005db2:	45bc      	cmp	ip, r7
 8005db4:	d304      	bcc.n	8005dc0 <__mdiff+0x98>
 8005db6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005dba:	b183      	cbz	r3, 8005dde <__mdiff+0xb6>
 8005dbc:	6106      	str	r6, [r0, #16]
 8005dbe:	e7c5      	b.n	8005d4c <__mdiff+0x24>
 8005dc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005dc4:	fa1e f381 	uxtah	r3, lr, r1
 8005dc8:	141a      	asrs	r2, r3, #16
 8005dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005dd8:	f845 3b04 	str.w	r3, [r5], #4
 8005ddc:	e7e9      	b.n	8005db2 <__mdiff+0x8a>
 8005dde:	3e01      	subs	r6, #1
 8005de0:	e7e9      	b.n	8005db6 <__mdiff+0x8e>

08005de2 <__d2b>:
 8005de2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005de6:	460e      	mov	r6, r1
 8005de8:	2101      	movs	r1, #1
 8005dea:	ec59 8b10 	vmov	r8, r9, d0
 8005dee:	4615      	mov	r5, r2
 8005df0:	f7ff fd6b 	bl	80058ca <_Balloc>
 8005df4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005df8:	4607      	mov	r7, r0
 8005dfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dfe:	bb34      	cbnz	r4, 8005e4e <__d2b+0x6c>
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	f1b8 0300 	subs.w	r3, r8, #0
 8005e06:	d027      	beq.n	8005e58 <__d2b+0x76>
 8005e08:	a802      	add	r0, sp, #8
 8005e0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005e0e:	f7ff fe01 	bl	8005a14 <__lo0bits>
 8005e12:	9900      	ldr	r1, [sp, #0]
 8005e14:	b1f0      	cbz	r0, 8005e54 <__d2b+0x72>
 8005e16:	9a01      	ldr	r2, [sp, #4]
 8005e18:	f1c0 0320 	rsb	r3, r0, #32
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	430b      	orrs	r3, r1
 8005e22:	40c2      	lsrs	r2, r0
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	9201      	str	r2, [sp, #4]
 8005e28:	9b01      	ldr	r3, [sp, #4]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf14      	ite	ne
 8005e30:	2102      	movne	r1, #2
 8005e32:	2101      	moveq	r1, #1
 8005e34:	6139      	str	r1, [r7, #16]
 8005e36:	b1c4      	cbz	r4, 8005e6a <__d2b+0x88>
 8005e38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e3c:	4404      	add	r4, r0
 8005e3e:	6034      	str	r4, [r6, #0]
 8005e40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e44:	6028      	str	r0, [r5, #0]
 8005e46:	4638      	mov	r0, r7
 8005e48:	b003      	add	sp, #12
 8005e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e52:	e7d5      	b.n	8005e00 <__d2b+0x1e>
 8005e54:	6179      	str	r1, [r7, #20]
 8005e56:	e7e7      	b.n	8005e28 <__d2b+0x46>
 8005e58:	a801      	add	r0, sp, #4
 8005e5a:	f7ff fddb 	bl	8005a14 <__lo0bits>
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	2101      	movs	r1, #1
 8005e64:	6139      	str	r1, [r7, #16]
 8005e66:	3020      	adds	r0, #32
 8005e68:	e7e5      	b.n	8005e36 <__d2b+0x54>
 8005e6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e72:	6030      	str	r0, [r6, #0]
 8005e74:	6918      	ldr	r0, [r3, #16]
 8005e76:	f7ff fdae 	bl	80059d6 <__hi0bits>
 8005e7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e7e:	e7e1      	b.n	8005e44 <__d2b+0x62>

08005e80 <_calloc_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	fb02 f401 	mul.w	r4, r2, r1
 8005e86:	4621      	mov	r1, r4
 8005e88:	f000 f808 	bl	8005e9c <_malloc_r>
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	b118      	cbz	r0, 8005e98 <_calloc_r+0x18>
 8005e90:	4622      	mov	r2, r4
 8005e92:	2100      	movs	r1, #0
 8005e94:	f7fe fb62 	bl	800455c <memset>
 8005e98:	4628      	mov	r0, r5
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}

08005e9c <_malloc_r>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	1ccd      	adds	r5, r1, #3
 8005ea0:	f025 0503 	bic.w	r5, r5, #3
 8005ea4:	3508      	adds	r5, #8
 8005ea6:	2d0c      	cmp	r5, #12
 8005ea8:	bf38      	it	cc
 8005eaa:	250c      	movcc	r5, #12
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	4606      	mov	r6, r0
 8005eb0:	db01      	blt.n	8005eb6 <_malloc_r+0x1a>
 8005eb2:	42a9      	cmp	r1, r5
 8005eb4:	d903      	bls.n	8005ebe <_malloc_r+0x22>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
 8005ebe:	f000 f869 	bl	8005f94 <__malloc_lock>
 8005ec2:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <_malloc_r+0xac>)
 8005ec4:	6814      	ldr	r4, [r2, #0]
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	b991      	cbnz	r1, 8005ef0 <_malloc_r+0x54>
 8005eca:	4c20      	ldr	r4, [pc, #128]	; (8005f4c <_malloc_r+0xb0>)
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	b91b      	cbnz	r3, 8005ed8 <_malloc_r+0x3c>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f83d 	bl	8005f50 <_sbrk_r>
 8005ed6:	6020      	str	r0, [r4, #0]
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 f838 	bl	8005f50 <_sbrk_r>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d124      	bne.n	8005f2e <_malloc_r+0x92>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	6033      	str	r3, [r6, #0]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f854 	bl	8005f96 <__malloc_unlock>
 8005eee:	e7e4      	b.n	8005eba <_malloc_r+0x1e>
 8005ef0:	680b      	ldr	r3, [r1, #0]
 8005ef2:	1b5b      	subs	r3, r3, r5
 8005ef4:	d418      	bmi.n	8005f28 <_malloc_r+0x8c>
 8005ef6:	2b0b      	cmp	r3, #11
 8005ef8:	d90f      	bls.n	8005f1a <_malloc_r+0x7e>
 8005efa:	600b      	str	r3, [r1, #0]
 8005efc:	50cd      	str	r5, [r1, r3]
 8005efe:	18cc      	adds	r4, r1, r3
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 f848 	bl	8005f96 <__malloc_unlock>
 8005f06:	f104 000b 	add.w	r0, r4, #11
 8005f0a:	1d23      	adds	r3, r4, #4
 8005f0c:	f020 0007 	bic.w	r0, r0, #7
 8005f10:	1ac3      	subs	r3, r0, r3
 8005f12:	d0d3      	beq.n	8005ebc <_malloc_r+0x20>
 8005f14:	425a      	negs	r2, r3
 8005f16:	50e2      	str	r2, [r4, r3]
 8005f18:	e7d0      	b.n	8005ebc <_malloc_r+0x20>
 8005f1a:	428c      	cmp	r4, r1
 8005f1c:	684b      	ldr	r3, [r1, #4]
 8005f1e:	bf16      	itet	ne
 8005f20:	6063      	strne	r3, [r4, #4]
 8005f22:	6013      	streq	r3, [r2, #0]
 8005f24:	460c      	movne	r4, r1
 8005f26:	e7eb      	b.n	8005f00 <_malloc_r+0x64>
 8005f28:	460c      	mov	r4, r1
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	e7cc      	b.n	8005ec8 <_malloc_r+0x2c>
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d005      	beq.n	8005f44 <_malloc_r+0xa8>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f000 f808 	bl	8005f50 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0cf      	beq.n	8005ee4 <_malloc_r+0x48>
 8005f44:	6025      	str	r5, [r4, #0]
 8005f46:	e7db      	b.n	8005f00 <_malloc_r+0x64>
 8005f48:	20000404 	.word	0x20000404
 8005f4c:	20000408 	.word	0x20000408

08005f50 <_sbrk_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4c06      	ldr	r4, [pc, #24]	; (8005f6c <_sbrk_r+0x1c>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	4605      	mov	r5, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	f7fc fb1c 	bl	8002598 <_sbrk>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_sbrk_r+0x1a>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_sbrk_r+0x1a>
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	2000082c 	.word	0x2000082c

08005f70 <__ascii_mbtowc>:
 8005f70:	b082      	sub	sp, #8
 8005f72:	b901      	cbnz	r1, 8005f76 <__ascii_mbtowc+0x6>
 8005f74:	a901      	add	r1, sp, #4
 8005f76:	b142      	cbz	r2, 8005f8a <__ascii_mbtowc+0x1a>
 8005f78:	b14b      	cbz	r3, 8005f8e <__ascii_mbtowc+0x1e>
 8005f7a:	7813      	ldrb	r3, [r2, #0]
 8005f7c:	600b      	str	r3, [r1, #0]
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	1c10      	adds	r0, r2, #0
 8005f82:	bf18      	it	ne
 8005f84:	2001      	movne	r0, #1
 8005f86:	b002      	add	sp, #8
 8005f88:	4770      	bx	lr
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	e7fb      	b.n	8005f86 <__ascii_mbtowc+0x16>
 8005f8e:	f06f 0001 	mvn.w	r0, #1
 8005f92:	e7f8      	b.n	8005f86 <__ascii_mbtowc+0x16>

08005f94 <__malloc_lock>:
 8005f94:	4770      	bx	lr

08005f96 <__malloc_unlock>:
 8005f96:	4770      	bx	lr

08005f98 <__ascii_wctomb>:
 8005f98:	b149      	cbz	r1, 8005fae <__ascii_wctomb+0x16>
 8005f9a:	2aff      	cmp	r2, #255	; 0xff
 8005f9c:	bf85      	ittet	hi
 8005f9e:	238a      	movhi	r3, #138	; 0x8a
 8005fa0:	6003      	strhi	r3, [r0, #0]
 8005fa2:	700a      	strbls	r2, [r1, #0]
 8005fa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005fa8:	bf98      	it	ls
 8005faa:	2001      	movls	r0, #1
 8005fac:	4770      	bx	lr
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4770      	bx	lr
	...

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
