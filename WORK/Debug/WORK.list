
WORK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08008d88  08008d88  00018d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009410  08009410  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08009418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000344  0800975c  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800975c  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c4a  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000215c  00000000  00000000  00030fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  00034108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022356  00000000  00000000  00035000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb03  00000000  00000000  00057356  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf0f0  00000000  00000000  00062e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  00131fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d70 	.word	0x08008d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	08008d70 	.word	0x08008d70

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <ST7920_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4816      	ldr	r0, [pc, #88]	; (8000f30 <ST7920_Send_command+0x68>)
 8000ed8:	f002 fdaa 	bl	8003a30 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000edc:	23f8      	movs	r3, #248	; 0xf8
 8000ede:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <ST7920_Send_command+0x6c>)
 8000eea:	f003 ffb9 	bl	8004e60 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <ST7920_Send_command+0x6c>)
 8000f02:	f003 ffad 	bl	8004e60 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <ST7920_Send_command+0x6c>)
 8000f18:	f003 ffa2 	bl	8004e60 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <ST7920_Send_command+0x68>)
 8000f22:	f002 fd85 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	200007f4 	.word	0x200007f4

08000f38 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000f42:	2201      	movs	r2, #1
 8000f44:	2120      	movs	r1, #32
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <ST7920_Send_data+0x68>)
 8000f48:	f002 fd72 	bl	8003a30 <HAL_GPIO_WritePin>
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000f4c:	23fa      	movs	r3, #250	; 0xfa
 8000f4e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f50:	f107 030f 	add.w	r3, r7, #15
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <ST7920_Send_data+0x6c>)
 8000f5a:	f003 ff81 	bl	8004e60 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <ST7920_Send_data+0x6c>)
 8000f72:	f003 ff75 	bl	8004e60 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi2, &tx_buffer, 1);
 8000f7e:	f107 030f 	add.w	r3, r7, #15
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <ST7920_Send_data+0x6c>)
 8000f88:	f003 ff6a 	bl	8004e60 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <ST7920_Send_data+0x68>)
 8000f92:	f002 fd4d 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	200007f4 	.word	0x200007f4

08000fa8 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	481e      	ldr	r0, [pc, #120]	; (800102c <ST7920_Init+0x84>)
 8000fb4:	f002 fd3c 	bl	8003a30 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f001 ff31 	bl	8002e20 <HAL_Delay>
	RST_set();
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <ST7920_Init+0x84>)
 8000fc4:	f002 fd34 	bl	8003a30 <HAL_GPIO_WritePin>
	HAL_Delay(40); //Ждем 40 мс
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f001 ff29 	bl	8002e20 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000fce:	2330      	movs	r3, #48	; 0x30
 8000fd0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff77 	bl	8000ec8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 ff20 	bl	8002e20 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff70 	bl	8000ec8 <ST7920_Send_command>
	HAL_Delay(1);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f001 ff19 	bl	8002e20 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000fee:	230c      	movs	r3, #12
 8000ff0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff67 	bl	8000ec8 <ST7920_Send_command>
	HAL_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f001 ff10 	bl	8002e20 <HAL_Delay>
	tx_buffer = 0x01;
 8001000:	2301      	movs	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff5e 	bl	8000ec8 <ST7920_Send_command>
	HAL_Delay(12);
 800100c:	200c      	movs	r0, #12
 800100e:	f001 ff07 	bl	8002e20 <HAL_Delay>
	tx_buffer = 0x06;
 8001012:	2306      	movs	r3, #6
 8001014:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff55 	bl	8000ec8 <ST7920_Send_command>
	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 fefe 	bl	8002e20 <HAL_Delay>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020400 	.word	0x40020400

08001030 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00c      	beq.n	800105a <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8001040:	2034      	movs	r0, #52	; 0x34
 8001042:	f7ff ff41 	bl	8000ec8 <ST7920_Send_command>
		HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 feea 	bl	8002e20 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 800104c:	2036      	movs	r0, #54	; 0x36
 800104e:	f7ff ff3b 	bl	8000ec8 <ST7920_Send_command>
		HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 fee4 	bl	8002e20 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8001058:	e00b      	b.n	8001072 <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f083 0301 	eor.w	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8001066:	2030      	movs	r0, #48	; 0x30
 8001068:	f7ff ff2e 	bl	8000ec8 <ST7920_Send_command>
		HAL_Delay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f001 fed7 	bl	8002e20 <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <ST7920_Clean>:
/*----------------Функция включения/выключения графического режима----------------*/

/*---------------Функция очистки дисплея в графическом режиме--------------------*/
void ST7920_Clean() {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
/// Функция очистки дисплея в графическом режиме
	uint8_t x, y;
	for (y = 0; y < 64; y++) {
 8001080:	2300      	movs	r3, #0
 8001082:	71bb      	strb	r3, [r7, #6]
 8001084:	e02d      	b.n	80010e2 <ST7920_Clean+0x68>
		if (y < 32) {
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	2b1f      	cmp	r3, #31
 800108a:	d80a      	bhi.n	80010a2 <ST7920_Clean+0x28>
			ST7920_Send_command(0x80 | y);
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff17 	bl	8000ec8 <ST7920_Send_command>
			ST7920_Send_command(0x80);
 800109a:	2080      	movs	r0, #128	; 0x80
 800109c:	f7ff ff14 	bl	8000ec8 <ST7920_Send_command>
 80010a0:	e00d      	b.n	80010be <ST7920_Clean+0x44>
		} else {
			ST7920_Send_command(0x80 | (y - 32));
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	3b20      	subs	r3, #32
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff08 	bl	8000ec8 <ST7920_Send_command>
			ST7920_Send_command(0x88);
 80010b8:	2088      	movs	r0, #136	; 0x88
 80010ba:	f7ff ff05 	bl	8000ec8 <ST7920_Send_command>
		}
		for (x = 0; x < 8; x++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e008      	b.n	80010d6 <ST7920_Clean+0x5c>
			ST7920_Send_data(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff37 	bl	8000f38 <ST7920_Send_data>
			ST7920_Send_data(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff34 	bl	8000f38 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	3301      	adds	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d9f3      	bls.n	80010c4 <ST7920_Clean+0x4a>
	for (y = 0; y < 64; y++) {
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	3301      	adds	r3, #1
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b3f      	cmp	r3, #63	; 0x3f
 80010e6:	d9ce      	bls.n	8001086 <ST7920_Clean+0xc>
		}
	}
	ST7920_Clean_Frame_buffer();
 80010e8:	f000 fa8a 	bl	8001600 <ST7920_Clean_Frame_buffer>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <ST7920_Draw_bitmap>:
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]
 8001104:	e13a      	b.n	800137c <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e130      	b.n	800136e <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	2b1f      	cmp	r3, #31
 8001110:	d80e      	bhi.n	8001130 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fed4 	bl	8000ec8 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fecd 	bl	8000ec8 <ST7920_Send_command>
 800112e:	e011      	b.n	8001154 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	3b20      	subs	r3, #32
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b25b      	sxtb	r3, r3
 8001138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fec1 	bl	8000ec8 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f063 0377 	orn	r3, r3, #119	; 0x77
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff feba 	bl	8000ec8 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	00da      	lsls	r2, r3, #3
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 800116e:	89bb      	ldrh	r3, [r7, #12]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	7afb      	ldrb	r3, [r7, #11]
 800117a:	fa42 f303 	asr.w	r3, r2, r3
 800117e:	01db      	lsls	r3, r3, #7
 8001180:	b25a      	sxtb	r2, r3
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	fa41 f303 	asr.w	r3, r1, r3
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	3302      	adds	r3, #2
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	440b      	add	r3, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	fa41 f303 	asr.w	r3, r1, r3
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	3303      	adds	r3, #3
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	fa41 f303 	asr.w	r3, r1, r3
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	fa41 f303 	asr.w	r3, r1, r3
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25a      	sxtb	r2, r3
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	3305      	adds	r3, #5
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	440b      	add	r3, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	fa41 f303 	asr.w	r3, r1, r3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	b25b      	sxtb	r3, r3
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	3306      	adds	r3, #6
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	fa41 f303 	asr.w	r3, r1, r3
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b25b      	sxtb	r3, r3
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	89bb      	ldrh	r3, [r7, #12]
 8001244:	3307      	adds	r3, #7
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	440b      	add	r3, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	fa41 f303 	asr.w	r3, r1, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b25b      	sxtb	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8001260:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8001262:	7abb      	ldrb	r3, [r7, #10]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe67 	bl	8000f38 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800126a:	89bb      	ldrh	r3, [r7, #12]
 800126c:	3308      	adds	r3, #8
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	fa42 f303 	asr.w	r3, r2, r3
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	b25a      	sxtb	r2, r3
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	3309      	adds	r3, #9
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	fa41 f303 	asr.w	r3, r1, r3
 8001292:	019b      	lsls	r3, r3, #6
 8001294:	b25b      	sxtb	r3, r3
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	330a      	adds	r3, #10
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	fa41 f303 	asr.w	r3, r1, r3
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	330b      	adds	r3, #11
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	fa41 f303 	asr.w	r3, r1, r3
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	330c      	adds	r3, #12
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	440b      	add	r3, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	fa41 f303 	asr.w	r3, r1, r3
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	330d      	adds	r3, #13
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	fa41 f303 	asr.w	r3, r1, r3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	330e      	adds	r3, #14
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	440b      	add	r3, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	fa41 f303 	asr.w	r3, r1, r3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	b25b      	sxtb	r3, r3
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b25a      	sxtb	r2, r3
 8001340:	89bb      	ldrh	r3, [r7, #12]
 8001342:	330f      	adds	r3, #15
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	fa41 f303 	asr.w	r3, r1, r3
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	b25b      	sxtb	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800135e:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fde8 	bl	8000f38 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b07      	cmp	r3, #7
 8001372:	f67f aecb 	bls.w	800110c <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	3301      	adds	r3, #1
 800137a:	73bb      	strb	r3, [r7, #14]
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b3f      	cmp	r3, #63	; 0x3f
 8001380:	f67f aec1 	bls.w	8001106 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <ST7920_Update+0x10>)
 8001392:	f7ff feaf 	bl	80010f4 <ST7920_Draw_bitmap>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003e0 	.word	0x200003e0

080013a0 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	460b      	mov	r3, r1
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e028      	b.n	800140a <print_symbol+0x6a>
		if (inversion) {
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d012      	beq.n	80013e4 <print_symbol+0x44>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
 80013be:	88ba      	ldrh	r2, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <print_symbol+0x7c>)
 80013d0:	5cd2      	ldrb	r2, [r2, r3]
 80013d2:	88f9      	ldrh	r1, [r7, #6]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	440b      	add	r3, r1
 80013d8:	3b01      	subs	r3, #1
 80013da:	43d2      	mvns	r2, r2
 80013dc:	b2d1      	uxtb	r1, r2
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <print_symbol+0x80>)
 80013e0:	54d1      	strb	r1, [r2, r3]
 80013e2:	e00f      	b.n	8001404 <print_symbol+0x64>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
 80013e4:	88ba      	ldrh	r2, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	441a      	add	r2, r3
 80013f4:	88f9      	ldrh	r1, [r7, #6]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	440b      	add	r3, r1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <print_symbol+0x7c>)
 80013fe:	5c89      	ldrb	r1, [r1, r2]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <print_symbol+0x80>)
 8001402:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 6; i++) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b06      	cmp	r3, #6
 800140e:	ddd3      	ble.n	80013b8 <print_symbol+0x18>
		}

	}
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	08008dc4 	.word	0x08008dc4
 8001420:	200003e0 	.word	0x200003e0

08001424 <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	4603      	mov	r3, r0
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	460b      	mov	r3, r1
 8001432:	717b      	strb	r3, [r7, #5]
 8001434:	4613      	mov	r3, r2
 8001436:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	b29b      	uxth	r3, r3
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	b29a      	uxth	r2, r3
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4413      	add	r3, r2
 8001444:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	e0c8      	b.n	80015e6 <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2bbf      	cmp	r3, #191	; 0xbf
 800145e:	d822      	bhi.n	80014a6 <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	e0b9      	b.n	80015e0 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8001476:	793b      	ldrb	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	3b20      	subs	r3, #32
 8001480:	b299      	uxth	r1, r3
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2201      	movs	r2, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff8a 	bl	80013a0 <print_symbol>
 800148c:	e007      	b.n	800149e <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	3b20      	subs	r3, #32
 8001492:	b299      	uxth	r1, r3
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2200      	movs	r2, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff81 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	3306      	adds	r3, #6
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	e09c      	b.n	80015e0 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	3301      	adds	r3, #1
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	440b      	add	r3, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d820      	bhi.n	8001510 <ST7920_Decode_UTF8+0xec>
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	f24d 0281 	movw	r2, #53377	; 0xd081
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d91b      	bls.n	8001510 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 80014d8:	793b      	ldrb	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014e4:	330f      	adds	r3, #15
 80014e6:	b299      	uxth	r1, r3
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff57 	bl	80013a0 <print_symbol>
 80014f2:	e009      	b.n	8001508 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80014fa:	330f      	adds	r3, #15
 80014fc:	b299      	uxth	r1, r3
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2200      	movs	r2, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff4c 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	3306      	adds	r3, #6
 800150c:	80fb      	strh	r3, [r7, #6]
 800150e:	e065      	b.n	80015dc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	f24d 0281 	movw	r2, #53377	; 0xd081
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	2201      	movs	r2, #1
 8001524:	219f      	movs	r1, #159	; 0x9f
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff3a 	bl	80013a0 <print_symbol>
 800152c:	e005      	b.n	800153a <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	2200      	movs	r2, #0
 8001532:	219f      	movs	r1, #159	; 0x9f
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff33 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	3306      	adds	r3, #6
 800153e:	80fb      	strh	r3, [r7, #6]
 8001540:	e04c      	b.n	80015dc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	f24d 1291 	movw	r2, #53649	; 0xd191
 8001548:	4293      	cmp	r3, r2
 800154a:	d113      	bne.n	8001574 <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 800154c:	793b      	ldrb	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2201      	movs	r2, #1
 8001556:	21a0      	movs	r1, #160	; 0xa0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff21 	bl	80013a0 <print_symbol>
 800155e:	e005      	b.n	800156c <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	2200      	movs	r2, #0
 8001564:	21a0      	movs	r1, #160	; 0xa0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff1a 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	3306      	adds	r3, #6
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	e033      	b.n	80015dc <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800157a:	4293      	cmp	r3, r2
 800157c:	d113      	bne.n	80015a6 <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	2201      	movs	r2, #1
 8001588:	21a1      	movs	r1, #161	; 0xa1
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff08 	bl	80013a0 <print_symbol>
 8001590:	e005      	b.n	800159e <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2200      	movs	r2, #0
 8001596:	21a1      	movs	r1, #161	; 0xa1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff01 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	3306      	adds	r3, #6
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	e01a      	b.n	80015dc <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 80015a6:	793b      	ldrb	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00a      	beq.n	80015c2 <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80015b2:	330f      	adds	r3, #15
 80015b4:	b299      	uxth	r1, r3
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fef0 	bl	80013a0 <print_symbol>
 80015c0:	e009      	b.n	80015d6 <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80015c8:	330f      	adds	r3, #15
 80015ca:	b299      	uxth	r1, r3
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fee5 	bl	80013a0 <print_symbol>
				}
				x = x + 6;
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	3306      	adds	r3, #6
 80015da:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f7fe fdfc 	bl	80001e4 <strlen>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f63f af2f 	bhi.w	8001454 <ST7920_Decode_UTF8+0x30>
		}
	}
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <ST7920_Clean_Frame_buffer>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	2100      	movs	r1, #0
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <ST7920_Clean_Frame_buffer+0x14>)
 800160c:	f005 fb6c 	bl	8006ce8 <memset>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003e0 	.word	0x200003e0

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f001 fb8d 	bl	8002d3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fae5 	bl	8001bf0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f000 fc7f 	bl	8001f28 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f000 fc5d 	bl	8001ee8 <MX_DMA_Init>
  MX_TIM7_Init();
 800162e:	f000 fc25 	bl	8001e7c <MX_TIM7_Init>
  MX_SDIO_SD_Init();
 8001632:	f000 fb45 	bl	8001cc0 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001636:	f000 fb73 	bl	8001d20 <MX_SPI2_Init>
  MX_TIM3_Init();
 800163a:	f000 fba7 	bl	8001d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  GPIOD->ODR = ~0;
 800163e:	4ba3      	ldr	r3, [pc, #652]	; (80018cc <main+0x2b4>)
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	615a      	str	r2, [r3, #20]
  Init();
 8001646:	f000 fd5f 	bl	8002108 <Init>
  HAL_Delay(700);
 800164a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800164e:	f001 fbe7 	bl	8002e20 <HAL_Delay>
  ST7920_Clean();
 8001652:	f7ff fd12 	bl	800107a <ST7920_Clean>
  sprintf(tx_buffer, "Count: %lu", counter);
 8001656:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <main+0x2b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	499d      	ldr	r1, [pc, #628]	; (80018d4 <main+0x2bc>)
 800165e:	489e      	ldr	r0, [pc, #632]	; (80018d8 <main+0x2c0>)
 8001660:	f005 ffa6 	bl	80075b0 <siprintf>
  ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001664:	4b9c      	ldr	r3, [pc, #624]	; (80018d8 <main+0x2c0>)
 8001666:	2200      	movs	r2, #0
 8001668:	2104      	movs	r1, #4
 800166a:	2014      	movs	r0, #20
 800166c:	f7ff feda 	bl	8001424 <ST7920_Decode_UTF8>
  ST7920_Update();
 8001670:	f7ff fe8c 	bl	800138c <ST7920_Update>
  HAL_TIM_Base_Start_IT(&htim7);
 8001674:	4899      	ldr	r0, [pc, #612]	; (80018dc <main+0x2c4>)
 8001676:	f003 ff1c 	bl	80054b2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{

		if(!Buttons[9].B_State)
 800167a:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <main+0x2c8>)
 800167c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8001680:	2b00      	cmp	r3, #0
 8001682:	f040 8218 	bne.w	8001ab6 <main+0x49e>
		{
			if(Buttons[9].B_Out == 1)
 8001686:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <main+0x2c8>)
 8001688:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d115      	bne.n	80016bc <main+0xa4>
			{
				Buttons[9].B_Out = 0;
 8001690:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <main+0x2c8>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	e00b      	b.n	80016b6 <main+0x9e>
				{
					Buttons[i].B_Out = 0;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a8f      	ldr	r2, [pc, #572]	; (80018e0 <main+0x2c8>)
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	3314      	adds	r3, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3301      	adds	r3, #1
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b0e      	cmp	r3, #14
 80016ba:	d9f0      	bls.n	800169e <main+0x86>
				};
			}
			// MANUAL MODE
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	71bb      	strb	r3, [r7, #6]
 80016c0:	e1f4      	b.n	8001aac <main+0x494>
			{
				if(Buttons[i].Lock == 0)
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	4a86      	ldr	r2, [pc, #536]	; (80018e0 <main+0x2c8>)
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3315      	adds	r3, #21
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 81e7 	bne.w	8001aa6 <main+0x48e>
				{
					if(Buttons[i].Mode == HOLD)
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	4a81      	ldr	r2, [pc, #516]	; (80018e0 <main+0x2c8>)
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3316      	adds	r3, #22
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d121      	bne.n	8001730 <main+0x118>
					{
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_State);
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <main+0x2c8>)
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	330c      	adds	r3, #12
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <main+0x2c8>)
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3310      	adds	r3, #16
 800170a:	881c      	ldrh	r4, [r3, #0]
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	4a74      	ldr	r2, [pc, #464]	; (80018e0 <main+0x2c8>)
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3313      	adds	r3, #19
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4621      	mov	r1, r4
 800172a:	f002 f981 	bl	8003a30 <HAL_GPIO_WritePin>
						continue;
 800172e:	e1ba      	b.n	8001aa6 <main+0x48e>
					}
					if(Buttons[i].Mode == TOGGLE && Buttons[i].alternate_function == 0)
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	4a6b      	ldr	r2, [pc, #428]	; (80018e0 <main+0x2c8>)
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3316      	adds	r3, #22
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d163      	bne.n	800180c <main+0x1f4>
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <main+0x2c8>)
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	3324      	adds	r3, #36	; 0x24
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d159      	bne.n	800180c <main+0x1f4>
					{
						if(Buttons[i].addiction != 0)
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	4a61      	ldr	r2, [pc, #388]	; (80018e0 <main+0x2c8>)
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	331c      	adds	r3, #28
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d02d      	beq.n	80017c8 <main+0x1b0>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !(Buttons[i].B_Out && Buttons[i].addiction->B_Out));
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	4a5c      	ldr	r2, [pc, #368]	; (80018e0 <main+0x2c8>)
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	330c      	adds	r3, #12
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <main+0x2c8>)
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3310      	adds	r3, #16
 800178a:	881c      	ldrh	r4, [r3, #0]
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <main+0x2c8>)
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3314      	adds	r3, #20
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00a      	beq.n	80017b6 <main+0x19e>
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <main+0x2c8>)
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	331c      	adds	r3, #28
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	7d1b      	ldrb	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <main+0x1a2>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <main+0x1a4>
 80017ba:	2300      	movs	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	4621      	mov	r1, r4
 80017c2:	f002 f935 	bl	8003a30 <HAL_GPIO_WritePin>
						else
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
						continue;
 80017c6:	e16e      	b.n	8001aa6 <main+0x48e>
							HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, !Buttons[i].B_Out);
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	4a45      	ldr	r2, [pc, #276]	; (80018e0 <main+0x2c8>)
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	330c      	adds	r3, #12
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	4a41      	ldr	r2, [pc, #260]	; (80018e0 <main+0x2c8>)
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3310      	adds	r3, #16
 80017e6:	881c      	ldrh	r4, [r3, #0]
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <main+0x2c8>)
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3314      	adds	r3, #20
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4621      	mov	r1, r4
 8001806:	f002 f913 	bl	8003a30 <HAL_GPIO_WritePin>
						continue;
 800180a:	e14c      	b.n	8001aa6 <main+0x48e>
					}
					if (Buttons[i].alternate_function && Buttons[i].Mode == PRESS && Buttons[i].B_Out)
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <main+0x2c8>)
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3324      	adds	r3, #36	; 0x24
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02d      	beq.n	800187c <main+0x264>
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	4a2f      	ldr	r2, [pc, #188]	; (80018e0 <main+0x2c8>)
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3316      	adds	r3, #22
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d123      	bne.n	800187c <main+0x264>
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <main+0x2c8>)
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3314      	adds	r3, #20
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d019      	beq.n	800187c <main+0x264>
					{
						Buttons[i].B_Out = 0;
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <main+0x2c8>)
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3314      	adds	r3, #20
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
						Buttons[i].alternate_function(&Buttons[i]);
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <main+0x2c8>)
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3324      	adds	r3, #36	; 0x24
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f202 	mul.w	r2, r1, r2
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <main+0x2c8>)
 8001874:	440a      	add	r2, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4798      	blx	r3
						continue;
 800187a:	e114      	b.n	8001aa6 <main+0x48e>
					}
					if(Buttons[i].Mode == TIMER && Buttons[i].B_Out)
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <main+0x2c8>)
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3316      	adds	r3, #22
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d129      	bne.n	80018e4 <main+0x2cc>
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <main+0x2c8>)
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3314      	adds	r3, #20
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01f      	beq.n	80018e4 <main+0x2cc>
					{
						Buttons[i].B_Out = 0;
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <main+0x2c8>)
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3314      	adds	r3, #20
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
						TimerMotor(&Buttons[i]);
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	222c      	movs	r2, #44	; 0x2c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <main+0x2c8>)
 80018c0:	4413      	add	r3, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 ff1a 	bl	80026fc <TimerMotor>
						continue;
 80018c8:	e0ed      	b.n	8001aa6 <main+0x48e>
 80018ca:	bf00      	nop
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	200007e0 	.word	0x200007e0
 80018d4:	08008d88 	.word	0x08008d88
 80018d8:	20000360 	.word	0x20000360
 80018dc:	20000c04 	.word	0x20000c04
 80018e0:	2000088c 	.word	0x2000088c
					}
					if(Buttons[i].Mode == __DELAY && Buttons[i].B_Out)
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	4abb      	ldr	r2, [pc, #748]	; (8001bd4 <main+0x5bc>)
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3316      	adds	r3, #22
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d152      	bne.n	800199e <main+0x386>
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	4ab6      	ldr	r2, [pc, #728]	; (8001bd4 <main+0x5bc>)
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3314      	adds	r3, #20
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d048      	beq.n	800199e <main+0x386>
					{
						if(Buttons[i].addiction->B_Out == 0) continue;
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	4ab1      	ldr	r2, [pc, #708]	; (8001bd4 <main+0x5bc>)
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	331c      	adds	r3, #28
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	7d1b      	ldrb	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80be 	beq.w	8001aa0 <main+0x488>
						Buttons[i].B_Out = 0;
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	4aab      	ldr	r2, [pc, #684]	; (8001bd4 <main+0x5bc>)
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3314      	adds	r3, #20
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 0);
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	4aa6      	ldr	r2, [pc, #664]	; (8001bd4 <main+0x5bc>)
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	330c      	adds	r3, #12
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	4aa2      	ldr	r2, [pc, #648]	; (8001bd4 <main+0x5bc>)
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3310      	adds	r3, #16
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	f002 f869 	bl	8003a30 <HAL_GPIO_WritePin>
						HAL_Delay(Buttons[i].Delay);
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	4a9c      	ldr	r2, [pc, #624]	; (8001bd4 <main+0x5bc>)
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3318      	adds	r3, #24
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fa56 	bl	8002e20 <HAL_Delay>
						HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	4a97      	ldr	r2, [pc, #604]	; (8001bd4 <main+0x5bc>)
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	330c      	adds	r3, #12
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	4a93      	ldr	r2, [pc, #588]	; (8001bd4 <main+0x5bc>)
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3310      	adds	r3, #16
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	f002 f84a 	bl	8003a30 <HAL_GPIO_WritePin>
						continue;
 800199c:	e083      	b.n	8001aa6 <main+0x48e>
					}
					if(Buttons[i].Mode == HOLD_MOTOR && Buttons[i].B_Out)
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	4a8c      	ldr	r2, [pc, #560]	; (8001bd4 <main+0x5bc>)
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3316      	adds	r3, #22
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d11d      	bne.n	80019ee <main+0x3d6>
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	4a87      	ldr	r2, [pc, #540]	; (8001bd4 <main+0x5bc>)
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3314      	adds	r3, #20
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d013      	beq.n	80019ee <main+0x3d6>
					{
						Buttons[i].B_Out = 0;
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	4a82      	ldr	r2, [pc, #520]	; (8001bd4 <main+0x5bc>)
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3314      	adds	r3, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
						HoldMotor(&Buttons[i], 1);
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	222c      	movs	r2, #44	; 0x2c
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a7c      	ldr	r2, [pc, #496]	; (8001bd4 <main+0x5bc>)
 80019e2:	4413      	add	r3, r2
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fdf4 	bl	80025d4 <HoldMotor>
						continue;
 80019ec:	e05b      	b.n	8001aa6 <main+0x48e>
					}
					if(Buttons[i].Mode == HOLD_UNTIL && Buttons[i].B_Out)
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	4a78      	ldr	r2, [pc, #480]	; (8001bd4 <main+0x5bc>)
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	3316      	adds	r3, #22
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d151      	bne.n	8001aa6 <main+0x48e>
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	4a73      	ldr	r2, [pc, #460]	; (8001bd4 <main+0x5bc>)
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3314      	adds	r3, #20
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d047      	beq.n	8001aa6 <main+0x48e>
					{
						if(strcmp((const char*)Buttons[i].Label, (const char*)"Prepare"))
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	4a6e      	ldr	r2, [pc, #440]	; (8001bd4 <main+0x5bc>)
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	496c      	ldr	r1, [pc, #432]	; (8001bd8 <main+0x5c0>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fbd2 	bl	80001d0 <strcmp>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d020      	beq.n	8001a74 <main+0x45c>
						{
							HoldPrepareMotorUntill(Buttons[i].addiction, 1);
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <main+0x5bc>)
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	331c      	adds	r3, #28
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fe33 	bl	80026b0 <HoldPrepareMotorUntill>
							if(Buttons[i].addiction->B_State == 0)
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	4a61      	ldr	r2, [pc, #388]	; (8001bd4 <main+0x5bc>)
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	331c      	adds	r3, #28
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	7cdb      	ldrb	r3, [r3, #19]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <main+0x48c>
							{
								Buttons[i].B_Out = 0;
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	4a5c      	ldr	r2, [pc, #368]	; (8001bd4 <main+0x5bc>)
 8001a64:	212c      	movs	r1, #44	; 0x2c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3314      	adds	r3, #20
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
						else
						{
							Buttons[i].B_Out = 0;
							HoldMotor(Buttons[i].addiction, 1);
						}
						continue;
 8001a72:	e017      	b.n	8001aa4 <main+0x48c>
							Buttons[i].B_Out = 0;
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <main+0x5bc>)
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3314      	adds	r3, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
							HoldMotor(Buttons[i].addiction, 1);
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <main+0x5bc>)
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	331c      	adds	r3, #28
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fd9b 	bl	80025d4 <HoldMotor>
						continue;
 8001a9e:	e001      	b.n	8001aa4 <main+0x48c>
						if(Buttons[i].addiction->B_Out == 0) continue;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <main+0x48e>
						continue;
 8001aa4:	bf00      	nop
			for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	71bb      	strb	r3, [r7, #6]
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b0e      	cmp	r3, #14
 8001ab0:	f67f ae07 	bls.w	80016c2 <main+0xaa>
 8001ab4:	e5e1      	b.n	800167a <main+0x62>

    /* USER CODE BEGIN 3 */
		else
		{
			//AUTO MODE
			if(Buttons[10].B_Out) // AUTO MODE START
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <main+0x5bc>)
 8001ab8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d078      	beq.n	8001bb2 <main+0x59a>
				if(Buttons[13].B_State == 1) // REED SWITCH
				{
					HoldMotor(&Buttons[13], 1); // Prepare mat.
				}
				*/
				TimerMotor(&Buttons[7]); // PULL mat.
 8001ac0:	4846      	ldr	r0, [pc, #280]	; (8001bdc <main+0x5c4>)
 8001ac2:	f000 fe1b 	bl	80026fc <TimerMotor>
				HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0); // Push
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <main+0x5bc>)
 8001ac8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <main+0x5bc>)
 8001ace:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f001 ffab 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0); // Push
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <main+0x5bc>)
 8001adc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <main+0x5bc>)
 8001ae2:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f001 ffa1 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001aee:	20c8      	movs	r0, #200	; 0xc8
 8001af0:	f001 f996 	bl	8002e20 <HAL_Delay>
				HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 0); // CUT
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <main+0x5bc>)
 8001af6:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <main+0x5bc>)
 8001afc:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	f001 ff94 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0); // Weld
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <main+0x5bc>)
 8001b0a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <main+0x5bc>)
 8001b10:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	f001 ff8a 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0); // Weld
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <main+0x5bc>)
 8001b1e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <main+0x5bc>)
 8001b24:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f001 ff80 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8001b30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b34:	f001 f974 	bl	8002e20 <HAL_Delay>
				HAL_GPIO_WritePin(Buttons[8].GPIO_Out, Buttons[8].GPIO_Pin_Out, 1); /*Release*/
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <main+0x5bc>)
 8001b3a:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <main+0x5bc>)
 8001b40:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001b44:	2201      	movs	r2, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	f001 ff72 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <main+0x5bc>)
 8001b4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <main+0x5bc>)
 8001b54:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f001 ff68 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <main+0x5bc>)
 8001b62:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <main+0x5bc>)
 8001b68:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f001 ff5e 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <main+0x5bc>)
 8001b76:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <main+0x5bc>)
 8001b7c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	f001 ff54 	bl	8003a30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <main+0x5bc>)
 8001b8a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <main+0x5bc>)
 8001b90:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8001b94:	2201      	movs	r2, #1
 8001b96:	4619      	mov	r1, r3
 8001b98:	f001 ff4a 	bl	8003a30 <HAL_GPIO_WritePin>
				TimerMotor(&Buttons[2]); // Dose
 8001b9c:	4810      	ldr	r0, [pc, #64]	; (8001be0 <main+0x5c8>)
 8001b9e:	f000 fdad 	bl	80026fc <TimerMotor>
				HAL_Delay(200);
 8001ba2:	20c8      	movs	r0, #200	; 0xc8
 8001ba4:	f001 f93c 	bl	8002e20 <HAL_Delay>
				counter++;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <main+0x5cc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <main+0x5cc>)
 8001bb0:	6013      	str	r3, [r2, #0]
			}
			sprintf(tx_buffer, "Count: %lu", counter);
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <main+0x5cc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	490b      	ldr	r1, [pc, #44]	; (8001be8 <main+0x5d0>)
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <main+0x5d4>)
 8001bbc:	f005 fcf8 	bl	80075b0 <siprintf>
			ST7920_Decode_UTF8(20, 4, 0, tx_buffer);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <main+0x5d4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	2014      	movs	r0, #20
 8001bc8:	f7ff fc2c 	bl	8001424 <ST7920_Decode_UTF8>
			ST7920_Update();
 8001bcc:	f7ff fbde 	bl	800138c <ST7920_Update>
		if(!Buttons[9].B_State)
 8001bd0:	e553      	b.n	800167a <main+0x62>
 8001bd2:	bf00      	nop
 8001bd4:	2000088c 	.word	0x2000088c
 8001bd8:	08008d94 	.word	0x08008d94
 8001bdc:	200009c0 	.word	0x200009c0
 8001be0:	200008e4 	.word	0x200008e4
 8001be4:	200007e0 	.word	0x200007e0
 8001be8:	08008d88 	.word	0x08008d88
 8001bec:	20000360 	.word	0x20000360

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	; 0x50
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	2230      	movs	r2, #48	; 0x30
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 f872 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c56:	2302      	movs	r3, #2
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c64:	2348      	movs	r3, #72	; 0x48
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001c68:	2306      	movs	r3, #6
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fef5 	bl	8003a64 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c80:	f000 fdea 	bl	8002858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 f94f 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cac:	f000 fdd4 	bl	8002858 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <MX_SDIO_SD_Init+0x5c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001cf0:	f002 fae6 	bl	80042c0 <HAL_SD_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001cfa:	f000 fdad 	bl	8002858 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_SDIO_SD_Init+0x58>)
 8001d04:	f002 fd10 	bl	8004728 <HAL_SD_ConfigWideBusOperation>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001d0e:	f000 fda3 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000b20 	.word	0x20000b20
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_SPI2_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d72:	f003 f811 	bl	8004d98 <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f000 fd6c 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200007f4 	.word	0x200007f4
 8001d88:	40003800 	.word	0x40003800

08001d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	615a      	str	r2, [r3, #20]
 8001dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <MX_TIM3_Init+0xec>)
 8001dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2400-1;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dc4:	f640 125f 	movw	r2, #2399	; 0x95f
 8001dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6-1;
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de2:	4824      	ldr	r0, [pc, #144]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001de4:	f003 fb3a 	bl	800545c <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dee:	f000 fd33 	bl	8002858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481d      	ldr	r0, [pc, #116]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001e00:	f003 fe40 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e0a:	f000 fd25 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0e:	4819      	ldr	r0, [pc, #100]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001e10:	f003 fb9e 	bl	8005550 <HAL_TIM_PWM_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e1a:	f000 fd1d 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4811      	ldr	r0, [pc, #68]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001e2e:	f004 fa19 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e38:	f000 fd0e 	bl	8002858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3c:	2360      	movs	r3, #96	; 0x60
 8001e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8001e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001e56:	f003 fd4f 	bl	80058f8 <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e60:	f000 fcfa 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001e66:	f000 fe77 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	; 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000084c 	.word	0x2000084c
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <MX_TIM7_Init+0x68>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e92:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001e96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001eac:	f003 fad6 	bl	800545c <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001eb6:	f000 fccf 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM7_Init+0x64>)
 8001ec8:	f004 f9cc 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ed2:	f000 fcc1 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000c04 	.word	0x20000c04
 8001ee4:	40001400 	.word	0x40001400

08001ee8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f001 f897 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f14:	200f      	movs	r0, #15
 8001f16:	f001 f8b0 	bl	800307a <HAL_NVIC_EnableIRQ>

}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <MX_GPIO_Init+0x1c8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4842      	ldr	r0, [pc, #264]	; (80020f4 <MX_GPIO_Init+0x1cc>)
 8001fec:	f001 fd20 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	21c0      	movs	r1, #192	; 0xc0
 8001ff4:	4840      	ldr	r0, [pc, #256]	; (80020f8 <MX_GPIO_Init+0x1d0>)
 8001ff6:	f001 fd1b 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin|H_Push_Out_Pin 
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8002000:	483e      	ldr	r0, [pc, #248]	; (80020fc <MX_GPIO_Init+0x1d4>)
 8002002:	f001 fd15 	bl	8003a30 <HAL_GPIO_WritePin>
                          |H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	483d      	ldr	r0, [pc, #244]	; (8002100 <MX_GPIO_Init+0x1d8>)
 800200c:	f001 fd10 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin CounterReset_Pin V_Push_V_Weld_Pin 
                           Prepare_material_Pin Dose_Pin V_Push_Pin V_Weld_Pin 
                           H_Push_Pin H_Weld_Pin Pull_Pin Cut_Pin 
                           HOLD_Pull_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin|CounterReset_Pin|V_Push_V_Weld_Pin 
 8002010:	f64f 73da 	movw	r3, #65498	; 0xffda
 8002014:	61fb      	str	r3, [r7, #28]
                          |Prepare_material_Pin|Dose_Pin|V_Push_Pin|V_Weld_Pin 
                          |H_Push_Pin|H_Weld_Pin|Pull_Pin|Cut_Pin 
                          |HOLD_Pull_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201a:	2301      	movs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4833      	ldr	r0, [pc, #204]	; (80020f4 <MX_GPIO_Init+0x1cc>)
 8002026:	f001 fb51 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800202a:	2320      	movs	r3, #32
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4619      	mov	r1, r3
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <MX_GPIO_Init+0x1cc>)
 8002042:	f001 fb43 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : HOLD_Dose_Pin */
  GPIO_InitStruct.Pin = HOLD_Dose_Pin;
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002050:	2301      	movs	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HOLD_Dose_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	482a      	ldr	r0, [pc, #168]	; (8002104 <MX_GPIO_Init+0x1dc>)
 800205c:	f001 fb36 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin;
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4820      	ldr	r0, [pc, #128]	; (80020f8 <MX_GPIO_Init+0x1d0>)
 8002078:	f001 fb28 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Pin Auto_Start_Pin */
  GPIO_InitStruct.Pin = Mode_Pin|Auto_Start_Pin;
 800207c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	481b      	ldr	r0, [pc, #108]	; (8002100 <MX_GPIO_Init+0x1d8>)
 8002092:	f001 fb1b 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Dose_Out_Pin V_Push_Out_Pin V_Weld_Out_Pin H_Push_Out_Pin 
                           H_Weld_Out_Pin Pull_Out_Pin Cut_Out_Pin */
  GPIO_InitStruct.Pin = Dose_Out_Pin|V_Push_Out_Pin|V_Weld_Out_Pin|H_Push_Out_Pin 
 8002096:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800209a:	61fb      	str	r3, [r7, #28]
                          |H_Weld_Out_Pin|Pull_Out_Pin|Cut_Out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <MX_GPIO_Init+0x1d4>)
 80020b0:	f001 fb0c 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_Switch_Pin STOP_Pin */
  GPIO_InitStruct.Pin = Reed_Switch_Pin|STOP_Pin;
 80020b4:	2318      	movs	r3, #24
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_GPIO_Init+0x1d4>)
 80020c8:	f001 fb00 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_GPIO_Init+0x1d8>)
 80020e4:	f001 faf2 	bl	80036cc <HAL_GPIO_Init>

}
 80020e8:	bf00      	nop
 80020ea:	3730      	adds	r7, #48	; 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800

08002108 <Init>:

/* USER CODE BEGIN 4 */
void Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f000 fe86 	bl	8002e20 <HAL_Delay>
	  ST7920_Init();
 8002114:	f7fe ff48 	bl	8000fa8 <ST7920_Init>
	  ST7920_Graphic_mode(1);
 8002118:	2001      	movs	r0, #1
 800211a:	f7fe ff89 	bl	8001030 <ST7920_Graphic_mode>
	  sprintf(tx_buffer, "WELCOME");
 800211e:	4a7d      	ldr	r2, [pc, #500]	; (8002314 <Init+0x20c>)
 8002120:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <Init+0x210>)
 8002122:	cb03      	ldmia	r3!, {r0, r1}
 8002124:	6010      	str	r0, [r2, #0]
 8002126:	6051      	str	r1, [r2, #4]
	  ST7920_Decode_UTF8(50, 3, 0, tx_buffer);
 8002128:	4b7a      	ldr	r3, [pc, #488]	; (8002314 <Init+0x20c>)
 800212a:	2200      	movs	r2, #0
 800212c:	2103      	movs	r1, #3
 800212e:	2032      	movs	r0, #50	; 0x32
 8002130:	f7ff f978 	bl	8001424 <ST7920_Decode_UTF8>
	  ST7920_Update();
 8002134:	f7ff f92a 	bl	800138c <ST7920_Update>
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	e0b0      	b.n	80022a0 <Init+0x198>
	  {
		  Buttons[i].B_Out = 0;
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4a76      	ldr	r2, [pc, #472]	; (800231c <Init+0x214>)
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3314      	adds	r3, #20
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_State = 0;
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4a72      	ldr	r2, [pc, #456]	; (800231c <Init+0x214>)
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3313      	adds	r3, #19
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
		  Buttons[i].B_counter = 0;
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4a6d      	ldr	r2, [pc, #436]	; (800231c <Init+0x214>)
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3312      	adds	r3, #18
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Lock = 0;
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <Init+0x214>)
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3315      	adds	r3, #21
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
		  Buttons[i].call_function = toggle_func;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4a64      	ldr	r2, [pc, #400]	; (800231c <Init+0x214>)
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3320      	adds	r3, #32
 8002194:	4a62      	ldr	r2, [pc, #392]	; (8002320 <Init+0x218>)
 8002196:	601a      	str	r2, [r3, #0]
		  Buttons[i].alternate_function = 0;
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4a60      	ldr	r2, [pc, #384]	; (800231c <Init+0x214>)
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3324      	adds	r3, #36	; 0x24
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
		  Buttons[i].GPIO = (GPIO_TypeDef*)Defines[i][0];
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	495d      	ldr	r1, [pc, #372]	; (8002324 <Init+0x21c>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4610      	mov	r0, r2
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <Init+0x214>)
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin = Defines[i][1];
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	4955      	ldr	r1, [pc, #340]	; (8002324 <Init+0x21c>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	3304      	adds	r3, #4
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	b290      	uxth	r0, r2
 80021e2:	4a4e      	ldr	r2, [pc, #312]	; (800231c <Init+0x214>)
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3308      	adds	r3, #8
 80021ee:	4602      	mov	r2, r0
 80021f0:	801a      	strh	r2, [r3, #0]
		  Buttons[i].GPIO_Out = (GPIO_TypeDef*)Defines[i][2];
 80021f2:	79fa      	ldrb	r2, [r7, #7]
 80021f4:	494b      	ldr	r1, [pc, #300]	; (8002324 <Init+0x21c>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3308      	adds	r3, #8
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4610      	mov	r0, r2
 8002208:	4a44      	ldr	r2, [pc, #272]	; (800231c <Init+0x214>)
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	330c      	adds	r3, #12
 8002214:	6018      	str	r0, [r3, #0]
		  Buttons[i].GPIO_Pin_Out = Defines[i][3];
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	4942      	ldr	r1, [pc, #264]	; (8002324 <Init+0x21c>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	330c      	adds	r3, #12
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	b290      	uxth	r0, r2
 800222c:	4a3b      	ldr	r2, [pc, #236]	; (800231c <Init+0x214>)
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3310      	adds	r3, #16
 8002238:	4602      	mov	r2, r0
 800223a:	801a      	strh	r2, [r3, #0]
		  Buttons[i].Mode = Defines[i][4];
 800223c:	79fa      	ldrb	r2, [r7, #7]
 800223e:	4939      	ldr	r1, [pc, #228]	; (8002324 <Init+0x21c>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3310      	adds	r3, #16
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	b2d0      	uxtb	r0, r2
 8002252:	4a32      	ldr	r2, [pc, #200]	; (800231c <Init+0x214>)
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3316      	adds	r3, #22
 800225e:	4602      	mov	r2, r0
 8002260:	701a      	strb	r2, [r3, #0]
		  Buttons[i].Delay = Defines[i][5];
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	492f      	ldr	r1, [pc, #188]	; (8002324 <Init+0x21c>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3314      	adds	r3, #20
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	b290      	uxth	r0, r2
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <Init+0x214>)
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3318      	adds	r3, #24
 8002284:	4602      	mov	r2, r0
 8002286:	801a      	strh	r2, [r3, #0]
		  Buttons[i].addiction = 0;
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4a24      	ldr	r2, [pc, #144]	; (800231c <Init+0x214>)
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	331c      	adds	r3, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	3301      	adds	r3, #1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b0e      	cmp	r3, #14
 80022a4:	f67f af4b 	bls.w	800213e <Init+0x36>
	  }
	  Buttons[0].alternate_function = macros1;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <Init+0x214>)
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <Init+0x220>)
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
	  Buttons[1].Label = "Prepare";
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <Init+0x214>)
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <Init+0x224>)
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
	  Buttons[1].third_function = SetSteps0;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <Init+0x214>)
 80022b6:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <Init+0x228>)
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
	  Buttons[1].addiction = &Buttons[13];
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <Init+0x214>)
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <Init+0x22c>)
 80022be:	649a      	str	r2, [r3, #72]	; 0x48
	  Buttons[2].third_function = SetSteps2;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <Init+0x214>)
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <Init+0x230>)
 80022c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  Buttons[4].addiction = &Buttons[3];
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <Init+0x214>)
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <Init+0x234>)
 80022cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	  Buttons[6].addiction = &Buttons[5];
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <Init+0x214>)
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <Init+0x238>)
 80022d4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  Buttons[7].third_function = SetSteps1;
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <Init+0x214>)
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <Init+0x23c>)
 80022dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Buttons[9].Label = "mode";
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <Init+0x214>)
 80022e2:	4a19      	ldr	r2, [pc, #100]	; (8002348 <Init+0x240>)
 80022e4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  Buttons[10].Label = "auto_start";
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <Init+0x214>)
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <Init+0x244>)
 80022ec:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	  Buttons[13].Label = "reed_switch";
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <Init+0x214>)
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <Init+0x248>)
 80022f4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 1);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	4815      	ldr	r0, [pc, #84]	; (8002354 <Init+0x24c>)
 80022fe:	f001 fb97 	bl	8003a30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <Init+0x24c>)
 8002308:	f001 fb92 	bl	8003a30 <HAL_GPIO_WritePin>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000360 	.word	0x20000360
 8002318:	08008d9c 	.word	0x08008d9c
 800231c:	2000088c 	.word	0x2000088c
 8002320:	0800248d 	.word	0x0800248d
 8002324:	20000000 	.word	0x20000000
 8002328:	08002511 	.word	0x08002511
 800232c:	08008d94 	.word	0x08008d94
 8002330:	08002819 	.word	0x08002819
 8002334:	20000ac8 	.word	0x20000ac8
 8002338:	080027fd 	.word	0x080027fd
 800233c:	20000910 	.word	0x20000910
 8002340:	20000968 	.word	0x20000968
 8002344:	080027e1 	.word	0x080027e1
 8002348:	08008da4 	.word	0x08008da4
 800234c:	08008dac 	.word	0x08008dac
 8002350:	08008db8 	.word	0x08008db8
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0)
 8002360:	2110      	movs	r1, #16
 8002362:	4844      	ldr	r0, [pc, #272]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002364:	f001 fb4c 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12d      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e016      	b.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_WritePin(Buttons[i].GPIO_Out, Buttons[i].GPIO_Pin_Out, 1);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4a40      	ldr	r2, [pc, #256]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	330c      	adds	r3, #12
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3310      	adds	r3, #16
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	2201      	movs	r2, #1
 8002396:	4619      	mov	r1, r3
 8002398:	f001 fb4a 	bl	8003a30 <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	3301      	adds	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b0e      	cmp	r3, #14
 80023a6:	d9e5      	bls.n	8002374 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		HAL_TIM_Base_Stop_IT(&htim7);
 80023a8:	4834      	ldr	r0, [pc, #208]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023aa:	f003 f8a6 	bl	80054fa <HAL_TIM_Base_Stop_IT>
		Delay(4800000);
 80023ae:	4834      	ldr	r0, [pc, #208]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023b0:	f000 fa40 	bl	8002834 <Delay>
		while(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == 0){asm("NOP");};
 80023b4:	e000      	b.n	80023b8 <HAL_TIM_PeriodElapsedCallback+0x60>
 80023b6:	bf00      	nop
 80023b8:	2110      	movs	r1, #16
 80023ba:	482e      	ldr	r0, [pc, #184]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023bc:	f001 fb20 	bl	8003a00 <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f7      	beq.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_NVIC_SystemReset();
 80023c6:	f000 fe66 	bl	8003096 <HAL_NVIC_SystemReset>
	}

	if (htim->Instance==TIM7)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d14a      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0x112>
	{
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	73bb      	strb	r3, [r7, #14]
 80023d8:	e027      	b.n	800242a <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			if(Buttons[i].addiction->B_Out || Buttons[i].addiction == 0)
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	331c      	adds	r3, #28
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	7d1b      	ldrb	r3, [r3, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_TIM_PeriodElapsedCallback+0xac>
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	4a21      	ldr	r2, [pc, #132]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	331c      	adds	r3, #28
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10f      	bne.n	8002424 <HAL_TIM_PeriodElapsedCallback+0xcc>
				Buttons[i].call_function(&Buttons[i]);
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3320      	adds	r3, #32
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	7bba      	ldrb	r2, [r7, #14]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f202 	mul.w	r2, r1, r2
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800241e:	440a      	add	r2, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3
		for(uint8_t i = 0; i < BUTTONS_COUNT; i++)
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	3301      	adds	r3, #1
 8002428:	73bb      	strb	r3, [r7, #14]
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	2b0e      	cmp	r3, #14
 800242e:	d9d4      	bls.n	80023da <HAL_TIM_PeriodElapsedCallback+0x82>
		}

		if(Buttons[14].B_Out && counter > 0)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002432:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00c      	beq.n	8002454 <HAL_TIM_PeriodElapsedCallback+0xfc>
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_TIM_PeriodElapsedCallback+0xfc>
		{
			Buttons[14].B_Out = 0;
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
			counter = 0;
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
			ST7920_Clean();
 8002450:	f7fe fe13 	bl	800107a <ST7920_Clean>
		}
		if(Buttons[10].B_Out)
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002456:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			HoldPrepareMotorUntill(Buttons[1].addiction, 1);
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f923 	bl	80026b0 <HoldPrepareMotorUntill>
		}
	}
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40020c00 	.word	0x40020c00
 8002478:	2000088c 	.word	0x2000088c
 800247c:	20000c04 	.word	0x20000c04
 8002480:	00493e00 	.word	0x00493e00
 8002484:	40001400 	.word	0x40001400
 8002488:	200007e0 	.word	0x200007e0

0800248c <toggle_func>:
	}
	return -1;
}
*/
void toggle_func(struct Button *button)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIO, button->GPIO_Pin) == 0 && button->Lock == 0)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	891b      	ldrh	r3, [r3, #8]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f001 faae 	bl	8003a00 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <toggle_func+0x5a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7d5b      	ldrb	r3, [r3, #21]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <toggle_func+0x5a>
		{
			if(button->B_counter < 10)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7c9b      	ldrb	r3, [r3, #18]
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	d806      	bhi.n	80024c8 <toggle_func+0x3c>
				button->B_counter++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7c9b      	ldrb	r3, [r3, #18]
 80024be:	3301      	adds	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	749a      	strb	r2, [r3, #18]
			if(button->B_counter < 10)
 80024c6:	e01d      	b.n	8002504 <toggle_func+0x78>
			else
				if(button->B_State == 0)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7cdb      	ldrb	r3, [r3, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d119      	bne.n	8002504 <toggle_func+0x78>
				{
					button->B_State = 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	74da      	strb	r2, [r3, #19]
					button->B_Out ^= 1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7d1b      	ldrb	r3, [r3, #20]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	751a      	strb	r2, [r3, #20]
			if(button->B_counter < 10)
 80024e4:	e00e      	b.n	8002504 <toggle_func+0x78>
				}
		}
		else
		{
			if(button->B_counter > 0)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7c9b      	ldrb	r3, [r3, #18]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <toggle_func+0x70>
				button->B_counter--;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7c9b      	ldrb	r3, [r3, #18]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	749a      	strb	r2, [r3, #18]
			else
				button->B_State = 0;
		}
}
 80024fa:	e004      	b.n	8002506 <toggle_func+0x7a>
				button->B_State = 0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	74da      	strb	r2, [r3, #19]
}
 8002502:	e000      	b.n	8002506 <toggle_func+0x7a>
			if(button->B_counter < 10)
 8002504:	bf00      	nop
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <macros1>:
void macros1(struct Button *button)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 0);
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <macros1+0xc0>)
 800251a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <macros1+0xc0>)
 8002520:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002524:	2200      	movs	r2, #0
 8002526:	4619      	mov	r1, r3
 8002528:	f001 fa82 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[5].GPIO_Pin_Out, 0);
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <macros1+0xc0>)
 800252e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <macros1+0xc0>)
 8002534:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	f001 fa78 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002540:	20c8      	movs	r0, #200	; 0xc8
 8002542:	f000 fc6d 	bl	8002e20 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[4].GPIO_Pin_Out, 0);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <macros1+0xc0>)
 8002548:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <macros1+0xc0>)
 800254e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002552:	2200      	movs	r2, #0
 8002554:	4619      	mov	r1, r3
 8002556:	f001 fa6b 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 0);
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <macros1+0xc0>)
 800255c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <macros1+0xc0>)
 8002562:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8002566:	2200      	movs	r2, #0
 8002568:	4619      	mov	r1, r3
 800256a:	f001 fa61 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800256e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002572:	f000 fc55 	bl	8002e20 <HAL_Delay>
		HAL_GPIO_WritePin(Buttons[3].GPIO_Out, Buttons[3].GPIO_Pin_Out, 1);
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <macros1+0xc0>)
 8002578:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <macros1+0xc0>)
 800257e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002582:	2201      	movs	r2, #1
 8002584:	4619      	mov	r1, r3
 8002586:	f001 fa53 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[4].GPIO_Out, Buttons[4].GPIO_Pin_Out, 1);
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <macros1+0xc0>)
 800258c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <macros1+0xc0>)
 8002592:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002596:	2201      	movs	r2, #1
 8002598:	4619      	mov	r1, r3
 800259a:	f001 fa49 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[5].GPIO_Out, Buttons[5].GPIO_Pin_Out, 1);
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <macros1+0xc0>)
 80025a0:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <macros1+0xc0>)
 80025a6:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80025aa:	2201      	movs	r2, #1
 80025ac:	4619      	mov	r1, r3
 80025ae:	f001 fa3f 	bl	8003a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buttons[6].GPIO_Out, Buttons[6].GPIO_Pin_Out, 1);
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <macros1+0xc0>)
 80025b4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <macros1+0xc0>)
 80025ba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80025be:	2201      	movs	r2, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	f001 fa35 	bl	8003a30 <HAL_GPIO_WritePin>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000088c 	.word	0x2000088c

080025d4 <HoldMotor>:

void HoldMotor(struct Button *Button, uint8_t mode)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]

	uint16_t Limitation = 10000;
 80025e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80025e4:	81fb      	strh	r3, [r7, #14]
	uint16_t temp = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	81bb      	strh	r3, [r7, #12]
	for(uint32_t j = 0; j < 10; j++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	e020      	b.n	8002632 <HoldMotor+0x5e>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68d8      	ldr	r0, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8a1b      	ldrh	r3, [r3, #16]
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	f001 fa18 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8b1b      	ldrh	r3, [r3, #24]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f913 	bl	8002834 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68d8      	ldr	r0, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8a1b      	ldrh	r3, [r3, #16]
 8002616:	2201      	movs	r2, #1
 8002618:	4619      	mov	r1, r3
 800261a:	f001 fa09 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8b1b      	ldrh	r3, [r3, #24]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f904 	bl	8002834 <Delay>
	for(uint32_t j = 0; j < 10; j++)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d9db      	bls.n	80025f0 <HoldMotor+0x1c>
	}
	while(Button->B_State == mode && Limitation)
 8002638:	e02d      	b.n	8002696 <HoldMotor+0xc2>
	{
		Limitation--;
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	3b01      	subs	r3, #1
 800263e:	81fb      	strh	r3, [r7, #14]
		if(temp < ACCEL) temp++;
 8002640:	89bb      	ldrh	r3, [r7, #12]
 8002642:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002646:	d202      	bcs.n	800264e <HoldMotor+0x7a>
 8002648:	89bb      	ldrh	r3, [r7, #12]
 800264a:	3301      	adds	r3, #1
 800264c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68d8      	ldr	r0, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8a1b      	ldrh	r3, [r3, #16]
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	f001 f9e9 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8b1b      	ldrh	r3, [r3, #24]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	89bb      	ldrh	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8e1 	bl	8002834 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68d8      	ldr	r0, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8a1b      	ldrh	r3, [r3, #16]
 800267a:	2201      	movs	r2, #1
 800267c:	4619      	mov	r1, r3
 800267e:	f001 f9d7 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8b1b      	ldrh	r3, [r3, #24]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	89bb      	ldrh	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f8cf 	bl	8002834 <Delay>
	while(Button->B_State == mode && Limitation)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7cdb      	ldrb	r3, [r3, #19]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	429a      	cmp	r2, r3
 800269e:	d102      	bne.n	80026a6 <HoldMotor+0xd2>
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1c9      	bne.n	800263a <HoldMotor+0x66>
	}

}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HoldPrepareMotorUntill>:

void HoldPrepareMotorUntill(struct Button *Button, uint8_t mode)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
	static bool flag = false;
	if(Button->B_State == mode)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7cdb      	ldrb	r3, [r3, #19]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d10e      	bne.n	80026e4 <HoldPrepareMotorUntill+0x34>
	{
		if(flag == false)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HoldPrepareMotorUntill+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HoldPrepareMotorUntill+0x3c>
		{
			HAL_TIM_PWM_Start(&htim3, 1);
 80026d4:	2101      	movs	r1, #1
 80026d6:	4808      	ldr	r0, [pc, #32]	; (80026f8 <HoldPrepareMotorUntill+0x48>)
 80026d8:	f002 ff70 	bl	80055bc <HAL_TIM_PWM_Start>
			flag = true;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HoldPrepareMotorUntill+0x44>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim3, 1);
	}
}
 80026e2:	e003      	b.n	80026ec <HoldPrepareMotorUntill+0x3c>
		HAL_TIM_PWM_Stop(&htim3, 1);
 80026e4:	2101      	movs	r1, #1
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <HoldPrepareMotorUntill+0x48>)
 80026e8:	f002 ffa6 	bl	8005638 <HAL_TIM_PWM_Stop>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200007e4 	.word	0x200007e4
 80026f8:	2000084c 	.word	0x2000084c

080026fc <TimerMotor>:

void TimerMotor(struct Button *Button)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	//HAL_TIM_Base_Stop_IT(&htim7);
	uint16_t temp = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	82fb      	strh	r3, [r7, #22]
	uint32_t steps = 200;
 8002708:	23c8      	movs	r3, #200	; 0xc8
 800270a:	60bb      	str	r3, [r7, #8]
	if(Button->third_function)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <TimerMotor+0x24>
	{
		Button->third_function(&steps);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f107 0208 	add.w	r2, r7, #8
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
	}
	for(uint32_t j = 0; j < 20; j++)
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e020      	b.n	8002768 <TimerMotor+0x6c>
	{
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68d8      	ldr	r0, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8a1b      	ldrh	r3, [r3, #16]
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	f001 f97d 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8b1b      	ldrh	r3, [r3, #24]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	b29b      	uxth	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f878 	bl	8002834 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68d8      	ldr	r0, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8a1b      	ldrh	r3, [r3, #16]
 800274c:	2201      	movs	r2, #1
 800274e:	4619      	mov	r1, r3
 8002750:	f001 f96e 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8b1b      	ldrh	r3, [r3, #24]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f869 	bl	8002834 <Delay>
	for(uint32_t j = 0; j < 20; j++)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3301      	adds	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b13      	cmp	r3, #19
 800276c:	d9db      	bls.n	8002726 <TimerMotor+0x2a>
	}
	for(uint32_t j = 0; j < steps; j++)
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e02d      	b.n	80027d0 <TimerMotor+0xd4>
	{
		if(temp < ACCEL) temp++;
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800277a:	d202      	bcs.n	8002782 <TimerMotor+0x86>
 800277c:	8afb      	ldrh	r3, [r7, #22]
 800277e:	3301      	adds	r3, #1
 8002780:	82fb      	strh	r3, [r7, #22]
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 0);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68d8      	ldr	r0, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8a1b      	ldrh	r3, [r3, #16]
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	f001 f94f 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8b1b      	ldrh	r3, [r3, #24]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f847 	bl	8002834 <Delay>
		HAL_GPIO_WritePin(Button->GPIO_Out, Button->GPIO_Pin_Out, 1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68d8      	ldr	r0, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8a1b      	ldrh	r3, [r3, #16]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	f001 f93d 	bl	8003a30 <HAL_GPIO_WritePin>
		Delay(Button->Delay/2 - temp);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8b1b      	ldrh	r3, [r3, #24]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	8afb      	ldrh	r3, [r7, #22]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f835 	bl	8002834 <Delay>
	for(uint32_t j = 0; j < steps; j++)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3cd      	bcc.n	8002774 <TimerMotor+0x78>
	}
	//HAL_TIM_Base_Start_IT(&htim7);
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <SetSteps1>:

void SetSteps1(uint32_t* steps)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	*(steps) = PULL_STEPS;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f240 424c 	movw	r2, #1100	; 0x44c
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SetSteps2>:

void SetSteps2(uint32_t* steps)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	*(steps) = STEPS;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <SetSteps0>:

void SetSteps0(uint32_t* steps)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	*(steps) = 1000;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <Delay>:

void Delay(uint32_t delay)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	while(delay--){asm("NOP");}
 800283c:	e000      	b.n	8002840 <Delay+0xc>
 800283e:	bf00      	nop
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1e5a      	subs	r2, r3, #1
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <Delay+0xa>
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <Error_Handler+0x1c>)
 8002862:	f001 f8e5 	bl	8003a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	4802      	ldr	r0, [pc, #8]	; (8002874 <Error_Handler+0x1c>)
 800286c:	f001 f8e0 	bl	8003a30 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020000 	.word	0x40020000

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a28      	ldr	r2, [pc, #160]	; (8002988 <HAL_SD_MspInit+0xc0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d14a      	bne.n	8002980 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_SD_MspInit+0xc4>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_SD_MspInit+0xc4>)
 80028f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_SD_MspInit+0xc4>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_SD_MspInit+0xc4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_SD_MspInit+0xc4>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_SD_MspInit+0xc4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_SD_MspInit+0xc4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_SD_MspInit+0xc4>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_SD_MspInit+0xc4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800293e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002942:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002950:	230c      	movs	r3, #12
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	480d      	ldr	r0, [pc, #52]	; (8002990 <HAL_SD_MspInit+0xc8>)
 800295c:	f000 feb6 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002960:	2304      	movs	r3, #4
 8002962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002970:	230c      	movs	r3, #12
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4806      	ldr	r0, [pc, #24]	; (8002994 <HAL_SD_MspInit+0xcc>)
 800297c:	f000 fea6 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40023800 	.word	0x40023800
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00

08002998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a43      	ldr	r2, [pc, #268]	; (8002ac4 <HAL_SPI_MspInit+0x12c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d17f      	bne.n	8002aba <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a41      	ldr	r2, [pc, #260]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a3a      	ldr	r2, [pc, #232]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_SPI_MspInit+0x130>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a1e:	2305      	movs	r3, #5
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4828      	ldr	r0, [pc, #160]	; (8002acc <HAL_SPI_MspInit+0x134>)
 8002a2a:	f000 fe4f 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a40:	2305      	movs	r3, #5
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <HAL_SPI_MspInit+0x138>)
 8002a4c:	f000 fe3e 	bl	80036cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_SPI_MspInit+0x140>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a8e:	4811      	ldr	r0, [pc, #68]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002a90:	f000 fb12 	bl	80030b8 <HAL_DMA_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002a9a:	f7ff fedd 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002aa2:	649a      	str	r2, [r3, #72]	; 0x48
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <HAL_SPI_MspInit+0x13c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2024      	movs	r0, #36	; 0x24
 8002ab0:	f000 fac7 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002ab4:	2024      	movs	r0, #36	; 0x24
 8002ab6:	f000 fae0 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40003800 	.word	0x40003800
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	20000ba4 	.word	0x20000ba4
 8002ad8:	40026070 	.word	0x40026070

08002adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIM_Base_MspInit+0x70>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b0a:	e01a      	b.n	8002b42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_TIM_Base_MspInit+0x78>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d115      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	2037      	movs	r0, #55	; 0x37
 8002b38:	f000 fa83 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b3c:	2037      	movs	r0, #55	; 0x37
 8002b3e:	f000 fa9c 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40001400 	.word	0x40001400

08002b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_TIM_MspPostInit+0x68>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11d      	bne.n	8002bb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = Prepare_OUT_Pin;
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Prepare_OUT_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <HAL_TIM_MspPostInit+0x70>)
 8002bb2:	f000 fd8b 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020800 	.word	0x40020800

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 f8de 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <DMA1_Stream4_IRQHandler+0x10>)
 8002c2e:	f000 fb13 	bl	8003258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000ba4 	.word	0x20000ba4

08002c3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <SPI2_IRQHandler+0x10>)
 8002c42:	f002 f98f 	bl	8004f64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200007f4 	.word	0x200007f4

08002c50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM7_IRQHandler+0x10>)
 8002c56:	f002 fd47 	bl	80056e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000c04 	.word	0x20000c04

08002c64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <_sbrk+0x50>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x16>
		heap_end = &end;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <_sbrk+0x50>)
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <_sbrk+0x54>)
 8002c78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <_sbrk+0x50>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <_sbrk+0x50>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	466a      	mov	r2, sp
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d907      	bls.n	8002c9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c8e:	f004 f801 	bl	8006c94 <__errno>
 8002c92:	4602      	mov	r2, r0
 8002c94:	230c      	movs	r3, #12
 8002c96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	e006      	b.n	8002cac <_sbrk+0x48>
	}

	heap_end += incr;
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <_sbrk+0x50>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a03      	ldr	r2, [pc, #12]	; (8002cb4 <_sbrk+0x50>)
 8002ca8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200007e8 	.word	0x200007e8
 8002cb8:	20000c50 	.word	0x20000c50

08002cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <SystemInit+0x28>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <SystemInit+0x28>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SystemInit+0x28>)
 8002cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cee:	e003      	b.n	8002cf8 <LoopCopyDataInit>

08002cf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cf6:	3104      	adds	r1, #4

08002cf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d00:	d3f6      	bcc.n	8002cf0 <CopyDataInit>
  ldr  r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d04:	e002      	b.n	8002d0c <LoopFillZerobss>

08002d06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d08:	f842 3b04 	str.w	r3, [r2], #4

08002d0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d10:	d3f9      	bcc.n	8002d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d12:	f7ff ffd3 	bl	8002cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f003 ffc3 	bl	8006ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7fe fc7d 	bl	8001618 <main>
  bx  lr    
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d24:	08009418 	.word	0x08009418
  ldr  r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d2c:	20000344 	.word	0x20000344
  ldr  r2, =_sbss
 8002d30:	20000344 	.word	0x20000344
  ldr  r3, = _ebss
 8002d34:	20000c4c 	.word	0x20000c4c

08002d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_Init+0x40>)
 8002d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_Init+0x40>)
 8002d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_Init+0x40>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f961 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f000 f808 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d70:	f7ff fd82 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_InitTick+0x54>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x58>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f97d 	bl	800309e <HAL_SYSTICK_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00e      	b.n	8002dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d80a      	bhi.n	8002dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f000 f941 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <HAL_InitTick+0x5c>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000168 	.word	0x20000168
 8002dd8:	20000170 	.word	0x20000170
 8002ddc:	2000016c 	.word	0x2000016c

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000170 	.word	0x20000170
 8002e04:	20000c44 	.word	0x20000c44

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000c44 	.word	0x20000c44

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffee 	bl	8002e08 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_Delay+0x40>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffde 	bl	8002e08 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
  {
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000170 	.word	0x20000170

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	; (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fc4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <__NVIC_SystemReset+0x20>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <__NVIC_SystemReset+0x20>)
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_SystemReset+0x24>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60cb      	str	r3, [r1, #12]
 8002fd8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <__NVIC_SystemReset+0x1c>
 8002fe0:	e000ed00 	.word	0xe000ed00
 8002fe4:	05fa0004 	.word	0x05fa0004

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff7a 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff15 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff2a 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff7a 	bl	8002f58 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff49 	bl	8002f04 <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff1d 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800309a:	f7ff ff91 	bl	8002fc0 <__NVIC_SystemReset>

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff9e 	bl	8002fe8 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff fea0 	bl	8002e08 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e099      	b.n	8003208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	e00f      	b.n	8003116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f6:	f7ff fe87 	bl	8002e08 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b05      	cmp	r3, #5
 8003102:	d908      	bls.n	8003116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e078      	b.n	8003208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e8      	bne.n	80030f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_DMA_Init+0x158>)
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4313      	orrs	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d117      	bne.n	80031da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa0b 	bl	80035d8 <DMA_CheckFifoParam>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d6:	2301      	movs	r3, #1
 80031d8:	e016      	b.n	8003208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9c2 	bl	800356c <DMA_CalcBaseAndBitshift>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	f010803f 	.word	0xf010803f

08003214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d004      	beq.n	8003232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00c      	b.n	800324c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2205      	movs	r2, #5
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <HAL_DMA_IRQHandler+0x258>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a92      	ldr	r2, [pc, #584]	; (80034b4 <HAL_DMA_IRQHandler+0x25c>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2208      	movs	r2, #8
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2208      	movs	r2, #8
 80032b2:	409a      	lsls	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2201      	movs	r2, #1
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0202 	orr.w	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2204      	movs	r2, #4
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2204      	movs	r2, #4
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2210      	movs	r2, #16
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d043      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03c      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2210      	movs	r2, #16
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e01f      	b.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e016      	b.n	80033c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0208 	bic.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2220      	movs	r2, #32
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 808e 	beq.w	80034f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8086 	beq.w	80034f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2220      	movs	r2, #32
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d136      	bne.n	8003470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0216 	bic.w	r2, r2, #22
 8003410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <HAL_DMA_IRQHandler+0x1da>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0208 	bic.w	r2, r2, #8
 8003440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	223f      	movs	r2, #63	; 0x3f
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d07d      	beq.n	8003562 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
        }
        return;
 800346e:	e078      	b.n	8003562 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01c      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d108      	bne.n	800349e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	2b00      	cmp	r3, #0
 8003492:	d030      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e02b      	b.n	80034f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d027      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	e022      	b.n	80034f6 <HAL_DMA_IRQHandler+0x29e>
 80034b0:	20000168 	.word	0x20000168
 80034b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d032      	beq.n	8003564 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d022      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3301      	adds	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	d307      	bcc.n	800353e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f2      	bne.n	8003522 <HAL_DMA_IRQHandler+0x2ca>
 800353c:	e000      	b.n	8003540 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800353e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e000      	b.n	8003564 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003562:	bf00      	nop
    }
  }
}
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop

0800356c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3b10      	subs	r3, #16
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <DMA_CalcBaseAndBitshift+0x64>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d909      	bls.n	80035ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
 80035ac:	e007      	b.n	80035be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	080091a0 	.word	0x080091a0

080035d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d855      	bhi.n	80036a4 <DMA_CheckFifoParam+0xcc>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x28>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003623 	.word	0x08003623
 8003608:	08003611 	.word	0x08003611
 800360c:	080036a5 	.word	0x080036a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d045      	beq.n	80036a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e042      	b.n	80036a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362a:	d13f      	bne.n	80036ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e03c      	b.n	80036ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d121      	bne.n	8003680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d836      	bhi.n	80036b0 <DMA_CheckFifoParam+0xd8>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <DMA_CheckFifoParam+0x70>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	0800365f 	.word	0x0800365f
 8003650:	08003659 	.word	0x08003659
 8003654:	08003671 	.word	0x08003671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e02f      	b.n	80036be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d024      	beq.n	80036b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e021      	b.n	80036b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003678:	d11e      	bne.n	80036b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367e:	e01b      	b.n	80036b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <DMA_CheckFifoParam+0xb4>
 8003686:	2b03      	cmp	r3, #3
 8003688:	d003      	beq.n	8003692 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800368a:	e018      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e015      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e00b      	b.n	80036bc <DMA_CheckFifoParam+0xe4>
      break;
 80036a4:	bf00      	nop
 80036a6:	e00a      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036a8:	bf00      	nop
 80036aa:	e008      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036ac:	bf00      	nop
 80036ae:	e006      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036b0:	bf00      	nop
 80036b2:	e004      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;   
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
    }
  } 
  
  return status; 
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e16b      	b.n	80039c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	429a      	cmp	r2, r3
 8003702:	f040 815a 	bne.w	80039ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d00b      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371a:	2b11      	cmp	r3, #17
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b12      	cmp	r3, #18
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0xfc>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d123      	bne.n	8003810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	08da      	lsrs	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3208      	adds	r2, #8
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0203 	and.w	r2, r3, #3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80b4 	beq.w	80039ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_GPIO_Init+0x308>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <HAL_GPIO_Init+0x308>)
 800385c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003860:	6453      	str	r3, [r2, #68]	; 0x44
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_GPIO_Init+0x308>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800386e:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_GPIO_Init+0x30c>)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	3302      	adds	r3, #2
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	220f      	movs	r2, #15
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a51      	ldr	r2, [pc, #324]	; (80039dc <HAL_GPIO_Init+0x310>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <HAL_GPIO_Init+0x226>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a50      	ldr	r2, [pc, #320]	; (80039e0 <HAL_GPIO_Init+0x314>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x222>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4f      	ldr	r2, [pc, #316]	; (80039e4 <HAL_GPIO_Init+0x318>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x21e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4e      	ldr	r2, [pc, #312]	; (80039e8 <HAL_GPIO_Init+0x31c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x21a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4d      	ldr	r2, [pc, #308]	; (80039ec <HAL_GPIO_Init+0x320>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x216>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <HAL_GPIO_Init+0x324>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x212>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	; (80039f4 <HAL_GPIO_Init+0x328>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x20e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_GPIO_Init+0x32c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x20a>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e00e      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e00c      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038da:	2306      	movs	r3, #6
 80038dc:	e00a      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038de:	2305      	movs	r3, #5
 80038e0:	e008      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x228>
 80038f2:	2300      	movs	r3, #0
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f002 0203 	and.w	r2, r2, #3
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003904:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_GPIO_Init+0x30c>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x330>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_GPIO_Init+0x330>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_GPIO_Init+0x330>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	f67f ae90 	bls.w	80036e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3724      	adds	r7, #36	; 0x24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40021c00 	.word	0x40021c00
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e25b      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d075      	beq.n	8003b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4ba0      	ldr	r3, [pc, #640]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b9d      	ldr	r3, [pc, #628]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b99      	ldr	r3, [pc, #612]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d157      	bne.n	8003b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e236      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x74>
 8003aca:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x98>
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a8a      	ldr	r2, [pc, #552]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a87      	ldr	r2, [pc, #540]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003afc:	4b84      	ldr	r3, [pc, #528]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a83      	ldr	r2, [pc, #524]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b81      	ldr	r3, [pc, #516]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7ff f974 	bl	8002e08 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7ff f970 	bl	8002e08 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1fb      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xc0>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7ff f960 	bl	8002e08 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7ff f95c 	bl	8002e08 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1e7      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe8>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7a:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1bb      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b56      	ldr	r3, [pc, #344]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4952      	ldr	r1, [pc, #328]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RCC_OscConfig+0x2b0>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7ff f915 	bl	8002e08 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be2:	f7ff f911 	bl	8002e08 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e19c      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4940      	ldr	r1, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_OscConfig+0x2b0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7ff f8f4 	bl	8002e08 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c24:	f7ff f8f0 	bl	8002e08 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e17b      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d030      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7ff f8d4 	bl	8002e08 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c64:	f7ff f8d0 	bl	8002e08 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e15b      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x200>
 8003c82:	e015      	b.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7ff f8bd 	bl	8002e08 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c92:	f7ff f8b9 	bl	8002e08 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e144      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a0 	beq.w	8003dfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7ff f87f 	bl	8002e08 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	e011      	b.n	8003d32 <HAL_RCC_OscConfig+0x2ce>
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470000 	.word	0x42470000
 8003d18:	42470e80 	.word	0x42470e80
 8003d1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7ff f872 	bl	8002e08 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0fd      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	e01c      	b.n	8003d8e <HAL_RCC_OscConfig+0x32a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x312>
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b74      	ldr	r3, [pc, #464]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a73      	ldr	r2, [pc, #460]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	e00b      	b.n	8003d8e <HAL_RCC_OscConfig+0x32a>
 8003d76:	4b71      	ldr	r3, [pc, #452]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a70      	ldr	r2, [pc, #448]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	4b6e      	ldr	r3, [pc, #440]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a6d      	ldr	r2, [pc, #436]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d015      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7ff f837 	bl	8002e08 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7ff f833 	bl	8002e08 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0bc      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCC_OscConfig+0x33a>
 8003dc0:	e014      	b.n	8003dec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7ff f821 	bl	8002e08 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7ff f81d 	bl	8002e08 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0a6      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df2:	4b52      	ldr	r3, [pc, #328]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8092 	beq.w	8003f2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e08:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d05c      	beq.n	8003ece <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d141      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b48      	ldr	r3, [pc, #288]	; (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fe fff1 	bl	8002e08 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fe ffed 	bl	8002e08 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e078      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	019b      	lsls	r3, r3, #6
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	4933      	ldr	r1, [pc, #204]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe ffc6 	bl	8002e08 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe ffc2 	bl	8002e08 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04d      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x41c>
 8003e9e:	e045      	b.n	8003f2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe ffaf 	bl	8002e08 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe ffab 	bl	8002e08 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e036      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x44a>
 8003ecc:	e02e      	b.n	8003f2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e029      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <HAL_RCC_OscConfig+0x4d8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d115      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f02:	4013      	ands	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	42470060 	.word	0x42470060

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0cc      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b68      	ldr	r3, [pc, #416]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d90c      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b63      	ldr	r3, [pc, #396]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb0:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	494d      	ldr	r1, [pc, #308]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d044      	beq.n	8004064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d119      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e067      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4934      	ldr	r1, [pc, #208]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004034:	f7fe fee8 	bl	8002e08 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fe fee4 	bl	8002e08 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e04f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d20c      	bcs.n	800408c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b22      	ldr	r3, [pc, #136]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e032      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	490e      	ldr	r1, [pc, #56]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ca:	f000 f821 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040ce:	4601      	mov	r1, r0
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	fa21 f303 	lsr.w	r3, r1, r3
 80040e2:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fe48 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00
 8004100:	40023800 	.word	0x40023800
 8004104:	08009190 	.word	0x08009190
 8004108:	20000168 	.word	0x20000168
 800410c:	2000016c 	.word	0x2000016c

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	2300      	movs	r3, #0
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b04      	cmp	r3, #4
 8004130:	d007      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x32>
 8004132:	2b08      	cmp	r3, #8
 8004134:	d008      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x38>
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 80b4 	bne.w	80042a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b5e      	ldr	r3, [pc, #376]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800413e:	60bb      	str	r3, [r7, #8]
       break;
 8004140:	e0b3      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004142:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004144:	60bb      	str	r3, [r7, #8]
      break;
 8004146:	e0b0      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004148:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004152:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04a      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b55      	ldr	r3, [pc, #340]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	f04f 0400 	mov.w	r4, #0
 8004168:	f240 11ff 	movw	r1, #511	; 0x1ff
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	ea03 0501 	and.w	r5, r3, r1
 8004174:	ea04 0602 	and.w	r6, r4, r2
 8004178:	4629      	mov	r1, r5
 800417a:	4632      	mov	r2, r6
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	0154      	lsls	r4, r2, #5
 8004186:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800418a:	014b      	lsls	r3, r1, #5
 800418c:	4619      	mov	r1, r3
 800418e:	4622      	mov	r2, r4
 8004190:	1b49      	subs	r1, r1, r5
 8004192:	eb62 0206 	sbc.w	r2, r2, r6
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	f04f 0400 	mov.w	r4, #0
 800419e:	0194      	lsls	r4, r2, #6
 80041a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041a4:	018b      	lsls	r3, r1, #6
 80041a6:	1a5b      	subs	r3, r3, r1
 80041a8:	eb64 0402 	sbc.w	r4, r4, r2
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	00e2      	lsls	r2, r4, #3
 80041b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041ba:	00d9      	lsls	r1, r3, #3
 80041bc:	460b      	mov	r3, r1
 80041be:	4614      	mov	r4, r2
 80041c0:	195b      	adds	r3, r3, r5
 80041c2:	eb44 0406 	adc.w	r4, r4, r6
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	0262      	lsls	r2, r4, #9
 80041d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041d4:	0259      	lsls	r1, r3, #9
 80041d6:	460b      	mov	r3, r1
 80041d8:	4614      	mov	r4, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	4621      	mov	r1, r4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	461a      	mov	r2, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	f7fc fcee 	bl	8000bc8 <__aeabi_uldivmod>
 80041ec:	4603      	mov	r3, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e049      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f4:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	f04f 0400 	mov.w	r4, #0
 80041fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	ea03 0501 	and.w	r5, r3, r1
 800420a:	ea04 0602 	and.w	r6, r4, r2
 800420e:	4629      	mov	r1, r5
 8004210:	4632      	mov	r2, r6
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	f04f 0400 	mov.w	r4, #0
 800421a:	0154      	lsls	r4, r2, #5
 800421c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004220:	014b      	lsls	r3, r1, #5
 8004222:	4619      	mov	r1, r3
 8004224:	4622      	mov	r2, r4
 8004226:	1b49      	subs	r1, r1, r5
 8004228:	eb62 0206 	sbc.w	r2, r2, r6
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	f04f 0400 	mov.w	r4, #0
 8004234:	0194      	lsls	r4, r2, #6
 8004236:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800423a:	018b      	lsls	r3, r1, #6
 800423c:	1a5b      	subs	r3, r3, r1
 800423e:	eb64 0402 	sbc.w	r4, r4, r2
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	00e2      	lsls	r2, r4, #3
 800424c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004250:	00d9      	lsls	r1, r3, #3
 8004252:	460b      	mov	r3, r1
 8004254:	4614      	mov	r4, r2
 8004256:	195b      	adds	r3, r3, r5
 8004258:	eb44 0406 	adc.w	r4, r4, r6
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	02a2      	lsls	r2, r4, #10
 8004266:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800426a:	0299      	lsls	r1, r3, #10
 800426c:	460b      	mov	r3, r1
 800426e:	4614      	mov	r4, r2
 8004270:	4618      	mov	r0, r3
 8004272:	4621      	mov	r1, r4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	f7fc fca3 	bl	8000bc8 <__aeabi_uldivmod>
 8004282:	4603      	mov	r3, r0
 8004284:	460c      	mov	r4, r1
 8004286:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	60bb      	str	r3, [r7, #8]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042a6:	60bb      	str	r3, [r7, #8]
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	68bb      	ldr	r3, [r7, #8]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	007a1200 	.word	0x007a1200

080042c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe faef 	bl	80028c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f814 	bl	8004320 <HAL_SD_InitCard>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e00a      	b.n	8004318 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b08e      	sub	sp, #56	; 0x38
 8004324:	af04      	add	r7, sp, #16
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800433c:	2376      	movs	r3, #118	; 0x76
 800433e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681d      	ldr	r5, [r3, #0]
 8004344:	466c      	mov	r4, sp
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800434e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	4628      	mov	r0, r5
 800435a:	f002 f813 	bl	8006384 <SDIO_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e031      	b.n	80043d4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_SD_InitCard+0xbc>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f002 f83a 	bl	80063f4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <HAL_SD_InitCard+0xbc>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fb18 	bl	80049bc <SD_PowerON>
 800438c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e013      	b.n	80043d4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa37 	bl	8004820 <SD_InitCard>
 80043b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	422580a0 	.word	0x422580a0

080043e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ee:	0f9b      	lsrs	r3, r3, #30
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	b2da      	uxtb	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	b2da      	uxtb	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2da      	uxtb	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b2da      	uxtb	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004440:	0d1b      	lsrs	r3, r3, #20
 8004442:	b29a      	uxth	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	b2da      	uxtb	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445e:	0bdb      	lsrs	r3, r3, #15
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004470:	0b9b      	lsrs	r3, r3, #14
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	0b1b      	lsrs	r3, r3, #12
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2200      	movs	r2, #0
 80044a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d163      	bne.n	8004578 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80044c0:	0f92      	lsrs	r2, r2, #30
 80044c2:	431a      	orrs	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	0edb      	lsrs	r3, r3, #27
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044de:	0e1b      	lsrs	r3, r3, #24
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f0:	0d5b      	lsrs	r3, r3, #21
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004514:	0bdb      	lsrs	r3, r3, #15
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	7e1b      	ldrb	r3, [r3, #24]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	3302      	adds	r3, #2
 8004538:	2201      	movs	r2, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004542:	fb02 f203 	mul.w	r2, r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	7a1b      	ldrb	r3, [r3, #8]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004564:	0a52      	lsrs	r2, r2, #9
 8004566:	fb02 f203 	mul.w	r2, r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004574:	661a      	str	r2, [r3, #96]	; 0x60
 8004576:	e031      	b.n	80045dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	2b01      	cmp	r3, #1
 800457e:	d11d      	bne.n	80045bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	029a      	lsls	r2, r3, #10
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
 80045ba:	e00f      	b.n	80045dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_SD_GetCardCSD+0x344>)
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e09d      	b.n	8004718 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e0:	0b9b      	lsrs	r3, r3, #14
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	09db      	lsrs	r3, r3, #7
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	0fdb      	lsrs	r3, r3, #31
 8004616:	b2da      	uxtb	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	0f5b      	lsrs	r3, r3, #29
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	0e9b      	lsrs	r3, r3, #26
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	b2da      	uxtb	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	0d9b      	lsrs	r3, r3, #22
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	b2da      	uxtb	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	0d5b      	lsrs	r3, r3, #21
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	0bdb      	lsrs	r3, r3, #15
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	0b9b      	lsrs	r3, r3, #14
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	0b1b      	lsrs	r3, r3, #12
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	0a9b      	lsrs	r3, r3, #10
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004706:	b2da      	uxtb	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	004005ff 	.word	0x004005ff

08004728 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004728:	b5b0      	push	{r4, r5, r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af04      	add	r7, sp, #16
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2203      	movs	r2, #3
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	2b03      	cmp	r3, #3
 8004740:	d02e      	beq.n	80047a0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004748:	d106      	bne.n	8004758 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
 8004756:	e029      	b.n	80047ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475e:	d10a      	bne.n	8004776 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f9b9 	bl	8004ad8 <SD_WideBus_Enable>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
 8004774:	e01a      	b.n	80047ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f9f6 	bl	8004b6e <SD_WideBus_Disable>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
 8004790:	e00c      	b.n	80047ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
 800479e:	e005      	b.n	80047ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e024      	b.n	8004812 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	466c      	mov	r4, sp
 80047f0:	f107 0318 	add.w	r3, r7, #24
 80047f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004802:	4628      	mov	r0, r5
 8004804:	f001 fdbe 	bl	8006384 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3728      	adds	r7, #40	; 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bdb0      	pop	{r4, r5, r7, pc}
 800481a:	bf00      	nop
 800481c:	004005ff 	.word	0x004005ff

08004820 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004820:	b5b0      	push	{r4, r5, r7, lr}
 8004822:	b094      	sub	sp, #80	; 0x50
 8004824:	af04      	add	r7, sp, #16
 8004826:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004828:	2301      	movs	r3, #1
 800482a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fdee 	bl	8006412 <SDIO_GetPowerState>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800483c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004840:	e0b7      	b.n	80049b2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	2b03      	cmp	r3, #3
 8004848:	d02f      	beq.n	80048aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f001 ff6d 	bl	800672e <SDMMC_CmdSendCID>
 8004854:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <SD_InitCard+0x40>
    {
      return errorstate;
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	e0a8      	b.n	80049b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fe18 	bl	800649c <SDIO_GetResponse>
 800486c:	4602      	mov	r2, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2104      	movs	r1, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fe0f 	bl	800649c <SDIO_GetResponse>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2108      	movs	r1, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fe06 	bl	800649c <SDIO_GetResponse>
 8004890:	4602      	mov	r2, r0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	210c      	movs	r1, #12
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fdfd 	bl	800649c <SDIO_GetResponse>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d00d      	beq.n	80048ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f107 020e 	add.w	r2, r7, #14
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 ff73 	bl	80067a8 <SDMMC_CmdSetRelAdd>
 80048c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <SD_InitCard+0xae>
    {
      return errorstate;
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	e071      	b.n	80049b2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d036      	beq.n	8004944 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f001 ff3d 	bl	800676a <SDMMC_CmdSendCSD>
 80048f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	e05a      	b.n	80049b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fdca 	bl	800649c <SDIO_GetResponse>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2104      	movs	r1, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fdc1 	bl	800649c <SDIO_GetResponse>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2108      	movs	r1, #8
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fdb8 	bl	800649c <SDIO_GetResponse>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	210c      	movs	r1, #12
 8004938:	4618      	mov	r0, r3
 800493a:	f001 fdaf 	bl	800649c <SDIO_GetResponse>
 800493e:	4602      	mov	r2, r0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2104      	movs	r1, #4
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fda6 	bl	800649c <SDIO_GetResponse>
 8004950:	4603      	mov	r3, r0
 8004952:	0d1a      	lsrs	r2, r3, #20
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fd3e 	bl	80043e0 <HAL_SD_GetCardCSD>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800496a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800496e:	e020      	b.n	80049b2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	f04f 0400 	mov.w	r4, #0
 800497e:	461a      	mov	r2, r3
 8004980:	4623      	mov	r3, r4
 8004982:	4608      	mov	r0, r1
 8004984:	f001 fdeb 	bl	800655e <SDMMC_CmdSelDesel>
 8004988:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <SD_InitCard+0x174>
  {
    return errorstate;
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	e00e      	b.n	80049b2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681d      	ldr	r5, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	466c      	mov	r4, sp
 800499c:	f103 0210 	add.w	r2, r3, #16
 80049a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80049a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049a6:	3304      	adds	r3, #4
 80049a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049aa:	4628      	mov	r0, r5
 80049ac:	f001 fcea 	bl	8006384 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3740      	adds	r7, #64	; 0x40
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080049bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 fde5 	bl	80065a4 <SDMMC_CmdGoIdleState>
 80049da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	e072      	b.n	8004acc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fdf8 	bl	80065e0 <SDMMC_CmdOperCond>
 80049f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fdce 	bl	80065a4 <SDMMC_CmdGoIdleState>
 8004a08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	e05b      	b.n	8004acc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d137      	bne.n	8004a92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fdf8 	bl	800661e <SDMMC_CmdAppCommand>
 8004a2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02d      	beq.n	8004a92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a3a:	e047      	b.n	8004acc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fdeb 	bl	800661e <SDMMC_CmdAppCommand>
 8004a48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	e03b      	b.n	8004acc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	491e      	ldr	r1, [pc, #120]	; (8004ad4 <SD_PowerON+0x118>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fe01 	bl	8006662 <SDMMC_CmdAppOperCommand>
 8004a60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a6c:	e02e      	b.n	8004acc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fd11 	bl	800649c <SDIO_GetResponse>
 8004a7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	0fdb      	lsrs	r3, r3, #31
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <SD_PowerON+0xcc>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <SD_PowerON+0xce>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]

    count++;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d802      	bhi.n	8004aa2 <SD_PowerON+0xe6>
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0cc      	beq.n	8004a3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d902      	bls.n	8004ab2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab0:	e00c      	b.n	8004acc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac2:	e002      	b.n	8004aca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	c1100000 	.word	0xc1100000

08004ad8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fcd4 	bl	800649c <SDIO_GetResponse>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afe:	d102      	bne.n	8004b06 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b04:	e02f      	b.n	8004b66 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b06:	f107 030c 	add.w	r3, r7, #12
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f879 	bl	8004c04 <SD_FindSCR>
 8004b12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	e023      	b.n	8004b66 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01c      	beq.n	8004b62 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f001 fd72 	bl	800661e <SDMMC_CmdAppCommand>
 8004b3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	e00f      	b.n	8004b66 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fdab 	bl	80066a8 <SDMMC_CmdBusWidth>
 8004b52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	e003      	b.n	8004b66 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e001      	b.n	8004b66 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 fc89 	bl	800649c <SDIO_GetResponse>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b94:	d102      	bne.n	8004b9c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b9a:	e02f      	b.n	8004bfc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f82e 	bl	8004c04 <SD_FindSCR>
 8004ba8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e023      	b.n	8004bfc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01c      	beq.n	8004bf8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f001 fd27 	bl	800661e <SDMMC_CmdAppCommand>
 8004bd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	e00f      	b.n	8004bfc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fd60 	bl	80066a8 <SDMMC_CmdBusWidth>
 8004be8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	e003      	b.n	8004bfc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e001      	b.n	8004bfc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b08f      	sub	sp, #60	; 0x3c
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c0e:	f7fe f8fb 	bl	8002e08 <HAL_GetTick>
 8004c12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2108      	movs	r1, #8
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fc75 	bl	800651a <SDMMC_CmdBlockLength>
 8004c30:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	e0a9      	b.n	8004d90 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f001 fce8 	bl	800661e <SDMMC_CmdAppCommand>
 8004c4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	e09a      	b.n	8004d90 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c60:	2308      	movs	r3, #8
 8004c62:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c64:	2330      	movs	r3, #48	; 0x30
 8004c66:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f107 0210 	add.w	r2, r7, #16
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fc1f 	bl	80064c2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fd2f 	bl	80066ec <SDMMC_CmdSendSCR>
 8004c8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d022      	beq.n	8004cdc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	e07a      	b.n	8004d90 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	18d4      	adds	r4, r2, r3
 8004cb6:	4608      	mov	r0, r1
 8004cb8:	f001 fb8f 	bl	80063da <SDIO_ReadFIFO>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	6023      	str	r3, [r4, #0]
      index++;
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004cc6:	f7fe f89f 	bl	8002e08 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d102      	bne.n	8004cdc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004cd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cda:	e059      	b.n	8004d90 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce2:	f240 432a 	movw	r3, #1066	; 0x42a
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0d6      	beq.n	8004c9a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d02:	2308      	movs	r3, #8
 8004d04:	e044      	b.n	8004d90 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e037      	b.n	8004d90 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2220      	movs	r2, #32
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e02a      	b.n	8004d90 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	061a      	lsls	r2, r3, #24
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	601a      	str	r2, [r3, #0]
    scr++;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	3304      	adds	r3, #4
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	061a      	lsls	r2, r3, #24
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	373c      	adds	r7, #60	; 0x3c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}

08004d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e056      	b.n	8004e58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fd fde7 	bl	8002998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	ea42 0103 	orr.w	r1, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	f003 0104 	and.w	r1, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_SPI_Transmit_IT+0x20>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e067      	b.n	8004f50 <HAL_SPI_Transmit_IT+0xf0>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit_IT+0x34>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e98:	e055      	b.n	8004f46 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eaa:	e04c      	b.n	8004f46 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <HAL_SPI_Transmit_IT+0xfc>)
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ef2:	e002      	b.n	8004efa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_SPI_Transmit_IT+0x100>)
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f02:	d107      	bne.n	8004f14 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004f22:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d008      	beq.n	8004f44 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e000      	b.n	8004f46 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004f44:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	080051fb 	.word	0x080051fb
 8004f60:	080051b5 	.word	0x080051b5

08004f64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10f      	bne.n	8004fa8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
    return;
 8004fa6:	e0d8      	b.n	800515a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_SPI_IRQHandler+0x66>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	09db      	lsrs	r3, r3, #7
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
    return;
 8004fc8:	e0c7      	b.n	800515a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_SPI_IRQHandler+0x8c>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	099b      	lsrs	r3, r3, #6
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80b5 	beq.w	800515a <HAL_SPI_IRQHandler+0x1f6>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80ae 	beq.w	800515a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d023      	beq.n	8005052 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d011      	beq.n	800503a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	e00b      	b.n	8005052 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	693b      	ldr	r3, [r7, #16]
        return;
 8005050:	e083      	b.n	800515a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0208 	orr.w	r2, r3, #8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d050      	beq.n	8005158 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <HAL_SPI_IRQHandler+0x17e>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d034      	beq.n	800514c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0203 	bic.w	r2, r2, #3
 80050f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_SPI_IRQHandler+0x1fc>)
 8005100:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe f884 	bl	8003214 <HAL_DMA_Abort_IT>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512a:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <HAL_SPI_IRQHandler+0x1fc>)
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f86e 	bl	8003214 <HAL_DMA_Abort_IT>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800514a:	e003      	b.n	8005154 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f813 	bl	8005178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005152:	e000      	b.n	8005156 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005154:	bf00      	nop
    return;
 8005156:	bf00      	nop
 8005158:	bf00      	nop
  }
}
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	0800518d 	.word	0x0800518d

08005164 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ffe6 	bl	8005178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8d3 	bl	8005398 <SPI_CloseTx_ISR>
  }
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8b1 	bl	8005398 <SPI_CloseTx_ISR>
  }
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800524e:	e04c      	b.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d048      	beq.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005258:	f7fd fdd6 	bl	8002e08 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d902      	bls.n	800526e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d13d      	bne.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800527c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005286:	d111      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005290:	d004      	beq.n	800529c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529a:	d107      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	d10f      	bne.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d1a3      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <SPI_EndRxTxTransaction+0x7c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <SPI_EndRxTxTransaction+0x80>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0d5b      	lsrs	r3, r3, #21
 800532c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d112      	bne.n	8005366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff ff77 	bl	800523e <SPI_WaitFlagStateUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e00f      	b.n	8005386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3b01      	subs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d0f2      	beq.n	8005366 <SPI_EndRxTxTransaction+0x52>
 8005380:	e000      	b.n	8005384 <SPI_EndRxTxTransaction+0x70>
        break;
 8005382:	bf00      	nop
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000168 	.word	0x20000168
 8005394:	165e9f81 	.word	0x165e9f81

08005398 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80053a0:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <SPI_CloseTx_ISR+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <SPI_CloseTx_ISR+0xc0>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0a5b      	lsrs	r3, r3, #9
 80053ac:	2264      	movs	r2, #100	; 0x64
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b4:	f7fd fd28 	bl	8002e08 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053cc:	e009      	b.n	80053e2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0eb      	beq.n	80053ba <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	2164      	movs	r1, #100	; 0x64
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff8c 	bl	8005314 <SPI_EndRxTxTransaction>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff fe9b 	bl	8005178 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005442:	e002      	b.n	800544a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fe8d 	bl	8005164 <HAL_SPI_TxCpltCallback>
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000168 	.word	0x20000168
 8005458:	057619f1 	.word	0x057619f1

0800545c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e01d      	b.n	80054aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd fb2a 	bl	8002adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fbd2 	bl	8005c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b06      	cmp	r3, #6
 80054da:	d007      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	f241 1311 	movw	r3, #4369	; 0x1111
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_TIM_Base_Stop_IT+0x48>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	f240 4344 	movw	r3, #1092	; 0x444
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_TIM_Base_Stop_IT+0x48>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e01d      	b.n	800559e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f815 	bl	80055a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 fb58 	bl	8005c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fe22 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <HAL_TIM_PWM_Start+0x74>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_PWM_Start+0x2c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a14      	ldr	r2, [pc, #80]	; (8005634 <HAL_TIM_PWM_Start+0x78>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_PWM_Start+0x30>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_TIM_PWM_Start+0x32>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b06      	cmp	r3, #6
 8005612:	d007      	beq.n	8005624 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400

08005638 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fde4 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a22      	ldr	r2, [pc, #136]	; (80056e0 <HAL_TIM_PWM_Stop+0xa8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_PWM_Stop+0x2c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <HAL_TIM_PWM_Stop+0xac>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_TIM_PWM_Stop+0x30>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_Stop+0x32>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d017      	beq.n	800569e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	f241 1311 	movw	r3, #4369	; 0x1111
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_TIM_PWM_Stop+0x66>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	f240 4344 	movw	r3, #1092	; 0x444
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_TIM_PWM_Stop+0x66>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a1a      	ldr	r2, [r3, #32]
 80056a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <HAL_TIM_PWM_Stop+0x96>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a1a      	ldr	r2, [r3, #32]
 80056b4:	f240 4344 	movw	r3, #1092	; 0x444
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <HAL_TIM_PWM_Stop+0x96>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40010400 	.word	0x40010400

080056e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0202 	mvn.w	r2, #2
 8005714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa6b 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa5d 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa6e 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b04      	cmp	r3, #4
 8005750:	d122      	bne.n	8005798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0204 	mvn.w	r2, #4
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa41 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa33 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fa44 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d122      	bne.n	80057ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d11b      	bne.n	80057ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0208 	mvn.w	r2, #8
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2204      	movs	r2, #4
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa17 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa09 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fa1a 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b10      	cmp	r3, #16
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0210 	mvn.w	r2, #16
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2208      	movs	r2, #8
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9ed 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9df 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9f0 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10e      	bne.n	800586c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d107      	bne.n	800586c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0201 	mvn.w	r2, #1
 8005864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc fd76 	bl	8002358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b80      	cmp	r3, #128	; 0x80
 8005878:	d10e      	bne.n	8005898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005884:	2b80      	cmp	r3, #128	; 0x80
 8005886:	d107      	bne.n	8005898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fd6c 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d10e      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d107      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f9b5 	bl	8005c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d10e      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d107      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0220 	mvn.w	r2, #32
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fd36 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800590e:	2302      	movs	r3, #2
 8005910:	e0b4      	b.n	8005a7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b0c      	cmp	r3, #12
 8005926:	f200 809f 	bhi.w	8005a68 <HAL_TIM_PWM_ConfigChannel+0x170>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005965 	.word	0x08005965
 8005934:	08005a69 	.word	0x08005a69
 8005938:	08005a69 	.word	0x08005a69
 800593c:	08005a69 	.word	0x08005a69
 8005940:	080059a5 	.word	0x080059a5
 8005944:	08005a69 	.word	0x08005a69
 8005948:	08005a69 	.word	0x08005a69
 800594c:	08005a69 	.word	0x08005a69
 8005950:	080059e7 	.word	0x080059e7
 8005954:	08005a69 	.word	0x08005a69
 8005958:	08005a69 	.word	0x08005a69
 800595c:	08005a69 	.word	0x08005a69
 8005960:	08005a27 	.word	0x08005a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa0a 	bl	8005d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0204 	bic.w	r2, r2, #4
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	619a      	str	r2, [r3, #24]
      break;
 80059a2:	e062      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fa5a 	bl	8005e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
      break;
 80059e4:	e041      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 faaf 	bl	8005f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0208 	orr.w	r2, r2, #8
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0204 	bic.w	r2, r2, #4
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]
      break;
 8005a24:	e021      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fb03 	bl	8006038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	61da      	str	r2, [r3, #28]
      break;
 8005a66:	e000      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIM_ConfigClockSource+0x18>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e0a6      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x166>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d067      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x120>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d80b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x6c>
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d073      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x140>
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d802      	bhi.n	8005ae6 <HAL_TIM_ConfigClockSource+0x62>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d06f      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ae4:	e078      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d06c      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x140>
 8005aea:	2b30      	cmp	r3, #48	; 0x30
 8005aec:	d06a      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005aee:	e073      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005af0:	2b70      	cmp	r3, #112	; 0x70
 8005af2:	d00d      	beq.n	8005b10 <HAL_TIM_ConfigClockSource+0x8c>
 8005af4:	2b70      	cmp	r3, #112	; 0x70
 8005af6:	d804      	bhi.n	8005b02 <HAL_TIM_ConfigClockSource+0x7e>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d033      	beq.n	8005b64 <HAL_TIM_ConfigClockSource+0xe0>
 8005afc:	2b60      	cmp	r3, #96	; 0x60
 8005afe:	d041      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b00:	e06a      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	d066      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x152>
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d017      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b0e:	e063      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6899      	ldr	r1, [r3, #8]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f000 fb5a 	bl	80061d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	609a      	str	r2, [r3, #8]
      break;
 8005b3c:	e04c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6899      	ldr	r1, [r3, #8]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f000 fb43 	bl	80061d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b60:	609a      	str	r2, [r3, #8]
      break;
 8005b62:	e039      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6859      	ldr	r1, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	461a      	mov	r2, r3
 8005b72:	f000 fab7 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2150      	movs	r1, #80	; 0x50
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fb10 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005b82:	e029      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f000 fad6 	bl	8006142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2160      	movs	r1, #96	; 0x60
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fb00 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005ba2:	e019      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6859      	ldr	r1, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f000 fa97 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2140      	movs	r1, #64	; 0x40
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 faf0 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005bc2:	e009      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f000 fae7 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c62:	d00f      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3d      	ldr	r2, [pc, #244]	; (8005d5c <TIM_Base_SetConfig+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a3c      	ldr	r2, [pc, #240]	; (8005d60 <TIM_Base_SetConfig+0x11c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <TIM_Base_SetConfig+0x120>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d108      	bne.n	8005c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca4:	d027      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <TIM_Base_SetConfig+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d023      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <TIM_Base_SetConfig+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01f      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <TIM_Base_SetConfig+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d017      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <TIM_Base_SetConfig+0x128>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a27      	ldr	r2, [pc, #156]	; (8005d70 <TIM_Base_SetConfig+0x12c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <TIM_Base_SetConfig+0x130>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_Base_SetConfig+0x134>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <TIM_Base_SetConfig+0x138>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <TIM_Base_SetConfig+0x13c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_Base_SetConfig+0xf8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	615a      	str	r2, [r3, #20]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40010400 	.word	0x40010400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800
 8005d78:	40001800 	.word	0x40001800
 8005d7c:	40001c00 	.word	0x40001c00
 8005d80:	40002000 	.word	0x40002000

08005d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0201 	bic.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0302 	bic.w	r3, r3, #2
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <TIM_OC1_SetConfig+0xd8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC1_SetConfig+0x64>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <TIM_OC1_SetConfig+0xdc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10c      	bne.n	8005e02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0308 	bic.w	r3, r3, #8
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <TIM_OC1_SetConfig+0xd8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC1_SetConfig+0x8e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <TIM_OC1_SetConfig+0xdc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0210 	bic.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0320 	bic.w	r3, r3, #32
 8005eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a22      	ldr	r2, [pc, #136]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x68>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10d      	bne.n	8005ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x94>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a21      	ldr	r2, [pc, #132]	; (8006030 <TIM_OC3_SetConfig+0xe0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x66>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <TIM_OC3_SetConfig+0xe4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10d      	bne.n	8005fd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	; (8006030 <TIM_OC3_SetConfig+0xe0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x92>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a15      	ldr	r2, [pc, #84]	; (8006034 <TIM_OC3_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d113      	bne.n	800600a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <TIM_OC4_SetConfig+0xa4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC4_SetConfig+0x68>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <TIM_OC4_SetConfig+0xa8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 030a 	bic.w	r3, r3, #10
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0210 	bic.w	r2, r3, #16
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800616c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	f043 0307 	orr.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	43db      	mvns	r3, r3
 800623a:	401a      	ands	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e05a      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d01d      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006384:	b084      	sub	sp, #16
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	f107 001c 	add.w	r0, r7, #28
 8006392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800639a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800639c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800639e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80063a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80063a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80063aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80063ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80063be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	b004      	add	sp, #16
 80063d8:	4770      	bx	lr

080063da <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2203      	movs	r2, #3
 8006400:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006402:	2002      	movs	r0, #2
 8006404:	f7fc fd0c 	bl	8002e20 <HAL_Delay>
  
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0303 	and.w	r3, r3, #3
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800644c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006452:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006458:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006468:	f023 030f 	bic.w	r3, r3, #15
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	b2db      	uxtb	r3, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3314      	adds	r3, #20
 80064aa:	461a      	mov	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
}  
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80064e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80064ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80064f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800650c:	2300      	movs	r3, #0

}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b088      	sub	sp, #32
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006528:	2310      	movs	r3, #16
 800652a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800652c:	2340      	movs	r3, #64	; 0x40
 800652e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff74 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	2110      	movs	r1, #16
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f975 	bl	800683c <SDMMC_GetCmdResp1>
 8006552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006554:	69fb      	ldr	r3, [r7, #28]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b08a      	sub	sp, #40	; 0x28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800656e:	2307      	movs	r3, #7
 8006570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006572:	2340      	movs	r3, #64	; 0x40
 8006574:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800657a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	4619      	mov	r1, r3
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ff51 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800658c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006590:	2107      	movs	r1, #7
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f952 	bl	800683c <SDMMC_GetCmdResp1>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff30 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f90c 	bl	80067ec <SDMMC_GetCmdError>
 80065d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065d6:	69fb      	ldr	r3, [r7, #28]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80065e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80065ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80065ee:	2308      	movs	r3, #8
 80065f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065f2:	2340      	movs	r3, #64	; 0x40
 80065f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006600:	f107 0308 	add.w	r3, r7, #8
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ff11 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 faf5 	bl	8006bfc <SDMMC_GetCmdResp7>
 8006612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006614:	69fb      	ldr	r3, [r7, #28]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b088      	sub	sp, #32
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800662c:	2337      	movs	r3, #55	; 0x37
 800662e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006630:	2340      	movs	r3, #64	; 0x40
 8006632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fef2 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	2137      	movs	r1, #55	; 0x37
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8f3 	bl	800683c <SDMMC_GetCmdResp1>
 8006656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006658:	69fb      	ldr	r3, [r7, #28]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b088      	sub	sp, #32
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006678:	2329      	movs	r3, #41	; 0x29
 800667a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fecc 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa02 	bl	8006aa0 <SDMMC_GetCmdResp3>
 800669c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800669e:	69fb      	ldr	r3, [r7, #28]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80066b6:	2306      	movs	r3, #6
 80066b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fead 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	2106      	movs	r1, #6
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8ae 	bl	800683c <SDMMC_GetCmdResp1>
 80066e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066e2:	69fb      	ldr	r3, [r7, #28]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80066f8:	2333      	movs	r3, #51	; 0x33
 80066fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fe8c 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	2133      	movs	r1, #51	; 0x33
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f88d 	bl	800683c <SDMMC_GetCmdResp1>
 8006722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006724:	69fb      	ldr	r3, [r7, #28]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b088      	sub	sp, #32
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800673a:	2302      	movs	r3, #2
 800673c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800673e:	23c0      	movs	r3, #192	; 0xc0
 8006740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800674a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fe6b 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f95b 	bl	8006a14 <SDMMC_GetCmdResp2>
 800675e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006760:	69fb      	ldr	r3, [r7, #28]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006778:	2309      	movs	r3, #9
 800677a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fe4c 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f93c 	bl	8006a14 <SDMMC_GetCmdResp2>
 800679c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800679e:	69fb      	ldr	r3, [r7, #28]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80067b6:	2303      	movs	r3, #3
 80067b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff fe2d 	bl	800642e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	2103      	movs	r1, #3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f99b 	bl	8006b14 <SDMMC_GetCmdResp6>
 80067de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067e0:	69fb      	ldr	r3, [r7, #28]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80067ec:	b490      	push	{r4, r7}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <SDMMC_GetCmdError+0x48>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <SDMMC_GetCmdError+0x4c>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	0a5b      	lsrs	r3, r3, #9
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006808:	4623      	mov	r3, r4
 800680a:	1e5c      	subs	r4, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006814:	e009      	b.n	800682a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0f2      	beq.n	8006808 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	22c5      	movs	r2, #197	; 0xc5
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bc90      	pop	{r4, r7}
 8006832:	4770      	bx	lr
 8006834:	20000168 	.word	0x20000168
 8006838:	10624dd3 	.word	0x10624dd3

0800683c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	460b      	mov	r3, r1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800684a:	4b6f      	ldr	r3, [pc, #444]	; (8006a08 <SDMMC_GetCmdResp1+0x1cc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a6f      	ldr	r2, [pc, #444]	; (8006a0c <SDMMC_GetCmdResp1+0x1d0>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	0a5b      	lsrs	r3, r3, #9
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800685c:	4623      	mov	r3, r4
 800685e:	1e5c      	subs	r4, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006868:	e0c9      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <SDMMC_GetCmdResp1+0x20>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1eb      	bne.n	800685c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2204      	movs	r2, #4
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006896:	2304      	movs	r3, #4
 8006898:	e0b1      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0a6      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	22c5      	movs	r2, #197	; 0xc5
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fde3 	bl	8006482 <SDIO_GetCommandResponse>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d001      	beq.n	80068ca <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e099      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80068ca:	2100      	movs	r1, #0
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff fde5 	bl	800649c <SDIO_GetResponse>
 80068d2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4b4e      	ldr	r3, [pc, #312]	; (8006a10 <SDMMC_GetCmdResp1+0x1d4>)
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80068de:	2300      	movs	r3, #0
 80068e0:	e08d      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da02      	bge.n	80068ee <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80068e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ec:	e087      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	e080      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006906:	2380      	movs	r3, #128	; 0x80
 8006908:	e079      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006918:	e071      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006928:	e069      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006938:	e061      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006948:	e059      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006958:	e051      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006968:	e049      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006974:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006978:	e041      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006988:	e039      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006998:	e031      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80069a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069a8:	e029      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80069b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069b8:	e021      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80069c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069c8:	e019      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80069d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069d8:	e011      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80069e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069e8:	e009      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80069f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80069f8:	e001      	b.n	80069fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20000168 	.word	0x20000168
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	fdffe008 	.word	0xfdffe008

08006a14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006a14:	b490      	push	{r4, r7}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <SDMMC_GetCmdResp2+0x84>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <SDMMC_GetCmdResp2+0x88>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0a5b      	lsrs	r3, r3, #9
 8006a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006a30:	4623      	mov	r3, r4
 8006a32:	1e5c      	subs	r4, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a3c:	e026      	b.n	8006a8c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <SDMMC_GetCmdResp2+0x1c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1eb      	bne.n	8006a30 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2204      	movs	r2, #4
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	e00e      	b.n	8006a8c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e003      	b.n	8006a8c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	22c5      	movs	r2, #197	; 0xc5
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc90      	pop	{r4, r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000168 	.word	0x20000168
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006aa0:	b490      	push	{r4, r7}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <SDMMC_GetCmdResp3+0x6c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <SDMMC_GetCmdResp3+0x70>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006abc:	4623      	mov	r3, r4
 8006abe:	1e5c      	subs	r4, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ac8:	e01b      	b.n	8006b02 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ace:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <SDMMC_GetCmdResp3+0x1c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1eb      	bne.n	8006abc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2204      	movs	r2, #4
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006af6:	2304      	movs	r3, #4
 8006af8:	e003      	b.n	8006b02 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	22c5      	movs	r2, #197	; 0xc5
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc90      	pop	{r4, r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	20000168 	.word	0x20000168
 8006b10:	10624dd3 	.word	0x10624dd3

08006b14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b22:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <SDMMC_GetCmdResp6+0xe0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a34      	ldr	r2, [pc, #208]	; (8006bf8 <SDMMC_GetCmdResp6+0xe4>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	0a5b      	lsrs	r3, r3, #9
 8006b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b32:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b36:	4623      	mov	r3, r4
 8006b38:	1e5c      	subs	r4, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b42:	e052      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b48:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0f0      	beq.n	8006b36 <SDMMC_GetCmdResp6+0x22>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1eb      	bne.n	8006b36 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b70:	2304      	movs	r3, #4
 8006b72:	e03a      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e02f      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fc79 	bl	8006482 <SDIO_GetCommandResponse>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d001      	beq.n	8006b9e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e025      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22c5      	movs	r2, #197	; 0xc5
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fc78 	bl	800649c <SDIO_GetResponse>
 8006bac:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e011      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bd4:	e009      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006be4:	e001      	b.n	8006bea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd90      	pop	{r4, r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000168 	.word	0x20000168
 8006bf8:	10624dd3 	.word	0x10624dd3

08006bfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006bfc:	b490      	push	{r4, r7}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c04:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <SDMMC_GetCmdResp7+0x90>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <SDMMC_GetCmdResp7+0x94>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	0a5b      	lsrs	r3, r3, #9
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006c18:	4623      	mov	r3, r4
 8006c1a:	1e5c      	subs	r4, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c24:	e02c      	b.n	8006c80 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <SDMMC_GetCmdResp7+0x1c>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1eb      	bne.n	8006c18 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2204      	movs	r2, #4
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c52:	2304      	movs	r3, #4
 8006c54:	e014      	b.n	8006c80 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e009      	b.n	8006c80 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2240      	movs	r2, #64	; 0x40
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006c7e:	2300      	movs	r3, #0
  
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc90      	pop	{r4, r7}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000168 	.word	0x20000168
 8006c90:	10624dd3 	.word	0x10624dd3

08006c94 <__errno>:
 8006c94:	4b01      	ldr	r3, [pc, #4]	; (8006c9c <__errno+0x8>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000174 	.word	0x20000174

08006ca0 <__libc_init_array>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4e0d      	ldr	r6, [pc, #52]	; (8006cd8 <__libc_init_array+0x38>)
 8006ca4:	4c0d      	ldr	r4, [pc, #52]	; (8006cdc <__libc_init_array+0x3c>)
 8006ca6:	1ba4      	subs	r4, r4, r6
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	2500      	movs	r5, #0
 8006cac:	42a5      	cmp	r5, r4
 8006cae:	d109      	bne.n	8006cc4 <__libc_init_array+0x24>
 8006cb0:	4e0b      	ldr	r6, [pc, #44]	; (8006ce0 <__libc_init_array+0x40>)
 8006cb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ce4 <__libc_init_array+0x44>)
 8006cb4:	f002 f85c 	bl	8008d70 <_init>
 8006cb8:	1ba4      	subs	r4, r4, r6
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	2500      	movs	r5, #0
 8006cbe:	42a5      	cmp	r5, r4
 8006cc0:	d105      	bne.n	8006cce <__libc_init_array+0x2e>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cc8:	4798      	blx	r3
 8006cca:	3501      	adds	r5, #1
 8006ccc:	e7ee      	b.n	8006cac <__libc_init_array+0xc>
 8006cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cd2:	4798      	blx	r3
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	e7f2      	b.n	8006cbe <__libc_init_array+0x1e>
 8006cd8:	08009410 	.word	0x08009410
 8006cdc:	08009410 	.word	0x08009410
 8006ce0:	08009410 	.word	0x08009410
 8006ce4:	08009414 	.word	0x08009414

08006ce8 <memset>:
 8006ce8:	4402      	add	r2, r0
 8006cea:	4603      	mov	r3, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <__cvt>:
 8006cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	ec55 4b10 	vmov	r4, r5, d0
 8006d00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	460e      	mov	r6, r1
 8006d0a:	4691      	mov	r9, r2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	bfb8      	it	lt
 8006d10:	4622      	movlt	r2, r4
 8006d12:	462b      	mov	r3, r5
 8006d14:	f027 0720 	bic.w	r7, r7, #32
 8006d18:	bfbb      	ittet	lt
 8006d1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d1e:	461d      	movlt	r5, r3
 8006d20:	2300      	movge	r3, #0
 8006d22:	232d      	movlt	r3, #45	; 0x2d
 8006d24:	bfb8      	it	lt
 8006d26:	4614      	movlt	r4, r2
 8006d28:	2f46      	cmp	r7, #70	; 0x46
 8006d2a:	700b      	strb	r3, [r1, #0]
 8006d2c:	d004      	beq.n	8006d38 <__cvt+0x40>
 8006d2e:	2f45      	cmp	r7, #69	; 0x45
 8006d30:	d100      	bne.n	8006d34 <__cvt+0x3c>
 8006d32:	3601      	adds	r6, #1
 8006d34:	2102      	movs	r1, #2
 8006d36:	e000      	b.n	8006d3a <__cvt+0x42>
 8006d38:	2103      	movs	r1, #3
 8006d3a:	ab03      	add	r3, sp, #12
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	ab02      	add	r3, sp, #8
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	4632      	mov	r2, r6
 8006d44:	4653      	mov	r3, sl
 8006d46:	ec45 4b10 	vmov	d0, r4, r5
 8006d4a:	f000 fcdd 	bl	8007708 <_dtoa_r>
 8006d4e:	2f47      	cmp	r7, #71	; 0x47
 8006d50:	4680      	mov	r8, r0
 8006d52:	d102      	bne.n	8006d5a <__cvt+0x62>
 8006d54:	f019 0f01 	tst.w	r9, #1
 8006d58:	d026      	beq.n	8006da8 <__cvt+0xb0>
 8006d5a:	2f46      	cmp	r7, #70	; 0x46
 8006d5c:	eb08 0906 	add.w	r9, r8, r6
 8006d60:	d111      	bne.n	8006d86 <__cvt+0x8e>
 8006d62:	f898 3000 	ldrb.w	r3, [r8]
 8006d66:	2b30      	cmp	r3, #48	; 0x30
 8006d68:	d10a      	bne.n	8006d80 <__cvt+0x88>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 feb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d76:	b918      	cbnz	r0, 8006d80 <__cvt+0x88>
 8006d78:	f1c6 0601 	rsb	r6, r6, #1
 8006d7c:	f8ca 6000 	str.w	r6, [sl]
 8006d80:	f8da 3000 	ldr.w	r3, [sl]
 8006d84:	4499      	add	r9, r3
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 feab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d92:	b938      	cbnz	r0, 8006da4 <__cvt+0xac>
 8006d94:	2230      	movs	r2, #48	; 0x30
 8006d96:	9b03      	ldr	r3, [sp, #12]
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	d205      	bcs.n	8006da8 <__cvt+0xb0>
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	9103      	str	r1, [sp, #12]
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	e7f8      	b.n	8006d96 <__cvt+0x9e>
 8006da4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dac:	eba3 0308 	sub.w	r3, r3, r8
 8006db0:	4640      	mov	r0, r8
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	b004      	add	sp, #16
 8006db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006dba <__exponent>:
 8006dba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	bfba      	itte	lt
 8006dc2:	4249      	neglt	r1, r1
 8006dc4:	232d      	movlt	r3, #45	; 0x2d
 8006dc6:	232b      	movge	r3, #43	; 0x2b
 8006dc8:	2909      	cmp	r1, #9
 8006dca:	f804 2b02 	strb.w	r2, [r4], #2
 8006dce:	7043      	strb	r3, [r0, #1]
 8006dd0:	dd20      	ble.n	8006e14 <__exponent+0x5a>
 8006dd2:	f10d 0307 	add.w	r3, sp, #7
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	260a      	movs	r6, #10
 8006dda:	fb91 f5f6 	sdiv	r5, r1, r6
 8006dde:	fb06 1115 	mls	r1, r6, r5, r1
 8006de2:	3130      	adds	r1, #48	; 0x30
 8006de4:	2d09      	cmp	r5, #9
 8006de6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006dea:	f103 32ff 	add.w	r2, r3, #4294967295
 8006dee:	4629      	mov	r1, r5
 8006df0:	dc09      	bgt.n	8006e06 <__exponent+0x4c>
 8006df2:	3130      	adds	r1, #48	; 0x30
 8006df4:	3b02      	subs	r3, #2
 8006df6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006dfa:	42bb      	cmp	r3, r7
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	d304      	bcc.n	8006e0a <__exponent+0x50>
 8006e00:	1a10      	subs	r0, r2, r0
 8006e02:	b003      	add	sp, #12
 8006e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e06:	4613      	mov	r3, r2
 8006e08:	e7e7      	b.n	8006dda <__exponent+0x20>
 8006e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0e:	f804 2b01 	strb.w	r2, [r4], #1
 8006e12:	e7f2      	b.n	8006dfa <__exponent+0x40>
 8006e14:	2330      	movs	r3, #48	; 0x30
 8006e16:	4419      	add	r1, r3
 8006e18:	7083      	strb	r3, [r0, #2]
 8006e1a:	1d02      	adds	r2, r0, #4
 8006e1c:	70c1      	strb	r1, [r0, #3]
 8006e1e:	e7ef      	b.n	8006e00 <__exponent+0x46>

08006e20 <_printf_float>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	b08d      	sub	sp, #52	; 0x34
 8006e26:	460c      	mov	r4, r1
 8006e28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	461f      	mov	r7, r3
 8006e30:	4605      	mov	r5, r0
 8006e32:	f001 fa21 	bl	8008278 <_localeconv_r>
 8006e36:	6803      	ldr	r3, [r0, #0]
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7f9 f9d2 	bl	80001e4 <strlen>
 8006e40:	2300      	movs	r3, #0
 8006e42:	930a      	str	r3, [sp, #40]	; 0x28
 8006e44:	f8d8 3000 	ldr.w	r3, [r8]
 8006e48:	9005      	str	r0, [sp, #20]
 8006e4a:	3307      	adds	r3, #7
 8006e4c:	f023 0307 	bic.w	r3, r3, #7
 8006e50:	f103 0208 	add.w	r2, r3, #8
 8006e54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e58:	f8d4 b000 	ldr.w	fp, [r4]
 8006e5c:	f8c8 2000 	str.w	r2, [r8]
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e70:	9307      	str	r3, [sp, #28]
 8006e72:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7a:	4ba7      	ldr	r3, [pc, #668]	; (8007118 <_printf_float+0x2f8>)
 8006e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e80:	f7f9 fe64 	bl	8000b4c <__aeabi_dcmpun>
 8006e84:	bb70      	cbnz	r0, 8006ee4 <_printf_float+0xc4>
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	4ba3      	ldr	r3, [pc, #652]	; (8007118 <_printf_float+0x2f8>)
 8006e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e90:	f7f9 fe3e 	bl	8000b10 <__aeabi_dcmple>
 8006e94:	bb30      	cbnz	r0, 8006ee4 <_printf_float+0xc4>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	f7f9 fe2d 	bl	8000afc <__aeabi_dcmplt>
 8006ea2:	b110      	cbz	r0, 8006eaa <_printf_float+0x8a>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eaa:	4a9c      	ldr	r2, [pc, #624]	; (800711c <_printf_float+0x2fc>)
 8006eac:	4b9c      	ldr	r3, [pc, #624]	; (8007120 <_printf_float+0x300>)
 8006eae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006eb2:	bf8c      	ite	hi
 8006eb4:	4690      	movhi	r8, r2
 8006eb6:	4698      	movls	r8, r3
 8006eb8:	2303      	movs	r3, #3
 8006eba:	f02b 0204 	bic.w	r2, fp, #4
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	6022      	str	r2, [r4, #0]
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	9700      	str	r7, [sp, #0]
 8006ec8:	4633      	mov	r3, r6
 8006eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f9e6 	bl	80072a0 <_printf_common>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f040 808d 	bne.w	8006ff4 <_printf_float+0x1d4>
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	b00d      	add	sp, #52	; 0x34
 8006ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fe2e 	bl	8000b4c <__aeabi_dcmpun>
 8006ef0:	b110      	cbz	r0, 8006ef8 <_printf_float+0xd8>
 8006ef2:	4a8c      	ldr	r2, [pc, #560]	; (8007124 <_printf_float+0x304>)
 8006ef4:	4b8c      	ldr	r3, [pc, #560]	; (8007128 <_printf_float+0x308>)
 8006ef6:	e7da      	b.n	8006eae <_printf_float+0x8e>
 8006ef8:	6861      	ldr	r1, [r4, #4]
 8006efa:	1c4b      	adds	r3, r1, #1
 8006efc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f00:	a80a      	add	r0, sp, #40	; 0x28
 8006f02:	d13e      	bne.n	8006f82 <_printf_float+0x162>
 8006f04:	2306      	movs	r3, #6
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f0e:	ab09      	add	r3, sp, #36	; 0x24
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	ec49 8b10 	vmov	d0, r8, r9
 8006f16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f1a:	6022      	str	r2, [r4, #0]
 8006f1c:	f8cd a004 	str.w	sl, [sp, #4]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4628      	mov	r0, r5
 8006f24:	f7ff fee8 	bl	8006cf8 <__cvt>
 8006f28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006f2c:	2b47      	cmp	r3, #71	; 0x47
 8006f2e:	4680      	mov	r8, r0
 8006f30:	d109      	bne.n	8006f46 <_printf_float+0x126>
 8006f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f34:	1cd8      	adds	r0, r3, #3
 8006f36:	db02      	blt.n	8006f3e <_printf_float+0x11e>
 8006f38:	6862      	ldr	r2, [r4, #4]
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	dd47      	ble.n	8006fce <_printf_float+0x1ae>
 8006f3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f42:	fa5f fa8a 	uxtb.w	sl, sl
 8006f46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f4c:	d824      	bhi.n	8006f98 <_printf_float+0x178>
 8006f4e:	3901      	subs	r1, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f56:	9109      	str	r1, [sp, #36]	; 0x24
 8006f58:	f7ff ff2f 	bl	8006dba <__exponent>
 8006f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f5e:	1813      	adds	r3, r2, r0
 8006f60:	2a01      	cmp	r2, #1
 8006f62:	4681      	mov	r9, r0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	dc02      	bgt.n	8006f6e <_printf_float+0x14e>
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	07d1      	lsls	r1, r2, #31
 8006f6c:	d501      	bpl.n	8006f72 <_printf_float+0x152>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0a5      	beq.n	8006ec6 <_printf_float+0xa6>
 8006f7a:	232d      	movs	r3, #45	; 0x2d
 8006f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f80:	e7a1      	b.n	8006ec6 <_printf_float+0xa6>
 8006f82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006f86:	f000 8177 	beq.w	8007278 <_printf_float+0x458>
 8006f8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f8e:	d1bb      	bne.n	8006f08 <_printf_float+0xe8>
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d1b9      	bne.n	8006f08 <_printf_float+0xe8>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e7b6      	b.n	8006f06 <_printf_float+0xe6>
 8006f98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006f9c:	d119      	bne.n	8006fd2 <_printf_float+0x1b2>
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	dd0c      	ble.n	8006fbe <_printf_float+0x19e>
 8006fa4:	6121      	str	r1, [r4, #16]
 8006fa6:	b913      	cbnz	r3, 8006fae <_printf_float+0x18e>
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	07d2      	lsls	r2, r2, #31
 8006fac:	d502      	bpl.n	8006fb4 <_printf_float+0x194>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	440b      	add	r3, r1
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fb8:	f04f 0900 	mov.w	r9, #0
 8006fbc:	e7d9      	b.n	8006f72 <_printf_float+0x152>
 8006fbe:	b913      	cbnz	r3, 8006fc6 <_printf_float+0x1a6>
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	07d0      	lsls	r0, r2, #31
 8006fc4:	d501      	bpl.n	8006fca <_printf_float+0x1aa>
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	e7f3      	b.n	8006fb2 <_printf_float+0x192>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7f1      	b.n	8006fb2 <_printf_float+0x192>
 8006fce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006fd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	db05      	blt.n	8006fe6 <_printf_float+0x1c6>
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	07d1      	lsls	r1, r2, #31
 8006fe0:	d5e8      	bpl.n	8006fb4 <_printf_float+0x194>
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	e7e5      	b.n	8006fb2 <_printf_float+0x192>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfd4      	ite	le
 8006fea:	f1c3 0302 	rsble	r3, r3, #2
 8006fee:	2301      	movgt	r3, #1
 8006ff0:	4413      	add	r3, r2
 8006ff2:	e7de      	b.n	8006fb2 <_printf_float+0x192>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	055a      	lsls	r2, r3, #21
 8006ff8:	d407      	bmi.n	800700a <_printf_float+0x1ea>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d12b      	bne.n	8007060 <_printf_float+0x240>
 8007008:	e767      	b.n	8006eda <_printf_float+0xba>
 800700a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800700e:	f240 80dc 	bls.w	80071ca <_printf_float+0x3aa>
 8007012:	2200      	movs	r2, #0
 8007014:	2300      	movs	r3, #0
 8007016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800701a:	f7f9 fd65 	bl	8000ae8 <__aeabi_dcmpeq>
 800701e:	2800      	cmp	r0, #0
 8007020:	d033      	beq.n	800708a <_printf_float+0x26a>
 8007022:	2301      	movs	r3, #1
 8007024:	4a41      	ldr	r2, [pc, #260]	; (800712c <_printf_float+0x30c>)
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f af54 	beq.w	8006eda <_printf_float+0xba>
 8007032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007036:	429a      	cmp	r2, r3
 8007038:	db02      	blt.n	8007040 <_printf_float+0x220>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	07d8      	lsls	r0, r3, #31
 800703e:	d50f      	bpl.n	8007060 <_printf_float+0x240>
 8007040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af45 	beq.w	8006eda <_printf_float+0xba>
 8007050:	f04f 0800 	mov.w	r8, #0
 8007054:	f104 091a 	add.w	r9, r4, #26
 8007058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705a:	3b01      	subs	r3, #1
 800705c:	4543      	cmp	r3, r8
 800705e:	dc09      	bgt.n	8007074 <_printf_float+0x254>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	079b      	lsls	r3, r3, #30
 8007064:	f100 8103 	bmi.w	800726e <_printf_float+0x44e>
 8007068:	68e0      	ldr	r0, [r4, #12]
 800706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706c:	4298      	cmp	r0, r3
 800706e:	bfb8      	it	lt
 8007070:	4618      	movlt	r0, r3
 8007072:	e734      	b.n	8006ede <_printf_float+0xbe>
 8007074:	2301      	movs	r3, #1
 8007076:	464a      	mov	r2, r9
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af2b 	beq.w	8006eda <_printf_float+0xba>
 8007084:	f108 0801 	add.w	r8, r8, #1
 8007088:	e7e6      	b.n	8007058 <_printf_float+0x238>
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	dc2b      	bgt.n	80070e8 <_printf_float+0x2c8>
 8007090:	2301      	movs	r3, #1
 8007092:	4a26      	ldr	r2, [pc, #152]	; (800712c <_printf_float+0x30c>)
 8007094:	4631      	mov	r1, r6
 8007096:	4628      	mov	r0, r5
 8007098:	47b8      	blx	r7
 800709a:	3001      	adds	r0, #1
 800709c:	f43f af1d 	beq.w	8006eda <_printf_float+0xba>
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	b923      	cbnz	r3, 80070ae <_printf_float+0x28e>
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	b913      	cbnz	r3, 80070ae <_printf_float+0x28e>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d5d8      	bpl.n	8007060 <_printf_float+0x240>
 80070ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f af0e 	beq.w	8006eda <_printf_float+0xba>
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	f104 0a1a 	add.w	sl, r4, #26
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	425b      	negs	r3, r3
 80070ca:	454b      	cmp	r3, r9
 80070cc:	dc01      	bgt.n	80070d2 <_printf_float+0x2b2>
 80070ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d0:	e794      	b.n	8006ffc <_printf_float+0x1dc>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f aefc 	beq.w	8006eda <_printf_float+0xba>
 80070e2:	f109 0901 	add.w	r9, r9, #1
 80070e6:	e7ee      	b.n	80070c6 <_printf_float+0x2a6>
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfa8      	it	ge
 80070f0:	461a      	movge	r2, r3
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	4691      	mov	r9, r2
 80070f6:	dd07      	ble.n	8007108 <_printf_float+0x2e8>
 80070f8:	4613      	mov	r3, r2
 80070fa:	4631      	mov	r1, r6
 80070fc:	4642      	mov	r2, r8
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f aee9 	beq.w	8006eda <_printf_float+0xba>
 8007108:	f104 031a 	add.w	r3, r4, #26
 800710c:	f04f 0b00 	mov.w	fp, #0
 8007110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007114:	9306      	str	r3, [sp, #24]
 8007116:	e015      	b.n	8007144 <_printf_float+0x324>
 8007118:	7fefffff 	.word	0x7fefffff
 800711c:	080091ac 	.word	0x080091ac
 8007120:	080091a8 	.word	0x080091a8
 8007124:	080091b4 	.word	0x080091b4
 8007128:	080091b0 	.word	0x080091b0
 800712c:	080091b8 	.word	0x080091b8
 8007130:	2301      	movs	r3, #1
 8007132:	9a06      	ldr	r2, [sp, #24]
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f aecd 	beq.w	8006eda <_printf_float+0xba>
 8007140:	f10b 0b01 	add.w	fp, fp, #1
 8007144:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007148:	ebaa 0309 	sub.w	r3, sl, r9
 800714c:	455b      	cmp	r3, fp
 800714e:	dcef      	bgt.n	8007130 <_printf_float+0x310>
 8007150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007154:	429a      	cmp	r2, r3
 8007156:	44d0      	add	r8, sl
 8007158:	db15      	blt.n	8007186 <_printf_float+0x366>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	07da      	lsls	r2, r3, #31
 800715e:	d412      	bmi.n	8007186 <_printf_float+0x366>
 8007160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007164:	eba3 020a 	sub.w	r2, r3, sl
 8007168:	eba3 0a01 	sub.w	sl, r3, r1
 800716c:	4592      	cmp	sl, r2
 800716e:	bfa8      	it	ge
 8007170:	4692      	movge	sl, r2
 8007172:	f1ba 0f00 	cmp.w	sl, #0
 8007176:	dc0e      	bgt.n	8007196 <_printf_float+0x376>
 8007178:	f04f 0800 	mov.w	r8, #0
 800717c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007180:	f104 091a 	add.w	r9, r4, #26
 8007184:	e019      	b.n	80071ba <_printf_float+0x39a>
 8007186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	d1e5      	bne.n	8007160 <_printf_float+0x340>
 8007194:	e6a1      	b.n	8006eda <_printf_float+0xba>
 8007196:	4653      	mov	r3, sl
 8007198:	4642      	mov	r2, r8
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1e9      	bne.n	8007178 <_printf_float+0x358>
 80071a4:	e699      	b.n	8006eda <_printf_float+0xba>
 80071a6:	2301      	movs	r3, #1
 80071a8:	464a      	mov	r2, r9
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f ae92 	beq.w	8006eda <_printf_float+0xba>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	eba3 030a 	sub.w	r3, r3, sl
 80071c4:	4543      	cmp	r3, r8
 80071c6:	dcee      	bgt.n	80071a6 <_printf_float+0x386>
 80071c8:	e74a      	b.n	8007060 <_printf_float+0x240>
 80071ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071cc:	2a01      	cmp	r2, #1
 80071ce:	dc01      	bgt.n	80071d4 <_printf_float+0x3b4>
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d53a      	bpl.n	800724a <_printf_float+0x42a>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4642      	mov	r2, r8
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f ae7b 	beq.w	8006eda <_printf_float+0xba>
 80071e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f108 0801 	add.w	r8, r8, #1
 80071f4:	f43f ae71 	beq.w	8006eda <_printf_float+0xba>
 80071f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fa:	2200      	movs	r2, #0
 80071fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8007200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007204:	2300      	movs	r3, #0
 8007206:	f7f9 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800720a:	b9c8      	cbnz	r0, 8007240 <_printf_float+0x420>
 800720c:	4653      	mov	r3, sl
 800720e:	4642      	mov	r2, r8
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d10e      	bne.n	8007238 <_printf_float+0x418>
 800721a:	e65e      	b.n	8006eda <_printf_float+0xba>
 800721c:	2301      	movs	r3, #1
 800721e:	4652      	mov	r2, sl
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f ae57 	beq.w	8006eda <_printf_float+0xba>
 800722c:	f108 0801 	add.w	r8, r8, #1
 8007230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007232:	3b01      	subs	r3, #1
 8007234:	4543      	cmp	r3, r8
 8007236:	dcf1      	bgt.n	800721c <_printf_float+0x3fc>
 8007238:	464b      	mov	r3, r9
 800723a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800723e:	e6de      	b.n	8006ffe <_printf_float+0x1de>
 8007240:	f04f 0800 	mov.w	r8, #0
 8007244:	f104 0a1a 	add.w	sl, r4, #26
 8007248:	e7f2      	b.n	8007230 <_printf_float+0x410>
 800724a:	2301      	movs	r3, #1
 800724c:	e7df      	b.n	800720e <_printf_float+0x3ee>
 800724e:	2301      	movs	r3, #1
 8007250:	464a      	mov	r2, r9
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	f43f ae3e 	beq.w	8006eda <_printf_float+0xba>
 800725e:	f108 0801 	add.w	r8, r8, #1
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	4543      	cmp	r3, r8
 800726a:	dcf0      	bgt.n	800724e <_printf_float+0x42e>
 800726c:	e6fc      	b.n	8007068 <_printf_float+0x248>
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	f104 0919 	add.w	r9, r4, #25
 8007276:	e7f4      	b.n	8007262 <_printf_float+0x442>
 8007278:	2900      	cmp	r1, #0
 800727a:	f43f ae8b 	beq.w	8006f94 <_printf_float+0x174>
 800727e:	2300      	movs	r3, #0
 8007280:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007284:	ab09      	add	r3, sp, #36	; 0x24
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	ec49 8b10 	vmov	d0, r8, r9
 800728c:	6022      	str	r2, [r4, #0]
 800728e:	f8cd a004 	str.w	sl, [sp, #4]
 8007292:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007296:	4628      	mov	r0, r5
 8007298:	f7ff fd2e 	bl	8006cf8 <__cvt>
 800729c:	4680      	mov	r8, r0
 800729e:	e648      	b.n	8006f32 <_printf_float+0x112>

080072a0 <_printf_common>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	4691      	mov	r9, r2
 80072a6:	461f      	mov	r7, r3
 80072a8:	688a      	ldr	r2, [r1, #8]
 80072aa:	690b      	ldr	r3, [r1, #16]
 80072ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	bfb8      	it	lt
 80072b4:	4613      	movlt	r3, r2
 80072b6:	f8c9 3000 	str.w	r3, [r9]
 80072ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072be:	4606      	mov	r6, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	b112      	cbz	r2, 80072ca <_printf_common+0x2a>
 80072c4:	3301      	adds	r3, #1
 80072c6:	f8c9 3000 	str.w	r3, [r9]
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	0699      	lsls	r1, r3, #26
 80072ce:	bf42      	ittt	mi
 80072d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072d4:	3302      	addmi	r3, #2
 80072d6:	f8c9 3000 	strmi.w	r3, [r9]
 80072da:	6825      	ldr	r5, [r4, #0]
 80072dc:	f015 0506 	ands.w	r5, r5, #6
 80072e0:	d107      	bne.n	80072f2 <_printf_common+0x52>
 80072e2:	f104 0a19 	add.w	sl, r4, #25
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	f8d9 2000 	ldr.w	r2, [r9]
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	42ab      	cmp	r3, r5
 80072f0:	dc28      	bgt.n	8007344 <_printf_common+0xa4>
 80072f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	3300      	adds	r3, #0
 80072fa:	bf18      	it	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	0692      	lsls	r2, r2, #26
 8007300:	d42d      	bmi.n	800735e <_printf_common+0xbe>
 8007302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007306:	4639      	mov	r1, r7
 8007308:	4630      	mov	r0, r6
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d020      	beq.n	8007352 <_printf_common+0xb2>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	68e5      	ldr	r5, [r4, #12]
 8007314:	f8d9 2000 	ldr.w	r2, [r9]
 8007318:	f003 0306 	and.w	r3, r3, #6
 800731c:	2b04      	cmp	r3, #4
 800731e:	bf08      	it	eq
 8007320:	1aad      	subeq	r5, r5, r2
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	bf0c      	ite	eq
 8007328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800732c:	2500      	movne	r5, #0
 800732e:	4293      	cmp	r3, r2
 8007330:	bfc4      	itt	gt
 8007332:	1a9b      	subgt	r3, r3, r2
 8007334:	18ed      	addgt	r5, r5, r3
 8007336:	f04f 0900 	mov.w	r9, #0
 800733a:	341a      	adds	r4, #26
 800733c:	454d      	cmp	r5, r9
 800733e:	d11a      	bne.n	8007376 <_printf_common+0xd6>
 8007340:	2000      	movs	r0, #0
 8007342:	e008      	b.n	8007356 <_printf_common+0xb6>
 8007344:	2301      	movs	r3, #1
 8007346:	4652      	mov	r2, sl
 8007348:	4639      	mov	r1, r7
 800734a:	4630      	mov	r0, r6
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d103      	bne.n	800735a <_printf_common+0xba>
 8007352:	f04f 30ff 	mov.w	r0, #4294967295
 8007356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735a:	3501      	adds	r5, #1
 800735c:	e7c3      	b.n	80072e6 <_printf_common+0x46>
 800735e:	18e1      	adds	r1, r4, r3
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	2030      	movs	r0, #48	; 0x30
 8007364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007368:	4422      	add	r2, r4
 800736a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800736e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007372:	3302      	adds	r3, #2
 8007374:	e7c5      	b.n	8007302 <_printf_common+0x62>
 8007376:	2301      	movs	r3, #1
 8007378:	4622      	mov	r2, r4
 800737a:	4639      	mov	r1, r7
 800737c:	4630      	mov	r0, r6
 800737e:	47c0      	blx	r8
 8007380:	3001      	adds	r0, #1
 8007382:	d0e6      	beq.n	8007352 <_printf_common+0xb2>
 8007384:	f109 0901 	add.w	r9, r9, #1
 8007388:	e7d8      	b.n	800733c <_printf_common+0x9c>
	...

0800738c <_printf_i>:
 800738c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007394:	460c      	mov	r4, r1
 8007396:	7e09      	ldrb	r1, [r1, #24]
 8007398:	b085      	sub	sp, #20
 800739a:	296e      	cmp	r1, #110	; 0x6e
 800739c:	4617      	mov	r7, r2
 800739e:	4606      	mov	r6, r0
 80073a0:	4698      	mov	r8, r3
 80073a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073a4:	f000 80b3 	beq.w	800750e <_printf_i+0x182>
 80073a8:	d822      	bhi.n	80073f0 <_printf_i+0x64>
 80073aa:	2963      	cmp	r1, #99	; 0x63
 80073ac:	d036      	beq.n	800741c <_printf_i+0x90>
 80073ae:	d80a      	bhi.n	80073c6 <_printf_i+0x3a>
 80073b0:	2900      	cmp	r1, #0
 80073b2:	f000 80b9 	beq.w	8007528 <_printf_i+0x19c>
 80073b6:	2958      	cmp	r1, #88	; 0x58
 80073b8:	f000 8083 	beq.w	80074c2 <_printf_i+0x136>
 80073bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073c4:	e032      	b.n	800742c <_printf_i+0xa0>
 80073c6:	2964      	cmp	r1, #100	; 0x64
 80073c8:	d001      	beq.n	80073ce <_printf_i+0x42>
 80073ca:	2969      	cmp	r1, #105	; 0x69
 80073cc:	d1f6      	bne.n	80073bc <_printf_i+0x30>
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	0605      	lsls	r5, r0, #24
 80073d4:	f103 0104 	add.w	r1, r3, #4
 80073d8:	d52a      	bpl.n	8007430 <_printf_i+0xa4>
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da03      	bge.n	80073ea <_printf_i+0x5e>
 80073e2:	222d      	movs	r2, #45	; 0x2d
 80073e4:	425b      	negs	r3, r3
 80073e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073ea:	486f      	ldr	r0, [pc, #444]	; (80075a8 <_printf_i+0x21c>)
 80073ec:	220a      	movs	r2, #10
 80073ee:	e039      	b.n	8007464 <_printf_i+0xd8>
 80073f0:	2973      	cmp	r1, #115	; 0x73
 80073f2:	f000 809d 	beq.w	8007530 <_printf_i+0x1a4>
 80073f6:	d808      	bhi.n	800740a <_printf_i+0x7e>
 80073f8:	296f      	cmp	r1, #111	; 0x6f
 80073fa:	d020      	beq.n	800743e <_printf_i+0xb2>
 80073fc:	2970      	cmp	r1, #112	; 0x70
 80073fe:	d1dd      	bne.n	80073bc <_printf_i+0x30>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	f043 0320 	orr.w	r3, r3, #32
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e003      	b.n	8007412 <_printf_i+0x86>
 800740a:	2975      	cmp	r1, #117	; 0x75
 800740c:	d017      	beq.n	800743e <_printf_i+0xb2>
 800740e:	2978      	cmp	r1, #120	; 0x78
 8007410:	d1d4      	bne.n	80073bc <_printf_i+0x30>
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007418:	4864      	ldr	r0, [pc, #400]	; (80075ac <_printf_i+0x220>)
 800741a:	e055      	b.n	80074c8 <_printf_i+0x13c>
 800741c:	6813      	ldr	r3, [r2, #0]
 800741e:	1d19      	adds	r1, r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6011      	str	r1, [r2, #0]
 8007424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800742c:	2301      	movs	r3, #1
 800742e:	e08c      	b.n	800754a <_printf_i+0x1be>
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6011      	str	r1, [r2, #0]
 8007434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007438:	bf18      	it	ne
 800743a:	b21b      	sxthne	r3, r3
 800743c:	e7cf      	b.n	80073de <_printf_i+0x52>
 800743e:	6813      	ldr	r3, [r2, #0]
 8007440:	6825      	ldr	r5, [r4, #0]
 8007442:	1d18      	adds	r0, r3, #4
 8007444:	6010      	str	r0, [r2, #0]
 8007446:	0628      	lsls	r0, r5, #24
 8007448:	d501      	bpl.n	800744e <_printf_i+0xc2>
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	e002      	b.n	8007454 <_printf_i+0xc8>
 800744e:	0668      	lsls	r0, r5, #25
 8007450:	d5fb      	bpl.n	800744a <_printf_i+0xbe>
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	4854      	ldr	r0, [pc, #336]	; (80075a8 <_printf_i+0x21c>)
 8007456:	296f      	cmp	r1, #111	; 0x6f
 8007458:	bf14      	ite	ne
 800745a:	220a      	movne	r2, #10
 800745c:	2208      	moveq	r2, #8
 800745e:	2100      	movs	r1, #0
 8007460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007464:	6865      	ldr	r5, [r4, #4]
 8007466:	60a5      	str	r5, [r4, #8]
 8007468:	2d00      	cmp	r5, #0
 800746a:	f2c0 8095 	blt.w	8007598 <_printf_i+0x20c>
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	f021 0104 	bic.w	r1, r1, #4
 8007474:	6021      	str	r1, [r4, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d13d      	bne.n	80074f6 <_printf_i+0x16a>
 800747a:	2d00      	cmp	r5, #0
 800747c:	f040 808e 	bne.w	800759c <_printf_i+0x210>
 8007480:	4665      	mov	r5, ip
 8007482:	2a08      	cmp	r2, #8
 8007484:	d10b      	bne.n	800749e <_printf_i+0x112>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d508      	bpl.n	800749e <_printf_i+0x112>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	bfde      	ittt	le
 8007494:	2330      	movle	r3, #48	; 0x30
 8007496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800749a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800749e:	ebac 0305 	sub.w	r3, ip, r5
 80074a2:	6123      	str	r3, [r4, #16]
 80074a4:	f8cd 8000 	str.w	r8, [sp]
 80074a8:	463b      	mov	r3, r7
 80074aa:	aa03      	add	r2, sp, #12
 80074ac:	4621      	mov	r1, r4
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff fef6 	bl	80072a0 <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d14d      	bne.n	8007554 <_printf_i+0x1c8>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	b005      	add	sp, #20
 80074be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074c2:	4839      	ldr	r0, [pc, #228]	; (80075a8 <_printf_i+0x21c>)
 80074c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074c8:	6813      	ldr	r3, [r2, #0]
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	1d1d      	adds	r5, r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6015      	str	r5, [r2, #0]
 80074d2:	060a      	lsls	r2, r1, #24
 80074d4:	d50b      	bpl.n	80074ee <_printf_i+0x162>
 80074d6:	07ca      	lsls	r2, r1, #31
 80074d8:	bf44      	itt	mi
 80074da:	f041 0120 	orrmi.w	r1, r1, #32
 80074de:	6021      	strmi	r1, [r4, #0]
 80074e0:	b91b      	cbnz	r3, 80074ea <_printf_i+0x15e>
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	f022 0220 	bic.w	r2, r2, #32
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	2210      	movs	r2, #16
 80074ec:	e7b7      	b.n	800745e <_printf_i+0xd2>
 80074ee:	064d      	lsls	r5, r1, #25
 80074f0:	bf48      	it	mi
 80074f2:	b29b      	uxthmi	r3, r3
 80074f4:	e7ef      	b.n	80074d6 <_printf_i+0x14a>
 80074f6:	4665      	mov	r5, ip
 80074f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80074fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007500:	5cc3      	ldrb	r3, [r0, r3]
 8007502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007506:	460b      	mov	r3, r1
 8007508:	2900      	cmp	r1, #0
 800750a:	d1f5      	bne.n	80074f8 <_printf_i+0x16c>
 800750c:	e7b9      	b.n	8007482 <_printf_i+0xf6>
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	6825      	ldr	r5, [r4, #0]
 8007512:	6961      	ldr	r1, [r4, #20]
 8007514:	1d18      	adds	r0, r3, #4
 8007516:	6010      	str	r0, [r2, #0]
 8007518:	0628      	lsls	r0, r5, #24
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	d501      	bpl.n	8007522 <_printf_i+0x196>
 800751e:	6019      	str	r1, [r3, #0]
 8007520:	e002      	b.n	8007528 <_printf_i+0x19c>
 8007522:	066a      	lsls	r2, r5, #25
 8007524:	d5fb      	bpl.n	800751e <_printf_i+0x192>
 8007526:	8019      	strh	r1, [r3, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	6123      	str	r3, [r4, #16]
 800752c:	4665      	mov	r5, ip
 800752e:	e7b9      	b.n	80074a4 <_printf_i+0x118>
 8007530:	6813      	ldr	r3, [r2, #0]
 8007532:	1d19      	adds	r1, r3, #4
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	681d      	ldr	r5, [r3, #0]
 8007538:	6862      	ldr	r2, [r4, #4]
 800753a:	2100      	movs	r1, #0
 800753c:	4628      	mov	r0, r5
 800753e:	f7f8 fe5f 	bl	8000200 <memchr>
 8007542:	b108      	cbz	r0, 8007548 <_printf_i+0x1bc>
 8007544:	1b40      	subs	r0, r0, r5
 8007546:	6060      	str	r0, [r4, #4]
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	2300      	movs	r3, #0
 800754e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007552:	e7a7      	b.n	80074a4 <_printf_i+0x118>
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	462a      	mov	r2, r5
 8007558:	4639      	mov	r1, r7
 800755a:	4630      	mov	r0, r6
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d0aa      	beq.n	80074b8 <_printf_i+0x12c>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	079b      	lsls	r3, r3, #30
 8007566:	d413      	bmi.n	8007590 <_printf_i+0x204>
 8007568:	68e0      	ldr	r0, [r4, #12]
 800756a:	9b03      	ldr	r3, [sp, #12]
 800756c:	4298      	cmp	r0, r3
 800756e:	bfb8      	it	lt
 8007570:	4618      	movlt	r0, r3
 8007572:	e7a3      	b.n	80074bc <_printf_i+0x130>
 8007574:	2301      	movs	r3, #1
 8007576:	464a      	mov	r2, r9
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d09a      	beq.n	80074b8 <_printf_i+0x12c>
 8007582:	3501      	adds	r5, #1
 8007584:	68e3      	ldr	r3, [r4, #12]
 8007586:	9a03      	ldr	r2, [sp, #12]
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	42ab      	cmp	r3, r5
 800758c:	dcf2      	bgt.n	8007574 <_printf_i+0x1e8>
 800758e:	e7eb      	b.n	8007568 <_printf_i+0x1dc>
 8007590:	2500      	movs	r5, #0
 8007592:	f104 0919 	add.w	r9, r4, #25
 8007596:	e7f5      	b.n	8007584 <_printf_i+0x1f8>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1ac      	bne.n	80074f6 <_printf_i+0x16a>
 800759c:	7803      	ldrb	r3, [r0, #0]
 800759e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a6:	e76c      	b.n	8007482 <_printf_i+0xf6>
 80075a8:	080091ba 	.word	0x080091ba
 80075ac:	080091cb 	.word	0x080091cb

080075b0 <siprintf>:
 80075b0:	b40e      	push	{r1, r2, r3}
 80075b2:	b500      	push	{lr}
 80075b4:	b09c      	sub	sp, #112	; 0x70
 80075b6:	ab1d      	add	r3, sp, #116	; 0x74
 80075b8:	9002      	str	r0, [sp, #8]
 80075ba:	9006      	str	r0, [sp, #24]
 80075bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075c0:	4809      	ldr	r0, [pc, #36]	; (80075e8 <siprintf+0x38>)
 80075c2:	9107      	str	r1, [sp, #28]
 80075c4:	9104      	str	r1, [sp, #16]
 80075c6:	4909      	ldr	r1, [pc, #36]	; (80075ec <siprintf+0x3c>)
 80075c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075cc:	9105      	str	r1, [sp, #20]
 80075ce:	6800      	ldr	r0, [r0, #0]
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	a902      	add	r1, sp, #8
 80075d4:	f001 fa5c 	bl	8008a90 <_svfiprintf_r>
 80075d8:	9b02      	ldr	r3, [sp, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	b01c      	add	sp, #112	; 0x70
 80075e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e4:	b003      	add	sp, #12
 80075e6:	4770      	bx	lr
 80075e8:	20000174 	.word	0x20000174
 80075ec:	ffff0208 	.word	0xffff0208

080075f0 <quorem>:
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	6903      	ldr	r3, [r0, #16]
 80075f6:	690c      	ldr	r4, [r1, #16]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	4680      	mov	r8, r0
 80075fc:	f2c0 8082 	blt.w	8007704 <quorem+0x114>
 8007600:	3c01      	subs	r4, #1
 8007602:	f101 0714 	add.w	r7, r1, #20
 8007606:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800760a:	f100 0614 	add.w	r6, r0, #20
 800760e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007612:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007616:	eb06 030c 	add.w	r3, r6, ip
 800761a:	3501      	adds	r5, #1
 800761c:	eb07 090c 	add.w	r9, r7, ip
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	fbb0 f5f5 	udiv	r5, r0, r5
 8007626:	b395      	cbz	r5, 800768e <quorem+0x9e>
 8007628:	f04f 0a00 	mov.w	sl, #0
 800762c:	4638      	mov	r0, r7
 800762e:	46b6      	mov	lr, r6
 8007630:	46d3      	mov	fp, sl
 8007632:	f850 2b04 	ldr.w	r2, [r0], #4
 8007636:	b293      	uxth	r3, r2
 8007638:	fb05 a303 	mla	r3, r5, r3, sl
 800763c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007640:	b29b      	uxth	r3, r3
 8007642:	ebab 0303 	sub.w	r3, fp, r3
 8007646:	0c12      	lsrs	r2, r2, #16
 8007648:	f8de b000 	ldr.w	fp, [lr]
 800764c:	fb05 a202 	mla	r2, r5, r2, sl
 8007650:	fa13 f38b 	uxtah	r3, r3, fp
 8007654:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007658:	fa1f fb82 	uxth.w	fp, r2
 800765c:	f8de 2000 	ldr.w	r2, [lr]
 8007660:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766e:	4581      	cmp	r9, r0
 8007670:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007674:	f84e 3b04 	str.w	r3, [lr], #4
 8007678:	d2db      	bcs.n	8007632 <quorem+0x42>
 800767a:	f856 300c 	ldr.w	r3, [r6, ip]
 800767e:	b933      	cbnz	r3, 800768e <quorem+0x9e>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	3b04      	subs	r3, #4
 8007684:	429e      	cmp	r6, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d330      	bcc.n	80076ec <quorem+0xfc>
 800768a:	f8c8 4010 	str.w	r4, [r8, #16]
 800768e:	4640      	mov	r0, r8
 8007690:	f001 f828 	bl	80086e4 <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	db25      	blt.n	80076e4 <quorem+0xf4>
 8007698:	3501      	adds	r5, #1
 800769a:	4630      	mov	r0, r6
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80076a4:	f8d0 e000 	ldr.w	lr, [r0]
 80076a8:	b293      	uxth	r3, r2
 80076aa:	ebac 0303 	sub.w	r3, ip, r3
 80076ae:	0c12      	lsrs	r2, r2, #16
 80076b0:	fa13 f38e 	uxtah	r3, r3, lr
 80076b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076bc:	b29b      	uxth	r3, r3
 80076be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c2:	45b9      	cmp	r9, r7
 80076c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076c8:	f840 3b04 	str.w	r3, [r0], #4
 80076cc:	d2e8      	bcs.n	80076a0 <quorem+0xb0>
 80076ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80076d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80076d6:	b92a      	cbnz	r2, 80076e4 <quorem+0xf4>
 80076d8:	3b04      	subs	r3, #4
 80076da:	429e      	cmp	r6, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	d30b      	bcc.n	80076f8 <quorem+0x108>
 80076e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80076e4:	4628      	mov	r0, r5
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	d1ca      	bne.n	800768a <quorem+0x9a>
 80076f4:	3c01      	subs	r4, #1
 80076f6:	e7c5      	b.n	8007684 <quorem+0x94>
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	3b04      	subs	r3, #4
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	d1ef      	bne.n	80076e0 <quorem+0xf0>
 8007700:	3c01      	subs	r4, #1
 8007702:	e7ea      	b.n	80076da <quorem+0xea>
 8007704:	2000      	movs	r0, #0
 8007706:	e7ee      	b.n	80076e6 <quorem+0xf6>

08007708 <_dtoa_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ec57 6b10 	vmov	r6, r7, d0
 8007710:	b097      	sub	sp, #92	; 0x5c
 8007712:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007714:	9106      	str	r1, [sp, #24]
 8007716:	4604      	mov	r4, r0
 8007718:	920b      	str	r2, [sp, #44]	; 0x2c
 800771a:	9312      	str	r3, [sp, #72]	; 0x48
 800771c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007720:	e9cd 6700 	strd	r6, r7, [sp]
 8007724:	b93d      	cbnz	r5, 8007736 <_dtoa_r+0x2e>
 8007726:	2010      	movs	r0, #16
 8007728:	f000 fdb4 	bl	8008294 <malloc>
 800772c:	6260      	str	r0, [r4, #36]	; 0x24
 800772e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007732:	6005      	str	r5, [r0, #0]
 8007734:	60c5      	str	r5, [r0, #12]
 8007736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	b151      	cbz	r1, 8007752 <_dtoa_r+0x4a>
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	604a      	str	r2, [r1, #4]
 8007740:	2301      	movs	r3, #1
 8007742:	4093      	lsls	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fdeb 	bl	8008322 <_Bfree>
 800774c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	1e3b      	subs	r3, r7, #0
 8007754:	bfbb      	ittet	lt
 8007756:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800775a:	9301      	strlt	r3, [sp, #4]
 800775c:	2300      	movge	r3, #0
 800775e:	2201      	movlt	r2, #1
 8007760:	bfac      	ite	ge
 8007762:	f8c8 3000 	strge.w	r3, [r8]
 8007766:	f8c8 2000 	strlt.w	r2, [r8]
 800776a:	4baf      	ldr	r3, [pc, #700]	; (8007a28 <_dtoa_r+0x320>)
 800776c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007770:	ea33 0308 	bics.w	r3, r3, r8
 8007774:	d114      	bne.n	80077a0 <_dtoa_r+0x98>
 8007776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007778:	f242 730f 	movw	r3, #9999	; 0x270f
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	b923      	cbnz	r3, 800778c <_dtoa_r+0x84>
 8007782:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007786:	2800      	cmp	r0, #0
 8007788:	f000 8542 	beq.w	8008210 <_dtoa_r+0xb08>
 800778c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800778e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007a3c <_dtoa_r+0x334>
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8544 	beq.w	8008220 <_dtoa_r+0xb18>
 8007798:	f10b 0303 	add.w	r3, fp, #3
 800779c:	f000 bd3e 	b.w	800821c <_dtoa_r+0xb14>
 80077a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b0:	4681      	mov	r9, r0
 80077b2:	b168      	cbz	r0, 80077d0 <_dtoa_r+0xc8>
 80077b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077b6:	2301      	movs	r3, #1
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8524 	beq.w	800820a <_dtoa_r+0xb02>
 80077c2:	4b9a      	ldr	r3, [pc, #616]	; (8007a2c <_dtoa_r+0x324>)
 80077c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	f000 bd28 	b.w	8008220 <_dtoa_r+0xb18>
 80077d0:	aa14      	add	r2, sp, #80	; 0x50
 80077d2:	a915      	add	r1, sp, #84	; 0x54
 80077d4:	ec47 6b10 	vmov	d0, r6, r7
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fffa 	bl	80087d2 <__d2b>
 80077de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077e2:	9004      	str	r0, [sp, #16]
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	d07c      	beq.n	80078e2 <_dtoa_r+0x1da>
 80077e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80077f0:	46b2      	mov	sl, r6
 80077f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80077f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80077fe:	2200      	movs	r2, #0
 8007800:	4b8b      	ldr	r3, [pc, #556]	; (8007a30 <_dtoa_r+0x328>)
 8007802:	4650      	mov	r0, sl
 8007804:	4659      	mov	r1, fp
 8007806:	f7f8 fd4f 	bl	80002a8 <__aeabi_dsub>
 800780a:	a381      	add	r3, pc, #516	; (adr r3, 8007a10 <_dtoa_r+0x308>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f8 ff02 	bl	8000618 <__aeabi_dmul>
 8007814:	a380      	add	r3, pc, #512	; (adr r3, 8007a18 <_dtoa_r+0x310>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fd47 	bl	80002ac <__adddf3>
 800781e:	4606      	mov	r6, r0
 8007820:	4628      	mov	r0, r5
 8007822:	460f      	mov	r7, r1
 8007824:	f7f8 fe8e 	bl	8000544 <__aeabi_i2d>
 8007828:	a37d      	add	r3, pc, #500	; (adr r3, 8007a20 <_dtoa_r+0x318>)
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f7f8 fef3 	bl	8000618 <__aeabi_dmul>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	f7f8 fd37 	bl	80002ac <__adddf3>
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	f7f9 f999 	bl	8000b78 <__aeabi_d2iz>
 8007846:	2200      	movs	r2, #0
 8007848:	4682      	mov	sl, r0
 800784a:	2300      	movs	r3, #0
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f9 f954 	bl	8000afc <__aeabi_dcmplt>
 8007854:	b148      	cbz	r0, 800786a <_dtoa_r+0x162>
 8007856:	4650      	mov	r0, sl
 8007858:	f7f8 fe74 	bl	8000544 <__aeabi_i2d>
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	f7f9 f942 	bl	8000ae8 <__aeabi_dcmpeq>
 8007864:	b908      	cbnz	r0, 800786a <_dtoa_r+0x162>
 8007866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800786a:	f1ba 0f16 	cmp.w	sl, #22
 800786e:	d859      	bhi.n	8007924 <_dtoa_r+0x21c>
 8007870:	4970      	ldr	r1, [pc, #448]	; (8007a34 <_dtoa_r+0x32c>)
 8007872:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800787a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787e:	f7f9 f95b 	bl	8000b38 <__aeabi_dcmpgt>
 8007882:	2800      	cmp	r0, #0
 8007884:	d050      	beq.n	8007928 <_dtoa_r+0x220>
 8007886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788a:	2300      	movs	r3, #0
 800788c:	930f      	str	r3, [sp, #60]	; 0x3c
 800788e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007890:	1b5d      	subs	r5, r3, r5
 8007892:	f1b5 0801 	subs.w	r8, r5, #1
 8007896:	bf49      	itett	mi
 8007898:	f1c5 0301 	rsbmi	r3, r5, #1
 800789c:	2300      	movpl	r3, #0
 800789e:	9305      	strmi	r3, [sp, #20]
 80078a0:	f04f 0800 	movmi.w	r8, #0
 80078a4:	bf58      	it	pl
 80078a6:	9305      	strpl	r3, [sp, #20]
 80078a8:	f1ba 0f00 	cmp.w	sl, #0
 80078ac:	db3e      	blt.n	800792c <_dtoa_r+0x224>
 80078ae:	2300      	movs	r3, #0
 80078b0:	44d0      	add	r8, sl
 80078b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	f200 8090 	bhi.w	80079e0 <_dtoa_r+0x2d8>
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	bfc4      	itt	gt
 80078c4:	3b04      	subgt	r3, #4
 80078c6:	9306      	strgt	r3, [sp, #24]
 80078c8:	9b06      	ldr	r3, [sp, #24]
 80078ca:	f1a3 0302 	sub.w	r3, r3, #2
 80078ce:	bfcc      	ite	gt
 80078d0:	2500      	movgt	r5, #0
 80078d2:	2501      	movle	r5, #1
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	f200 808f 	bhi.w	80079f8 <_dtoa_r+0x2f0>
 80078da:	e8df f003 	tbb	[pc, r3]
 80078de:	7f7d      	.short	0x7f7d
 80078e0:	7131      	.short	0x7131
 80078e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80078e6:	441d      	add	r5, r3
 80078e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80078ec:	2820      	cmp	r0, #32
 80078ee:	dd13      	ble.n	8007918 <_dtoa_r+0x210>
 80078f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	fa08 f800 	lsl.w	r8, r8, r0
 80078fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80078fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007902:	ea48 0000 	orr.w	r0, r8, r0
 8007906:	f7f8 fe0d 	bl	8000524 <__aeabi_ui2d>
 800790a:	2301      	movs	r3, #1
 800790c:	4682      	mov	sl, r0
 800790e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007912:	3d01      	subs	r5, #1
 8007914:	9313      	str	r3, [sp, #76]	; 0x4c
 8007916:	e772      	b.n	80077fe <_dtoa_r+0xf6>
 8007918:	9b00      	ldr	r3, [sp, #0]
 800791a:	f1c0 0020 	rsb	r0, r0, #32
 800791e:	fa03 f000 	lsl.w	r0, r3, r0
 8007922:	e7f0      	b.n	8007906 <_dtoa_r+0x1fe>
 8007924:	2301      	movs	r3, #1
 8007926:	e7b1      	b.n	800788c <_dtoa_r+0x184>
 8007928:	900f      	str	r0, [sp, #60]	; 0x3c
 800792a:	e7b0      	b.n	800788e <_dtoa_r+0x186>
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	eba3 030a 	sub.w	r3, r3, sl
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f1ca 0300 	rsb	r3, sl, #0
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	2300      	movs	r3, #0
 800793c:	930e      	str	r3, [sp, #56]	; 0x38
 800793e:	e7bb      	b.n	80078b8 <_dtoa_r+0x1b0>
 8007940:	2301      	movs	r3, #1
 8007942:	930a      	str	r3, [sp, #40]	; 0x28
 8007944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	dd59      	ble.n	80079fe <_dtoa_r+0x2f6>
 800794a:	9302      	str	r3, [sp, #8]
 800794c:	4699      	mov	r9, r3
 800794e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007950:	2200      	movs	r2, #0
 8007952:	6072      	str	r2, [r6, #4]
 8007954:	2204      	movs	r2, #4
 8007956:	f102 0014 	add.w	r0, r2, #20
 800795a:	4298      	cmp	r0, r3
 800795c:	6871      	ldr	r1, [r6, #4]
 800795e:	d953      	bls.n	8007a08 <_dtoa_r+0x300>
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fcaa 	bl	80082ba <_Balloc>
 8007966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007968:	6030      	str	r0, [r6, #0]
 800796a:	f1b9 0f0e 	cmp.w	r9, #14
 800796e:	f8d3 b000 	ldr.w	fp, [r3]
 8007972:	f200 80e6 	bhi.w	8007b42 <_dtoa_r+0x43a>
 8007976:	2d00      	cmp	r5, #0
 8007978:	f000 80e3 	beq.w	8007b42 <_dtoa_r+0x43a>
 800797c:	ed9d 7b00 	vldr	d7, [sp]
 8007980:	f1ba 0f00 	cmp.w	sl, #0
 8007984:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007988:	dd74      	ble.n	8007a74 <_dtoa_r+0x36c>
 800798a:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <_dtoa_r+0x32c>)
 800798c:	f00a 030f 	and.w	r3, sl, #15
 8007990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007994:	ed93 7b00 	vldr	d7, [r3]
 8007998:	ea4f 162a 	mov.w	r6, sl, asr #4
 800799c:	06f0      	lsls	r0, r6, #27
 800799e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80079a2:	d565      	bpl.n	8007a70 <_dtoa_r+0x368>
 80079a4:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <_dtoa_r+0x330>)
 80079a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ae:	f7f8 ff5d 	bl	800086c <__aeabi_ddiv>
 80079b2:	e9cd 0100 	strd	r0, r1, [sp]
 80079b6:	f006 060f 	and.w	r6, r6, #15
 80079ba:	2503      	movs	r5, #3
 80079bc:	4f1e      	ldr	r7, [pc, #120]	; (8007a38 <_dtoa_r+0x330>)
 80079be:	e04c      	b.n	8007a5a <_dtoa_r+0x352>
 80079c0:	2301      	movs	r3, #1
 80079c2:	930a      	str	r3, [sp, #40]	; 0x28
 80079c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c6:	4453      	add	r3, sl
 80079c8:	f103 0901 	add.w	r9, r3, #1
 80079cc:	9302      	str	r3, [sp, #8]
 80079ce:	464b      	mov	r3, r9
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	bfb8      	it	lt
 80079d4:	2301      	movlt	r3, #1
 80079d6:	e7ba      	b.n	800794e <_dtoa_r+0x246>
 80079d8:	2300      	movs	r3, #0
 80079da:	e7b2      	b.n	8007942 <_dtoa_r+0x23a>
 80079dc:	2300      	movs	r3, #0
 80079de:	e7f0      	b.n	80079c2 <_dtoa_r+0x2ba>
 80079e0:	2501      	movs	r5, #1
 80079e2:	2300      	movs	r3, #0
 80079e4:	9306      	str	r3, [sp, #24]
 80079e6:	950a      	str	r5, [sp, #40]	; 0x28
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	4699      	mov	r9, r3
 80079f0:	2200      	movs	r2, #0
 80079f2:	2312      	movs	r3, #18
 80079f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80079f6:	e7aa      	b.n	800794e <_dtoa_r+0x246>
 80079f8:	2301      	movs	r3, #1
 80079fa:	930a      	str	r3, [sp, #40]	; 0x28
 80079fc:	e7f4      	b.n	80079e8 <_dtoa_r+0x2e0>
 80079fe:	2301      	movs	r3, #1
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	4699      	mov	r9, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x2ec>
 8007a08:	3101      	adds	r1, #1
 8007a0a:	6071      	str	r1, [r6, #4]
 8007a0c:	0052      	lsls	r2, r2, #1
 8007a0e:	e7a2      	b.n	8007956 <_dtoa_r+0x24e>
 8007a10:	636f4361 	.word	0x636f4361
 8007a14:	3fd287a7 	.word	0x3fd287a7
 8007a18:	8b60c8b3 	.word	0x8b60c8b3
 8007a1c:	3fc68a28 	.word	0x3fc68a28
 8007a20:	509f79fb 	.word	0x509f79fb
 8007a24:	3fd34413 	.word	0x3fd34413
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	080091b9 	.word	0x080091b9
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	08009218 	.word	0x08009218
 8007a38:	080091f0 	.word	0x080091f0
 8007a3c:	080091e5 	.word	0x080091e5
 8007a40:	07f1      	lsls	r1, r6, #31
 8007a42:	d508      	bpl.n	8007a56 <_dtoa_r+0x34e>
 8007a44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a4c:	f7f8 fde4 	bl	8000618 <__aeabi_dmul>
 8007a50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a54:	3501      	adds	r5, #1
 8007a56:	1076      	asrs	r6, r6, #1
 8007a58:	3708      	adds	r7, #8
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d1f0      	bne.n	8007a40 <_dtoa_r+0x338>
 8007a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a66:	f7f8 ff01 	bl	800086c <__aeabi_ddiv>
 8007a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a6e:	e01a      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007a70:	2502      	movs	r5, #2
 8007a72:	e7a3      	b.n	80079bc <_dtoa_r+0x2b4>
 8007a74:	f000 80a0 	beq.w	8007bb8 <_dtoa_r+0x4b0>
 8007a78:	f1ca 0600 	rsb	r6, sl, #0
 8007a7c:	4b9f      	ldr	r3, [pc, #636]	; (8007cfc <_dtoa_r+0x5f4>)
 8007a7e:	4fa0      	ldr	r7, [pc, #640]	; (8007d00 <_dtoa_r+0x5f8>)
 8007a80:	f006 020f 	and.w	r2, r6, #15
 8007a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a90:	f7f8 fdc2 	bl	8000618 <__aeabi_dmul>
 8007a94:	e9cd 0100 	strd	r0, r1, [sp]
 8007a98:	1136      	asrs	r6, r6, #4
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2502      	movs	r5, #2
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d17f      	bne.n	8007ba2 <_dtoa_r+0x49a>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e1      	bne.n	8007a6a <_dtoa_r+0x362>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8087 	beq.w	8007bbc <_dtoa_r+0x4b4>
 8007aae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	4b93      	ldr	r3, [pc, #588]	; (8007d04 <_dtoa_r+0x5fc>)
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f9 f81f 	bl	8000afc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d07c      	beq.n	8007bbc <_dtoa_r+0x4b4>
 8007ac2:	f1b9 0f00 	cmp.w	r9, #0
 8007ac6:	d079      	beq.n	8007bbc <_dtoa_r+0x4b4>
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd35      	ble.n	8007b3a <_dtoa_r+0x432>
 8007ace:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4b8b      	ldr	r3, [pc, #556]	; (8007d08 <_dtoa_r+0x600>)
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7f8 fd9c 	bl	8000618 <__aeabi_dmul>
 8007ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ae4:	9f02      	ldr	r7, [sp, #8]
 8007ae6:	3501      	adds	r5, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7f8 fd2b 	bl	8000544 <__aeabi_i2d>
 8007aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af2:	f7f8 fd91 	bl	8000618 <__aeabi_dmul>
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b84      	ldr	r3, [pc, #528]	; (8007d0c <_dtoa_r+0x604>)
 8007afa:	f7f8 fbd7 	bl	80002ac <__adddf3>
 8007afe:	4605      	mov	r5, r0
 8007b00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	d15d      	bne.n	8007bc4 <_dtoa_r+0x4bc>
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <_dtoa_r+0x608>)
 8007b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b10:	f7f8 fbca 	bl	80002a8 <__aeabi_dsub>
 8007b14:	462a      	mov	r2, r5
 8007b16:	4633      	mov	r3, r6
 8007b18:	e9cd 0100 	strd	r0, r1, [sp]
 8007b1c:	f7f9 f80c 	bl	8000b38 <__aeabi_dcmpgt>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f040 8288 	bne.w	8008036 <_dtoa_r+0x92e>
 8007b26:	462a      	mov	r2, r5
 8007b28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b30:	f7f8 ffe4 	bl	8000afc <__aeabi_dcmplt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f040 827c 	bne.w	8008032 <_dtoa_r+0x92a>
 8007b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f2c0 8150 	blt.w	8007dea <_dtoa_r+0x6e2>
 8007b4a:	f1ba 0f0e 	cmp.w	sl, #14
 8007b4e:	f300 814c 	bgt.w	8007dea <_dtoa_r+0x6e2>
 8007b52:	4b6a      	ldr	r3, [pc, #424]	; (8007cfc <_dtoa_r+0x5f4>)
 8007b54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b58:	ed93 7b00 	vldr	d7, [r3]
 8007b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b64:	f280 80d8 	bge.w	8007d18 <_dtoa_r+0x610>
 8007b68:	f1b9 0f00 	cmp.w	r9, #0
 8007b6c:	f300 80d4 	bgt.w	8007d18 <_dtoa_r+0x610>
 8007b70:	f040 825e 	bne.w	8008030 <_dtoa_r+0x928>
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b66      	ldr	r3, [pc, #408]	; (8007d10 <_dtoa_r+0x608>)
 8007b78:	ec51 0b17 	vmov	r0, r1, d7
 8007b7c:	f7f8 fd4c 	bl	8000618 <__aeabi_dmul>
 8007b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b84:	f7f8 ffce 	bl	8000b24 <__aeabi_dcmpge>
 8007b88:	464f      	mov	r7, r9
 8007b8a:	464e      	mov	r6, r9
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 8234 	bne.w	8007ffa <_dtoa_r+0x8f2>
 8007b92:	2331      	movs	r3, #49	; 0x31
 8007b94:	f10b 0501 	add.w	r5, fp, #1
 8007b98:	f88b 3000 	strb.w	r3, [fp]
 8007b9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ba0:	e22f      	b.n	8008002 <_dtoa_r+0x8fa>
 8007ba2:	07f2      	lsls	r2, r6, #31
 8007ba4:	d505      	bpl.n	8007bb2 <_dtoa_r+0x4aa>
 8007ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007baa:	f7f8 fd35 	bl	8000618 <__aeabi_dmul>
 8007bae:	3501      	adds	r5, #1
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	1076      	asrs	r6, r6, #1
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	e772      	b.n	8007a9e <_dtoa_r+0x396>
 8007bb8:	2502      	movs	r5, #2
 8007bba:	e774      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007bbc:	f8cd a020 	str.w	sl, [sp, #32]
 8007bc0:	464f      	mov	r7, r9
 8007bc2:	e791      	b.n	8007ae8 <_dtoa_r+0x3e0>
 8007bc4:	4b4d      	ldr	r3, [pc, #308]	; (8007cfc <_dtoa_r+0x5f4>)
 8007bc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d047      	beq.n	8007c64 <_dtoa_r+0x55c>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	2000      	movs	r0, #0
 8007bda:	494e      	ldr	r1, [pc, #312]	; (8007d14 <_dtoa_r+0x60c>)
 8007bdc:	f7f8 fe46 	bl	800086c <__aeabi_ddiv>
 8007be0:	462a      	mov	r2, r5
 8007be2:	4633      	mov	r3, r6
 8007be4:	f7f8 fb60 	bl	80002a8 <__aeabi_dsub>
 8007be8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007bec:	465d      	mov	r5, fp
 8007bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf2:	f7f8 ffc1 	bl	8000b78 <__aeabi_d2iz>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	f7f8 fca4 	bl	8000544 <__aeabi_i2d>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c04:	f7f8 fb50 	bl	80002a8 <__aeabi_dsub>
 8007c08:	3630      	adds	r6, #48	; 0x30
 8007c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c12:	e9cd 0100 	strd	r0, r1, [sp]
 8007c16:	f7f8 ff71 	bl	8000afc <__aeabi_dcmplt>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d163      	bne.n	8007ce6 <_dtoa_r+0x5de>
 8007c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c22:	2000      	movs	r0, #0
 8007c24:	4937      	ldr	r1, [pc, #220]	; (8007d04 <_dtoa_r+0x5fc>)
 8007c26:	f7f8 fb3f 	bl	80002a8 <__aeabi_dsub>
 8007c2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c2e:	f7f8 ff65 	bl	8000afc <__aeabi_dcmplt>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f040 80b7 	bne.w	8007da6 <_dtoa_r+0x69e>
 8007c38:	eba5 030b 	sub.w	r3, r5, fp
 8007c3c:	429f      	cmp	r7, r3
 8007c3e:	f77f af7c 	ble.w	8007b3a <_dtoa_r+0x432>
 8007c42:	2200      	movs	r2, #0
 8007c44:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <_dtoa_r+0x600>)
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c4a:	f7f8 fce5 	bl	8000618 <__aeabi_dmul>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c54:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <_dtoa_r+0x600>)
 8007c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c5a:	f7f8 fcdd 	bl	8000618 <__aeabi_dmul>
 8007c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007c62:	e7c4      	b.n	8007bee <_dtoa_r+0x4e6>
 8007c64:	462a      	mov	r2, r5
 8007c66:	4633      	mov	r3, r6
 8007c68:	f7f8 fcd6 	bl	8000618 <__aeabi_dmul>
 8007c6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c70:	eb0b 0507 	add.w	r5, fp, r7
 8007c74:	465e      	mov	r6, fp
 8007c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c7a:	f7f8 ff7d 	bl	8000b78 <__aeabi_d2iz>
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7f8 fc60 	bl	8000544 <__aeabi_i2d>
 8007c84:	3730      	adds	r7, #48	; 0x30
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c8e:	f7f8 fb0b 	bl	80002a8 <__aeabi_dsub>
 8007c92:	f806 7b01 	strb.w	r7, [r6], #1
 8007c96:	42ae      	cmp	r6, r5
 8007c98:	e9cd 0100 	strd	r0, r1, [sp]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	d126      	bne.n	8007cf0 <_dtoa_r+0x5e8>
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <_dtoa_r+0x60c>)
 8007ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ca8:	f7f8 fb00 	bl	80002ac <__adddf3>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb4:	f7f8 ff40 	bl	8000b38 <__aeabi_dcmpgt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d174      	bne.n	8007da6 <_dtoa_r+0x69e>
 8007cbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4914      	ldr	r1, [pc, #80]	; (8007d14 <_dtoa_r+0x60c>)
 8007cc4:	f7f8 faf0 	bl	80002a8 <__aeabi_dsub>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd0:	f7f8 ff14 	bl	8000afc <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f af30 	beq.w	8007b3a <_dtoa_r+0x432>
 8007cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ce4:	d002      	beq.n	8007cec <_dtoa_r+0x5e4>
 8007ce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007cea:	e04a      	b.n	8007d82 <_dtoa_r+0x67a>
 8007cec:	4615      	mov	r5, r2
 8007cee:	e7f4      	b.n	8007cda <_dtoa_r+0x5d2>
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_dtoa_r+0x600>)
 8007cf2:	f7f8 fc91 	bl	8000618 <__aeabi_dmul>
 8007cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cfa:	e7bc      	b.n	8007c76 <_dtoa_r+0x56e>
 8007cfc:	08009218 	.word	0x08009218
 8007d00:	080091f0 	.word	0x080091f0
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	401c0000 	.word	0x401c0000
 8007d10:	40140000 	.word	0x40140000
 8007d14:	3fe00000 	.word	0x3fe00000
 8007d18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d1c:	465d      	mov	r5, fp
 8007d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fda1 	bl	800086c <__aeabi_ddiv>
 8007d2a:	f7f8 ff25 	bl	8000b78 <__aeabi_d2iz>
 8007d2e:	4680      	mov	r8, r0
 8007d30:	f7f8 fc08 	bl	8000544 <__aeabi_i2d>
 8007d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d38:	f7f8 fc6e 	bl	8000618 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007d48:	f7f8 faae 	bl	80002a8 <__aeabi_dsub>
 8007d4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d50:	eba5 060b 	sub.w	r6, r5, fp
 8007d54:	45b1      	cmp	r9, r6
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	d139      	bne.n	8007dd0 <_dtoa_r+0x6c8>
 8007d5c:	f7f8 faa6 	bl	80002ac <__adddf3>
 8007d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	f7f8 fee6 	bl	8000b38 <__aeabi_dcmpgt>
 8007d6c:	b9c8      	cbnz	r0, 8007da2 <_dtoa_r+0x69a>
 8007d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 feb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d7a:	b110      	cbz	r0, 8007d82 <_dtoa_r+0x67a>
 8007d7c:	f018 0f01 	tst.w	r8, #1
 8007d80:	d10f      	bne.n	8007da2 <_dtoa_r+0x69a>
 8007d82:	9904      	ldr	r1, [sp, #16]
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 facc 	bl	8008322 <_Bfree>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d8e:	702b      	strb	r3, [r5, #0]
 8007d90:	f10a 0301 	add.w	r3, sl, #1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8241 	beq.w	8008220 <_dtoa_r+0xb18>
 8007d9e:	601d      	str	r5, [r3, #0]
 8007da0:	e23e      	b.n	8008220 <_dtoa_r+0xb18>
 8007da2:	f8cd a020 	str.w	sl, [sp, #32]
 8007da6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007daa:	2a39      	cmp	r2, #57	; 0x39
 8007dac:	f105 33ff 	add.w	r3, r5, #4294967295
 8007db0:	d108      	bne.n	8007dc4 <_dtoa_r+0x6bc>
 8007db2:	459b      	cmp	fp, r3
 8007db4:	d10a      	bne.n	8007dcc <_dtoa_r+0x6c4>
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	2330      	movs	r3, #48	; 0x30
 8007dbe:	f88b 3000 	strb.w	r3, [fp]
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	3201      	adds	r2, #1
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e78c      	b.n	8007ce6 <_dtoa_r+0x5de>
 8007dcc:	461d      	mov	r5, r3
 8007dce:	e7ea      	b.n	8007da6 <_dtoa_r+0x69e>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4b9b      	ldr	r3, [pc, #620]	; (8008040 <_dtoa_r+0x938>)
 8007dd4:	f7f8 fc20 	bl	8000618 <__aeabi_dmul>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	f7f8 fe82 	bl	8000ae8 <__aeabi_dcmpeq>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d09a      	beq.n	8007d1e <_dtoa_r+0x616>
 8007de8:	e7cb      	b.n	8007d82 <_dtoa_r+0x67a>
 8007dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	f000 808b 	beq.w	8007f08 <_dtoa_r+0x800>
 8007df2:	9a06      	ldr	r2, [sp, #24]
 8007df4:	2a01      	cmp	r2, #1
 8007df6:	dc6e      	bgt.n	8007ed6 <_dtoa_r+0x7ce>
 8007df8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d067      	beq.n	8007ece <_dtoa_r+0x7c6>
 8007dfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e02:	9f07      	ldr	r7, [sp, #28]
 8007e04:	9d05      	ldr	r5, [sp, #20]
 8007e06:	9a05      	ldr	r2, [sp, #20]
 8007e08:	2101      	movs	r1, #1
 8007e0a:	441a      	add	r2, r3
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	9205      	str	r2, [sp, #20]
 8007e10:	4498      	add	r8, r3
 8007e12:	f000 fb26 	bl	8008462 <__i2b>
 8007e16:	4606      	mov	r6, r0
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	dd0c      	ble.n	8007e36 <_dtoa_r+0x72e>
 8007e1c:	f1b8 0f00 	cmp.w	r8, #0
 8007e20:	dd09      	ble.n	8007e36 <_dtoa_r+0x72e>
 8007e22:	4545      	cmp	r5, r8
 8007e24:	9a05      	ldr	r2, [sp, #20]
 8007e26:	462b      	mov	r3, r5
 8007e28:	bfa8      	it	ge
 8007e2a:	4643      	movge	r3, r8
 8007e2c:	1ad2      	subs	r2, r2, r3
 8007e2e:	9205      	str	r2, [sp, #20]
 8007e30:	1aed      	subs	r5, r5, r3
 8007e32:	eba8 0803 	sub.w	r8, r8, r3
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	b1eb      	cbz	r3, 8007e76 <_dtoa_r+0x76e>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d067      	beq.n	8007f10 <_dtoa_r+0x808>
 8007e40:	b18f      	cbz	r7, 8007e66 <_dtoa_r+0x75e>
 8007e42:	4631      	mov	r1, r6
 8007e44:	463a      	mov	r2, r7
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fbaa 	bl	80085a0 <__pow5mult>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	4601      	mov	r1, r0
 8007e50:	4606      	mov	r6, r0
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fb0e 	bl	8008474 <__multiply>
 8007e58:	9904      	ldr	r1, [sp, #16]
 8007e5a:	9008      	str	r0, [sp, #32]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fa60 	bl	8008322 <_Bfree>
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	9b07      	ldr	r3, [sp, #28]
 8007e68:	1bda      	subs	r2, r3, r7
 8007e6a:	d004      	beq.n	8007e76 <_dtoa_r+0x76e>
 8007e6c:	9904      	ldr	r1, [sp, #16]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fb96 	bl	80085a0 <__pow5mult>
 8007e74:	9004      	str	r0, [sp, #16]
 8007e76:	2101      	movs	r1, #1
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 faf2 	bl	8008462 <__i2b>
 8007e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e80:	4607      	mov	r7, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 81d0 	beq.w	8008228 <_dtoa_r+0xb20>
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fb87 	bl	80085a0 <__pow5mult>
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	4607      	mov	r7, r0
 8007e98:	dc40      	bgt.n	8007f1c <_dtoa_r+0x814>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d139      	bne.n	8007f14 <_dtoa_r+0x80c>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d136      	bne.n	8007f18 <_dtoa_r+0x810>
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	051b      	lsls	r3, r3, #20
 8007eb4:	b12b      	cbz	r3, 8007ec2 <_dtoa_r+0x7ba>
 8007eb6:	9b05      	ldr	r3, [sp, #20]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	f108 0801 	add.w	r8, r8, #1
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12a      	bne.n	8007f20 <_dtoa_r+0x818>
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e030      	b.n	8007f30 <_dtoa_r+0x828>
 8007ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ed0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ed4:	e795      	b.n	8007e02 <_dtoa_r+0x6fa>
 8007ed6:	9b07      	ldr	r3, [sp, #28]
 8007ed8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007edc:	42bb      	cmp	r3, r7
 8007ede:	bfbf      	itttt	lt
 8007ee0:	9b07      	ldrlt	r3, [sp, #28]
 8007ee2:	9707      	strlt	r7, [sp, #28]
 8007ee4:	1afa      	sublt	r2, r7, r3
 8007ee6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ee8:	bfbb      	ittet	lt
 8007eea:	189b      	addlt	r3, r3, r2
 8007eec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007eee:	1bdf      	subge	r7, r3, r7
 8007ef0:	2700      	movlt	r7, #0
 8007ef2:	f1b9 0f00 	cmp.w	r9, #0
 8007ef6:	bfb5      	itete	lt
 8007ef8:	9b05      	ldrlt	r3, [sp, #20]
 8007efa:	9d05      	ldrge	r5, [sp, #20]
 8007efc:	eba3 0509 	sublt.w	r5, r3, r9
 8007f00:	464b      	movge	r3, r9
 8007f02:	bfb8      	it	lt
 8007f04:	2300      	movlt	r3, #0
 8007f06:	e77e      	b.n	8007e06 <_dtoa_r+0x6fe>
 8007f08:	9f07      	ldr	r7, [sp, #28]
 8007f0a:	9d05      	ldr	r5, [sp, #20]
 8007f0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f0e:	e783      	b.n	8007e18 <_dtoa_r+0x710>
 8007f10:	9a07      	ldr	r2, [sp, #28]
 8007f12:	e7ab      	b.n	8007e6c <_dtoa_r+0x764>
 8007f14:	2300      	movs	r3, #0
 8007f16:	e7d4      	b.n	8007ec2 <_dtoa_r+0x7ba>
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	e7d2      	b.n	8007ec2 <_dtoa_r+0x7ba>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007f26:	6918      	ldr	r0, [r3, #16]
 8007f28:	f000 fa4d 	bl	80083c6 <__hi0bits>
 8007f2c:	f1c0 0020 	rsb	r0, r0, #32
 8007f30:	4440      	add	r0, r8
 8007f32:	f010 001f 	ands.w	r0, r0, #31
 8007f36:	d047      	beq.n	8007fc8 <_dtoa_r+0x8c0>
 8007f38:	f1c0 0320 	rsb	r3, r0, #32
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	dd3b      	ble.n	8007fb8 <_dtoa_r+0x8b0>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	f1c0 001c 	rsb	r0, r0, #28
 8007f46:	4403      	add	r3, r0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	4405      	add	r5, r0
 8007f4c:	4480      	add	r8, r0
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd05      	ble.n	8007f60 <_dtoa_r+0x858>
 8007f54:	461a      	mov	r2, r3
 8007f56:	9904      	ldr	r1, [sp, #16]
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fb6f 	bl	800863c <__lshift>
 8007f5e:	9004      	str	r0, [sp, #16]
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x86a>
 8007f66:	4639      	mov	r1, r7
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fb66 	bl	800863c <__lshift>
 8007f70:	4607      	mov	r7, r0
 8007f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f74:	b353      	cbz	r3, 8007fcc <_dtoa_r+0x8c4>
 8007f76:	4639      	mov	r1, r7
 8007f78:	9804      	ldr	r0, [sp, #16]
 8007f7a:	f000 fbb3 	bl	80086e4 <__mcmp>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	da24      	bge.n	8007fcc <_dtoa_r+0x8c4>
 8007f82:	2300      	movs	r3, #0
 8007f84:	220a      	movs	r2, #10
 8007f86:	9904      	ldr	r1, [sp, #16]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 f9e1 	bl	8008350 <__multadd>
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	9004      	str	r0, [sp, #16]
 8007f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 814d 	beq.w	8008236 <_dtoa_r+0xb2e>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f9d4 	bl	8008350 <__multadd>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	dc4f      	bgt.n	8008050 <_dtoa_r+0x948>
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dd4c      	ble.n	8008050 <_dtoa_r+0x948>
 8007fb6:	e011      	b.n	8007fdc <_dtoa_r+0x8d4>
 8007fb8:	d0c9      	beq.n	8007f4e <_dtoa_r+0x846>
 8007fba:	9a05      	ldr	r2, [sp, #20]
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	441a      	add	r2, r3
 8007fc0:	9205      	str	r2, [sp, #20]
 8007fc2:	441d      	add	r5, r3
 8007fc4:	4498      	add	r8, r3
 8007fc6:	e7c2      	b.n	8007f4e <_dtoa_r+0x846>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e7f6      	b.n	8007fba <_dtoa_r+0x8b2>
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	dc38      	bgt.n	8008044 <_dtoa_r+0x93c>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	dd35      	ble.n	8008044 <_dtoa_r+0x93c>
 8007fd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	b963      	cbnz	r3, 8007ffa <_dtoa_r+0x8f2>
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 f9b3 	bl	8008350 <__multadd>
 8007fea:	4601      	mov	r1, r0
 8007fec:	4607      	mov	r7, r0
 8007fee:	9804      	ldr	r0, [sp, #16]
 8007ff0:	f000 fb78 	bl	80086e4 <__mcmp>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	f73f adcc 	bgt.w	8007b92 <_dtoa_r+0x48a>
 8007ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffc:	465d      	mov	r5, fp
 8007ffe:	ea6f 0a03 	mvn.w	sl, r3
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	4639      	mov	r1, r7
 8008008:	4620      	mov	r0, r4
 800800a:	f000 f98a 	bl	8008322 <_Bfree>
 800800e:	2e00      	cmp	r6, #0
 8008010:	f43f aeb7 	beq.w	8007d82 <_dtoa_r+0x67a>
 8008014:	f1b9 0f00 	cmp.w	r9, #0
 8008018:	d005      	beq.n	8008026 <_dtoa_r+0x91e>
 800801a:	45b1      	cmp	r9, r6
 800801c:	d003      	beq.n	8008026 <_dtoa_r+0x91e>
 800801e:	4649      	mov	r1, r9
 8008020:	4620      	mov	r0, r4
 8008022:	f000 f97e 	bl	8008322 <_Bfree>
 8008026:	4631      	mov	r1, r6
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f97a 	bl	8008322 <_Bfree>
 800802e:	e6a8      	b.n	8007d82 <_dtoa_r+0x67a>
 8008030:	2700      	movs	r7, #0
 8008032:	463e      	mov	r6, r7
 8008034:	e7e1      	b.n	8007ffa <_dtoa_r+0x8f2>
 8008036:	f8dd a020 	ldr.w	sl, [sp, #32]
 800803a:	463e      	mov	r6, r7
 800803c:	e5a9      	b.n	8007b92 <_dtoa_r+0x48a>
 800803e:	bf00      	nop
 8008040:	40240000 	.word	0x40240000
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	f8cd 9008 	str.w	r9, [sp, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80fa 	beq.w	8008244 <_dtoa_r+0xb3c>
 8008050:	2d00      	cmp	r5, #0
 8008052:	dd05      	ble.n	8008060 <_dtoa_r+0x958>
 8008054:	4631      	mov	r1, r6
 8008056:	462a      	mov	r2, r5
 8008058:	4620      	mov	r0, r4
 800805a:	f000 faef 	bl	800863c <__lshift>
 800805e:	4606      	mov	r6, r0
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d04c      	beq.n	8008100 <_dtoa_r+0x9f8>
 8008066:	6871      	ldr	r1, [r6, #4]
 8008068:	4620      	mov	r0, r4
 800806a:	f000 f926 	bl	80082ba <_Balloc>
 800806e:	6932      	ldr	r2, [r6, #16]
 8008070:	3202      	adds	r2, #2
 8008072:	4605      	mov	r5, r0
 8008074:	0092      	lsls	r2, r2, #2
 8008076:	f106 010c 	add.w	r1, r6, #12
 800807a:	300c      	adds	r0, #12
 800807c:	f000 f912 	bl	80082a4 <memcpy>
 8008080:	2201      	movs	r2, #1
 8008082:	4629      	mov	r1, r5
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fad9 	bl	800863c <__lshift>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	f8cd b014 	str.w	fp, [sp, #20]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	46b1      	mov	r9, r6
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	4606      	mov	r6, r0
 800809a:	4639      	mov	r1, r7
 800809c:	9804      	ldr	r0, [sp, #16]
 800809e:	f7ff faa7 	bl	80075f0 <quorem>
 80080a2:	4649      	mov	r1, r9
 80080a4:	4605      	mov	r5, r0
 80080a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80080aa:	9804      	ldr	r0, [sp, #16]
 80080ac:	f000 fb1a 	bl	80086e4 <__mcmp>
 80080b0:	4632      	mov	r2, r6
 80080b2:	9000      	str	r0, [sp, #0]
 80080b4:	4639      	mov	r1, r7
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 fb2e 	bl	8008718 <__mdiff>
 80080bc:	68c3      	ldr	r3, [r0, #12]
 80080be:	4602      	mov	r2, r0
 80080c0:	bb03      	cbnz	r3, 8008104 <_dtoa_r+0x9fc>
 80080c2:	4601      	mov	r1, r0
 80080c4:	9008      	str	r0, [sp, #32]
 80080c6:	9804      	ldr	r0, [sp, #16]
 80080c8:	f000 fb0c 	bl	80086e4 <__mcmp>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	4603      	mov	r3, r0
 80080d0:	4611      	mov	r1, r2
 80080d2:	4620      	mov	r0, r4
 80080d4:	9308      	str	r3, [sp, #32]
 80080d6:	f000 f924 	bl	8008322 <_Bfree>
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	b9a3      	cbnz	r3, 8008108 <_dtoa_r+0xa00>
 80080de:	9a06      	ldr	r2, [sp, #24]
 80080e0:	b992      	cbnz	r2, 8008108 <_dtoa_r+0xa00>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	b982      	cbnz	r2, 8008108 <_dtoa_r+0xa00>
 80080e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080ea:	d029      	beq.n	8008140 <_dtoa_r+0xa38>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dd01      	ble.n	80080f6 <_dtoa_r+0x9ee>
 80080f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	1c5d      	adds	r5, r3, #1
 80080fa:	f883 8000 	strb.w	r8, [r3]
 80080fe:	e782      	b.n	8008006 <_dtoa_r+0x8fe>
 8008100:	4630      	mov	r0, r6
 8008102:	e7c2      	b.n	800808a <_dtoa_r+0x982>
 8008104:	2301      	movs	r3, #1
 8008106:	e7e3      	b.n	80080d0 <_dtoa_r+0x9c8>
 8008108:	9a00      	ldr	r2, [sp, #0]
 800810a:	2a00      	cmp	r2, #0
 800810c:	db04      	blt.n	8008118 <_dtoa_r+0xa10>
 800810e:	d125      	bne.n	800815c <_dtoa_r+0xa54>
 8008110:	9a06      	ldr	r2, [sp, #24]
 8008112:	bb1a      	cbnz	r2, 800815c <_dtoa_r+0xa54>
 8008114:	9a07      	ldr	r2, [sp, #28]
 8008116:	bb0a      	cbnz	r2, 800815c <_dtoa_r+0xa54>
 8008118:	2b00      	cmp	r3, #0
 800811a:	ddec      	ble.n	80080f6 <_dtoa_r+0x9ee>
 800811c:	2201      	movs	r2, #1
 800811e:	9904      	ldr	r1, [sp, #16]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fa8b 	bl	800863c <__lshift>
 8008126:	4639      	mov	r1, r7
 8008128:	9004      	str	r0, [sp, #16]
 800812a:	f000 fadb 	bl	80086e4 <__mcmp>
 800812e:	2800      	cmp	r0, #0
 8008130:	dc03      	bgt.n	800813a <_dtoa_r+0xa32>
 8008132:	d1e0      	bne.n	80080f6 <_dtoa_r+0x9ee>
 8008134:	f018 0f01 	tst.w	r8, #1
 8008138:	d0dd      	beq.n	80080f6 <_dtoa_r+0x9ee>
 800813a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800813e:	d1d8      	bne.n	80080f2 <_dtoa_r+0x9ea>
 8008140:	9b05      	ldr	r3, [sp, #20]
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	1c5d      	adds	r5, r3, #1
 8008146:	2339      	movs	r3, #57	; 0x39
 8008148:	7013      	strb	r3, [r2, #0]
 800814a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800814e:	2b39      	cmp	r3, #57	; 0x39
 8008150:	f105 32ff 	add.w	r2, r5, #4294967295
 8008154:	d04f      	beq.n	80081f6 <_dtoa_r+0xaee>
 8008156:	3301      	adds	r3, #1
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	e754      	b.n	8008006 <_dtoa_r+0x8fe>
 800815c:	9a05      	ldr	r2, [sp, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f102 0501 	add.w	r5, r2, #1
 8008164:	dd06      	ble.n	8008174 <_dtoa_r+0xa6c>
 8008166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800816a:	d0e9      	beq.n	8008140 <_dtoa_r+0xa38>
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	e7c2      	b.n	80080fa <_dtoa_r+0x9f2>
 8008174:	9a02      	ldr	r2, [sp, #8]
 8008176:	f805 8c01 	strb.w	r8, [r5, #-1]
 800817a:	eba5 030b 	sub.w	r3, r5, fp
 800817e:	4293      	cmp	r3, r2
 8008180:	d021      	beq.n	80081c6 <_dtoa_r+0xabe>
 8008182:	2300      	movs	r3, #0
 8008184:	220a      	movs	r2, #10
 8008186:	9904      	ldr	r1, [sp, #16]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f8e1 	bl	8008350 <__multadd>
 800818e:	45b1      	cmp	r9, r6
 8008190:	9004      	str	r0, [sp, #16]
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	f04f 020a 	mov.w	r2, #10
 800819a:	4649      	mov	r1, r9
 800819c:	4620      	mov	r0, r4
 800819e:	d105      	bne.n	80081ac <_dtoa_r+0xaa4>
 80081a0:	f000 f8d6 	bl	8008350 <__multadd>
 80081a4:	4681      	mov	r9, r0
 80081a6:	4606      	mov	r6, r0
 80081a8:	9505      	str	r5, [sp, #20]
 80081aa:	e776      	b.n	800809a <_dtoa_r+0x992>
 80081ac:	f000 f8d0 	bl	8008350 <__multadd>
 80081b0:	4631      	mov	r1, r6
 80081b2:	4681      	mov	r9, r0
 80081b4:	2300      	movs	r3, #0
 80081b6:	220a      	movs	r2, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f8c9 	bl	8008350 <__multadd>
 80081be:	4606      	mov	r6, r0
 80081c0:	e7f2      	b.n	80081a8 <_dtoa_r+0xaa0>
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	2201      	movs	r2, #1
 80081c8:	9904      	ldr	r1, [sp, #16]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fa36 	bl	800863c <__lshift>
 80081d0:	4639      	mov	r1, r7
 80081d2:	9004      	str	r0, [sp, #16]
 80081d4:	f000 fa86 	bl	80086e4 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dcb6      	bgt.n	800814a <_dtoa_r+0xa42>
 80081dc:	d102      	bne.n	80081e4 <_dtoa_r+0xadc>
 80081de:	f018 0f01 	tst.w	r8, #1
 80081e2:	d1b2      	bne.n	800814a <_dtoa_r+0xa42>
 80081e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081e8:	2b30      	cmp	r3, #48	; 0x30
 80081ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80081ee:	f47f af0a 	bne.w	8008006 <_dtoa_r+0x8fe>
 80081f2:	4615      	mov	r5, r2
 80081f4:	e7f6      	b.n	80081e4 <_dtoa_r+0xadc>
 80081f6:	4593      	cmp	fp, r2
 80081f8:	d105      	bne.n	8008206 <_dtoa_r+0xafe>
 80081fa:	2331      	movs	r3, #49	; 0x31
 80081fc:	f10a 0a01 	add.w	sl, sl, #1
 8008200:	f88b 3000 	strb.w	r3, [fp]
 8008204:	e6ff      	b.n	8008006 <_dtoa_r+0x8fe>
 8008206:	4615      	mov	r5, r2
 8008208:	e79f      	b.n	800814a <_dtoa_r+0xa42>
 800820a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008270 <_dtoa_r+0xb68>
 800820e:	e007      	b.n	8008220 <_dtoa_r+0xb18>
 8008210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008212:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008274 <_dtoa_r+0xb6c>
 8008216:	b11b      	cbz	r3, 8008220 <_dtoa_r+0xb18>
 8008218:	f10b 0308 	add.w	r3, fp, #8
 800821c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4658      	mov	r0, fp
 8008222:	b017      	add	sp, #92	; 0x5c
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	2b01      	cmp	r3, #1
 800822c:	f77f ae35 	ble.w	8007e9a <_dtoa_r+0x792>
 8008230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008232:	9307      	str	r3, [sp, #28]
 8008234:	e649      	b.n	8007eca <_dtoa_r+0x7c2>
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc03      	bgt.n	8008244 <_dtoa_r+0xb3c>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	2b02      	cmp	r3, #2
 8008240:	f73f aecc 	bgt.w	8007fdc <_dtoa_r+0x8d4>
 8008244:	465d      	mov	r5, fp
 8008246:	4639      	mov	r1, r7
 8008248:	9804      	ldr	r0, [sp, #16]
 800824a:	f7ff f9d1 	bl	80075f0 <quorem>
 800824e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008252:	f805 8b01 	strb.w	r8, [r5], #1
 8008256:	9a02      	ldr	r2, [sp, #8]
 8008258:	eba5 030b 	sub.w	r3, r5, fp
 800825c:	429a      	cmp	r2, r3
 800825e:	ddb0      	ble.n	80081c2 <_dtoa_r+0xaba>
 8008260:	2300      	movs	r3, #0
 8008262:	220a      	movs	r2, #10
 8008264:	9904      	ldr	r1, [sp, #16]
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f872 	bl	8008350 <__multadd>
 800826c:	9004      	str	r0, [sp, #16]
 800826e:	e7ea      	b.n	8008246 <_dtoa_r+0xb3e>
 8008270:	080091b8 	.word	0x080091b8
 8008274:	080091dc 	.word	0x080091dc

08008278 <_localeconv_r>:
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <_localeconv_r+0x14>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6a18      	ldr	r0, [r3, #32]
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <_localeconv_r+0x18>)
 8008280:	2800      	cmp	r0, #0
 8008282:	bf08      	it	eq
 8008284:	4618      	moveq	r0, r3
 8008286:	30f0      	adds	r0, #240	; 0xf0
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000174 	.word	0x20000174
 8008290:	200001d8 	.word	0x200001d8

08008294 <malloc>:
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <malloc+0xc>)
 8008296:	4601      	mov	r1, r0
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	f000 bb45 	b.w	8008928 <_malloc_r>
 800829e:	bf00      	nop
 80082a0:	20000174 	.word	0x20000174

080082a4 <memcpy>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	1e43      	subs	r3, r0, #1
 80082a8:	440a      	add	r2, r1
 80082aa:	4291      	cmp	r1, r2
 80082ac:	d100      	bne.n	80082b0 <memcpy+0xc>
 80082ae:	bd10      	pop	{r4, pc}
 80082b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b8:	e7f7      	b.n	80082aa <memcpy+0x6>

080082ba <_Balloc>:
 80082ba:	b570      	push	{r4, r5, r6, lr}
 80082bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082be:	4604      	mov	r4, r0
 80082c0:	460e      	mov	r6, r1
 80082c2:	b93d      	cbnz	r5, 80082d4 <_Balloc+0x1a>
 80082c4:	2010      	movs	r0, #16
 80082c6:	f7ff ffe5 	bl	8008294 <malloc>
 80082ca:	6260      	str	r0, [r4, #36]	; 0x24
 80082cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082d0:	6005      	str	r5, [r0, #0]
 80082d2:	60c5      	str	r5, [r0, #12]
 80082d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082d6:	68eb      	ldr	r3, [r5, #12]
 80082d8:	b183      	cbz	r3, 80082fc <_Balloc+0x42>
 80082da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80082e2:	b9b8      	cbnz	r0, 8008314 <_Balloc+0x5a>
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f506 	lsl.w	r5, r1, r6
 80082ea:	1d6a      	adds	r2, r5, #5
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fabe 	bl	8008870 <_calloc_r>
 80082f4:	b160      	cbz	r0, 8008310 <_Balloc+0x56>
 80082f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80082fa:	e00e      	b.n	800831a <_Balloc+0x60>
 80082fc:	2221      	movs	r2, #33	; 0x21
 80082fe:	2104      	movs	r1, #4
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fab5 	bl	8008870 <_calloc_r>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	60e8      	str	r0, [r5, #12]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e4      	bne.n	80082da <_Balloc+0x20>
 8008310:	2000      	movs	r0, #0
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800831a:	2300      	movs	r3, #0
 800831c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008320:	e7f7      	b.n	8008312 <_Balloc+0x58>

08008322 <_Bfree>:
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008326:	4606      	mov	r6, r0
 8008328:	460d      	mov	r5, r1
 800832a:	b93c      	cbnz	r4, 800833c <_Bfree+0x1a>
 800832c:	2010      	movs	r0, #16
 800832e:	f7ff ffb1 	bl	8008294 <malloc>
 8008332:	6270      	str	r0, [r6, #36]	; 0x24
 8008334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008338:	6004      	str	r4, [r0, #0]
 800833a:	60c4      	str	r4, [r0, #12]
 800833c:	b13d      	cbz	r5, 800834e <_Bfree+0x2c>
 800833e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008340:	686a      	ldr	r2, [r5, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008348:	6029      	str	r1, [r5, #0]
 800834a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800834e:	bd70      	pop	{r4, r5, r6, pc}

08008350 <__multadd>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	690d      	ldr	r5, [r1, #16]
 8008356:	461f      	mov	r7, r3
 8008358:	4606      	mov	r6, r0
 800835a:	460c      	mov	r4, r1
 800835c:	f101 0c14 	add.w	ip, r1, #20
 8008360:	2300      	movs	r3, #0
 8008362:	f8dc 0000 	ldr.w	r0, [ip]
 8008366:	b281      	uxth	r1, r0
 8008368:	fb02 7101 	mla	r1, r2, r1, r7
 800836c:	0c0f      	lsrs	r7, r1, #16
 800836e:	0c00      	lsrs	r0, r0, #16
 8008370:	fb02 7000 	mla	r0, r2, r0, r7
 8008374:	b289      	uxth	r1, r1
 8008376:	3301      	adds	r3, #1
 8008378:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800837c:	429d      	cmp	r5, r3
 800837e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008382:	f84c 1b04 	str.w	r1, [ip], #4
 8008386:	dcec      	bgt.n	8008362 <__multadd+0x12>
 8008388:	b1d7      	cbz	r7, 80083c0 <__multadd+0x70>
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	42ab      	cmp	r3, r5
 800838e:	dc12      	bgt.n	80083b6 <__multadd+0x66>
 8008390:	6861      	ldr	r1, [r4, #4]
 8008392:	4630      	mov	r0, r6
 8008394:	3101      	adds	r1, #1
 8008396:	f7ff ff90 	bl	80082ba <_Balloc>
 800839a:	6922      	ldr	r2, [r4, #16]
 800839c:	3202      	adds	r2, #2
 800839e:	f104 010c 	add.w	r1, r4, #12
 80083a2:	4680      	mov	r8, r0
 80083a4:	0092      	lsls	r2, r2, #2
 80083a6:	300c      	adds	r0, #12
 80083a8:	f7ff ff7c 	bl	80082a4 <memcpy>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ffb7 	bl	8008322 <_Bfree>
 80083b4:	4644      	mov	r4, r8
 80083b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083ba:	3501      	adds	r5, #1
 80083bc:	615f      	str	r7, [r3, #20]
 80083be:	6125      	str	r5, [r4, #16]
 80083c0:	4620      	mov	r0, r4
 80083c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083c6 <__hi0bits>:
 80083c6:	0c02      	lsrs	r2, r0, #16
 80083c8:	0412      	lsls	r2, r2, #16
 80083ca:	4603      	mov	r3, r0
 80083cc:	b9b2      	cbnz	r2, 80083fc <__hi0bits+0x36>
 80083ce:	0403      	lsls	r3, r0, #16
 80083d0:	2010      	movs	r0, #16
 80083d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083d6:	bf04      	itt	eq
 80083d8:	021b      	lsleq	r3, r3, #8
 80083da:	3008      	addeq	r0, #8
 80083dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083e0:	bf04      	itt	eq
 80083e2:	011b      	lsleq	r3, r3, #4
 80083e4:	3004      	addeq	r0, #4
 80083e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083ea:	bf04      	itt	eq
 80083ec:	009b      	lsleq	r3, r3, #2
 80083ee:	3002      	addeq	r0, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	db06      	blt.n	8008402 <__hi0bits+0x3c>
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	d503      	bpl.n	8008400 <__hi0bits+0x3a>
 80083f8:	3001      	adds	r0, #1
 80083fa:	4770      	bx	lr
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7e8      	b.n	80083d2 <__hi0bits+0xc>
 8008400:	2020      	movs	r0, #32
 8008402:	4770      	bx	lr

08008404 <__lo0bits>:
 8008404:	6803      	ldr	r3, [r0, #0]
 8008406:	f013 0207 	ands.w	r2, r3, #7
 800840a:	4601      	mov	r1, r0
 800840c:	d00b      	beq.n	8008426 <__lo0bits+0x22>
 800840e:	07da      	lsls	r2, r3, #31
 8008410:	d423      	bmi.n	800845a <__lo0bits+0x56>
 8008412:	0798      	lsls	r0, r3, #30
 8008414:	bf49      	itett	mi
 8008416:	085b      	lsrmi	r3, r3, #1
 8008418:	089b      	lsrpl	r3, r3, #2
 800841a:	2001      	movmi	r0, #1
 800841c:	600b      	strmi	r3, [r1, #0]
 800841e:	bf5c      	itt	pl
 8008420:	600b      	strpl	r3, [r1, #0]
 8008422:	2002      	movpl	r0, #2
 8008424:	4770      	bx	lr
 8008426:	b298      	uxth	r0, r3
 8008428:	b9a8      	cbnz	r0, 8008456 <__lo0bits+0x52>
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	2010      	movs	r0, #16
 800842e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008432:	bf04      	itt	eq
 8008434:	0a1b      	lsreq	r3, r3, #8
 8008436:	3008      	addeq	r0, #8
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	bf04      	itt	eq
 800843c:	091b      	lsreq	r3, r3, #4
 800843e:	3004      	addeq	r0, #4
 8008440:	079a      	lsls	r2, r3, #30
 8008442:	bf04      	itt	eq
 8008444:	089b      	lsreq	r3, r3, #2
 8008446:	3002      	addeq	r0, #2
 8008448:	07da      	lsls	r2, r3, #31
 800844a:	d402      	bmi.n	8008452 <__lo0bits+0x4e>
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	d006      	beq.n	800845e <__lo0bits+0x5a>
 8008450:	3001      	adds	r0, #1
 8008452:	600b      	str	r3, [r1, #0]
 8008454:	4770      	bx	lr
 8008456:	4610      	mov	r0, r2
 8008458:	e7e9      	b.n	800842e <__lo0bits+0x2a>
 800845a:	2000      	movs	r0, #0
 800845c:	4770      	bx	lr
 800845e:	2020      	movs	r0, #32
 8008460:	4770      	bx	lr

08008462 <__i2b>:
 8008462:	b510      	push	{r4, lr}
 8008464:	460c      	mov	r4, r1
 8008466:	2101      	movs	r1, #1
 8008468:	f7ff ff27 	bl	80082ba <_Balloc>
 800846c:	2201      	movs	r2, #1
 800846e:	6144      	str	r4, [r0, #20]
 8008470:	6102      	str	r2, [r0, #16]
 8008472:	bd10      	pop	{r4, pc}

08008474 <__multiply>:
 8008474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	4614      	mov	r4, r2
 800847a:	690a      	ldr	r2, [r1, #16]
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	429a      	cmp	r2, r3
 8008480:	bfb8      	it	lt
 8008482:	460b      	movlt	r3, r1
 8008484:	4688      	mov	r8, r1
 8008486:	bfbc      	itt	lt
 8008488:	46a0      	movlt	r8, r4
 800848a:	461c      	movlt	r4, r3
 800848c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008490:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008494:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800849c:	eb07 0609 	add.w	r6, r7, r9
 80084a0:	42b3      	cmp	r3, r6
 80084a2:	bfb8      	it	lt
 80084a4:	3101      	addlt	r1, #1
 80084a6:	f7ff ff08 	bl	80082ba <_Balloc>
 80084aa:	f100 0514 	add.w	r5, r0, #20
 80084ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80084b2:	462b      	mov	r3, r5
 80084b4:	2200      	movs	r2, #0
 80084b6:	4573      	cmp	r3, lr
 80084b8:	d316      	bcc.n	80084e8 <__multiply+0x74>
 80084ba:	f104 0214 	add.w	r2, r4, #20
 80084be:	f108 0114 	add.w	r1, r8, #20
 80084c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80084c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	9201      	str	r2, [sp, #4]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d80c      	bhi.n	80084ee <__multiply+0x7a>
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	dd03      	ble.n	80084e0 <__multiply+0x6c>
 80084d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d05d      	beq.n	800859c <__multiply+0x128>
 80084e0:	6106      	str	r6, [r0, #16]
 80084e2:	b003      	add	sp, #12
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e8:	f843 2b04 	str.w	r2, [r3], #4
 80084ec:	e7e3      	b.n	80084b6 <__multiply+0x42>
 80084ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80084f2:	f1bb 0f00 	cmp.w	fp, #0
 80084f6:	d023      	beq.n	8008540 <__multiply+0xcc>
 80084f8:	4689      	mov	r9, r1
 80084fa:	46ac      	mov	ip, r5
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	f859 4b04 	ldr.w	r4, [r9], #4
 8008504:	f8dc a000 	ldr.w	sl, [ip]
 8008508:	b2a3      	uxth	r3, r4
 800850a:	fa1f fa8a 	uxth.w	sl, sl
 800850e:	fb0b a303 	mla	r3, fp, r3, sl
 8008512:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008516:	f8dc 4000 	ldr.w	r4, [ip]
 800851a:	4443      	add	r3, r8
 800851c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008520:	fb0b 840a 	mla	r4, fp, sl, r8
 8008524:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008528:	46e2      	mov	sl, ip
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008530:	454f      	cmp	r7, r9
 8008532:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008536:	f84a 3b04 	str.w	r3, [sl], #4
 800853a:	d82b      	bhi.n	8008594 <__multiply+0x120>
 800853c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008546:	3204      	adds	r2, #4
 8008548:	f1ba 0f00 	cmp.w	sl, #0
 800854c:	d020      	beq.n	8008590 <__multiply+0x11c>
 800854e:	682b      	ldr	r3, [r5, #0]
 8008550:	4689      	mov	r9, r1
 8008552:	46a8      	mov	r8, r5
 8008554:	f04f 0b00 	mov.w	fp, #0
 8008558:	f8b9 c000 	ldrh.w	ip, [r9]
 800855c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008560:	fb0a 440c 	mla	r4, sl, ip, r4
 8008564:	445c      	add	r4, fp
 8008566:	46c4      	mov	ip, r8
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800856e:	f84c 3b04 	str.w	r3, [ip], #4
 8008572:	f859 3b04 	ldr.w	r3, [r9], #4
 8008576:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	fb0a b303 	mla	r3, sl, r3, fp
 8008580:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008584:	454f      	cmp	r7, r9
 8008586:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800858a:	d805      	bhi.n	8008598 <__multiply+0x124>
 800858c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008590:	3504      	adds	r5, #4
 8008592:	e79b      	b.n	80084cc <__multiply+0x58>
 8008594:	46d4      	mov	ip, sl
 8008596:	e7b3      	b.n	8008500 <__multiply+0x8c>
 8008598:	46e0      	mov	r8, ip
 800859a:	e7dd      	b.n	8008558 <__multiply+0xe4>
 800859c:	3e01      	subs	r6, #1
 800859e:	e799      	b.n	80084d4 <__multiply+0x60>

080085a0 <__pow5mult>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4615      	mov	r5, r2
 80085a6:	f012 0203 	ands.w	r2, r2, #3
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	d007      	beq.n	80085c0 <__pow5mult+0x20>
 80085b0:	3a01      	subs	r2, #1
 80085b2:	4c21      	ldr	r4, [pc, #132]	; (8008638 <__pow5mult+0x98>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ba:	f7ff fec9 	bl	8008350 <__multadd>
 80085be:	4607      	mov	r7, r0
 80085c0:	10ad      	asrs	r5, r5, #2
 80085c2:	d035      	beq.n	8008630 <__pow5mult+0x90>
 80085c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085c6:	b93c      	cbnz	r4, 80085d8 <__pow5mult+0x38>
 80085c8:	2010      	movs	r0, #16
 80085ca:	f7ff fe63 	bl	8008294 <malloc>
 80085ce:	6270      	str	r0, [r6, #36]	; 0x24
 80085d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d4:	6004      	str	r4, [r0, #0]
 80085d6:	60c4      	str	r4, [r0, #12]
 80085d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085e0:	b94c      	cbnz	r4, 80085f6 <__pow5mult+0x56>
 80085e2:	f240 2171 	movw	r1, #625	; 0x271
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ff3b 	bl	8008462 <__i2b>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80085f2:	4604      	mov	r4, r0
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	07eb      	lsls	r3, r5, #31
 80085fc:	d50a      	bpl.n	8008614 <__pow5mult+0x74>
 80085fe:	4639      	mov	r1, r7
 8008600:	4622      	mov	r2, r4
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff36 	bl	8008474 <__multiply>
 8008608:	4639      	mov	r1, r7
 800860a:	4681      	mov	r9, r0
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff fe88 	bl	8008322 <_Bfree>
 8008612:	464f      	mov	r7, r9
 8008614:	106d      	asrs	r5, r5, #1
 8008616:	d00b      	beq.n	8008630 <__pow5mult+0x90>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	b938      	cbnz	r0, 800862c <__pow5mult+0x8c>
 800861c:	4622      	mov	r2, r4
 800861e:	4621      	mov	r1, r4
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff ff27 	bl	8008474 <__multiply>
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	f8c0 8000 	str.w	r8, [r0]
 800862c:	4604      	mov	r4, r0
 800862e:	e7e4      	b.n	80085fa <__pow5mult+0x5a>
 8008630:	4638      	mov	r0, r7
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	bf00      	nop
 8008638:	080092e0 	.word	0x080092e0

0800863c <__lshift>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	6849      	ldr	r1, [r1, #4]
 800864a:	eb0a 0903 	add.w	r9, sl, r3
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	4607      	mov	r7, r0
 8008652:	4616      	mov	r6, r2
 8008654:	f109 0501 	add.w	r5, r9, #1
 8008658:	42ab      	cmp	r3, r5
 800865a:	db32      	blt.n	80086c2 <__lshift+0x86>
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff fe2c 	bl	80082ba <_Balloc>
 8008662:	2300      	movs	r3, #0
 8008664:	4680      	mov	r8, r0
 8008666:	f100 0114 	add.w	r1, r0, #20
 800866a:	461a      	mov	r2, r3
 800866c:	4553      	cmp	r3, sl
 800866e:	db2b      	blt.n	80086c8 <__lshift+0x8c>
 8008670:	6920      	ldr	r0, [r4, #16]
 8008672:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008676:	f104 0314 	add.w	r3, r4, #20
 800867a:	f016 021f 	ands.w	r2, r6, #31
 800867e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008682:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008686:	d025      	beq.n	80086d4 <__lshift+0x98>
 8008688:	f1c2 0e20 	rsb	lr, r2, #32
 800868c:	2000      	movs	r0, #0
 800868e:	681e      	ldr	r6, [r3, #0]
 8008690:	468a      	mov	sl, r1
 8008692:	4096      	lsls	r6, r2
 8008694:	4330      	orrs	r0, r6
 8008696:	f84a 0b04 	str.w	r0, [sl], #4
 800869a:	f853 0b04 	ldr.w	r0, [r3], #4
 800869e:	459c      	cmp	ip, r3
 80086a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80086a4:	d814      	bhi.n	80086d0 <__lshift+0x94>
 80086a6:	6048      	str	r0, [r1, #4]
 80086a8:	b108      	cbz	r0, 80086ae <__lshift+0x72>
 80086aa:	f109 0502 	add.w	r5, r9, #2
 80086ae:	3d01      	subs	r5, #1
 80086b0:	4638      	mov	r0, r7
 80086b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80086b6:	4621      	mov	r1, r4
 80086b8:	f7ff fe33 	bl	8008322 <_Bfree>
 80086bc:	4640      	mov	r0, r8
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	3101      	adds	r1, #1
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	e7c7      	b.n	8008658 <__lshift+0x1c>
 80086c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086cc:	3301      	adds	r3, #1
 80086ce:	e7cd      	b.n	800866c <__lshift+0x30>
 80086d0:	4651      	mov	r1, sl
 80086d2:	e7dc      	b.n	800868e <__lshift+0x52>
 80086d4:	3904      	subs	r1, #4
 80086d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086da:	f841 2f04 	str.w	r2, [r1, #4]!
 80086de:	459c      	cmp	ip, r3
 80086e0:	d8f9      	bhi.n	80086d6 <__lshift+0x9a>
 80086e2:	e7e4      	b.n	80086ae <__lshift+0x72>

080086e4 <__mcmp>:
 80086e4:	6903      	ldr	r3, [r0, #16]
 80086e6:	690a      	ldr	r2, [r1, #16]
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	b530      	push	{r4, r5, lr}
 80086ec:	d10c      	bne.n	8008708 <__mcmp+0x24>
 80086ee:	0092      	lsls	r2, r2, #2
 80086f0:	3014      	adds	r0, #20
 80086f2:	3114      	adds	r1, #20
 80086f4:	1884      	adds	r4, r0, r2
 80086f6:	4411      	add	r1, r2
 80086f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008700:	4295      	cmp	r5, r2
 8008702:	d003      	beq.n	800870c <__mcmp+0x28>
 8008704:	d305      	bcc.n	8008712 <__mcmp+0x2e>
 8008706:	2301      	movs	r3, #1
 8008708:	4618      	mov	r0, r3
 800870a:	bd30      	pop	{r4, r5, pc}
 800870c:	42a0      	cmp	r0, r4
 800870e:	d3f3      	bcc.n	80086f8 <__mcmp+0x14>
 8008710:	e7fa      	b.n	8008708 <__mcmp+0x24>
 8008712:	f04f 33ff 	mov.w	r3, #4294967295
 8008716:	e7f7      	b.n	8008708 <__mcmp+0x24>

08008718 <__mdiff>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	460d      	mov	r5, r1
 800871e:	4607      	mov	r7, r0
 8008720:	4611      	mov	r1, r2
 8008722:	4628      	mov	r0, r5
 8008724:	4614      	mov	r4, r2
 8008726:	f7ff ffdd 	bl	80086e4 <__mcmp>
 800872a:	1e06      	subs	r6, r0, #0
 800872c:	d108      	bne.n	8008740 <__mdiff+0x28>
 800872e:	4631      	mov	r1, r6
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff fdc2 	bl	80082ba <_Balloc>
 8008736:	2301      	movs	r3, #1
 8008738:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008740:	bfa4      	itt	ge
 8008742:	4623      	movge	r3, r4
 8008744:	462c      	movge	r4, r5
 8008746:	4638      	mov	r0, r7
 8008748:	6861      	ldr	r1, [r4, #4]
 800874a:	bfa6      	itte	ge
 800874c:	461d      	movge	r5, r3
 800874e:	2600      	movge	r6, #0
 8008750:	2601      	movlt	r6, #1
 8008752:	f7ff fdb2 	bl	80082ba <_Balloc>
 8008756:	692b      	ldr	r3, [r5, #16]
 8008758:	60c6      	str	r6, [r0, #12]
 800875a:	6926      	ldr	r6, [r4, #16]
 800875c:	f105 0914 	add.w	r9, r5, #20
 8008760:	f104 0214 	add.w	r2, r4, #20
 8008764:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008768:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800876c:	f100 0514 	add.w	r5, r0, #20
 8008770:	f04f 0e00 	mov.w	lr, #0
 8008774:	f852 ab04 	ldr.w	sl, [r2], #4
 8008778:	f859 4b04 	ldr.w	r4, [r9], #4
 800877c:	fa1e f18a 	uxtah	r1, lr, sl
 8008780:	b2a3      	uxth	r3, r4
 8008782:	1ac9      	subs	r1, r1, r3
 8008784:	0c23      	lsrs	r3, r4, #16
 8008786:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800878a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800878e:	b289      	uxth	r1, r1
 8008790:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008794:	45c8      	cmp	r8, r9
 8008796:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800879a:	4694      	mov	ip, r2
 800879c:	f845 3b04 	str.w	r3, [r5], #4
 80087a0:	d8e8      	bhi.n	8008774 <__mdiff+0x5c>
 80087a2:	45bc      	cmp	ip, r7
 80087a4:	d304      	bcc.n	80087b0 <__mdiff+0x98>
 80087a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087aa:	b183      	cbz	r3, 80087ce <__mdiff+0xb6>
 80087ac:	6106      	str	r6, [r0, #16]
 80087ae:	e7c5      	b.n	800873c <__mdiff+0x24>
 80087b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087b4:	fa1e f381 	uxtah	r3, lr, r1
 80087b8:	141a      	asrs	r2, r3, #16
 80087ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087be:	b29b      	uxth	r3, r3
 80087c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80087c8:	f845 3b04 	str.w	r3, [r5], #4
 80087cc:	e7e9      	b.n	80087a2 <__mdiff+0x8a>
 80087ce:	3e01      	subs	r6, #1
 80087d0:	e7e9      	b.n	80087a6 <__mdiff+0x8e>

080087d2 <__d2b>:
 80087d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087d6:	460e      	mov	r6, r1
 80087d8:	2101      	movs	r1, #1
 80087da:	ec59 8b10 	vmov	r8, r9, d0
 80087de:	4615      	mov	r5, r2
 80087e0:	f7ff fd6b 	bl	80082ba <_Balloc>
 80087e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80087e8:	4607      	mov	r7, r0
 80087ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ee:	bb34      	cbnz	r4, 800883e <__d2b+0x6c>
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	f1b8 0300 	subs.w	r3, r8, #0
 80087f6:	d027      	beq.n	8008848 <__d2b+0x76>
 80087f8:	a802      	add	r0, sp, #8
 80087fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80087fe:	f7ff fe01 	bl	8008404 <__lo0bits>
 8008802:	9900      	ldr	r1, [sp, #0]
 8008804:	b1f0      	cbz	r0, 8008844 <__d2b+0x72>
 8008806:	9a01      	ldr	r2, [sp, #4]
 8008808:	f1c0 0320 	rsb	r3, r0, #32
 800880c:	fa02 f303 	lsl.w	r3, r2, r3
 8008810:	430b      	orrs	r3, r1
 8008812:	40c2      	lsrs	r2, r0
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	9201      	str	r2, [sp, #4]
 8008818:	9b01      	ldr	r3, [sp, #4]
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2102      	movne	r1, #2
 8008822:	2101      	moveq	r1, #1
 8008824:	6139      	str	r1, [r7, #16]
 8008826:	b1c4      	cbz	r4, 800885a <__d2b+0x88>
 8008828:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800882c:	4404      	add	r4, r0
 800882e:	6034      	str	r4, [r6, #0]
 8008830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008834:	6028      	str	r0, [r5, #0]
 8008836:	4638      	mov	r0, r7
 8008838:	b003      	add	sp, #12
 800883a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800883e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008842:	e7d5      	b.n	80087f0 <__d2b+0x1e>
 8008844:	6179      	str	r1, [r7, #20]
 8008846:	e7e7      	b.n	8008818 <__d2b+0x46>
 8008848:	a801      	add	r0, sp, #4
 800884a:	f7ff fddb 	bl	8008404 <__lo0bits>
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	2101      	movs	r1, #1
 8008854:	6139      	str	r1, [r7, #16]
 8008856:	3020      	adds	r0, #32
 8008858:	e7e5      	b.n	8008826 <__d2b+0x54>
 800885a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800885e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008862:	6030      	str	r0, [r6, #0]
 8008864:	6918      	ldr	r0, [r3, #16]
 8008866:	f7ff fdae 	bl	80083c6 <__hi0bits>
 800886a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800886e:	e7e1      	b.n	8008834 <__d2b+0x62>

08008870 <_calloc_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	fb02 f401 	mul.w	r4, r2, r1
 8008876:	4621      	mov	r1, r4
 8008878:	f000 f856 	bl	8008928 <_malloc_r>
 800887c:	4605      	mov	r5, r0
 800887e:	b118      	cbz	r0, 8008888 <_calloc_r+0x18>
 8008880:	4622      	mov	r2, r4
 8008882:	2100      	movs	r1, #0
 8008884:	f7fe fa30 	bl	8006ce8 <memset>
 8008888:	4628      	mov	r0, r5
 800888a:	bd38      	pop	{r3, r4, r5, pc}

0800888c <_free_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4605      	mov	r5, r0
 8008890:	2900      	cmp	r1, #0
 8008892:	d045      	beq.n	8008920 <_free_r+0x94>
 8008894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008898:	1f0c      	subs	r4, r1, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfb8      	it	lt
 800889e:	18e4      	addlt	r4, r4, r3
 80088a0:	f000 fa29 	bl	8008cf6 <__malloc_lock>
 80088a4:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <_free_r+0x98>)
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	4610      	mov	r0, r2
 80088aa:	b933      	cbnz	r3, 80088ba <_free_r+0x2e>
 80088ac:	6063      	str	r3, [r4, #4]
 80088ae:	6014      	str	r4, [r2, #0]
 80088b0:	4628      	mov	r0, r5
 80088b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b6:	f000 ba1f 	b.w	8008cf8 <__malloc_unlock>
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	d90c      	bls.n	80088d8 <_free_r+0x4c>
 80088be:	6821      	ldr	r1, [r4, #0]
 80088c0:	1862      	adds	r2, r4, r1
 80088c2:	4293      	cmp	r3, r2
 80088c4:	bf04      	itt	eq
 80088c6:	681a      	ldreq	r2, [r3, #0]
 80088c8:	685b      	ldreq	r3, [r3, #4]
 80088ca:	6063      	str	r3, [r4, #4]
 80088cc:	bf04      	itt	eq
 80088ce:	1852      	addeq	r2, r2, r1
 80088d0:	6022      	streq	r2, [r4, #0]
 80088d2:	6004      	str	r4, [r0, #0]
 80088d4:	e7ec      	b.n	80088b0 <_free_r+0x24>
 80088d6:	4613      	mov	r3, r2
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	b10a      	cbz	r2, 80088e0 <_free_r+0x54>
 80088dc:	42a2      	cmp	r2, r4
 80088de:	d9fa      	bls.n	80088d6 <_free_r+0x4a>
 80088e0:	6819      	ldr	r1, [r3, #0]
 80088e2:	1858      	adds	r0, r3, r1
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d10b      	bne.n	8008900 <_free_r+0x74>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	4401      	add	r1, r0
 80088ec:	1858      	adds	r0, r3, r1
 80088ee:	4282      	cmp	r2, r0
 80088f0:	6019      	str	r1, [r3, #0]
 80088f2:	d1dd      	bne.n	80088b0 <_free_r+0x24>
 80088f4:	6810      	ldr	r0, [r2, #0]
 80088f6:	6852      	ldr	r2, [r2, #4]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	4401      	add	r1, r0
 80088fc:	6019      	str	r1, [r3, #0]
 80088fe:	e7d7      	b.n	80088b0 <_free_r+0x24>
 8008900:	d902      	bls.n	8008908 <_free_r+0x7c>
 8008902:	230c      	movs	r3, #12
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	e7d3      	b.n	80088b0 <_free_r+0x24>
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	1821      	adds	r1, r4, r0
 800890c:	428a      	cmp	r2, r1
 800890e:	bf04      	itt	eq
 8008910:	6811      	ldreq	r1, [r2, #0]
 8008912:	6852      	ldreq	r2, [r2, #4]
 8008914:	6062      	str	r2, [r4, #4]
 8008916:	bf04      	itt	eq
 8008918:	1809      	addeq	r1, r1, r0
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	605c      	str	r4, [r3, #4]
 800891e:	e7c7      	b.n	80088b0 <_free_r+0x24>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	200007ec 	.word	0x200007ec

08008928 <_malloc_r>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	1ccd      	adds	r5, r1, #3
 800892c:	f025 0503 	bic.w	r5, r5, #3
 8008930:	3508      	adds	r5, #8
 8008932:	2d0c      	cmp	r5, #12
 8008934:	bf38      	it	cc
 8008936:	250c      	movcc	r5, #12
 8008938:	2d00      	cmp	r5, #0
 800893a:	4606      	mov	r6, r0
 800893c:	db01      	blt.n	8008942 <_malloc_r+0x1a>
 800893e:	42a9      	cmp	r1, r5
 8008940:	d903      	bls.n	800894a <_malloc_r+0x22>
 8008942:	230c      	movs	r3, #12
 8008944:	6033      	str	r3, [r6, #0]
 8008946:	2000      	movs	r0, #0
 8008948:	bd70      	pop	{r4, r5, r6, pc}
 800894a:	f000 f9d4 	bl	8008cf6 <__malloc_lock>
 800894e:	4a21      	ldr	r2, [pc, #132]	; (80089d4 <_malloc_r+0xac>)
 8008950:	6814      	ldr	r4, [r2, #0]
 8008952:	4621      	mov	r1, r4
 8008954:	b991      	cbnz	r1, 800897c <_malloc_r+0x54>
 8008956:	4c20      	ldr	r4, [pc, #128]	; (80089d8 <_malloc_r+0xb0>)
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	b91b      	cbnz	r3, 8008964 <_malloc_r+0x3c>
 800895c:	4630      	mov	r0, r6
 800895e:	f000 f98f 	bl	8008c80 <_sbrk_r>
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	4629      	mov	r1, r5
 8008966:	4630      	mov	r0, r6
 8008968:	f000 f98a 	bl	8008c80 <_sbrk_r>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d124      	bne.n	80089ba <_malloc_r+0x92>
 8008970:	230c      	movs	r3, #12
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	4630      	mov	r0, r6
 8008976:	f000 f9bf 	bl	8008cf8 <__malloc_unlock>
 800897a:	e7e4      	b.n	8008946 <_malloc_r+0x1e>
 800897c:	680b      	ldr	r3, [r1, #0]
 800897e:	1b5b      	subs	r3, r3, r5
 8008980:	d418      	bmi.n	80089b4 <_malloc_r+0x8c>
 8008982:	2b0b      	cmp	r3, #11
 8008984:	d90f      	bls.n	80089a6 <_malloc_r+0x7e>
 8008986:	600b      	str	r3, [r1, #0]
 8008988:	50cd      	str	r5, [r1, r3]
 800898a:	18cc      	adds	r4, r1, r3
 800898c:	4630      	mov	r0, r6
 800898e:	f000 f9b3 	bl	8008cf8 <__malloc_unlock>
 8008992:	f104 000b 	add.w	r0, r4, #11
 8008996:	1d23      	adds	r3, r4, #4
 8008998:	f020 0007 	bic.w	r0, r0, #7
 800899c:	1ac3      	subs	r3, r0, r3
 800899e:	d0d3      	beq.n	8008948 <_malloc_r+0x20>
 80089a0:	425a      	negs	r2, r3
 80089a2:	50e2      	str	r2, [r4, r3]
 80089a4:	e7d0      	b.n	8008948 <_malloc_r+0x20>
 80089a6:	428c      	cmp	r4, r1
 80089a8:	684b      	ldr	r3, [r1, #4]
 80089aa:	bf16      	itet	ne
 80089ac:	6063      	strne	r3, [r4, #4]
 80089ae:	6013      	streq	r3, [r2, #0]
 80089b0:	460c      	movne	r4, r1
 80089b2:	e7eb      	b.n	800898c <_malloc_r+0x64>
 80089b4:	460c      	mov	r4, r1
 80089b6:	6849      	ldr	r1, [r1, #4]
 80089b8:	e7cc      	b.n	8008954 <_malloc_r+0x2c>
 80089ba:	1cc4      	adds	r4, r0, #3
 80089bc:	f024 0403 	bic.w	r4, r4, #3
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d005      	beq.n	80089d0 <_malloc_r+0xa8>
 80089c4:	1a21      	subs	r1, r4, r0
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 f95a 	bl	8008c80 <_sbrk_r>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d0cf      	beq.n	8008970 <_malloc_r+0x48>
 80089d0:	6025      	str	r5, [r4, #0]
 80089d2:	e7db      	b.n	800898c <_malloc_r+0x64>
 80089d4:	200007ec 	.word	0x200007ec
 80089d8:	200007f0 	.word	0x200007f0

080089dc <__ssputs_r>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	688e      	ldr	r6, [r1, #8]
 80089e2:	429e      	cmp	r6, r3
 80089e4:	4682      	mov	sl, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	4690      	mov	r8, r2
 80089ea:	4699      	mov	r9, r3
 80089ec:	d837      	bhi.n	8008a5e <__ssputs_r+0x82>
 80089ee:	898a      	ldrh	r2, [r1, #12]
 80089f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089f4:	d031      	beq.n	8008a5a <__ssputs_r+0x7e>
 80089f6:	6825      	ldr	r5, [r4, #0]
 80089f8:	6909      	ldr	r1, [r1, #16]
 80089fa:	1a6f      	subs	r7, r5, r1
 80089fc:	6965      	ldr	r5, [r4, #20]
 80089fe:	2302      	movs	r3, #2
 8008a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a04:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a08:	f109 0301 	add.w	r3, r9, #1
 8008a0c:	443b      	add	r3, r7
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	bf38      	it	cc
 8008a12:	461d      	movcc	r5, r3
 8008a14:	0553      	lsls	r3, r2, #21
 8008a16:	d530      	bpl.n	8008a7a <__ssputs_r+0x9e>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7ff ff85 	bl	8008928 <_malloc_r>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	b950      	cbnz	r0, 8008a38 <__ssputs_r+0x5c>
 8008a22:	230c      	movs	r3, #12
 8008a24:	f8ca 3000 	str.w	r3, [sl]
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a38:	463a      	mov	r2, r7
 8008a3a:	6921      	ldr	r1, [r4, #16]
 8008a3c:	f7ff fc32 	bl	80082a4 <memcpy>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	6126      	str	r6, [r4, #16]
 8008a4e:	6165      	str	r5, [r4, #20]
 8008a50:	443e      	add	r6, r7
 8008a52:	1bed      	subs	r5, r5, r7
 8008a54:	6026      	str	r6, [r4, #0]
 8008a56:	60a5      	str	r5, [r4, #8]
 8008a58:	464e      	mov	r6, r9
 8008a5a:	454e      	cmp	r6, r9
 8008a5c:	d900      	bls.n	8008a60 <__ssputs_r+0x84>
 8008a5e:	464e      	mov	r6, r9
 8008a60:	4632      	mov	r2, r6
 8008a62:	4641      	mov	r1, r8
 8008a64:	6820      	ldr	r0, [r4, #0]
 8008a66:	f000 f92d 	bl	8008cc4 <memmove>
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	1b9b      	subs	r3, r3, r6
 8008a6e:	60a3      	str	r3, [r4, #8]
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	441e      	add	r6, r3
 8008a74:	6026      	str	r6, [r4, #0]
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7dc      	b.n	8008a34 <__ssputs_r+0x58>
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	f000 f93d 	bl	8008cfa <_realloc_r>
 8008a80:	4606      	mov	r6, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d1e2      	bne.n	8008a4c <__ssputs_r+0x70>
 8008a86:	6921      	ldr	r1, [r4, #16]
 8008a88:	4650      	mov	r0, sl
 8008a8a:	f7ff feff 	bl	800888c <_free_r>
 8008a8e:	e7c8      	b.n	8008a22 <__ssputs_r+0x46>

08008a90 <_svfiprintf_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	461d      	mov	r5, r3
 8008a96:	898b      	ldrh	r3, [r1, #12]
 8008a98:	061f      	lsls	r7, r3, #24
 8008a9a:	b09d      	sub	sp, #116	; 0x74
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4616      	mov	r6, r2
 8008aa2:	d50f      	bpl.n	8008ac4 <_svfiprintf_r+0x34>
 8008aa4:	690b      	ldr	r3, [r1, #16]
 8008aa6:	b96b      	cbnz	r3, 8008ac4 <_svfiprintf_r+0x34>
 8008aa8:	2140      	movs	r1, #64	; 0x40
 8008aaa:	f7ff ff3d 	bl	8008928 <_malloc_r>
 8008aae:	6020      	str	r0, [r4, #0]
 8008ab0:	6120      	str	r0, [r4, #16]
 8008ab2:	b928      	cbnz	r0, 8008ac0 <_svfiprintf_r+0x30>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	f8c8 3000 	str.w	r3, [r8]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	e0c8      	b.n	8008c52 <_svfiprintf_r+0x1c2>
 8008ac0:	2340      	movs	r3, #64	; 0x40
 8008ac2:	6163      	str	r3, [r4, #20]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ace:	2330      	movs	r3, #48	; 0x30
 8008ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ad4:	9503      	str	r5, [sp, #12]
 8008ad6:	f04f 0b01 	mov.w	fp, #1
 8008ada:	4637      	mov	r7, r6
 8008adc:	463d      	mov	r5, r7
 8008ade:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ae2:	b10b      	cbz	r3, 8008ae8 <_svfiprintf_r+0x58>
 8008ae4:	2b25      	cmp	r3, #37	; 0x25
 8008ae6:	d13e      	bne.n	8008b66 <_svfiprintf_r+0xd6>
 8008ae8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008aec:	d00b      	beq.n	8008b06 <_svfiprintf_r+0x76>
 8008aee:	4653      	mov	r3, sl
 8008af0:	4632      	mov	r2, r6
 8008af2:	4621      	mov	r1, r4
 8008af4:	4640      	mov	r0, r8
 8008af6:	f7ff ff71 	bl	80089dc <__ssputs_r>
 8008afa:	3001      	adds	r0, #1
 8008afc:	f000 80a4 	beq.w	8008c48 <_svfiprintf_r+0x1b8>
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	4453      	add	r3, sl
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	783b      	ldrb	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 809d 	beq.w	8008c48 <_svfiprintf_r+0x1b8>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295
 8008b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b20:	931a      	str	r3, [sp, #104]	; 0x68
 8008b22:	462f      	mov	r7, r5
 8008b24:	2205      	movs	r2, #5
 8008b26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b2a:	4850      	ldr	r0, [pc, #320]	; (8008c6c <_svfiprintf_r+0x1dc>)
 8008b2c:	f7f7 fb68 	bl	8000200 <memchr>
 8008b30:	9b04      	ldr	r3, [sp, #16]
 8008b32:	b9d0      	cbnz	r0, 8008b6a <_svfiprintf_r+0xda>
 8008b34:	06d9      	lsls	r1, r3, #27
 8008b36:	bf44      	itt	mi
 8008b38:	2220      	movmi	r2, #32
 8008b3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b3e:	071a      	lsls	r2, r3, #28
 8008b40:	bf44      	itt	mi
 8008b42:	222b      	movmi	r2, #43	; 0x2b
 8008b44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b48:	782a      	ldrb	r2, [r5, #0]
 8008b4a:	2a2a      	cmp	r2, #42	; 0x2a
 8008b4c:	d015      	beq.n	8008b7a <_svfiprintf_r+0xea>
 8008b4e:	9a07      	ldr	r2, [sp, #28]
 8008b50:	462f      	mov	r7, r5
 8008b52:	2000      	movs	r0, #0
 8008b54:	250a      	movs	r5, #10
 8008b56:	4639      	mov	r1, r7
 8008b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b5c:	3b30      	subs	r3, #48	; 0x30
 8008b5e:	2b09      	cmp	r3, #9
 8008b60:	d94d      	bls.n	8008bfe <_svfiprintf_r+0x16e>
 8008b62:	b1b8      	cbz	r0, 8008b94 <_svfiprintf_r+0x104>
 8008b64:	e00f      	b.n	8008b86 <_svfiprintf_r+0xf6>
 8008b66:	462f      	mov	r7, r5
 8008b68:	e7b8      	b.n	8008adc <_svfiprintf_r+0x4c>
 8008b6a:	4a40      	ldr	r2, [pc, #256]	; (8008c6c <_svfiprintf_r+0x1dc>)
 8008b6c:	1a80      	subs	r0, r0, r2
 8008b6e:	fa0b f000 	lsl.w	r0, fp, r0
 8008b72:	4318      	orrs	r0, r3
 8008b74:	9004      	str	r0, [sp, #16]
 8008b76:	463d      	mov	r5, r7
 8008b78:	e7d3      	b.n	8008b22 <_svfiprintf_r+0x92>
 8008b7a:	9a03      	ldr	r2, [sp, #12]
 8008b7c:	1d11      	adds	r1, r2, #4
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	9103      	str	r1, [sp, #12]
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	db01      	blt.n	8008b8a <_svfiprintf_r+0xfa>
 8008b86:	9207      	str	r2, [sp, #28]
 8008b88:	e004      	b.n	8008b94 <_svfiprintf_r+0x104>
 8008b8a:	4252      	negs	r2, r2
 8008b8c:	f043 0302 	orr.w	r3, r3, #2
 8008b90:	9207      	str	r2, [sp, #28]
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	783b      	ldrb	r3, [r7, #0]
 8008b96:	2b2e      	cmp	r3, #46	; 0x2e
 8008b98:	d10c      	bne.n	8008bb4 <_svfiprintf_r+0x124>
 8008b9a:	787b      	ldrb	r3, [r7, #1]
 8008b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9e:	d133      	bne.n	8008c08 <_svfiprintf_r+0x178>
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	1d1a      	adds	r2, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	9203      	str	r2, [sp, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfb8      	it	lt
 8008bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bb0:	3702      	adds	r7, #2
 8008bb2:	9305      	str	r3, [sp, #20]
 8008bb4:	4d2e      	ldr	r5, [pc, #184]	; (8008c70 <_svfiprintf_r+0x1e0>)
 8008bb6:	7839      	ldrb	r1, [r7, #0]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7f7 fb20 	bl	8000200 <memchr>
 8008bc0:	b138      	cbz	r0, 8008bd2 <_svfiprintf_r+0x142>
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	1b40      	subs	r0, r0, r5
 8008bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	4303      	orrs	r3, r0
 8008bce:	3701      	adds	r7, #1
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	7839      	ldrb	r1, [r7, #0]
 8008bd4:	4827      	ldr	r0, [pc, #156]	; (8008c74 <_svfiprintf_r+0x1e4>)
 8008bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bda:	2206      	movs	r2, #6
 8008bdc:	1c7e      	adds	r6, r7, #1
 8008bde:	f7f7 fb0f 	bl	8000200 <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d038      	beq.n	8008c58 <_svfiprintf_r+0x1c8>
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <_svfiprintf_r+0x1e8>)
 8008be8:	bb13      	cbnz	r3, 8008c30 <_svfiprintf_r+0x1a0>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	444b      	add	r3, r9
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	e76d      	b.n	8008ada <_svfiprintf_r+0x4a>
 8008bfe:	fb05 3202 	mla	r2, r5, r2, r3
 8008c02:	2001      	movs	r0, #1
 8008c04:	460f      	mov	r7, r1
 8008c06:	e7a6      	b.n	8008b56 <_svfiprintf_r+0xc6>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	3701      	adds	r7, #1
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	250a      	movs	r5, #10
 8008c12:	4638      	mov	r0, r7
 8008c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c18:	3a30      	subs	r2, #48	; 0x30
 8008c1a:	2a09      	cmp	r2, #9
 8008c1c:	d903      	bls.n	8008c26 <_svfiprintf_r+0x196>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c8      	beq.n	8008bb4 <_svfiprintf_r+0x124>
 8008c22:	9105      	str	r1, [sp, #20]
 8008c24:	e7c6      	b.n	8008bb4 <_svfiprintf_r+0x124>
 8008c26:	fb05 2101 	mla	r1, r5, r1, r2
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	e7f0      	b.n	8008c12 <_svfiprintf_r+0x182>
 8008c30:	ab03      	add	r3, sp, #12
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	4622      	mov	r2, r4
 8008c36:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <_svfiprintf_r+0x1ec>)
 8008c38:	a904      	add	r1, sp, #16
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7fe f8f0 	bl	8006e20 <_printf_float>
 8008c40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c44:	4681      	mov	r9, r0
 8008c46:	d1d6      	bne.n	8008bf6 <_svfiprintf_r+0x166>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	065b      	lsls	r3, r3, #25
 8008c4c:	f53f af35 	bmi.w	8008aba <_svfiprintf_r+0x2a>
 8008c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c52:	b01d      	add	sp, #116	; 0x74
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <_svfiprintf_r+0x1ec>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7fe fb92 	bl	800738c <_printf_i>
 8008c68:	e7ea      	b.n	8008c40 <_svfiprintf_r+0x1b0>
 8008c6a:	bf00      	nop
 8008c6c:	080092ec 	.word	0x080092ec
 8008c70:	080092f2 	.word	0x080092f2
 8008c74:	080092f6 	.word	0x080092f6
 8008c78:	08006e21 	.word	0x08006e21
 8008c7c:	080089dd 	.word	0x080089dd

08008c80 <_sbrk_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4c06      	ldr	r4, [pc, #24]	; (8008c9c <_sbrk_r+0x1c>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4605      	mov	r5, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	f7f9 ffea 	bl	8002c64 <_sbrk>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_sbrk_r+0x1a>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_sbrk_r+0x1a>
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	20000c48 	.word	0x20000c48

08008ca0 <__ascii_mbtowc>:
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	b901      	cbnz	r1, 8008ca6 <__ascii_mbtowc+0x6>
 8008ca4:	a901      	add	r1, sp, #4
 8008ca6:	b142      	cbz	r2, 8008cba <__ascii_mbtowc+0x1a>
 8008ca8:	b14b      	cbz	r3, 8008cbe <__ascii_mbtowc+0x1e>
 8008caa:	7813      	ldrb	r3, [r2, #0]
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	7812      	ldrb	r2, [r2, #0]
 8008cb0:	1c10      	adds	r0, r2, #0
 8008cb2:	bf18      	it	ne
 8008cb4:	2001      	movne	r0, #1
 8008cb6:	b002      	add	sp, #8
 8008cb8:	4770      	bx	lr
 8008cba:	4610      	mov	r0, r2
 8008cbc:	e7fb      	b.n	8008cb6 <__ascii_mbtowc+0x16>
 8008cbe:	f06f 0001 	mvn.w	r0, #1
 8008cc2:	e7f8      	b.n	8008cb6 <__ascii_mbtowc+0x16>

08008cc4 <memmove>:
 8008cc4:	4288      	cmp	r0, r1
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	eb01 0302 	add.w	r3, r1, r2
 8008ccc:	d807      	bhi.n	8008cde <memmove+0x1a>
 8008cce:	1e42      	subs	r2, r0, #1
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	d00a      	beq.n	8008cea <memmove+0x26>
 8008cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008cdc:	e7f8      	b.n	8008cd0 <memmove+0xc>
 8008cde:	4283      	cmp	r3, r0
 8008ce0:	d9f5      	bls.n	8008cce <memmove+0xa>
 8008ce2:	1881      	adds	r1, r0, r2
 8008ce4:	1ad2      	subs	r2, r2, r3
 8008ce6:	42d3      	cmn	r3, r2
 8008ce8:	d100      	bne.n	8008cec <memmove+0x28>
 8008cea:	bd10      	pop	{r4, pc}
 8008cec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cf0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008cf4:	e7f7      	b.n	8008ce6 <memmove+0x22>

08008cf6 <__malloc_lock>:
 8008cf6:	4770      	bx	lr

08008cf8 <__malloc_unlock>:
 8008cf8:	4770      	bx	lr

08008cfa <_realloc_r>:
 8008cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	4614      	mov	r4, r2
 8008d00:	460e      	mov	r6, r1
 8008d02:	b921      	cbnz	r1, 8008d0e <_realloc_r+0x14>
 8008d04:	4611      	mov	r1, r2
 8008d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d0a:	f7ff be0d 	b.w	8008928 <_malloc_r>
 8008d0e:	b922      	cbnz	r2, 8008d1a <_realloc_r+0x20>
 8008d10:	f7ff fdbc 	bl	800888c <_free_r>
 8008d14:	4625      	mov	r5, r4
 8008d16:	4628      	mov	r0, r5
 8008d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1a:	f000 f821 	bl	8008d60 <_malloc_usable_size_r>
 8008d1e:	42a0      	cmp	r0, r4
 8008d20:	d20f      	bcs.n	8008d42 <_realloc_r+0x48>
 8008d22:	4621      	mov	r1, r4
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff fdff 	bl	8008928 <_malloc_r>
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d0f2      	beq.n	8008d16 <_realloc_r+0x1c>
 8008d30:	4631      	mov	r1, r6
 8008d32:	4622      	mov	r2, r4
 8008d34:	f7ff fab6 	bl	80082a4 <memcpy>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f7ff fda6 	bl	800888c <_free_r>
 8008d40:	e7e9      	b.n	8008d16 <_realloc_r+0x1c>
 8008d42:	4635      	mov	r5, r6
 8008d44:	e7e7      	b.n	8008d16 <_realloc_r+0x1c>

08008d46 <__ascii_wctomb>:
 8008d46:	b149      	cbz	r1, 8008d5c <__ascii_wctomb+0x16>
 8008d48:	2aff      	cmp	r2, #255	; 0xff
 8008d4a:	bf85      	ittet	hi
 8008d4c:	238a      	movhi	r3, #138	; 0x8a
 8008d4e:	6003      	strhi	r3, [r0, #0]
 8008d50:	700a      	strbls	r2, [r1, #0]
 8008d52:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d56:	bf98      	it	ls
 8008d58:	2001      	movls	r0, #1
 8008d5a:	4770      	bx	lr
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4770      	bx	lr

08008d60 <_malloc_usable_size_r>:
 8008d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d64:	1f18      	subs	r0, r3, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfbc      	itt	lt
 8008d6a:	580b      	ldrlt	r3, [r1, r0]
 8008d6c:	18c0      	addlt	r0, r0, r3
 8008d6e:	4770      	bx	lr

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
